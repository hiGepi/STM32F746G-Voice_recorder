
STM32_FS_SD_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e60  080175a4  080175a4  000275a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a404  0801a404  000303b0  2**0
                  CONTENTS
  4 .ARM          00000008  0801a404  0801a404  0002a404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a40c  0801a40c  000303b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a40c  0801a40c  0002a40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a410  0801a410  0002a410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  0801a414  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fdf4  200003b0  0801a7c4  000303b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200101a4  0801a7c4  000401a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034e24  00000000  00000000  000303e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000698f  00000000  00000000  00065204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a60  00000000  00000000  0006bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027b0  00000000  00000000  0006e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fcae  00000000  00000000  00070da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000322a4  00000000  00000000  000a0a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113230  00000000  00000000  000d2cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e5f2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5e8  00000000  00000000  001e5f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200003b0 	.word	0x200003b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801758c 	.word	0x0801758c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200003b4 	.word	0x200003b4
 800020c:	0801758c 	.word	0x0801758c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200003cc 	.word	0x200003cc
 800060c:	20000420 	.word	0x20000420

08000610 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800061a:	20c8      	movs	r0, #200	; 0xc8
 800061c:	f003 fb36 	bl	8003c8c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000620:	f000 fa7a 	bl	8000b18 <ft5336_I2C_InitializeIfRequired>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b084      	sub	sp, #16
 8000646:	af00      	add	r7, sp, #0
 8000648:	4603      	mov	r3, r0
 800064a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000654:	2300      	movs	r3, #0
 8000656:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000658:	f000 fa5e 	bl	8000b18 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e010      	b.n	8000684 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	21a8      	movs	r1, #168	; 0xa8
 8000668:	4618      	mov	r0, r3
 800066a:	f003 faf1 	bl	8003c50 <TS_IO_Read>
 800066e:	4603      	mov	r3, r0
 8000670:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000672:	7b7b      	ldrb	r3, [r7, #13]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b51      	cmp	r3, #81	; 0x51
 8000678:	d101      	bne.n	800067e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d802      	bhi.n	8000690 <ft5336_ReadID+0x4e>
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0e8      	beq.n	8000662 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000690:	7b7b      	ldrb	r3, [r7, #13]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	b29b      	uxth	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	4603      	mov	r3, r0
 80006a6:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fa44 	bl	8000b38 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f932 	bl	800091c <ft5336_TS_DisableIT>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2102      	movs	r1, #2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fabb 	bl	8003c50 <TS_IO_Read>
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b05      	cmp	r3, #5
 80006f0:	d901      	bls.n	80006f6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <ft5336_TS_DetectTouch+0x50>)
 80006fc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <ft5336_TS_DetectTouch+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	b2db      	uxtb	r3, r3
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000620 	.word	0x20000620

08000714 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000736:	4b6d      	ldr	r3, [pc, #436]	; (80008ec <ft5336_TS_GetXY+0x1d8>)
 8000738:	789a      	ldrb	r2, [r3, #2]
 800073a:	4b6c      	ldr	r3, [pc, #432]	; (80008ec <ft5336_TS_GetXY+0x1d8>)
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	429a      	cmp	r2, r3
 8000740:	f080 80cf 	bcs.w	80008e2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000744:	4b69      	ldr	r3, [pc, #420]	; (80008ec <ft5336_TS_GetXY+0x1d8>)
 8000746:	789b      	ldrb	r3, [r3, #2]
 8000748:	2b09      	cmp	r3, #9
 800074a:	d871      	bhi.n	8000830 <ft5336_TS_GetXY+0x11c>
 800074c:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <ft5336_TS_GetXY+0x40>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	0800077d 	.word	0x0800077d
 8000758:	0800078f 	.word	0x0800078f
 800075c:	080007a1 	.word	0x080007a1
 8000760:	080007b3 	.word	0x080007b3
 8000764:	080007c5 	.word	0x080007c5
 8000768:	080007d7 	.word	0x080007d7
 800076c:	080007e9 	.word	0x080007e9
 8000770:	080007fb 	.word	0x080007fb
 8000774:	0800080d 	.word	0x0800080d
 8000778:	0800081f 	.word	0x0800081f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800077c:	2304      	movs	r3, #4
 800077e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000780:	2303      	movs	r3, #3
 8000782:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000784:	2306      	movs	r3, #6
 8000786:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000788:	2305      	movs	r3, #5
 800078a:	753b      	strb	r3, [r7, #20]
      break;
 800078c:	e051      	b.n	8000832 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800078e:	230a      	movs	r3, #10
 8000790:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000792:	2309      	movs	r3, #9
 8000794:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000796:	230c      	movs	r3, #12
 8000798:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800079a:	230b      	movs	r3, #11
 800079c:	753b      	strb	r3, [r7, #20]
      break;
 800079e:	e048      	b.n	8000832 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007a0:	2310      	movs	r3, #16
 80007a2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007a4:	230f      	movs	r3, #15
 80007a6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007a8:	2312      	movs	r3, #18
 80007aa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007ac:	2311      	movs	r3, #17
 80007ae:	753b      	strb	r3, [r7, #20]
      break;
 80007b0:	e03f      	b.n	8000832 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007b2:	2316      	movs	r3, #22
 80007b4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007b6:	2315      	movs	r3, #21
 80007b8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007ba:	2318      	movs	r3, #24
 80007bc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007be:	2317      	movs	r3, #23
 80007c0:	753b      	strb	r3, [r7, #20]
      break;
 80007c2:	e036      	b.n	8000832 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007c4:	231c      	movs	r3, #28
 80007c6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007c8:	231b      	movs	r3, #27
 80007ca:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007cc:	231e      	movs	r3, #30
 80007ce:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007d0:	231d      	movs	r3, #29
 80007d2:	753b      	strb	r3, [r7, #20]
      break;
 80007d4:	e02d      	b.n	8000832 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007d6:	2322      	movs	r3, #34	; 0x22
 80007d8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007da:	2321      	movs	r3, #33	; 0x21
 80007dc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007de:	2324      	movs	r3, #36	; 0x24
 80007e0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007e2:	2323      	movs	r3, #35	; 0x23
 80007e4:	753b      	strb	r3, [r7, #20]
      break;
 80007e6:	e024      	b.n	8000832 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007e8:	2328      	movs	r3, #40	; 0x28
 80007ea:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007ec:	2327      	movs	r3, #39	; 0x27
 80007ee:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007f0:	232a      	movs	r3, #42	; 0x2a
 80007f2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007f4:	2329      	movs	r3, #41	; 0x29
 80007f6:	753b      	strb	r3, [r7, #20]
      break;
 80007f8:	e01b      	b.n	8000832 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007fa:	232e      	movs	r3, #46	; 0x2e
 80007fc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007fe:	232d      	movs	r3, #45	; 0x2d
 8000800:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000802:	2330      	movs	r3, #48	; 0x30
 8000804:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000806:	232f      	movs	r3, #47	; 0x2f
 8000808:	753b      	strb	r3, [r7, #20]
      break;
 800080a:	e012      	b.n	8000832 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800080c:	2334      	movs	r3, #52	; 0x34
 800080e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000810:	2333      	movs	r3, #51	; 0x33
 8000812:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000814:	2336      	movs	r3, #54	; 0x36
 8000816:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000818:	2335      	movs	r3, #53	; 0x35
 800081a:	753b      	strb	r3, [r7, #20]
      break;
 800081c:	e009      	b.n	8000832 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800081e:	233a      	movs	r3, #58	; 0x3a
 8000820:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000822:	2339      	movs	r3, #57	; 0x39
 8000824:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000826:	233c      	movs	r3, #60	; 0x3c
 8000828:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800082a:	233b      	movs	r3, #59	; 0x3b
 800082c:	753b      	strb	r3, [r7, #20]
      break;
 800082e:	e000      	b.n	8000832 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000830:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000832:	89fb      	ldrh	r3, [r7, #14]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7dfa      	ldrb	r2, [r7, #23]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fa08 	bl	8003c50 <TS_IO_Read>
 8000840:	4603      	mov	r3, r0
 8000842:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000844:	7cfb      	ldrb	r3, [r7, #19]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <ft5336_TS_GetXY+0x1dc>)
 800084c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800084e:	89fb      	ldrh	r3, [r7, #14]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	7dba      	ldrb	r2, [r7, #22]
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f003 f9fa 	bl	8003c50 <TS_IO_Read>
 800085c:	4603      	mov	r3, r0
 800085e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000860:	7cfb      	ldrb	r3, [r7, #19]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800086a:	b21a      	sxth	r2, r3
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <ft5336_TS_GetXY+0x1dc>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	b21b      	sxth	r3, r3
 8000872:	4313      	orrs	r3, r2
 8000874:	b21b      	sxth	r3, r3
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <ft5336_TS_GetXY+0x1dc>)
 800087a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <ft5336_TS_GetXY+0x1dc>)
 800087e:	881a      	ldrh	r2, [r3, #0]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000884:	89fb      	ldrh	r3, [r7, #14]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	7d7a      	ldrb	r2, [r7, #21]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f003 f9df 	bl	8003c50 <TS_IO_Read>
 8000892:	4603      	mov	r3, r0
 8000894:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000896:	7cfb      	ldrb	r3, [r7, #19]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <ft5336_TS_GetXY+0x1dc>)
 800089e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	7d3a      	ldrb	r2, [r7, #20]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 f9d1 	bl	8003c50 <TS_IO_Read>
 80008ae:	4603      	mov	r3, r0
 80008b0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008b2:	7cfb      	ldrb	r3, [r7, #19]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008bc:	b21a      	sxth	r2, r3
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <ft5336_TS_GetXY+0x1dc>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <ft5336_TS_GetXY+0x1dc>)
 80008cc:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <ft5336_TS_GetXY+0x1dc>)
 80008d0:	881a      	ldrh	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <ft5336_TS_GetXY+0x1d8>)
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	3301      	adds	r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b03      	ldr	r3, [pc, #12]	; (80008ec <ft5336_TS_GetXY+0x1d8>)
 80008e0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000620 	.word	0x20000620
 80008f0:	20000624 	.word	0x20000624

080008f4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000902:	2301      	movs	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	7bfa      	ldrb	r2, [r7, #15]
 800090c:	21a4      	movs	r1, #164	; 0xa4
 800090e:	4618      	mov	r0, r3
 8000910:	f003 f984 	bl	8003c1c <TS_IO_Write>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	7bfa      	ldrb	r2, [r7, #15]
 8000934:	21a4      	movs	r1, #164	; 0xa4
 8000936:	4618      	mov	r0, r3
 8000938:	f003 f970 	bl	8003c1c <TS_IO_Write>
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b084      	sub	sp, #16
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	6039      	str	r1, [r7, #0]
 800097c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2101      	movs	r1, #1
 8000988:	4618      	mov	r0, r3
 800098a:	f003 f961 	bl	8003c50 <TS_IO_Read>
 800098e:	4603      	mov	r3, r0
 8000990:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	461a      	mov	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4603      	mov	r3, r0
 80009b2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009c4:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <ft5336_TS_GetTouchInfo+0x158>)
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	461a      	mov	r2, r3
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	4293      	cmp	r3, r2
 80009ce:	f080 8090 	bcs.w	8000af2 <ft5336_TS_GetTouchInfo+0x14e>
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2b09      	cmp	r3, #9
 80009d6:	d85d      	bhi.n	8000a94 <ft5336_TS_GetTouchInfo+0xf0>
 80009d8:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <ft5336_TS_GetTouchInfo+0x3c>)
 80009da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009de:	bf00      	nop
 80009e0:	08000a09 	.word	0x08000a09
 80009e4:	08000a17 	.word	0x08000a17
 80009e8:	08000a25 	.word	0x08000a25
 80009ec:	08000a33 	.word	0x08000a33
 80009f0:	08000a41 	.word	0x08000a41
 80009f4:	08000a4f 	.word	0x08000a4f
 80009f8:	08000a5d 	.word	0x08000a5d
 80009fc:	08000a6b 	.word	0x08000a6b
 8000a00:	08000a79 	.word	0x08000a79
 8000a04:	08000a87 	.word	0x08000a87
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a10:	2308      	movs	r3, #8
 8000a12:	757b      	strb	r3, [r7, #21]
      break;
 8000a14:	e03f      	b.n	8000a96 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a16:	2309      	movs	r3, #9
 8000a18:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a1a:	230d      	movs	r3, #13
 8000a1c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a1e:	230e      	movs	r3, #14
 8000a20:	757b      	strb	r3, [r7, #21]
      break;
 8000a22:	e038      	b.n	8000a96 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a24:	230f      	movs	r3, #15
 8000a26:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a28:	2313      	movs	r3, #19
 8000a2a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a2c:	2314      	movs	r3, #20
 8000a2e:	757b      	strb	r3, [r7, #21]
      break;
 8000a30:	e031      	b.n	8000a96 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a32:	2315      	movs	r3, #21
 8000a34:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a36:	2319      	movs	r3, #25
 8000a38:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a3a:	231a      	movs	r3, #26
 8000a3c:	757b      	strb	r3, [r7, #21]
      break;
 8000a3e:	e02a      	b.n	8000a96 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a40:	231b      	movs	r3, #27
 8000a42:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a44:	231f      	movs	r3, #31
 8000a46:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a48:	2320      	movs	r3, #32
 8000a4a:	757b      	strb	r3, [r7, #21]
      break;
 8000a4c:	e023      	b.n	8000a96 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a4e:	2321      	movs	r3, #33	; 0x21
 8000a50:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a52:	2325      	movs	r3, #37	; 0x25
 8000a54:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a56:	2326      	movs	r3, #38	; 0x26
 8000a58:	757b      	strb	r3, [r7, #21]
      break;
 8000a5a:	e01c      	b.n	8000a96 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a5c:	2327      	movs	r3, #39	; 0x27
 8000a5e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a60:	232b      	movs	r3, #43	; 0x2b
 8000a62:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a64:	232c      	movs	r3, #44	; 0x2c
 8000a66:	757b      	strb	r3, [r7, #21]
      break;
 8000a68:	e015      	b.n	8000a96 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a6a:	232d      	movs	r3, #45	; 0x2d
 8000a6c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a6e:	2331      	movs	r3, #49	; 0x31
 8000a70:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a72:	2332      	movs	r3, #50	; 0x32
 8000a74:	757b      	strb	r3, [r7, #21]
      break;
 8000a76:	e00e      	b.n	8000a96 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a78:	2333      	movs	r3, #51	; 0x33
 8000a7a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a7c:	2337      	movs	r3, #55	; 0x37
 8000a7e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a80:	2338      	movs	r3, #56	; 0x38
 8000a82:	757b      	strb	r3, [r7, #21]
      break;
 8000a84:	e007      	b.n	8000a96 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a86:	2339      	movs	r3, #57	; 0x39
 8000a88:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a8a:	233d      	movs	r3, #61	; 0x3d
 8000a8c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a8e:	233e      	movs	r3, #62	; 0x3e
 8000a90:	757b      	strb	r3, [r7, #21]
      break;
 8000a92:	e000      	b.n	8000a96 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a94:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	7dfa      	ldrb	r2, [r7, #23]
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 f8d6 	bl	8003c50 <TS_IO_Read>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000aa8:	7d3b      	ldrb	r3, [r7, #20]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	119b      	asrs	r3, r3, #6
 8000aae:	f003 0203 	and.w	r2, r3, #3
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	7dba      	ldrb	r2, [r7, #22]
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f003 f8c6 	bl	8003c50 <TS_IO_Read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ac8:	7d3b      	ldrb	r3, [r7, #20]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	461a      	mov	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ad2:	89fb      	ldrh	r3, [r7, #14]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	7d7a      	ldrb	r2, [r7, #21]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 f8b8 	bl	8003c50 <TS_IO_Read>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000ae4:	7d3b      	ldrb	r3, [r7, #20]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	111b      	asrs	r3, r3, #4
 8000aea:	f003 0204 	and.w	r2, r3, #4
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000620 	.word	0x20000620

08000b00 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000620 	.word	0x20000620

08000b18 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b1c:	f7ff fff0 	bl	8000b00 <ft5336_Get_I2C_InitializedStatus>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d104      	bne.n	8000b30 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b26:	f003 f86f 	bl	8003c08 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b2a:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
  }
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000620 	.word	0x20000620

08000b38 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b58:	f3bf 8f4f 	dsb	sy
}
 8000b5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b5e:	f3bf 8f6f 	isb	sy
}
 8000b62:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <SCB_EnableICache+0x48>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6c:	f3bf 8f4f 	dsb	sy
}
 8000b70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b72:	f3bf 8f6f 	isb	sy
}
 8000b76:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <SCB_EnableICache+0x48>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <SCB_EnableICache+0x48>)
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b82:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b84:	f3bf 8f4f 	dsb	sy
}
 8000b88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b8a:	f3bf 8f6f 	isb	sy
}
 8000b8e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <SCB_EnableDCache+0x84>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bae:	f3bf 8f4f 	dsb	sy
}
 8000bb2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <SCB_EnableDCache+0x84>)
 8000bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bba:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	0b5b      	lsrs	r3, r3, #13
 8000bc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bc4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	08db      	lsrs	r3, r3, #3
 8000bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bce:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	015a      	lsls	r2, r3, #5
 8000bd4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000bd8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bde:	4911      	ldr	r1, [pc, #68]	; (8000c24 <SCB_EnableDCache+0x84>)
 8000be0:	4313      	orrs	r3, r2
 8000be2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	60ba      	str	r2, [r7, #8]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1ef      	bne.n	8000bd0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	60fa      	str	r2, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1e5      	bne.n	8000bc6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bfa:	f3bf 8f4f 	dsb	sy
}
 8000bfe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <SCB_EnableDCache+0x84>)
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <SCB_EnableDCache+0x84>)
 8000c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c0c:	f3bf 8f4f 	dsb	sy
}
 8000c10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c12:	f3bf 8f6f 	isb	sy
}
 8000c16:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b0a4      	sub	sp, #144	; 0x90
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000c2e:	f7ff ff91 	bl	8000b54 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000c32:	f7ff ffb5 	bl	8000ba0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f007 fb7f 	bl	8008338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f8a3 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3e:	f000 fbef 	bl	8001420 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c42:	f000 fb2f 	bl	80012a4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000c46:	f000 fadd 	bl	8001204 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000c4a:	f00e ff63 	bl	800fb14 <MX_FATFS_Init>
  MX_FMC_Init();
 8000c4e:	f000 fb5f 	bl	8001310 <MX_FMC_Init>
  MX_LTDC_Init();
 8000c52:	f000 f973 	bl	8000f3c <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8000c56:	f000 faf5 	bl	8001244 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8000c5a:	f000 f93d 	bl	8000ed8 <MX_DMA2D_Init>
  MX_SAI2_Init();
 8000c5e:	f000 fa29 	bl	80010b4 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000c62:	f000 ff75 	bl	8001b50 <LCD_Init>
  Audio_Init();
 8000c66:	f000 ffe7 	bl	8001c38 <Audio_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	osMutexDef(mutex_LCD);
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	mutex_LCDHandle = osMutexCreate(osMutex(mutex_LCD));
 8000c76:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f012 ff84 	bl	8013b88 <osMutexCreate>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <main+0x12c>)
 8000c84:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of WakeUp */
  osMessageQDef(WakeUp, 1, uint8_t);
 8000c86:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <main+0x130>)
 8000c88:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000c8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  WakeUpHandle = osMessageCreate(osMessageQ(WakeUp), NULL);
 8000c92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f013 f856 	bl	8013d4a <osMessageCreate>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a2e      	ldr	r2, [pc, #184]	; (8000d5c <main+0x134>)
 8000ca2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  /* definition and creation of SD_instruction */
  osMessageQDef(SD_instruction, 1, SD_Instruction);
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <main+0x130>)
 8000ca6:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SD_instructionHandle = osMessageCreate(osMessageQ(SD_instruction), NULL);
 8000cb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f013 f847 	bl	8013d4a <osMessageCreate>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <main+0x138>)
 8000cc0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Data */
  osMessageQDef(Data, 1, MAX_c);
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <main+0x13c>)
 8000cc4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DataHandle = osMessageCreate(osMessageQ(Data), NULL);
 8000cce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f013 f838 	bl	8013d4a <osMessageCreate>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <main+0x140>)
 8000cde:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <main+0x144>)
 8000ce2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f012 fee4 	bl	8013ac8 <osThreadCreate>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <main+0x148>)
 8000d04:	6013      	str	r3, [r2, #0]

  /* definition and creation of SD */
  osThreadDef(SD, StartSD, osPriorityHigh, 0, 4096);
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <main+0x14c>)
 8000d08:	f107 0420 	add.w	r4, r7, #32
 8000d0c:	461d      	mov	r5, r3
 8000d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDHandle = osThreadCreate(osThread(SD), NULL);
 8000d1a:	f107 0320 	add.w	r3, r7, #32
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f012 fed1 	bl	8013ac8 <osThreadCreate>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <main+0x150>)
 8000d2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* definition and creation of Record */
  osThreadDef(Record, StartRecord, osPriorityRealtime, 0, 512);
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <main+0x154>)
 8000d2e:	1d3c      	adds	r4, r7, #4
 8000d30:	461d      	mov	r5, r3
 8000d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RecordHandle = osThreadCreate(osThread(Record), NULL);
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f012 fec0 	bl	8013ac8 <osThreadCreate>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <main+0x158>)
 8000d4c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d4e:	f012 fe98 	bl	8013a82 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000d52:	e7fe      	b.n	8000d52 <main+0x12a>
 8000d54:	2000f77c 	.word	0x2000f77c
 8000d58:	080175c8 	.word	0x080175c8
 8000d5c:	2000f66c 	.word	0x2000f66c
 8000d60:	2000fb00 	.word	0x2000fb00
 8000d64:	080175d8 	.word	0x080175d8
 8000d68:	2000f814 	.word	0x2000f814
 8000d6c:	080175e8 	.word	0x080175e8
 8000d70:	2000f670 	.word	0x2000f670
 8000d74:	08017604 	.word	0x08017604
 8000d78:	2000f810 	.word	0x2000f810
 8000d7c:	08017620 	.word	0x08017620
 8000d80:	2000f97c 	.word	0x2000f97c

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0b4      	sub	sp, #208	; 0xd0
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d8e:	2230      	movs	r2, #48	; 0x30
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f015 ffc0 	bl	8016d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2284      	movs	r2, #132	; 0x84
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f015 ffb1 	bl	8016d18 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000db6:	f009 fe19 	bl	800a9ec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <SystemClock_Config+0x148>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a43      	ldr	r2, [pc, #268]	; (8000ecc <SystemClock_Config+0x148>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b41      	ldr	r3, [pc, #260]	; (8000ecc <SystemClock_Config+0x148>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd2:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <SystemClock_Config+0x14c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <SystemClock_Config+0x14c>)
 8000dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <SystemClock_Config+0x14c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e06:	2319      	movs	r3, #25
 8000e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000e0c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000e1a:	2309      	movs	r3, #9
 8000e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f009 fe41 	bl	800aaac <HAL_RCC_OscConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e30:	f002 fd1a 	bl	8003868 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e34:	f009 fdea 	bl	800aa0c <HAL_PWREx_EnableOverDrive>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e3e:	f002 fd13 	bl	8003868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	230f      	movs	r3, #15
 8000e44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e68:	2106      	movs	r1, #6
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a f8c2 	bl	800aff4 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000e76:	f002 fcf7 	bl	8003868 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <SystemClock_Config+0x150>)
 8000e7c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000e7e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e82:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000e84:	2305      	movs	r3, #5
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000ea2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f00a faa5 	bl	800b404 <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x140>
  {
    Error_Handler();
 8000ec0:	f002 fcd2 	bl	8003868 <Error_Handler>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	37d0      	adds	r7, #208	; 0xd0
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000
 8000ed4:	00b00048 	.word	0x00b00048

08000ed8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <MX_DMA2D_Init+0x60>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f0e:	f007 ff53 	bl	8008db8 <HAL_DMA2D_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f18:	f002 fca6 	bl	8003868 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f20:	f008 f8a8 	bl	8009074 <HAL_DMA2D_ConfigLayer>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f2a:	f002 fc9d 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000fa8c 	.word	0x2000fa8c
 8000f38:	4002b000 	.word	0x4002b000

08000f3c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09a      	sub	sp, #104	; 0x68
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f46:	2234      	movs	r2, #52	; 0x34
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f015 fee4 	bl	8016d18 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2234      	movs	r2, #52	; 0x34
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f015 fede 	bl	8016d18 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f5c:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f5e:	4a53      	ldr	r2, [pc, #332]	; (80010ac <MX_LTDC_Init+0x170>)
 8000f60:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f62:	4b51      	ldr	r3, [pc, #324]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f68:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f6e:	4b4e      	ldr	r3, [pc, #312]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f74:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000f7a:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f7c:	2228      	movs	r2, #40	; 0x28
 8000f7e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000f80:	4b49      	ldr	r3, [pc, #292]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f82:	2209      	movs	r2, #9
 8000f84:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000f86:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f88:	2235      	movs	r2, #53	; 0x35
 8000f8a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f8c:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f8e:	220b      	movs	r2, #11
 8000f90:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000f92:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f94:	f240 2215 	movw	r2, #533	; 0x215
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000f9a:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000f9c:	f240 121b 	movw	r2, #283	; 0x11b
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000fa2:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000fa4:	f240 2235 	movw	r2, #565	; 0x235
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000fac:	f240 121d 	movw	r2, #285	; 0x11d
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fc2:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fca:	4837      	ldr	r0, [pc, #220]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8000fcc:	f009 f996 	bl	800a2fc <HAL_LTDC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000fd6:	f002 fc47 	bl	8003868 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000fde:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000fe8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000fec:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000ff2:	23ff      	movs	r3, #255	; 0xff
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ffa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ffe:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001000:	2307      	movs	r3, #7
 8001002:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001004:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001008:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 800100a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800100e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001010:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001014:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 255;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 255;
 800101c:	23ff      	movs	r3, #255	; 0xff
 800101e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 255;
 8001022:	23ff      	movs	r3, #255	; 0xff
 8001024:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001028:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800102c:	2200      	movs	r2, #0
 800102e:	4619      	mov	r1, r3
 8001030:	481d      	ldr	r0, [pc, #116]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8001032:	f009 faf5 	bl	800a620 <HAL_LTDC_ConfigLayer>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 800103c:	f002 fc14 	bl	8003868 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 480;
 8001044:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001048:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 132;
 800104a:	2384      	movs	r3, #132	; 0x84
 800104c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 272;
 800104e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001052:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8001058:	23ff      	movs	r3, #255	; 0xff
 800105a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001060:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001064:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001066:	2307      	movs	r3, #7
 8001068:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0xC001FE00;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_LTDC_Init+0x174>)
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 800106e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 140;
 8001074:	238c      	movs	r3, #140	; 0x8c
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	2201      	movs	r2, #1
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_LTDC_Init+0x16c>)
 8001092:	f009 fac5 	bl	800a620 <HAL_LTDC_ConfigLayer>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_LTDC_Init+0x164>
  {
    Error_Handler();
 800109c:	f002 fbe4 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3768      	adds	r7, #104	; 0x68
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000f818 	.word	0x2000f818
 80010ac:	40016800 	.word	0x40016800
 80010b0:	c001fe00 	.word	0xc001fe00

080010b4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010ba:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <MX_SAI2_Init+0x144>)
 80010bc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80010be:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010c4:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80010ca:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010cc:	2240      	movs	r2, #64	; 0x40
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010d0:	4b48      	ldr	r3, [pc, #288]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010dc:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010e2:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80010f4:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010f6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80010fa:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010fc:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <MX_SAI2_Init+0x140>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001102:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <MX_SAI2_Init+0x140>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <MX_SAI2_Init+0x140>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800110e:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <MX_SAI2_Init+0x140>)
 8001110:	2200      	movs	r2, #0
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001114:	4b37      	ldr	r3, [pc, #220]	; (80011f4 <MX_SAI2_Init+0x140>)
 8001116:	2208      	movs	r2, #8
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800111a:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <MX_SAI2_Init+0x140>)
 800111c:	2201      	movs	r2, #1
 800111e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001120:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <MX_SAI2_Init+0x140>)
 8001122:	2200      	movs	r2, #0
 8001124:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001126:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <MX_SAI2_Init+0x140>)
 8001128:	2200      	movs	r2, #0
 800112a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800112c:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <MX_SAI2_Init+0x140>)
 800112e:	2200      	movs	r2, #0
 8001130:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001132:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_SAI2_Init+0x140>)
 8001134:	2200      	movs	r2, #0
 8001136:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <MX_SAI2_Init+0x140>)
 800113a:	2200      	movs	r2, #0
 800113c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_SAI2_Init+0x140>)
 8001140:	2201      	movs	r2, #1
 8001142:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <MX_SAI2_Init+0x140>)
 8001146:	2200      	movs	r2, #0
 8001148:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800114a:	482a      	ldr	r0, [pc, #168]	; (80011f4 <MX_SAI2_Init+0x140>)
 800114c:	f00a ff9a 	bl	800c084 <HAL_SAI_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 8001156:	f002 fb87 	bl	8003868 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_SAI2_Init+0x148>)
 800115c:	4a28      	ldr	r2, [pc, #160]	; (8001200 <MX_SAI2_Init+0x14c>)
 800115e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_SAI2_Init+0x148>)
 8001162:	2200      	movs	r2, #0
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <MX_SAI2_Init+0x148>)
 8001168:	2203      	movs	r2, #3
 800116a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_SAI2_Init+0x148>)
 800116e:	2240      	movs	r2, #64	; 0x40
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_SAI2_Init+0x148>)
 8001174:	2200      	movs	r2, #0
 8001176:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_SAI2_Init+0x148>)
 800117a:	2200      	movs	r2, #0
 800117c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_SAI2_Init+0x148>)
 8001180:	2201      	movs	r2, #1
 8001182:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_SAI2_Init+0x148>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_SAI2_Init+0x148>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_SAI2_Init+0x148>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_SAI2_Init+0x148>)
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_SAI2_Init+0x148>)
 800119e:	2200      	movs	r2, #0
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_SAI2_Init+0x148>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_SAI2_Init+0x148>)
 80011aa:	2208      	movs	r2, #8
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_SAI2_Init+0x148>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_SAI2_Init+0x148>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_SAI2_Init+0x148>)
 80011bc:	2200      	movs	r2, #0
 80011be:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_SAI2_Init+0x148>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <MX_SAI2_Init+0x148>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_SAI2_Init+0x148>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_SAI2_Init+0x148>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_SAI2_Init+0x148>)
 80011da:	2200      	movs	r2, #0
 80011dc:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_SAI2_Init+0x148>)
 80011e0:	f00a ff50 	bl	800c084 <HAL_SAI_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 80011ea:	f002 fb3d 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000f6d4 	.word	0x2000f6d4
 80011f8:	40015c04 	.word	0x40015c04
 80011fc:	2000f5e8 	.word	0x2000f5e8
 8001200:	40015c24 	.word	0x40015c24

08001204 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <MX_SDMMC1_SD_Init+0x3c>)
 800120c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	2000f78c 	.word	0x2000f78c
 8001240:	40012c00 	.word	0x40012c00

08001244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USART1_UART_Init+0x58>)
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <MX_USART1_UART_Init+0x5c>)
 800124c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_USART1_UART_Init+0x58>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART1_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_USART1_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART1_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART1_UART_Init+0x58>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART1_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART1_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART1_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART1_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART1_UART_Init+0x58>)
 8001288:	f00d f9a0 	bl	800e5cc <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001292:	f002 fae9 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000f8f4 	.word	0x2000f8f4
 80012a0:	40011000 	.word	0x40011000

080012a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_DMA_Init+0x68>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <MX_DMA_Init+0x68>)
 80012b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_DMA_Init+0x68>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	203b      	movs	r0, #59	; 0x3b
 80012c8:	f007 f948 	bl	800855c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80012cc:	203b      	movs	r0, #59	; 0x3b
 80012ce:	f007 f961 	bl	8008594 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	203c      	movs	r0, #60	; 0x3c
 80012d8:	f007 f940 	bl	800855c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80012dc:	203c      	movs	r0, #60	; 0x3c
 80012de:	f007 f959 	bl	8008594 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2105      	movs	r1, #5
 80012e6:	2045      	movs	r0, #69	; 0x45
 80012e8:	f007 f938 	bl	800855c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012ec:	2045      	movs	r0, #69	; 0x45
 80012ee:	f007 f951 	bl	8008594 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2105      	movs	r1, #5
 80012f6:	2046      	movs	r0, #70	; 0x46
 80012f8:	f007 f930 	bl	800855c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012fc:	2046      	movs	r0, #70	; 0x46
 80012fe:	f007 f949 	bl	8008594 <HAL_NVIC_EnableIRQ>

}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001328:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <MX_FMC_Init+0x104>)
 800132a:	4a3b      	ldr	r2, [pc, #236]	; (8001418 <MX_FMC_Init+0x108>)
 800132c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <MX_FMC_Init+0x104>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001334:	4b37      	ldr	r3, [pc, #220]	; (8001414 <MX_FMC_Init+0x104>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800133a:	4b36      	ldr	r3, [pc, #216]	; (8001414 <MX_FMC_Init+0x104>)
 800133c:	2204      	movs	r2, #4
 800133e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <MX_FMC_Init+0x104>)
 8001342:	2210      	movs	r2, #16
 8001344:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001346:	4b33      	ldr	r3, [pc, #204]	; (8001414 <MX_FMC_Init+0x104>)
 8001348:	2240      	movs	r2, #64	; 0x40
 800134a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800134c:	4b31      	ldr	r3, [pc, #196]	; (8001414 <MX_FMC_Init+0x104>)
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <MX_FMC_Init+0x104>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001358:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <MX_FMC_Init+0x104>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <MX_FMC_Init+0x104>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <MX_FMC_Init+0x104>)
 8001366:	2200      	movs	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800136a:	2310      	movs	r3, #16
 800136c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800136e:	2310      	movs	r3, #16
 8001370:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001372:	2310      	movs	r3, #16
 8001374:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001376:	2310      	movs	r3, #16
 8001378:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800137a:	2310      	movs	r3, #16
 800137c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800137e:	2310      	movs	r3, #16
 8001380:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001382:	2310      	movs	r3, #16
 8001384:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4822      	ldr	r0, [pc, #136]	; (8001414 <MX_FMC_Init+0x104>)
 800138c:	f00c fdbf 	bl	800df0e <HAL_SDRAM_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001396:	f002 fa67 	bl	8003868 <Error_Handler>
  }

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <MX_FMC_Init+0x10c>)
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <MX_FMC_Init+0x108>)
 800139e:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_FMC_Init+0x10c>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_FMC_Init+0x10c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_FMC_Init+0x10c>)
 80013ae:	2204      	movs	r2, #4
 80013b0:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_FMC_Init+0x10c>)
 80013b4:	2210      	movs	r2, #16
 80013b6:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_FMC_Init+0x10c>)
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_FMC_Init+0x10c>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_FMC_Init+0x10c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_FMC_Init+0x10c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_FMC_Init+0x10c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_FMC_Init+0x10c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80013dc:	2310      	movs	r3, #16
 80013de:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80013e0:	2310      	movs	r3, #16
 80013e2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80013e4:	2310      	movs	r3, #16
 80013e6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80013e8:	2310      	movs	r3, #16
 80013ea:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80013ec:	2310      	movs	r3, #16
 80013ee:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80013f0:	2310      	movs	r3, #16
 80013f2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80013f4:	2310      	movs	r3, #16
 80013f6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <MX_FMC_Init+0x10c>)
 80013fe:	f00c fd86 	bl	800df0e <HAL_SDRAM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_FMC_Init+0xfc>
  {
    Error_Handler( );
 8001408:	f002 fa2e 	bl	8003868 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2000facc 	.word	0x2000facc
 8001418:	a0000140 	.word	0xa0000140
 800141c:	2000f8c0 	.word	0x2000f8c0

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b090      	sub	sp, #64	; 0x40
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001436:	4bae      	ldr	r3, [pc, #696]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4aad      	ldr	r2, [pc, #692]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4bab      	ldr	r3, [pc, #684]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
 800144c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800144e:	4ba8      	ldr	r3, [pc, #672]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4aa7      	ldr	r2, [pc, #668]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4ba5      	ldr	r3, [pc, #660]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4ba2      	ldr	r3, [pc, #648]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4aa1      	ldr	r2, [pc, #644]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b9f      	ldr	r3, [pc, #636]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	4b9c      	ldr	r3, [pc, #624]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a9b      	ldr	r2, [pc, #620]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b99      	ldr	r3, [pc, #612]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	4b96      	ldr	r3, [pc, #600]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a95      	ldr	r2, [pc, #596]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b93      	ldr	r3, [pc, #588]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b90      	ldr	r3, [pc, #576]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a8f      	ldr	r2, [pc, #572]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b8d      	ldr	r3, [pc, #564]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014c6:	4b8a      	ldr	r3, [pc, #552]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a89      	ldr	r2, [pc, #548]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b87      	ldr	r3, [pc, #540]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014de:	4b84      	ldr	r3, [pc, #528]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a83      	ldr	r2, [pc, #524]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80014f6:	4b7e      	ldr	r3, [pc, #504]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a7d      	ldr	r2, [pc, #500]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 80014fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b7b      	ldr	r3, [pc, #492]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150e:	4b78      	ldr	r3, [pc, #480]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a77      	ldr	r2, [pc, #476]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a71      	ldr	r2, [pc, #452]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 800152c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b6f      	ldr	r3, [pc, #444]	; (80016f0 <MX_GPIO_Init+0x2d0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	2120      	movs	r1, #32
 8001542:	486c      	ldr	r0, [pc, #432]	; (80016f4 <MX_GPIO_Init+0x2d4>)
 8001544:	f008 f994 	bl	8009870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f241 010c 	movw	r1, #4108	; 0x100c
 800154e:	486a      	ldr	r0, [pc, #424]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001550:	f008 f98e 	bl	8009870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2108      	movs	r1, #8
 8001558:	4868      	ldr	r0, [pc, #416]	; (80016fc <MX_GPIO_Init+0x2dc>)
 800155a:	f008 f989 	bl	8009870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED2_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001564:	4866      	ldr	r0, [pc, #408]	; (8001700 <MX_GPIO_Init+0x2e0>)
 8001566:	f008 f983 	bl	8009870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	21c8      	movs	r1, #200	; 0xc8
 800156e:	4865      	ldr	r0, [pc, #404]	; (8001704 <MX_GPIO_Init+0x2e4>)
 8001570:	f008 f97e 	bl	8009870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001574:	2308      	movs	r3, #8
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001584:	4619      	mov	r1, r3
 8001586:	4860      	ldr	r0, [pc, #384]	; (8001708 <MX_GPIO_Init+0x2e8>)
 8001588:	f007 fea2 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800158c:	2304      	movs	r3, #4
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800159c:	2309      	movs	r3, #9
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a4:	4619      	mov	r1, r3
 80015a6:	4858      	ldr	r0, [pc, #352]	; (8001708 <MX_GPIO_Init+0x2e8>)
 80015a8:	f007 fe92 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80015ac:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015be:	230b      	movs	r3, #11
 80015c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c6:	4619      	mov	r1, r3
 80015c8:	484e      	ldr	r0, [pc, #312]	; (8001704 <MX_GPIO_Init+0x2e4>)
 80015ca:	f007 fe81 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80015ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d4:	2312      	movs	r3, #18
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d8:	2301      	movs	r3, #1
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e0:	2304      	movs	r3, #4
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e8:	4619      	mov	r1, r3
 80015ea:	4848      	ldr	r0, [pc, #288]	; (800170c <MX_GPIO_Init+0x2ec>)
 80015ec:	f007 fe70 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80015f0:	2310      	movs	r3, #16
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001600:	2302      	movs	r3, #2
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001608:	4619      	mov	r1, r3
 800160a:	4840      	ldr	r0, [pc, #256]	; (800170c <MX_GPIO_Init+0x2ec>)
 800160c:	f007 fe60 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001620:	2308      	movs	r3, #8
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001628:	4619      	mov	r1, r3
 800162a:	4832      	ldr	r0, [pc, #200]	; (80016f4 <MX_GPIO_Init+0x2d4>)
 800162c:	f007 fe50 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001642:	2301      	movs	r3, #1
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164a:	4619      	mov	r1, r3
 800164c:	4830      	ldr	r0, [pc, #192]	; (8001710 <MX_GPIO_Init+0x2f0>)
 800164e:	f007 fe3f 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001652:	2360      	movs	r3, #96	; 0x60
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001662:	230d      	movs	r3, #13
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800166a:	4619      	mov	r1, r3
 800166c:	4826      	ldr	r0, [pc, #152]	; (8001708 <MX_GPIO_Init+0x2e8>)
 800166e:	f007 fe2f 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001684:	4619      	mov	r1, r3
 8001686:	4823      	ldr	r0, [pc, #140]	; (8001714 <MX_GPIO_Init+0x2f4>)
 8001688:	f007 fe22 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800168c:	2340      	movs	r3, #64	; 0x40
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <MX_GPIO_Init+0x2f8>)
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169c:	4619      	mov	r1, r3
 800169e:	4815      	ldr	r0, [pc, #84]	; (80016f4 <MX_GPIO_Init+0x2d4>)
 80016a0:	f007 fe16 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80016a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016b6:	230a      	movs	r3, #10
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016be:	4619      	mov	r1, r3
 80016c0:	4813      	ldr	r0, [pc, #76]	; (8001710 <MX_GPIO_Init+0x2f0>)
 80016c2:	f007 fe05 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016c6:	2320      	movs	r3, #32
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_GPIO_Init+0x2d4>)
 80016de:	f007 fdf7 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80016e2:	2308      	movs	r3, #8
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e016      	b.n	800171c <MX_GPIO_Init+0x2fc>
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	40022000 	.word	0x40022000
 80016fc:	40022800 	.word	0x40022800
 8001700:	40021c00 	.word	0x40021c00
 8001704:	40021800 	.word	0x40021800
 8001708:	40021000 	.word	0x40021000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020000 	.word	0x40020000
 8001714:	40022400 	.word	0x40022400
 8001718:	10120000 	.word	0x10120000
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001722:	230d      	movs	r3, #13
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172a:	4619      	mov	r1, r3
 800172c:	48bb      	ldr	r0, [pc, #748]	; (8001a1c <MX_GPIO_Init+0x5fc>)
 800172e:	f007 fdcf 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001732:	f241 030c 	movw	r3, #4108	; 0x100c
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001748:	4619      	mov	r1, r3
 800174a:	48b5      	ldr	r0, [pc, #724]	; (8001a20 <MX_GPIO_Init+0x600>)
 800174c:	f007 fdc0 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001756:	2300      	movs	r3, #0
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001762:	4619      	mov	r1, r3
 8001764:	48af      	ldr	r0, [pc, #700]	; (8001a24 <MX_GPIO_Init+0x604>)
 8001766:	f007 fdb3 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800176a:	2308      	movs	r3, #8
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177e:	4619      	mov	r1, r3
 8001780:	48a9      	ldr	r0, [pc, #676]	; (8001a28 <MX_GPIO_Init+0x608>)
 8001782:	f007 fda5 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001798:	230d      	movs	r3, #13
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a0:	4619      	mov	r1, r3
 80017a2:	48a2      	ldr	r0, [pc, #648]	; (8001a2c <MX_GPIO_Init+0x60c>)
 80017a4:	f007 fd94 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017a8:	2310      	movs	r3, #16
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b8:	4619      	mov	r1, r3
 80017ba:	4898      	ldr	r0, [pc, #608]	; (8001a1c <MX_GPIO_Init+0x5fc>)
 80017bc:	f007 fd88 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80017c0:	f248 0304 	movw	r3, #32772	; 0x8004
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d2:	4619      	mov	r1, r3
 80017d4:	4896      	ldr	r0, [pc, #600]	; (8001a30 <MX_GPIO_Init+0x610>)
 80017d6:	f007 fd7b 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80017da:	2302      	movs	r3, #2
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ea:	2305      	movs	r3, #5
 80017ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	488a      	ldr	r0, [pc, #552]	; (8001a20 <MX_GPIO_Init+0x600>)
 80017f6:	f007 fd6b 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED2_Pin LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED2_Pin|LED1_Pin|LED3_Pin;
 80017fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	4887      	ldr	r0, [pc, #540]	; (8001a30 <MX_GPIO_Init+0x610>)
 8001814:	f007 fd5c 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D0_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D0_Pin;
 8001818:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800182a:	230d      	movs	r3, #13
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800182e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001832:	4619      	mov	r1, r3
 8001834:	487e      	ldr	r0, [pc, #504]	; (8001a30 <MX_GPIO_Init+0x610>)
 8001836:	f007 fd4b 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800183a:	2301      	movs	r3, #1
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800184a:	2302      	movs	r3, #2
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001852:	4619      	mov	r1, r3
 8001854:	4872      	ldr	r0, [pc, #456]	; (8001a20 <MX_GPIO_Init+0x600>)
 8001856:	f007 fd3b 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800185a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800186c:	2301      	movs	r3, #1
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	486f      	ldr	r0, [pc, #444]	; (8001a34 <MX_GPIO_Init+0x614>)
 8001878:	f007 fd2a 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001882:	4b6d      	ldr	r3, [pc, #436]	; (8001a38 <MX_GPIO_Init+0x618>)
 8001884:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188e:	4619      	mov	r1, r3
 8001890:	4863      	ldr	r0, [pc, #396]	; (8001a20 <MX_GPIO_Init+0x600>)
 8001892:	f007 fd1d 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001896:	23c0      	movs	r3, #192	; 0xc0
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018a6:	2308      	movs	r3, #8
 80018a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ae:	4619      	mov	r1, r3
 80018b0:	485c      	ldr	r0, [pc, #368]	; (8001a24 <MX_GPIO_Init+0x604>)
 80018b2:	f007 fd0d 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80018b6:	2310      	movs	r3, #16
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018c6:	230a      	movs	r3, #10
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ce:	4619      	mov	r1, r3
 80018d0:	4857      	ldr	r0, [pc, #348]	; (8001a30 <MX_GPIO_Init+0x610>)
 80018d2:	f007 fcfd 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80018d6:	23c8      	movs	r3, #200	; 0xc8
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ea:	4619      	mov	r1, r3
 80018ec:	484f      	ldr	r0, [pc, #316]	; (8001a2c <MX_GPIO_Init+0x60c>)
 80018ee:	f007 fcef 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80018f2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f8:	2303      	movs	r3, #3
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001904:	4619      	mov	r1, r3
 8001906:	484d      	ldr	r0, [pc, #308]	; (8001a3c <MX_GPIO_Init+0x61c>)
 8001908:	f007 fce2 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin|ULPI_D2_Pin
 800190c:	f643 4303 	movw	r3, #15363	; 0x3c03
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800191e:	230a      	movs	r3, #10
 8001920:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001926:	4619      	mov	r1, r3
 8001928:	4845      	ldr	r0, [pc, #276]	; (8001a40 <MX_GPIO_Init+0x620>)
 800192a:	f007 fcd1 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800192e:	2305      	movs	r3, #5
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800193e:	230a      	movs	r3, #10
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001946:	4619      	mov	r1, r3
 8001948:	4836      	ldr	r0, [pc, #216]	; (8001a24 <MX_GPIO_Init+0x604>)
 800194a:	f007 fcc1 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800194e:	2332      	movs	r3, #50	; 0x32
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800195e:	230b      	movs	r3, #11
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	4619      	mov	r1, r3
 8001968:	482e      	ldr	r0, [pc, #184]	; (8001a24 <MX_GPIO_Init+0x604>)
 800196a:	f007 fcb1 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800196e:	2304      	movs	r3, #4
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800197e:	2309      	movs	r3, #9
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001986:	4619      	mov	r1, r3
 8001988:	482d      	ldr	r0, [pc, #180]	; (8001a40 <MX_GPIO_Init+0x620>)
 800198a:	f007 fca1 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800198e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019a0:	2309      	movs	r3, #9
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	481c      	ldr	r0, [pc, #112]	; (8001a1c <MX_GPIO_Init+0x5fc>)
 80019ac:	f007 fc90 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80019b0:	2304      	movs	r3, #4
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	481a      	ldr	r0, [pc, #104]	; (8001a2c <MX_GPIO_Init+0x60c>)
 80019c4:	f007 fc84 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019c8:	2386      	movs	r3, #134	; 0x86
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019d8:	230b      	movs	r3, #11
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e0:	4619      	mov	r1, r3
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <MX_GPIO_Init+0x614>)
 80019e4:	f007 fc74 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ec:	2303      	movs	r3, #3
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f8:	4619      	mov	r1, r3
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <MX_GPIO_Init+0x614>)
 80019fc:	f007 fc68 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001a00:	2350      	movs	r3, #80	; 0x50
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a10:	230d      	movs	r3, #13
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	e013      	b.n	8001a44 <MX_GPIO_Init+0x624>
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40022000 	.word	0x40022000
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40022800 	.word	0x40022800
 8001a2c:	40021800 	.word	0x40021800
 8001a30:	40021c00 	.word	0x40021c00
 8001a34:	40020000 	.word	0x40020000
 8001a38:	10120000 	.word	0x10120000
 8001a3c:	40021400 	.word	0x40021400
 8001a40:	40020400 	.word	0x40020400
 8001a44:	481c      	ldr	r0, [pc, #112]	; (8001ab8 <MX_GPIO_Init+0x698>)
 8001a46:	f007 fc43 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001a4a:	2328      	movs	r3, #40	; 0x28
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a62:	4619      	mov	r1, r3
 8001a64:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <MX_GPIO_Init+0x698>)
 8001a66:	f007 fc33 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8001a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a70:	2312      	movs	r3, #18
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a84:	4619      	mov	r1, r3
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_GPIO_Init+0x69c>)
 8001a88:	f007 fc22 	bl	80092d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001a8c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_GPIO_Init+0x6a0>)
 8001aaa:	f007 fc11 	bl	80092d0 <HAL_GPIO_Init>

}
 8001aae:	bf00      	nop
 8001ab0:	3740      	adds	r7, #64	; 0x40
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40021c00 	.word	0x40021c00
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <SD_Init>:

/* USER CODE BEGIN 4 */
void SD_Init() {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001aca:	af02      	add	r7, sp, #8
	uint16_t rtext[_MAX_SS];/* File read buffer */

	FRESULT Res;
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8001acc:	2200      	movs	r2, #0
 8001ace:	491b      	ldr	r1, [pc, #108]	; (8001b3c <SD_Init+0x78>)
 8001ad0:	481b      	ldr	r0, [pc, #108]	; (8001b40 <SD_Init+0x7c>)
 8001ad2:	f010 f883 	bl	8011bdc <f_mount>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <SD_Init+0x1e>
		Error_Handler();
 8001adc:	f001 fec4 	bl	8003868 <Error_Handler>
//			if ((Res = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0)) != FR_OK) {
//				Error_Display(Res);
//			}
		}
	}
}
 8001ae0:	e027      	b.n	8001b32 <SD_Init+0x6e>
		BSP_LCD_DisplayStringAt(0, 140, (uint8_t*) "SD - Mount Ok", CENTER_MODE);
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <SD_Init+0x80>)
 8001ae6:	218c      	movs	r1, #140	; 0x8c
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f002 ff09 	bl	8004900 <BSP_LCD_DisplayStringAt>
		Res = f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af4:	9200      	str	r2, [sp, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	2107      	movs	r1, #7
 8001afa:	4810      	ldr	r0, [pc, #64]	; (8001b3c <SD_Init+0x78>)
 8001afc:	f011 fac4 	bl	8013088 <f_mkfs>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
		if (Res != FR_OK) {
 8001b06:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <SD_Init+0x62>
			BSP_LCD_DisplayStringAt(0, 150, (uint8_t*) "SD - Formatage PAS Ok",
 8001b0e:	2301      	movs	r3, #1
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <SD_Init+0x84>)
 8001b12:	2196      	movs	r1, #150	; 0x96
 8001b14:	2000      	movs	r0, #0
 8001b16:	f002 fef3 	bl	8004900 <BSP_LCD_DisplayStringAt>
			Error_Display(Res);
 8001b1a:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fe1c 	bl	800275c <Error_Display>
}
 8001b24:	e005      	b.n	8001b32 <SD_Init+0x6e>
			BSP_LCD_DisplayStringAt(0, 150, (uint8_t*) "SD - Formatage Ok",
 8001b26:	2301      	movs	r3, #1
 8001b28:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <SD_Init+0x88>)
 8001b2a:	2196      	movs	r1, #150	; 0x96
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f002 fee7 	bl	8004900 <BSP_LCD_DisplayStringAt>
}
 8001b32:	bf00      	nop
 8001b34:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000fce8 	.word	0x2000fce8
 8001b40:	2000ff1c 	.word	0x2000ff1c
 8001b44:	0801763c 	.word	0x0801763c
 8001b48:	0801764c 	.word	0x0801764c
 8001b4c:	08017664 	.word	0x08017664

08001b50 <LCD_Init>:

void LCD_Init() {
 8001b50:	b598      	push	{r3, r4, r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 8001b54:	f002 fcd6 	bl	8004504 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001b58:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f002 fd69 	bl	8004634 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8001b62:	f002 fd3f 	bl	80045e4 <BSP_LCD_GetXSize>
 8001b66:	4604      	mov	r4, r0
 8001b68:	f002 fd50 	bl	800460c <BSP_LCD_GetYSize>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	fb03 f304 	mul.w	r3, r3, r4
 8001b72:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f002 fd5a 	bl	8004634 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8001b80:	f003 fae2 	bl	8005148 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f002 fdb5 	bl	80046f4 <BSP_LCD_SelectLayer>
	BSP_LCD_SetLayerVisible(0, ENABLE);
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f002 fdc1 	bl	8004714 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SetLayerVisible(1, DISABLE);
 8001b92:	2100      	movs	r1, #0
 8001b94:	2001      	movs	r0, #1
 8001b96:	f002 fdbd 	bl	8004714 <BSP_LCD_SetLayerVisible>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9e:	f002 fe43 	bl	8004828 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8001ba2:	481f      	ldr	r0, [pc, #124]	; (8001c20 <LCD_Init+0xd0>)
 8001ba4:	f002 fe26 	bl	80047f4 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f002 fe08 	bl	80047c0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8001bb0:	481c      	ldr	r0, [pc, #112]	; (8001c24 <LCD_Init+0xd4>)
 8001bb2:	f002 fded 	bl	8004790 <BSP_LCD_SetTextColor>

	if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK) {
 8001bb6:	f002 fd15 	bl	80045e4 <BSP_LCD_GetXSize>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29c      	uxth	r4, r3
 8001bbe:	f002 fd25 	bl	800460c <BSP_LCD_GetYSize>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f003 ff4b 	bl	8005a64 <BSP_TS_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01d      	beq.n	8001c10 <LCD_Init+0xc0>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001bd4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001bd8:	f002 fdf2 	bl	80047c0 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001bdc:	4812      	ldr	r0, [pc, #72]	; (8001c28 <LCD_Init+0xd8>)
 8001bde:	f002 fdd7 	bl	8004790 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t*) "ERROR",
 8001be2:	f002 fd13 	bl	800460c <BSP_LCD_GetYSize>
 8001be6:	4603      	mov	r3, r0
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b5f      	subs	r3, #95	; 0x5f
 8001bec:	b299      	uxth	r1, r3
 8001bee:	2301      	movs	r3, #1
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <LCD_Init+0xdc>)
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f002 fe84 	bl	8004900 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80,
 8001bf8:	f002 fd08 	bl	800460c <BSP_LCD_GetYSize>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b50      	subs	r3, #80	; 0x50
 8001c02:	b299      	uxth	r1, r3
 8001c04:	2301      	movs	r3, #1
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <LCD_Init+0xe0>)
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f002 fe79 	bl	8004900 <BSP_LCD_DisplayStringAt>
				(uint8_t*) "Touchscreen cannot be initialized", CENTER_MODE);
	} else {
		BSP_LCD_DisplayStringAt(0, 110, (uint8_t*) "Init Ecran - OK",
				CENTER_MODE);
	}
}
 8001c0e:	e005      	b.n	8001c1c <LCD_Init+0xcc>
		BSP_LCD_DisplayStringAt(0, 110, (uint8_t*) "Init Ecran - OK",
 8001c10:	2301      	movs	r3, #1
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <LCD_Init+0xe4>)
 8001c14:	216e      	movs	r1, #110	; 0x6e
 8001c16:	2000      	movs	r0, #0
 8001c18:	f002 fe72 	bl	8004900 <BSP_LCD_DisplayStringAt>
}
 8001c1c:	bf00      	nop
 8001c1e:	bd98      	pop	{r3, r4, r7, pc}
 8001c20:	200002f4 	.word	0x200002f4
 8001c24:	ff8080ff 	.word	0xff8080ff
 8001c28:	ffff0000 	.word	0xffff0000
 8001c2c:	08017678 	.word	0x08017678
 8001c30:	08017680 	.word	0x08017680
 8001c34:	080176a4 	.word	0x080176a4

08001c38 <Audio_Init>:

void Audio_Init() {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af02      	add	r7, sp, #8
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2,
 8001c3e:	2302      	movs	r3, #2
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2310      	movs	r3, #16
 8001c44:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001c48:	2102      	movs	r1, #2
 8001c4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c4e:	f002 fa0b 	bl	8004068 <BSP_AUDIO_IN_OUT_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <Audio_Init+0x2c>
	OUTPUT_DEVICE_HEADPHONE, Audio_freq,
	Audio_bit_res,
	Audio_chan) == AUDIO_OK) {
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*) "Init Audio - OK",
 8001c58:	2301      	movs	r3, #1
 8001c5a:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <Audio_Init+0x90>)
 8001c5c:	2114      	movs	r1, #20
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f002 fe4e 	bl	8004900 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
	}

	/* Initialize SDRAM buffers */
	memset((uint16_t*) AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE * 2);
 8001c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4818      	ldr	r0, [pc, #96]	; (8001ccc <Audio_Init+0x94>)
 8001c6c:	f015 f854 	bl	8016d18 <memset>
	memset((uint16_t*) AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 8001c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c74:	2100      	movs	r1, #0
 8001c76:	4816      	ldr	r0, [pc, #88]	; (8001cd0 <Audio_Init+0x98>)
 8001c78:	f015 f84e 	bl	8016d18 <memset>
	memset((uint16_t*) AUDIO_BUFFER_READ, 0, AUDIO_BLOCK_SIZE * 2);
 8001c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c80:	2100      	movs	r1, #0
 8001c82:	4814      	ldr	r0, [pc, #80]	; (8001cd4 <Audio_Init+0x9c>)
 8001c84:	f015 f848 	bl	8016d18 <memset>

	/* Start Recording */
	BSP_AUDIO_IN_Record((uint16_t*) AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8001c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8c:	480f      	ldr	r0, [pc, #60]	; (8001ccc <Audio_Init+0x94>)
 8001c8e:	f002 fa69 	bl	8004164 <BSP_AUDIO_IN_Record>
	BSP_AUDIO_IN_SetVolume(190);
 8001c92:	20be      	movs	r0, #190	; 0xbe
 8001c94:	f002 fa7e 	bl	8004194 <BSP_AUDIO_IN_SetVolume>
	BSP_AUDIO_OUT_SetVolume(70);
 8001c98:	2046      	movs	r0, #70	; 0x46
 8001c9a:	f002 f82d 	bl	8003cf8 <BSP_AUDIO_OUT_SetVolume>
	/* Start Playback */
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8001c9e:	2005      	movs	r0, #5
 8001ca0:	f002 f842 	bl	8003d28 <BSP_AUDIO_OUT_SetAudioFrameSlot>
	if (BSP_AUDIO_OUT_Play((uint16_t*) AUDIO_BUFFER_OUT,
 8001ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca8:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <Audio_Init+0x98>)
 8001caa:	f001 fffb 	bl	8003ca4 <BSP_AUDIO_OUT_Play>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <Audio_Init+0x88>
	AUDIO_BLOCK_SIZE * 2) == AUDIO_OK) {
		BSP_LCD_DisplayStringAt(0, 30, (uint8_t*) "Play Audio - OK",
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <Audio_Init+0xa0>)
 8001cb8:	211e      	movs	r1, #30
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f002 fe20 	bl	8004900 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
	}

}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	080176b4 	.word	0x080176b4
 8001ccc:	c00ff000 	.word	0xc00ff000
 8001cd0:	c00ff400 	.word	0xc00ff400
 8001cd4:	c00ff800 	.word	0xc00ff800
 8001cd8:	080176c4 	.word	0x080176c4

08001cdc <write_header>:

void write_header(uint32_t N_Bytes_Data) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	uint32_t byteswritten;
	uint8_t entete[] = {
 8001ce4:	2352      	movs	r3, #82	; 0x52
 8001ce6:	723b      	strb	r3, [r7, #8]
 8001ce8:	2349      	movs	r3, #73	; 0x49
 8001cea:	727b      	strb	r3, [r7, #9]
 8001cec:	2346      	movs	r3, #70	; 0x46
 8001cee:	72bb      	strb	r3, [r7, #10]
 8001cf0:	2346      	movs	r3, #70	; 0x46
 8001cf2:	72fb      	strb	r3, [r7, #11]
			0x52, 0x49, 0x46,0x46, //'RIFF' : identification du format
			(uint8_t) ((N_Bytes_Data + 36) & MASK_32_TO_8_0),
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3324      	adds	r3, #36	; 0x24
 8001cfa:	b2db      	uxtb	r3, r3
	uint8_t entete[] = {
 8001cfc:	733b      	strb	r3, [r7, #12]
			(uint8_t) (((N_Bytes_Data + 36) & MASK_32_TO_8_1) >> 8),
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3324      	adds	r3, #36	; 0x24
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	b2db      	uxtb	r3, r3
	uint8_t entete[] = {
 8001d06:	737b      	strb	r3, [r7, #13]
			(uint8_t) (((N_Bytes_Data + 36) & MASK_32_TO_8_2) >> 16),
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3324      	adds	r3, #36	; 0x24
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	b2db      	uxtb	r3, r3
	uint8_t entete[] = {
 8001d10:	73bb      	strb	r3, [r7, #14]
			(uint8_t) (((N_Bytes_Data + 36) & MASK_32_TO_8_3) >> 24), //Taille du fichier - 8 octets (en octets)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3324      	adds	r3, #36	; 0x24
 8001d16:	0e1b      	lsrs	r3, r3, #24
 8001d18:	b2db      	uxtb	r3, r3
	uint8_t entete[] = {
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	2357      	movs	r3, #87	; 0x57
 8001d1e:	743b      	strb	r3, [r7, #16]
 8001d20:	2341      	movs	r3, #65	; 0x41
 8001d22:	747b      	strb	r3, [r7, #17]
 8001d24:	2356      	movs	r3, #86	; 0x56
 8001d26:	74bb      	strb	r3, [r7, #18]
 8001d28:	2345      	movs	r3, #69	; 0x45
 8001d2a:	74fb      	strb	r3, [r7, #19]
 8001d2c:	2366      	movs	r3, #102	; 0x66
 8001d2e:	753b      	strb	r3, [r7, #20]
 8001d30:	236d      	movs	r3, #109	; 0x6d
 8001d32:	757b      	strb	r3, [r7, #21]
 8001d34:	2374      	movs	r3, #116	; 0x74
 8001d36:	75bb      	strb	r3, [r7, #22]
 8001d38:	2320      	movs	r3, #32
 8001d3a:	75fb      	strb	r3, [r7, #23]
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	763b      	strb	r3, [r7, #24]
 8001d40:	2300      	movs	r3, #0
 8001d42:	767b      	strb	r3, [r7, #25]
 8001d44:	2300      	movs	r3, #0
 8001d46:	76bb      	strb	r3, [r7, #26]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	76fb      	strb	r3, [r7, #27]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	773b      	strb	r3, [r7, #28]
 8001d50:	2300      	movs	r3, #0
 8001d52:	777b      	strb	r3, [r7, #29]
 8001d54:	2302      	movs	r3, #2
 8001d56:	77bb      	strb	r3, [r7, #30]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	77fb      	strb	r3, [r7, #31]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	f887 3020 	strb.w	r3, [r7, #32]
 8001d62:	233e      	movs	r3, #62	; 0x3e
 8001d64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001d7a:	23fa      	movs	r3, #250	; 0xfa
 8001d7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001d98:	2310      	movs	r3, #16
 8001d9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001da4:	2364      	movs	r3, #100	; 0x64
 8001da6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001daa:	2361      	movs	r3, #97	; 0x61
 8001dac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001db0:	2374      	movs	r3, #116	; 0x74
 8001db2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001db6:	2361      	movs	r3, #97	; 0x61
 8001db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			(uint8_t)( BytePerBloc & MASK_32_TO_8_0),
			(uint8_t)((BytePerBloc & MASK_32_TO_8_1) >> 8), //BytePerBloc

			(Audio_bit_res),0x00, //Bits par échantillons
			0x64, 0x61, 0x74,0x61, //'DATA'
			(uint8_t) ( (N_Bytes_Data) & MASK_32_TO_8_0),
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	b2db      	uxtb	r3, r3
	uint8_t entete[] = {
 8001dc0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			(uint8_t) (((N_Bytes_Data) & MASK_32_TO_8_1) >> 8),
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	b2db      	uxtb	r3, r3
	uint8_t entete[] = {
 8001dca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			(uint8_t) (((N_Bytes_Data) & MASK_32_TO_8_2) >> 16),
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	b2db      	uxtb	r3, r3
	uint8_t entete[] = {
 8001dd4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			(uint8_t) (((N_Bytes_Data) & MASK_32_TO_8_3) >> 24),	//DataSize
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0e1b      	lsrs	r3, r3, #24
 8001ddc:	b2db      	uxtb	r3, r3
	uint8_t entete[] = {
 8001dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			};
	f_lseek(&SDFile, 0);
 8001de2:	2100      	movs	r1, #0
 8001de4:	4807      	ldr	r0, [pc, #28]	; (8001e04 <write_header+0x128>)
 8001de6:	f010 fd3d 	bl	8012864 <f_lseek>
	f_write(&SDFile, entete, 44, (void*) &byteswritten);
 8001dea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dee:	f107 0108 	add.w	r1, r7, #8
 8001df2:	222c      	movs	r2, #44	; 0x2c
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <write_header+0x128>)
 8001df6:	f010 fa88 	bl	801230a <f_write>
}
 8001dfa:	bf00      	nop
 8001dfc:	3738      	adds	r7, #56	; 0x38
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000fcec 	.word	0x2000fcec

08001e08 <Addition>:

void Addition(char Offset){
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
	if (Offset){
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d022      	beq.n	8001e5e <Addition+0x56>
		for (uint16_t i = 0;i<AUDIO_BLOCK_SIZE/2;i++){
 8001e18:	2300      	movs	r3, #0
 8001e1a:	81fb      	strh	r3, [r7, #14]
 8001e1c:	e01b      	b.n	8001e56 <Addition+0x4e>
			((int16_t*)AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE/2)[i] = (((int16_t*)AUDIO_BUFFER_IN + AUDIO_BLOCK_SIZE/2)[i]+((int16_t*)AUDIO_BUFFER_READ + AUDIO_BLOCK_SIZE/2)[i])/2;
 8001e1e:	89fb      	ldrh	r3, [r7, #14]
 8001e20:	005a      	lsls	r2, r3, #1
 8001e22:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <Addition+0xa8>)
 8001e24:	4413      	add	r3, r2
 8001e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	89fb      	ldrh	r3, [r7, #14]
 8001e2e:	005a      	lsls	r2, r3, #1
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <Addition+0xac>)
 8001e32:	4413      	add	r3, r2
 8001e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e38:	440b      	add	r3, r1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da00      	bge.n	8001e40 <Addition+0x38>
 8001e3e:	3301      	adds	r3, #1
 8001e40:	105b      	asrs	r3, r3, #1
 8001e42:	4619      	mov	r1, r3
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	005a      	lsls	r2, r3, #1
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <Addition+0xb0>)
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b20a      	sxth	r2, r1
 8001e4e:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0;i<AUDIO_BLOCK_SIZE/2;i++){
 8001e50:	89fb      	ldrh	r3, [r7, #14]
 8001e52:	3301      	adds	r3, #1
 8001e54:	81fb      	strh	r3, [r7, #14]
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	2bff      	cmp	r3, #255	; 0xff
 8001e5a:	d9e0      	bls.n	8001e1e <Addition+0x16>
	}else{
		for (uint16_t i = 0;i<AUDIO_BLOCK_SIZE/2;i++){
			((int16_t*)AUDIO_BUFFER_OUT)[i] = (((int16_t*)AUDIO_BUFFER_IN)[i]+((int16_t*)AUDIO_BUFFER_READ)[i])/2;
		}
	}
}
 8001e5c:	e021      	b.n	8001ea2 <Addition+0x9a>
		for (uint16_t i = 0;i<AUDIO_BLOCK_SIZE/2;i++){
 8001e5e:	2300      	movs	r3, #0
 8001e60:	81bb      	strh	r3, [r7, #12]
 8001e62:	e01b      	b.n	8001e9c <Addition+0x94>
			((int16_t*)AUDIO_BUFFER_OUT)[i] = (((int16_t*)AUDIO_BUFFER_IN)[i]+((int16_t*)AUDIO_BUFFER_READ)[i])/2;
 8001e64:	89bb      	ldrh	r3, [r7, #12]
 8001e66:	005a      	lsls	r2, r3, #1
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <Addition+0xb4>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e70:	4619      	mov	r1, r3
 8001e72:	89bb      	ldrh	r3, [r7, #12]
 8001e74:	005a      	lsls	r2, r3, #1
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <Addition+0xb8>)
 8001e78:	4413      	add	r3, r2
 8001e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7e:	440b      	add	r3, r1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da00      	bge.n	8001e86 <Addition+0x7e>
 8001e84:	3301      	adds	r3, #1
 8001e86:	105b      	asrs	r3, r3, #1
 8001e88:	4619      	mov	r1, r3
 8001e8a:	89bb      	ldrh	r3, [r7, #12]
 8001e8c:	005a      	lsls	r2, r3, #1
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <Addition+0xbc>)
 8001e90:	4413      	add	r3, r2
 8001e92:	b20a      	sxth	r2, r1
 8001e94:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0;i<AUDIO_BLOCK_SIZE/2;i++){
 8001e96:	89bb      	ldrh	r3, [r7, #12]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	81bb      	strh	r3, [r7, #12]
 8001e9c:	89bb      	ldrh	r3, [r7, #12]
 8001e9e:	2bff      	cmp	r3, #255	; 0xff
 8001ea0:	d9e0      	bls.n	8001e64 <Addition+0x5c>
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	c00ff200 	.word	0xc00ff200
 8001eb4:	c00ffa00 	.word	0xc00ffa00
 8001eb8:	c00ff600 	.word	0xc00ff600
 8001ebc:	c00ff000 	.word	0xc00ff000
 8001ec0:	c00ff800 	.word	0xc00ff800
 8001ec4:	c00ff400 	.word	0xc00ff400

08001ec8 <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
	char a=1,b=3;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	71fb      	strb	r3, [r7, #7]
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	71bb      	strb	r3, [r7, #6]
	if (enable) {
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d027      	beq.n	8001f2e <BSP_AUDIO_IN_TransferComplete_CallBack+0x66>
		switch(etat){
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d01b      	beq.n	8001f1e <BSP_AUDIO_IN_TransferComplete_CallBack+0x56>
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	dc23      	bgt.n	8001f32 <BSP_AUDIO_IN_TransferComplete_CallBack+0x6a>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d002      	beq.n	8001ef4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x2c>
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d007      	beq.n	8001f02 <BSP_AUDIO_IN_TransferComplete_CallBack+0x3a>
		case 3:
			xQueueSendFromISR(WakeUpHandle,&b,0);
			break;
		}
	}
	return;
 8001ef2:	e01e      	b.n	8001f32 <BSP_AUDIO_IN_TransferComplete_CallBack+0x6a>
			memcpy((uint16_t*) (AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE),
 8001ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef8:	4912      	ldr	r1, [pc, #72]	; (8001f44 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8001efa:	4813      	ldr	r0, [pc, #76]	; (8001f48 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>)
 8001efc:	f014 fefe 	bl	8016cfc <memcpy>
			break;
 8001f00:	e016      	b.n	8001f30 <BSP_AUDIO_IN_TransferComplete_CallBack+0x68>
			memcpy((uint16_t*) (AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE),
 8001f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f06:	490f      	ldr	r1, [pc, #60]	; (8001f44 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8001f08:	480f      	ldr	r0, [pc, #60]	; (8001f48 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>)
 8001f0a:	f014 fef7 	bl	8016cfc <memcpy>
			xQueueSendFromISR(WakeUpHandle,&a,0);
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <BSP_AUDIO_IN_TransferComplete_CallBack+0x84>)
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	1df9      	adds	r1, r7, #7
 8001f14:	2300      	movs	r3, #0
 8001f16:	2200      	movs	r2, #0
 8001f18:	f012 fb48 	bl	80145ac <xQueueGenericSendFromISR>
			break;
 8001f1c:	e008      	b.n	8001f30 <BSP_AUDIO_IN_TransferComplete_CallBack+0x68>
			xQueueSendFromISR(WakeUpHandle,&b,0);
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <BSP_AUDIO_IN_TransferComplete_CallBack+0x84>)
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	1db9      	adds	r1, r7, #6
 8001f24:	2300      	movs	r3, #0
 8001f26:	2200      	movs	r2, #0
 8001f28:	f012 fb40 	bl	80145ac <xQueueGenericSendFromISR>
			break;
 8001f2c:	e000      	b.n	8001f30 <BSP_AUDIO_IN_TransferComplete_CallBack+0x68>
	}
 8001f2e:	bf00      	nop
	return;
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
}
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000626 	.word	0x20000626
 8001f40:	20000627 	.word	0x20000627
 8001f44:	c00ff200 	.word	0xc00ff200
 8001f48:	c00ff600 	.word	0xc00ff600
 8001f4c:	2000f66c 	.word	0x2000f66c

08001f50 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
	char a=0,b=2;
 8001f56:	2300      	movs	r3, #0
 8001f58:	71fb      	strb	r3, [r7, #7]
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	71bb      	strb	r3, [r7, #6]
	if (enable) {
 8001f5e:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x74>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d027      	beq.n	8001fb6 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x66>
		switch(etat){
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d01b      	beq.n	8001fa6 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x56>
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	dc23      	bgt.n	8001fba <BSP_AUDIO_IN_HalfTransfer_CallBack+0x6a>
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d002      	beq.n	8001f7c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x2c>
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d007      	beq.n	8001f8a <BSP_AUDIO_IN_HalfTransfer_CallBack+0x3a>
		case 3:
			xQueueSendFromISR(WakeUpHandle,&b,0);
			break;
		}
	}
	return;
 8001f7a:	e01e      	b.n	8001fba <BSP_AUDIO_IN_HalfTransfer_CallBack+0x6a>
			memcpy((uint16_t*) (AUDIO_BUFFER_OUT),
 8001f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f80:	4912      	ldr	r1, [pc, #72]	; (8001fcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8001f82:	4813      	ldr	r0, [pc, #76]	; (8001fd0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>)
 8001f84:	f014 feba 	bl	8016cfc <memcpy>
			break;
 8001f88:	e016      	b.n	8001fb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x68>
			memcpy((uint16_t*) (AUDIO_BUFFER_OUT),
 8001f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8e:	490f      	ldr	r1, [pc, #60]	; (8001fcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8001f90:	480f      	ldr	r0, [pc, #60]	; (8001fd0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>)
 8001f92:	f014 feb3 	bl	8016cfc <memcpy>
			xQueueSendFromISR(WakeUpHandle,&a,0);
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x84>)
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	1df9      	adds	r1, r7, #7
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f012 fb04 	bl	80145ac <xQueueGenericSendFromISR>
			break;
 8001fa4:	e008      	b.n	8001fb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x68>
			xQueueSendFromISR(WakeUpHandle,&b,0);
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x84>)
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	1db9      	adds	r1, r7, #6
 8001fac:	2300      	movs	r3, #0
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f012 fafc 	bl	80145ac <xQueueGenericSendFromISR>
			break;
 8001fb4:	e000      	b.n	8001fb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x68>
	}
 8001fb6:	bf00      	nop
	return;
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
}
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000626 	.word	0x20000626
 8001fc8:	20000627 	.word	0x20000627
 8001fcc:	c00ff000 	.word	0xc00ff000
 8001fd0:	c00ff400 	.word	0xc00ff400
 8001fd4:	2000f66c 	.word	0x2000f66c

08001fd8 <Draw_Keyboard>:

void Draw_Keyboard(uint8_t MAJ_ENABLE){
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	uint16_t y = 132;
 8001fe2:	2384      	movs	r3, #132	; 0x84
 8001fe4:	817b      	strh	r3, [r7, #10]

	// Background
	BSP_LCD_SetFont(&Font16);
 8001fe6:	4879      	ldr	r0, [pc, #484]	; (80021cc <Draw_Keyboard+0x1f4>)
 8001fe8:	f002 fc04 	bl	80047f4 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001fec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ff0:	f002 fbe6 	bl	80047c0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ff4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ff8:	f002 fbca 	bl	8004790 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 132, 480, 140);
 8001ffc:	238c      	movs	r3, #140	; 0x8c
 8001ffe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002002:	2184      	movs	r1, #132	; 0x84
 8002004:	2000      	movs	r0, #0
 8002006:	f002 ff41 	bl	8004e8c <BSP_LCD_FillRect>

	// Keys
	BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 800200a:	4871      	ldr	r0, [pc, #452]	; (80021d0 <Draw_Keyboard+0x1f8>)
 800200c:	f002 fbc0 	bl	8004790 <BSP_LCD_SetTextColor>
	for(uint8_t i=0; i<5; i++){
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e0c9      	b.n	80021aa <Draw_Keyboard+0x1d2>
		for(uint8_t j=0; j<10; j++){
 8002016:	2300      	movs	r3, #0
 8002018:	73bb      	strb	r3, [r7, #14]
 800201a:	e0bf      	b.n	800219c <Draw_Keyboard+0x1c4>
			if(i<3)BSP_LCD_FillRect(j*48+2, y+i*28+2, 44, 24);
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d819      	bhi.n	8002056 <Draw_Keyboard+0x7e>
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	0052      	lsls	r2, r2, #1
 800202a:	4413      	add	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	b29b      	uxth	r3, r3
 8002030:	3302      	adds	r3, #2
 8002032:	b298      	uxth	r0, r3
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	b29b      	uxth	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	00d2      	lsls	r2, r2, #3
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	b29a      	uxth	r2, r3
 8002042:	897b      	ldrh	r3, [r7, #10]
 8002044:	4413      	add	r3, r2
 8002046:	b29b      	uxth	r3, r3
 8002048:	3302      	adds	r3, #2
 800204a:	b299      	uxth	r1, r3
 800204c:	2318      	movs	r3, #24
 800204e:	222c      	movs	r2, #44	; 0x2c
 8002050:	f002 ff1c 	bl	8004e8c <BSP_LCD_FillRect>
 8002054:	e09f      	b.n	8002196 <Draw_Keyboard+0x1be>
			else if(i==3){
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d164      	bne.n	8002126 <Draw_Keyboard+0x14e>
				if(j == 0){
 800205c:	7bbb      	ldrb	r3, [r7, #14]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d124      	bne.n	80020ac <Draw_Keyboard+0xd4>
					if(MAJ_ENABLE)BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <Draw_Keyboard+0x96>
 8002068:	485a      	ldr	r0, [pc, #360]	; (80021d4 <Draw_Keyboard+0x1fc>)
 800206a:	f002 fb91 	bl	8004790 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(j*48+2, y+i*28+2, 80, 24);
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	b29b      	uxth	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	0052      	lsls	r2, r2, #1
 8002076:	4413      	add	r3, r2
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	b29b      	uxth	r3, r3
 800207c:	3302      	adds	r3, #2
 800207e:	b298      	uxth	r0, r3
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	00d2      	lsls	r2, r2, #3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	b29a      	uxth	r2, r3
 800208e:	897b      	ldrh	r3, [r7, #10]
 8002090:	4413      	add	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	3302      	adds	r3, #2
 8002096:	b299      	uxth	r1, r3
 8002098:	2318      	movs	r3, #24
 800209a:	2250      	movs	r2, #80	; 0x50
 800209c:	f002 fef6 	bl	8004e8c <BSP_LCD_FillRect>
					if(MAJ_ENABLE)BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <Draw_Keyboard+0xd4>
 80020a6:	484a      	ldr	r0, [pc, #296]	; (80021d0 <Draw_Keyboard+0x1f8>)
 80020a8:	f002 fb72 	bl	8004790 <BSP_LCD_SetTextColor>
				}
				if(j == 8){
 80020ac:	7bbb      	ldrb	r3, [r7, #14]
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d119      	bne.n	80020e6 <Draw_Keyboard+0x10e>
					BSP_LCD_FillRect(j*48+34, y+i*28+2, 60, 24);
 80020b2:	7bbb      	ldrb	r3, [r7, #14]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	0052      	lsls	r2, r2, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3322      	adds	r3, #34	; 0x22
 80020c2:	b298      	uxth	r0, r3
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	00d2      	lsls	r2, r2, #3
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	897b      	ldrh	r3, [r7, #10]
 80020d4:	4413      	add	r3, r2
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3302      	adds	r3, #2
 80020da:	b299      	uxth	r1, r3
 80020dc:	2318      	movs	r3, #24
 80020de:	223c      	movs	r2, #60	; 0x3c
 80020e0:	f002 fed4 	bl	8004e8c <BSP_LCD_FillRect>
 80020e4:	e057      	b.n	8002196 <Draw_Keyboard+0x1be>
				}
				else if(j >= 2 && j <= 7)BSP_LCD_FillRect(j*48+2, y+i*28+2, 44, 24);
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d954      	bls.n	8002196 <Draw_Keyboard+0x1be>
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	2b07      	cmp	r3, #7
 80020f0:	d851      	bhi.n	8002196 <Draw_Keyboard+0x1be>
 80020f2:	7bbb      	ldrb	r3, [r7, #14]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	0052      	lsls	r2, r2, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3302      	adds	r3, #2
 8002102:	b298      	uxth	r0, r3
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	b29b      	uxth	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	00d2      	lsls	r2, r2, #3
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	b29a      	uxth	r2, r3
 8002112:	897b      	ldrh	r3, [r7, #10]
 8002114:	4413      	add	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	3302      	adds	r3, #2
 800211a:	b299      	uxth	r1, r3
 800211c:	2318      	movs	r3, #24
 800211e:	222c      	movs	r2, #44	; 0x2c
 8002120:	f002 feb4 	bl	8004e8c <BSP_LCD_FillRect>
 8002124:	e037      	b.n	8002196 <Draw_Keyboard+0x1be>
			} else {
				if(j == 8){
 8002126:	7bbb      	ldrb	r3, [r7, #14]
 8002128:	2b08      	cmp	r3, #8
 800212a:	d118      	bne.n	800215e <Draw_Keyboard+0x186>
					BSP_LCD_FillRect(j*48+14, y+i*28+2, 80, 24);
 800212c:	7bbb      	ldrb	r3, [r7, #14]
 800212e:	b29b      	uxth	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	0052      	lsls	r2, r2, #1
 8002134:	4413      	add	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	b29b      	uxth	r3, r3
 800213a:	330e      	adds	r3, #14
 800213c:	b298      	uxth	r0, r3
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	b29b      	uxth	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	00d2      	lsls	r2, r2, #3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	b29a      	uxth	r2, r3
 800214c:	897b      	ldrh	r3, [r7, #10]
 800214e:	4413      	add	r3, r2
 8002150:	b29b      	uxth	r3, r3
 8002152:	3302      	adds	r3, #2
 8002154:	b299      	uxth	r1, r3
 8002156:	2318      	movs	r3, #24
 8002158:	2250      	movs	r2, #80	; 0x50
 800215a:	f002 fe97 	bl	8004e8c <BSP_LCD_FillRect>
				}
				if(j == 2)BSP_LCD_FillRect(j*48+2+30, y+i*28+2, 44+48*5-60, 24);
 800215e:	7bbb      	ldrb	r3, [r7, #14]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d118      	bne.n	8002196 <Draw_Keyboard+0x1be>
 8002164:	7bbb      	ldrb	r3, [r7, #14]
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	0052      	lsls	r2, r2, #1
 800216c:	4413      	add	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	b29b      	uxth	r3, r3
 8002172:	3320      	adds	r3, #32
 8002174:	b298      	uxth	r0, r3
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	b29b      	uxth	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	00d2      	lsls	r2, r2, #3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	b29a      	uxth	r2, r3
 8002184:	897b      	ldrh	r3, [r7, #10]
 8002186:	4413      	add	r3, r2
 8002188:	b29b      	uxth	r3, r3
 800218a:	3302      	adds	r3, #2
 800218c:	b299      	uxth	r1, r3
 800218e:	2318      	movs	r3, #24
 8002190:	22e0      	movs	r2, #224	; 0xe0
 8002192:	f002 fe7b 	bl	8004e8c <BSP_LCD_FillRect>
		for(uint8_t j=0; j<10; j++){
 8002196:	7bbb      	ldrb	r3, [r7, #14]
 8002198:	3301      	adds	r3, #1
 800219a:	73bb      	strb	r3, [r7, #14]
 800219c:	7bbb      	ldrb	r3, [r7, #14]
 800219e:	2b09      	cmp	r3, #9
 80021a0:	f67f af3c 	bls.w	800201c <Draw_Keyboard+0x44>
	for(uint8_t i=0; i<5; i++){
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	3301      	adds	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	f67f af32 	bls.w	8002016 <Draw_Keyboard+0x3e>
			}
		}
	}

	// Characters
	BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 80021b2:	4807      	ldr	r0, [pc, #28]	; (80021d0 <Draw_Keyboard+0x1f8>)
 80021b4:	f002 fb04 	bl	80047c0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f002 fae8 	bl	8004790 <BSP_LCD_SetTextColor>
	for(uint8_t i=0; i<5; i++){
 80021c0:	2300      	movs	r3, #0
 80021c2:	737b      	strb	r3, [r7, #13]
 80021c4:	e110      	b.n	80023e8 <Draw_Keyboard+0x410>
		for(uint8_t j=0; j<10; j++){
 80021c6:	2300      	movs	r3, #0
 80021c8:	733b      	strb	r3, [r7, #12]
 80021ca:	e106      	b.n	80023da <Draw_Keyboard+0x402>
 80021cc:	200002ec 	.word	0x200002ec
 80021d0:	ff808080 	.word	0xff808080
 80021d4:	ffd3d3d3 	.word	0xffd3d3d3
			if(keyboard[i][j] >= '0' && keyboard[i][j] <= '9')BSP_LCD_DisplayChar(j*48+2+16, y+i*28+2+4, keyboard[i][j]);
 80021d8:	7b7a      	ldrb	r2, [r7, #13]
 80021da:	7b39      	ldrb	r1, [r7, #12]
 80021dc:	4887      	ldr	r0, [pc, #540]	; (80023fc <Draw_Keyboard+0x424>)
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4403      	add	r3, r0
 80021e8:	440b      	add	r3, r1
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b2f      	cmp	r3, #47	; 0x2f
 80021ee:	d92e      	bls.n	800224e <Draw_Keyboard+0x276>
 80021f0:	7b7a      	ldrb	r2, [r7, #13]
 80021f2:	7b39      	ldrb	r1, [r7, #12]
 80021f4:	4881      	ldr	r0, [pc, #516]	; (80023fc <Draw_Keyboard+0x424>)
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4403      	add	r3, r0
 8002200:	440b      	add	r3, r1
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b39      	cmp	r3, #57	; 0x39
 8002206:	d822      	bhi.n	800224e <Draw_Keyboard+0x276>
 8002208:	7b3b      	ldrb	r3, [r7, #12]
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	0052      	lsls	r2, r2, #1
 8002210:	4413      	add	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	b29b      	uxth	r3, r3
 8002216:	3312      	adds	r3, #18
 8002218:	b298      	uxth	r0, r3
 800221a:	7b7b      	ldrb	r3, [r7, #13]
 800221c:	b29b      	uxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	00d2      	lsls	r2, r2, #3
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	b29a      	uxth	r2, r3
 8002228:	897b      	ldrh	r3, [r7, #10]
 800222a:	4413      	add	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	3306      	adds	r3, #6
 8002230:	b29c      	uxth	r4, r3
 8002232:	7b7a      	ldrb	r2, [r7, #13]
 8002234:	7b39      	ldrb	r1, [r7, #12]
 8002236:	4d71      	ldr	r5, [pc, #452]	; (80023fc <Draw_Keyboard+0x424>)
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	442b      	add	r3, r5
 8002242:	440b      	add	r3, r1
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	4621      	mov	r1, r4
 800224a:	f002 fb15 	bl	8004878 <BSP_LCD_DisplayChar>
			if(keyboard[i][j] >= 'a' && keyboard[i][j] <= 'z')BSP_LCD_DisplayChar(j*48+2+16, y+i*28+2+4, keyboard[i][j]+('A'-'a')*MAJ_ENABLE);
 800224e:	7b7a      	ldrb	r2, [r7, #13]
 8002250:	7b39      	ldrb	r1, [r7, #12]
 8002252:	486a      	ldr	r0, [pc, #424]	; (80023fc <Draw_Keyboard+0x424>)
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4403      	add	r3, r0
 800225e:	440b      	add	r3, r1
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b60      	cmp	r3, #96	; 0x60
 8002264:	d936      	bls.n	80022d4 <Draw_Keyboard+0x2fc>
 8002266:	7b7a      	ldrb	r2, [r7, #13]
 8002268:	7b39      	ldrb	r1, [r7, #12]
 800226a:	4864      	ldr	r0, [pc, #400]	; (80023fc <Draw_Keyboard+0x424>)
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4403      	add	r3, r0
 8002276:	440b      	add	r3, r1
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b7a      	cmp	r3, #122	; 0x7a
 800227c:	d82a      	bhi.n	80022d4 <Draw_Keyboard+0x2fc>
 800227e:	7b3b      	ldrb	r3, [r7, #12]
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	0052      	lsls	r2, r2, #1
 8002286:	4413      	add	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	b29b      	uxth	r3, r3
 800228c:	3312      	adds	r3, #18
 800228e:	b298      	uxth	r0, r3
 8002290:	7b7b      	ldrb	r3, [r7, #13]
 8002292:	b29b      	uxth	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	00d2      	lsls	r2, r2, #3
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	b29a      	uxth	r2, r3
 800229e:	897b      	ldrh	r3, [r7, #10]
 80022a0:	4413      	add	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3306      	adds	r3, #6
 80022a6:	b29c      	uxth	r4, r3
 80022a8:	7b7a      	ldrb	r2, [r7, #13]
 80022aa:	7b39      	ldrb	r1, [r7, #12]
 80022ac:	4d53      	ldr	r5, [pc, #332]	; (80023fc <Draw_Keyboard+0x424>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	442b      	add	r3, r5
 80022b8:	440b      	add	r3, r1
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	4619      	mov	r1, r3
 80022c0:	00c9      	lsls	r1, r1, #3
 80022c2:	1acb      	subs	r3, r1, r3
 80022c4:	015b      	lsls	r3, r3, #5
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	4621      	mov	r1, r4
 80022d0:	f002 fad2 	bl	8004878 <BSP_LCD_DisplayChar>
			if(i == 3 && j == 8){
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d11b      	bne.n	8002312 <Draw_Keyboard+0x33a>
 80022da:	7b3b      	ldrb	r3, [r7, #12]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d118      	bne.n	8002312 <Draw_Keyboard+0x33a>
				BSP_LCD_DisplayStringAt(j*48+34+15, y+i*28+6, (uint8_t *)"DEL", LEFT_MODE);
 80022e0:	7b3b      	ldrb	r3, [r7, #12]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	0052      	lsls	r2, r2, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3331      	adds	r3, #49	; 0x31
 80022f0:	b298      	uxth	r0, r3
 80022f2:	7b7b      	ldrb	r3, [r7, #13]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	00d2      	lsls	r2, r2, #3
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	b29a      	uxth	r2, r3
 8002300:	897b      	ldrh	r3, [r7, #10]
 8002302:	4413      	add	r3, r2
 8002304:	b29b      	uxth	r3, r3
 8002306:	3306      	adds	r3, #6
 8002308:	b299      	uxth	r1, r3
 800230a:	2303      	movs	r3, #3
 800230c:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <Draw_Keyboard+0x428>)
 800230e:	f002 faf7 	bl	8004900 <BSP_LCD_DisplayStringAt>
			}
			if(i == 4 && j == 8){
 8002312:	7b7b      	ldrb	r3, [r7, #13]
 8002314:	2b04      	cmp	r3, #4
 8002316:	d11b      	bne.n	8002350 <Draw_Keyboard+0x378>
 8002318:	7b3b      	ldrb	r3, [r7, #12]
 800231a:	2b08      	cmp	r3, #8
 800231c:	d118      	bne.n	8002350 <Draw_Keyboard+0x378>
				BSP_LCD_DisplayStringAt(j*48+44, y+i*28+6, (uint8_t *)"OK", LEFT_MODE);
 800231e:	7b3b      	ldrb	r3, [r7, #12]
 8002320:	b29b      	uxth	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	0052      	lsls	r2, r2, #1
 8002326:	4413      	add	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	b29b      	uxth	r3, r3
 800232c:	332c      	adds	r3, #44	; 0x2c
 800232e:	b298      	uxth	r0, r3
 8002330:	7b7b      	ldrb	r3, [r7, #13]
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	00d2      	lsls	r2, r2, #3
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	b29a      	uxth	r2, r3
 800233e:	897b      	ldrh	r3, [r7, #10]
 8002340:	4413      	add	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	3306      	adds	r3, #6
 8002346:	b299      	uxth	r1, r3
 8002348:	2303      	movs	r3, #3
 800234a:	4a2e      	ldr	r2, [pc, #184]	; (8002404 <Draw_Keyboard+0x42c>)
 800234c:	f002 fad8 	bl	8004900 <BSP_LCD_DisplayStringAt>
			}
			if(i == 3 && j == 0){
 8002350:	7b7b      	ldrb	r3, [r7, #13]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d127      	bne.n	80023a6 <Draw_Keyboard+0x3ce>
 8002356:	7b3b      	ldrb	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d124      	bne.n	80023a6 <Draw_Keyboard+0x3ce>
				if(MAJ_ENABLE)BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <Draw_Keyboard+0x390>
 8002362:	4829      	ldr	r0, [pc, #164]	; (8002408 <Draw_Keyboard+0x430>)
 8002364:	f002 fa2c 	bl	80047c0 <BSP_LCD_SetBackColor>
				BSP_LCD_DisplayStringAt(j*48+2+26, y+i*28+6, (uint8_t *)"MAJ", LEFT_MODE);
 8002368:	7b3b      	ldrb	r3, [r7, #12]
 800236a:	b29b      	uxth	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	0052      	lsls	r2, r2, #1
 8002370:	4413      	add	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	b29b      	uxth	r3, r3
 8002376:	331c      	adds	r3, #28
 8002378:	b298      	uxth	r0, r3
 800237a:	7b7b      	ldrb	r3, [r7, #13]
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	00d2      	lsls	r2, r2, #3
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	b29a      	uxth	r2, r3
 8002388:	897b      	ldrh	r3, [r7, #10]
 800238a:	4413      	add	r3, r2
 800238c:	b29b      	uxth	r3, r3
 800238e:	3306      	adds	r3, #6
 8002390:	b299      	uxth	r1, r3
 8002392:	2303      	movs	r3, #3
 8002394:	4a1d      	ldr	r2, [pc, #116]	; (800240c <Draw_Keyboard+0x434>)
 8002396:	f002 fab3 	bl	8004900 <BSP_LCD_DisplayStringAt>
				if(MAJ_ENABLE)BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <Draw_Keyboard+0x3ce>
 80023a0:	481b      	ldr	r0, [pc, #108]	; (8002410 <Draw_Keyboard+0x438>)
 80023a2:	f002 fa0d 	bl	80047c0 <BSP_LCD_SetBackColor>
			}
			if(i == 4 && j == 2){
 80023a6:	7b7b      	ldrb	r3, [r7, #13]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d113      	bne.n	80023d4 <Draw_Keyboard+0x3fc>
 80023ac:	7b3b      	ldrb	r3, [r7, #12]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d110      	bne.n	80023d4 <Draw_Keyboard+0x3fc>
				BSP_LCD_DisplayStringAt(230, y+i*28+2, (uint8_t *)"__", LEFT_MODE);
 80023b2:	7b7b      	ldrb	r3, [r7, #13]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	00d2      	lsls	r2, r2, #3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	b29a      	uxth	r2, r3
 80023c0:	897b      	ldrh	r3, [r7, #10]
 80023c2:	4413      	add	r3, r2
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3302      	adds	r3, #2
 80023c8:	b299      	uxth	r1, r3
 80023ca:	2303      	movs	r3, #3
 80023cc:	4a11      	ldr	r2, [pc, #68]	; (8002414 <Draw_Keyboard+0x43c>)
 80023ce:	20e6      	movs	r0, #230	; 0xe6
 80023d0:	f002 fa96 	bl	8004900 <BSP_LCD_DisplayStringAt>
		for(uint8_t j=0; j<10; j++){
 80023d4:	7b3b      	ldrb	r3, [r7, #12]
 80023d6:	3301      	adds	r3, #1
 80023d8:	733b      	strb	r3, [r7, #12]
 80023da:	7b3b      	ldrb	r3, [r7, #12]
 80023dc:	2b09      	cmp	r3, #9
 80023de:	f67f aefb 	bls.w	80021d8 <Draw_Keyboard+0x200>
	for(uint8_t i=0; i<5; i++){
 80023e2:	7b7b      	ldrb	r3, [r7, #13]
 80023e4:	3301      	adds	r3, #1
 80023e6:	737b      	strb	r3, [r7, #13]
 80023e8:	7b7b      	ldrb	r3, [r7, #13]
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	f67f aeeb 	bls.w	80021c6 <Draw_Keyboard+0x1ee>
			}
		}
	}
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bdb0      	pop	{r4, r5, r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000028 	.word	0x20000028
 8002400:	080176d4 	.word	0x080176d4
 8002404:	080176d8 	.word	0x080176d8
 8002408:	ffd3d3d3 	.word	0xffd3d3d3
 800240c:	080176dc 	.word	0x080176dc
 8002410:	ff808080 	.word	0xff808080
 8002414:	080176e0 	.word	0x080176e0

08002418 <Draw_GUI>:

void Draw_GUI(char gui, char state){
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	460a      	mov	r2, r1
 8002422:	71fb      	strb	r3, [r7, #7]
 8002424:	4613      	mov	r3, r2
 8002426:	71bb      	strb	r3, [r7, #6]
	SD_Instruction inst;

	switch (gui){
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	2b03      	cmp	r3, #3
 800242c:	f200 8099 	bhi.w	8002562 <Draw_GUI+0x14a>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <Draw_GUI+0x20>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	080024af 	.word	0x080024af
 8002440:	080024eb 	.word	0x080024eb
 8002444:	08002527 	.word	0x08002527
		case 0:
			Draw_GUI_SD(LCD_COLOR_LIGHTBLUE, 1);
 8002448:	2101      	movs	r1, #1
 800244a:	4849      	ldr	r0, [pc, #292]	; (8002570 <Draw_GUI+0x158>)
 800244c:	f000 f898 	bl	8002580 <Draw_GUI_SD>
			Draw_GUI_SD(LCD_COLOR_LIGHTBLUE, 2);
 8002450:	2102      	movs	r1, #2
 8002452:	4847      	ldr	r0, [pc, #284]	; (8002570 <Draw_GUI+0x158>)
 8002454:	f000 f894 	bl	8002580 <Draw_GUI_SD>
			Draw_GUI_SD(LCD_COLOR_LIGHTBLUE, 3);
 8002458:	2103      	movs	r1, #3
 800245a:	4845      	ldr	r0, [pc, #276]	; (8002570 <Draw_GUI+0x158>)
 800245c:	f000 f890 	bl	8002580 <Draw_GUI_SD>

			Play[0].X = GUI_VOC_PLAY_x+15;
 8002460:	4b44      	ldr	r3, [pc, #272]	; (8002574 <Draw_GUI+0x15c>)
 8002462:	22f5      	movs	r2, #245	; 0xf5
 8002464:	801a      	strh	r2, [r3, #0]
			Play[0].Y = GUI_VOC_y+15;
 8002466:	4b43      	ldr	r3, [pc, #268]	; (8002574 <Draw_GUI+0x15c>)
 8002468:	22eb      	movs	r2, #235	; 0xeb
 800246a:	805a      	strh	r2, [r3, #2]
			Play[1].X = GUI_VOC_PLAY_x+25;
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <Draw_GUI+0x15c>)
 800246e:	22ff      	movs	r2, #255	; 0xff
 8002470:	809a      	strh	r2, [r3, #4]
			Play[1].Y = GUI_VOC_y+20;
 8002472:	4b40      	ldr	r3, [pc, #256]	; (8002574 <Draw_GUI+0x15c>)
 8002474:	22f0      	movs	r2, #240	; 0xf0
 8002476:	80da      	strh	r2, [r3, #6]
			Play[2].X = GUI_VOC_PLAY_x+15;
 8002478:	4b3e      	ldr	r3, [pc, #248]	; (8002574 <Draw_GUI+0x15c>)
 800247a:	22f5      	movs	r2, #245	; 0xf5
 800247c:	811a      	strh	r2, [r3, #8]
			Play[2].Y = GUI_VOC_y+25;
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <Draw_GUI+0x15c>)
 8002480:	22f5      	movs	r2, #245	; 0xf5
 8002482:	815a      	strh	r2, [r3, #10]

			Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 1);
 8002484:	2101      	movs	r1, #1
 8002486:	483c      	ldr	r0, [pc, #240]	; (8002578 <Draw_GUI+0x160>)
 8002488:	f000 f8da 	bl	8002640 <Draw_GUI_VOC>
			Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 2);
 800248c:	2102      	movs	r1, #2
 800248e:	483a      	ldr	r0, [pc, #232]	; (8002578 <Draw_GUI+0x160>)
 8002490:	f000 f8d6 	bl	8002640 <Draw_GUI_VOC>
			Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 3);
 8002494:	2103      	movs	r1, #3
 8002496:	4838      	ldr	r0, [pc, #224]	; (8002578 <Draw_GUI+0x160>)
 8002498:	f000 f8d2 	bl	8002640 <Draw_GUI_VOC>
			Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 4);
 800249c:	2104      	movs	r1, #4
 800249e:	4836      	ldr	r0, [pc, #216]	; (8002578 <Draw_GUI+0x160>)
 80024a0:	f000 f8ce 	bl	8002640 <Draw_GUI_VOC>
			Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 5);
 80024a4:	2105      	movs	r1, #5
 80024a6:	4834      	ldr	r0, [pc, #208]	; (8002578 <Draw_GUI+0x160>)
 80024a8:	f000 f8ca 	bl	8002640 <Draw_GUI_VOC>
			break;
 80024ac:	e05c      	b.n	8002568 <Draw_GUI+0x150>

		case 1:
			switch(state){
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <Draw_GUI+0xa2>
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d010      	beq.n	80024da <Draw_GUI+0xc2>
 80024b8:	e014      	b.n	80024e4 <Draw_GUI+0xcc>
				case 0:
					Draw_GUI_SD(LCD_COLOR_LIGHTGREEN, 1);
 80024ba:	2101      	movs	r1, #1
 80024bc:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 80024c0:	f000 f85e 	bl	8002580 <Draw_GUI_SD>
					inst = MOUNT;
 80024c4:	2306      	movs	r3, #6
 80024c6:	73fb      	strb	r3, [r7, #15]
					xQueueSend(SD_instructionHandle, &inst, 0);
 80024c8:	4b2c      	ldr	r3, [pc, #176]	; (800257c <Draw_GUI+0x164>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	f107 010f 	add.w	r1, r7, #15
 80024d0:	2300      	movs	r3, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	f011 ff64 	bl	80143a0 <xQueueGenericSend>
					break;
 80024d8:	e007      	b.n	80024ea <Draw_GUI+0xd2>

				case 1:
					Draw_GUI_SD(LCD_COLOR_LIGHTBLUE, 1);
 80024da:	2101      	movs	r1, #1
 80024dc:	4824      	ldr	r0, [pc, #144]	; (8002570 <Draw_GUI+0x158>)
 80024de:	f000 f84f 	bl	8002580 <Draw_GUI_SD>
					break;
 80024e2:	e002      	b.n	80024ea <Draw_GUI+0xd2>

				default:
					state = 1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	71bb      	strb	r3, [r7, #6]
					break;
 80024e8:	bf00      	nop
			}

		case 2:
			switch(state){
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <Draw_GUI+0xde>
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d010      	beq.n	8002516 <Draw_GUI+0xfe>
 80024f4:	e014      	b.n	8002520 <Draw_GUI+0x108>
				case 0:
					Draw_GUI_SD(LCD_COLOR_LIGHTGREEN, 2);
 80024f6:	2102      	movs	r1, #2
 80024f8:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 80024fc:	f000 f840 	bl	8002580 <Draw_GUI_SD>
					inst = UNMOUNT;
 8002500:	2305      	movs	r3, #5
 8002502:	73fb      	strb	r3, [r7, #15]
					xQueueSend(SD_instructionHandle, &inst, 0);
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <Draw_GUI+0x164>)
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	f107 010f 	add.w	r1, r7, #15
 800250c:	2300      	movs	r3, #0
 800250e:	2200      	movs	r2, #0
 8002510:	f011 ff46 	bl	80143a0 <xQueueGenericSend>
					break;
 8002514:	e007      	b.n	8002526 <Draw_GUI+0x10e>

				case 1:
					Draw_GUI_SD(LCD_COLOR_LIGHTBLUE, 2);
 8002516:	2102      	movs	r1, #2
 8002518:	4815      	ldr	r0, [pc, #84]	; (8002570 <Draw_GUI+0x158>)
 800251a:	f000 f831 	bl	8002580 <Draw_GUI_SD>
					break;
 800251e:	e002      	b.n	8002526 <Draw_GUI+0x10e>

				default:
					state = 1;
 8002520:	2301      	movs	r3, #1
 8002522:	71bb      	strb	r3, [r7, #6]
					break;
 8002524:	bf00      	nop
			}

		case 3:
			switch(state){
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <Draw_GUI+0x11a>
 800252c:	2b01      	cmp	r3, #1
 800252e:	d010      	beq.n	8002552 <Draw_GUI+0x13a>
 8002530:	e014      	b.n	800255c <Draw_GUI+0x144>
				case 0:
					Draw_GUI_SD(LCD_COLOR_LIGHTGREEN, 3);
 8002532:	2103      	movs	r1, #3
 8002534:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 8002538:	f000 f822 	bl	8002580 <Draw_GUI_SD>
					inst = FORMAT;
 800253c:	2307      	movs	r3, #7
 800253e:	73fb      	strb	r3, [r7, #15]
					xQueueSend(SD_instructionHandle, &inst, 0);
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <Draw_GUI+0x164>)
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	f107 010f 	add.w	r1, r7, #15
 8002548:	2300      	movs	r3, #0
 800254a:	2200      	movs	r2, #0
 800254c:	f011 ff28 	bl	80143a0 <xQueueGenericSend>
					break;
 8002550:	e007      	b.n	8002562 <Draw_GUI+0x14a>

				case 1:
					Draw_GUI_SD(LCD_COLOR_LIGHTBLUE, 3);
 8002552:	2103      	movs	r1, #3
 8002554:	4806      	ldr	r0, [pc, #24]	; (8002570 <Draw_GUI+0x158>)
 8002556:	f000 f813 	bl	8002580 <Draw_GUI_SD>
					break;
 800255a:	e002      	b.n	8002562 <Draw_GUI+0x14a>

				default:
					state = 1;
 800255c:	2301      	movs	r3, #1
 800255e:	71bb      	strb	r3, [r7, #6]
					break;
 8002560:	bf00      	nop
			}

		default:
			gui = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	71fb      	strb	r3, [r7, #7]
			break;
 8002566:	bf00      	nop
	}
}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	ff8080ff 	.word	0xff8080ff
 8002574:	2000fa80 	.word	0x2000fa80
 8002578:	ffd3d3d3 	.word	0xffd3d3d3
 800257c:	2000fb00 	.word	0x2000fb00

08002580 <Draw_GUI_SD>:

void Draw_GUI_SD(uint32_t color, char bt){
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
	BSP_LCD_SetTextColor(color);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f002 f8ff 	bl	8004790 <BSP_LCD_SetTextColor>

	switch(bt){
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d030      	beq.n	80025fa <Draw_GUI_SD+0x7a>
 8002598:	2b03      	cmp	r3, #3
 800259a:	dc43      	bgt.n	8002624 <Draw_GUI_SD+0xa4>
 800259c:	2b01      	cmp	r3, #1
 800259e:	d002      	beq.n	80025a6 <Draw_GUI_SD+0x26>
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d015      	beq.n	80025d0 <Draw_GUI_SD+0x50>
 80025a4:	e03e      	b.n	8002624 <Draw_GUI_SD+0xa4>
		case 1:
			BSP_LCD_FillRect(GUI_SD_x, GUI_SD_MOUNT_y, GUI_width, GUI_height);
 80025a6:	2332      	movs	r3, #50	; 0x32
 80025a8:	2250      	movs	r2, #80	; 0x50
 80025aa:	2132      	movs	r1, #50	; 0x32
 80025ac:	f44f 70be 	mov.w	r0, #380	; 0x17c
 80025b0:	f002 fc6c 	bl	8004e8c <BSP_LCD_FillRect>

			BSP_LCD_SetBackColor(color);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f002 f903 	bl	80047c0 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80025ba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80025be:	f002 f8e7 	bl	8004790 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(GUI_SD_x/2-6, GUI_SD_MOUNT_y+GUI_height/2-6, (uint8_t*) "MOUNT", CENTER_MODE);
 80025c2:	2301      	movs	r3, #1
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <Draw_GUI_SD+0xb4>)
 80025c6:	2145      	movs	r1, #69	; 0x45
 80025c8:	20b8      	movs	r0, #184	; 0xb8
 80025ca:	f002 f999 	bl	8004900 <BSP_LCD_DisplayStringAt>
			break;
 80025ce:	e02c      	b.n	800262a <Draw_GUI_SD+0xaa>

		case 2:
			BSP_LCD_FillRect(GUI_SD_x, GUI_SD_UNMOUNT_y, GUI_width, GUI_height);
 80025d0:	2332      	movs	r3, #50	; 0x32
 80025d2:	2250      	movs	r2, #80	; 0x50
 80025d4:	2178      	movs	r1, #120	; 0x78
 80025d6:	f44f 70be 	mov.w	r0, #380	; 0x17c
 80025da:	f002 fc57 	bl	8004e8c <BSP_LCD_FillRect>

			BSP_LCD_SetBackColor(color);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f002 f8ee 	bl	80047c0 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80025e4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80025e8:	f002 f8d2 	bl	8004790 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(GUI_SD_x/2-6, GUI_SD_UNMOUNT_y+GUI_height/2-6, (uint8_t*) "UNMOUNT", CENTER_MODE);
 80025ec:	2301      	movs	r3, #1
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <Draw_GUI_SD+0xb8>)
 80025f0:	218b      	movs	r1, #139	; 0x8b
 80025f2:	20b8      	movs	r0, #184	; 0xb8
 80025f4:	f002 f984 	bl	8004900 <BSP_LCD_DisplayStringAt>
			break;
 80025f8:	e017      	b.n	800262a <Draw_GUI_SD+0xaa>

		case 3:
			BSP_LCD_FillRect(GUI_SD_x, GUI_SD_FORMAT_y, GUI_width, GUI_height);
 80025fa:	2332      	movs	r3, #50	; 0x32
 80025fc:	2250      	movs	r2, #80	; 0x50
 80025fe:	21be      	movs	r1, #190	; 0xbe
 8002600:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8002604:	f002 fc42 	bl	8004e8c <BSP_LCD_FillRect>

			BSP_LCD_SetBackColor(color);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f002 f8d9 	bl	80047c0 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800260e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002612:	f002 f8bd 	bl	8004790 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(GUI_SD_x/2-6, GUI_SD_FORMAT_y+GUI_height/2-6, (uint8_t*) "FORMAT", CENTER_MODE);
 8002616:	2301      	movs	r3, #1
 8002618:	4a08      	ldr	r2, [pc, #32]	; (800263c <Draw_GUI_SD+0xbc>)
 800261a:	21d1      	movs	r1, #209	; 0xd1
 800261c:	20b8      	movs	r0, #184	; 0xb8
 800261e:	f002 f96f 	bl	8004900 <BSP_LCD_DisplayStringAt>
			break;
 8002622:	e002      	b.n	800262a <Draw_GUI_SD+0xaa>

		default:
			bt = 1;
 8002624:	2301      	movs	r3, #1
 8002626:	70fb      	strb	r3, [r7, #3]
			break;
 8002628:	bf00      	nop
	}
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	080176e4 	.word	0x080176e4
 8002638:	080176ec 	.word	0x080176ec
 800263c:	080176f4 	.word	0x080176f4

08002640 <Draw_GUI_VOC>:

void Draw_GUI_VOC(uint32_t color, char bt){
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	70fb      	strb	r3, [r7, #3]
	BSP_LCD_SetTextColor(color);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f002 f89f 	bl	8004790 <BSP_LCD_SetTextColor>

	switch(bt){
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	3b01      	subs	r3, #1
 8002656:	2b04      	cmp	r3, #4
 8002658:	d870      	bhi.n	800273c <Draw_GUI_VOC+0xfc>
 800265a:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <Draw_GUI_VOC+0x20>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	08002675 	.word	0x08002675
 8002664:	0800269d 	.word	0x0800269d
 8002668:	080026c5 	.word	0x080026c5
 800266c:	080026ed 	.word	0x080026ed
 8002670:	08002711 	.word	0x08002711
		case 1:
			BSP_LCD_FillRect(GUI_VOC_PREV_x, GUI_VOC_y, GUI_VOC_width, GUI_VOC_height);
 8002674:	2328      	movs	r3, #40	; 0x28
 8002676:	2228      	movs	r2, #40	; 0x28
 8002678:	21dc      	movs	r1, #220	; 0xdc
 800267a:	2032      	movs	r0, #50	; 0x32
 800267c:	f002 fc06 	bl	8004e8c <BSP_LCD_FillRect>
			BSP_LCD_SetBackColor(color);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f002 f89d 	bl	80047c0 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002686:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800268a:	f002 f881 	bl	8004790 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(GUI_VOC_PREV_x+GUI_VOC_width/2-8, GUI_VOC_y+14, (uint8_t*) "<<", LEFT_MODE);
 800268e:	2303      	movs	r3, #3
 8002690:	4a2e      	ldr	r2, [pc, #184]	; (800274c <Draw_GUI_VOC+0x10c>)
 8002692:	21ea      	movs	r1, #234	; 0xea
 8002694:	203e      	movs	r0, #62	; 0x3e
 8002696:	f002 f933 	bl	8004900 <BSP_LCD_DisplayStringAt>
			break;
 800269a:	e052      	b.n	8002742 <Draw_GUI_VOC+0x102>

		case 2:
			BSP_LCD_FillRect(GUI_VOC_NEXT_x, GUI_VOC_y, GUI_VOC_width, GUI_VOC_height);
 800269c:	2328      	movs	r3, #40	; 0x28
 800269e:	2228      	movs	r2, #40	; 0x28
 80026a0:	21dc      	movs	r1, #220	; 0xdc
 80026a2:	206e      	movs	r0, #110	; 0x6e
 80026a4:	f002 fbf2 	bl	8004e8c <BSP_LCD_FillRect>
			BSP_LCD_SetBackColor(color);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f002 f889 	bl	80047c0 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80026ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80026b2:	f002 f86d 	bl	8004790 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(GUI_VOC_NEXT_x+GUI_VOC_width/2-8, GUI_VOC_y+14, (uint8_t*) ">>", LEFT_MODE);
 80026b6:	2303      	movs	r3, #3
 80026b8:	4a25      	ldr	r2, [pc, #148]	; (8002750 <Draw_GUI_VOC+0x110>)
 80026ba:	21ea      	movs	r1, #234	; 0xea
 80026bc:	207a      	movs	r0, #122	; 0x7a
 80026be:	f002 f91f 	bl	8004900 <BSP_LCD_DisplayStringAt>
			break;
 80026c2:	e03e      	b.n	8002742 <Draw_GUI_VOC+0x102>

		case 3:
			BSP_LCD_FillRect(GUI_VOC_REC_x, GUI_VOC_y, GUI_VOC_width, GUI_VOC_height);
 80026c4:	2328      	movs	r3, #40	; 0x28
 80026c6:	2228      	movs	r2, #40	; 0x28
 80026c8:	21dc      	movs	r1, #220	; 0xdc
 80026ca:	20aa      	movs	r0, #170	; 0xaa
 80026cc:	f002 fbde 	bl	8004e8c <BSP_LCD_FillRect>
			BSP_LCD_SetBackColor(color);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f002 f875 	bl	80047c0 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80026d6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80026da:	f002 f859 	bl	8004790 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(GUI_VOC_REC_x+15, GUI_VOC_y+15, GUI_VOC_width-30, GUI_VOC_height-30);
 80026de:	230a      	movs	r3, #10
 80026e0:	220a      	movs	r2, #10
 80026e2:	21eb      	movs	r1, #235	; 0xeb
 80026e4:	20b9      	movs	r0, #185	; 0xb9
 80026e6:	f002 fbd1 	bl	8004e8c <BSP_LCD_FillRect>
			break;
 80026ea:	e02a      	b.n	8002742 <Draw_GUI_VOC+0x102>

		case 4:
			BSP_LCD_FillRect(GUI_VOC_PLAY_x, GUI_VOC_y, GUI_VOC_width, GUI_VOC_height);
 80026ec:	2328      	movs	r3, #40	; 0x28
 80026ee:	2228      	movs	r2, #40	; 0x28
 80026f0:	21dc      	movs	r1, #220	; 0xdc
 80026f2:	20e6      	movs	r0, #230	; 0xe6
 80026f4:	f002 fbca 	bl	8004e8c <BSP_LCD_FillRect>
			BSP_LCD_SetBackColor(color);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f002 f861 	bl	80047c0 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80026fe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002702:	f002 f845 	bl	8004790 <BSP_LCD_SetTextColor>
			BSP_LCD_FillPolygon(Play, 3);
 8002706:	2103      	movs	r1, #3
 8002708:	4812      	ldr	r0, [pc, #72]	; (8002754 <Draw_GUI_VOC+0x114>)
 800270a:	f002 fc39 	bl	8004f80 <BSP_LCD_FillPolygon>
			break;
 800270e:	e018      	b.n	8002742 <Draw_GUI_VOC+0x102>

		case 5:
			BSP_LCD_FillRect(GUI_SAVE_x, GUI_VOC_y, GUI_SAVE_width, GUI_VOC_height);
 8002710:	2328      	movs	r3, #40	; 0x28
 8002712:	2246      	movs	r2, #70	; 0x46
 8002714:	21dc      	movs	r1, #220	; 0xdc
 8002716:	f44f 7091 	mov.w	r0, #290	; 0x122
 800271a:	f002 fbb7 	bl	8004e8c <BSP_LCD_FillRect>
			BSP_LCD_SetBackColor(color);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f002 f84e 	bl	80047c0 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002724:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002728:	f002 f832 	bl	8004790 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(GUI_SAVE_x+GUI_SAVE_width/2-15, GUI_VOC_y+14, (uint8_t*) "SAVE", LEFT_MODE);
 800272c:	2303      	movs	r3, #3
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <Draw_GUI_VOC+0x118>)
 8002730:	21ea      	movs	r1, #234	; 0xea
 8002732:	f44f 709b 	mov.w	r0, #310	; 0x136
 8002736:	f002 f8e3 	bl	8004900 <BSP_LCD_DisplayStringAt>
			break;
 800273a:	e002      	b.n	8002742 <Draw_GUI_VOC+0x102>

		default:
			bt = 1;
 800273c:	2301      	movs	r3, #1
 800273e:	70fb      	strb	r3, [r7, #3]
			break;
 8002740:	bf00      	nop
	}
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	080176fc 	.word	0x080176fc
 8002750:	08017700 	.word	0x08017700
 8002754:	2000fa80 	.word	0x2000fa80
 8002758:	08017704 	.word	0x08017704

0800275c <Error_Display>:
void Error_Display(int error){
 800275c:	b580      	push	{r7, lr}
 800275e:	b090      	sub	sp, #64	; 0x40
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	// SD error code display
	char error_code[50];
	sprintf(error_code, "SD Error : %d", error);
 8002764:	f107 030c 	add.w	r3, r7, #12
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	490e      	ldr	r1, [pc, #56]	; (80027a4 <Error_Display+0x48>)
 800276c:	4618      	mov	r0, r3
 800276e:	f014 fadb 	bl	8016d28 <siprintf>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002772:	f04f 30ff 	mov.w	r0, #4294967295
 8002776:	f002 f823 	bl	80047c0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800277a:	480b      	ldr	r0, [pc, #44]	; (80027a8 <Error_Display+0x4c>)
 800277c:	f002 f808 	bl	8004790 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 70, (uint8_t *)error_code, CENTER_MODE);
 8002780:	f001 ff44 	bl	800460c <BSP_LCD_GetYSize>
 8002784:	4603      	mov	r3, r0
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b46      	subs	r3, #70	; 0x46
 800278a:	b299      	uxth	r1, r3
 800278c:	f107 020c 	add.w	r2, r7, #12
 8002790:	2301      	movs	r3, #1
 8002792:	2000      	movs	r0, #0
 8002794:	f002 f8b4 	bl	8004900 <BSP_LCD_DisplayStringAt>
	Error_Handler();
 8002798:	f001 f866 	bl	8003868 <Error_Handler>
}
 800279c:	bf00      	nop
 800279e:	3740      	adds	r7, #64	; 0x40
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	0801770c 	.word	0x0801770c
 80027a8:	ffff0000 	.word	0xffff0000

080027ac <InputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InputTask */
void InputTask(void const * argument)
{
 80027ac:	b5b0      	push	{r4, r5, r7, lr}
 80027ae:	b0a6      	sub	sp, #152	; 0x98
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InputTask */
	uint16_t x = 20, y = 20;
 80027b4:	2314      	movs	r3, #20
 80027b6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80027ba:	2314      	movs	r3, #20
 80027bc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	uint16_t Width = MAX_c*7;
 80027c0:	23d2      	movs	r3, #210	; 0xd2
 80027c2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	uint16_t Height = 12;
 80027c6:	230c      	movs	r3, #12
 80027c8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint8_t text[8] = "Name : ";
 80027cc:	4ac7      	ldr	r2, [pc, #796]	; (8002aec <InputTask+0x340>)
 80027ce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t len = 7*strlen((char *)text);
 80027da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fd16 	bl	8000210 <strlen>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	00d2      	lsls	r2, r2, #3
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	TS_StateTypeDef  prev_state;
	TS_StateTypeDef TS_State;

	uint8_t state = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t idx_d = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

	SD_Instruction inst;

	// Input area
	BSP_LCD_SetTextColor(0xFFEEEEEE);
 80027fe:	48bc      	ldr	r0, [pc, #752]	; (8002af0 <InputTask+0x344>)
 8002800:	f001 ffc6 	bl	8004790 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x+len, y, x+Width-len, Height);
 8002804:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8002808:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800280c:	4413      	add	r3, r2
 800280e:	b298      	uxth	r0, r3
 8002810:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8002814:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002818:	4413      	add	r3, r2
 800281a:	b29a      	uxth	r2, r3
 800281c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	b29a      	uxth	r2, r3
 8002824:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002828:	f8b7 1092 	ldrh.w	r1, [r7, #146]	; 0x92
 800282c:	f002 fb2e 	bl	8004e8c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002830:	48b0      	ldr	r0, [pc, #704]	; (8002af4 <InputTask+0x348>)
 8002832:	f001 ffad 	bl	8004790 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(x, y, text, LEFT_MODE);
 8002836:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800283a:	f8b7 1092 	ldrh.w	r1, [r7, #146]	; 0x92
 800283e:	f8b7 0094 	ldrh.w	r0, [r7, #148]	; 0x94
 8002842:	2303      	movs	r3, #3
 8002844:	f002 f85c 	bl	8004900 <BSP_LCD_DisplayStringAt>

	// GUI
	Draw_GUI(0,0);
 8002848:	2100      	movs	r1, #0
 800284a:	2000      	movs	r0, #0
 800284c:	f7ff fde4 	bl	8002418 <Draw_GUI>

	// Word
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002850:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002854:	f001 ff9c 	bl	8004790 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f001 ffb0 	bl	80047c0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(50,100, (uint8_t *) Dico[idx_d], LEFT_MODE);
 8002860:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4aa4      	ldr	r2, [pc, #656]	; (8002af8 <InputTask+0x34c>)
 8002868:	441a      	add	r2, r3
 800286a:	2303      	movs	r3, #3
 800286c:	2164      	movs	r1, #100	; 0x64
 800286e:	2032      	movs	r0, #50	; 0x32
 8002870:	f002 f846 	bl	8004900 <BSP_LCD_DisplayStringAt>

	sprintf((char *)dir_name,"/data");
 8002874:	49a1      	ldr	r1, [pc, #644]	; (8002afc <InputTask+0x350>)
 8002876:	48a2      	ldr	r0, [pc, #648]	; (8002b00 <InputTask+0x354>)
 8002878:	f014 fa56 	bl	8016d28 <siprintf>
	inst = F_MKDIR;
 800287c:	2308      	movs	r3, #8
 800287e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	xQueueSend(SD_instructionHandle, &inst, 0);
 8002882:	4ba0      	ldr	r3, [pc, #640]	; (8002b04 <InputTask+0x358>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 800288a:	2300      	movs	r3, #0
 800288c:	2200      	movs	r2, #0
 800288e:	f011 fd87 	bl	80143a0 <xQueueGenericSend>
	/* Infinite loop */
	for(;;)
	{
		// Display user name
		xSemaphoreTake(mutex_LCDHandle, portMAX_DELAY);
 8002892:	4b9d      	ldr	r3, [pc, #628]	; (8002b08 <InputTask+0x35c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f04f 31ff 	mov.w	r1, #4294967295
 800289a:	4618      	mov	r0, r3
 800289c:	f012 f8a2 	bl	80149e4 <xQueueSemaphoreTake>
		BSP_LCD_SetTextColor(0xFFEEEEEE);
 80028a0:	4893      	ldr	r0, [pc, #588]	; (8002af0 <InputTask+0x344>)
 80028a2:	f001 ff75 	bl	8004790 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+len, y, x+Width-len, Height);
 80028a6:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80028aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80028ae:	4413      	add	r3, r2
 80028b0:	b298      	uxth	r0, r3
 80028b2:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80028b6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80028ba:	4413      	add	r3, r2
 80028bc:	b29a      	uxth	r2, r3
 80028be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80028ca:	f8b7 1092 	ldrh.w	r1, [r7, #146]	; 0x92
 80028ce:	f002 fadd 	bl	8004e8c <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80028d2:	4888      	ldr	r0, [pc, #544]	; (8002af4 <InputTask+0x348>)
 80028d4:	f001 ff5c 	bl	8004790 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x, y, text, LEFT_MODE);
 80028d8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80028dc:	f8b7 1092 	ldrh.w	r1, [r7, #146]	; 0x92
 80028e0:	f8b7 0094 	ldrh.w	r0, [r7, #148]	; 0x94
 80028e4:	2303      	movs	r3, #3
 80028e6:	f002 f80b 	bl	8004900 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font12);
 80028ea:	4888      	ldr	r0, [pc, #544]	; (8002b0c <InputTask+0x360>)
 80028ec:	f001 ff82 	bl	80047f4 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80028f0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80028f4:	f001 ff4c 	bl	8004790 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f001 ff60 	bl	80047c0 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(69, 20,(uint8_t *) Name, LEFT_MODE);
 8002900:	2303      	movs	r3, #3
 8002902:	4a83      	ldr	r2, [pc, #524]	; (8002b10 <InputTask+0x364>)
 8002904:	2114      	movs	r1, #20
 8002906:	2045      	movs	r0, #69	; 0x45
 8002908:	f001 fffa 	bl	8004900 <BSP_LCD_DisplayStringAt>
		xSemaphoreGive(mutex_LCDHandle);
 800290c:	4b7e      	ldr	r3, [pc, #504]	; (8002b08 <InputTask+0x35c>)
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	2300      	movs	r3, #0
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	f011 fd43 	bl	80143a0 <xQueueGenericSend>

		// TS waiter
		BSP_TS_GetState(&TS_State);
 800291a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291e:	4618      	mov	r0, r3
 8002920:	f003 f8e0 	bl	8005ae4 <BSP_TS_GetState>
		if(TS_State.touchDetected != prev_state.touchDetected && TS_State.touchDetected < 2){
 8002924:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002928:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800292c:	429a      	cmp	r2, r3
 800292e:	f000 834a 	beq.w	8002fc6 <InputTask+0x81a>
 8002932:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002936:	2b01      	cmp	r3, #1
 8002938:	f200 8345 	bhi.w	8002fc6 <InputTask+0x81a>
			prev_state.touchDetected = TS_State.touchDetected;
 800293c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002940:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
			switch (state){
 8002944:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002948:	2b0d      	cmp	r3, #13
 800294a:	f200 8338 	bhi.w	8002fbe <InputTask+0x812>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <InputTask+0x1a8>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	0800298d 	.word	0x0800298d
 8002958:	08002b4d 	.word	0x08002b4d
 800295c:	08002bd1 	.word	0x08002bd1
 8002960:	08002c0d 	.word	0x08002c0d
 8002964:	08002c49 	.word	0x08002c49
 8002968:	08002c85 	.word	0x08002c85
 800296c:	08002cff 	.word	0x08002cff
 8002970:	08002d79 	.word	0x08002d79
 8002974:	08002dfb 	.word	0x08002dfb
 8002978:	08002e55 	.word	0x08002e55
 800297c:	08002ec1 	.word	0x08002ec1
 8002980:	08002f05 	.word	0x08002f05
 8002984:	08002f31 	.word	0x08002f31
 8002988:	08002f63 	.word	0x08002f63
				// If input area touched
				case 0:
					etat = 1;
 800298c:	4b61      	ldr	r3, [pc, #388]	; (8002b14 <InputTask+0x368>)
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
					if(TS_State.touchX[0] >= x+len && TS_State.touchX[0] <= x+Width+len &&
 8002992:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002994:	4619      	mov	r1, r3
 8002996:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800299a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800299e:	4413      	add	r3, r2
 80029a0:	4299      	cmp	r1, r3
 80029a2:	db20      	blt.n	80029e6 <InputTask+0x23a>
 80029a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029a6:	4619      	mov	r1, r3
 80029a8:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80029ac:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80029b0:	441a      	add	r2, r3
 80029b2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80029b6:	4413      	add	r3, r2
 80029b8:	4299      	cmp	r1, r3
 80029ba:	dc14      	bgt.n	80029e6 <InputTask+0x23a>
						TS_State.touchY[0] >= y-10 && TS_State.touchY[0] <= y+Height+10){
 80029bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80029be:	461a      	mov	r2, r3
 80029c0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80029c4:	3b0a      	subs	r3, #10
					if(TS_State.touchX[0] >= x+len && TS_State.touchX[0] <= x+Width+len &&
 80029c6:	429a      	cmp	r2, r3
 80029c8:	db0d      	blt.n	80029e6 <InputTask+0x23a>
						TS_State.touchY[0] >= y-10 && TS_State.touchY[0] <= y+Height+10){
 80029ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80029cc:	4619      	mov	r1, r3
 80029ce:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80029d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80029d6:	4413      	add	r3, r2
 80029d8:	330a      	adds	r3, #10
 80029da:	4299      	cmp	r1, r3
 80029dc:	dc03      	bgt.n	80029e6 <InputTask+0x23a>
						state = 1;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80029e4:	e0b1      	b.n	8002b4a <InputTask+0x39e>

					} else if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 80029e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029e8:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 80029ec:	d30d      	bcc.n	8002a0a <InputTask+0x25e>
 80029ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029f0:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80029f4:	d809      	bhi.n	8002a0a <InputTask+0x25e>
							TS_State.touchY[0] >= GUI_SD_MOUNT_y && TS_State.touchY[0] <= GUI_SD_MOUNT_y+GUI_height){
 80029f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					} else if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 80029f8:	2b31      	cmp	r3, #49	; 0x31
 80029fa:	d906      	bls.n	8002a0a <InputTask+0x25e>
							TS_State.touchY[0] >= GUI_SD_MOUNT_y && TS_State.touchY[0] <= GUI_SD_MOUNT_y+GUI_height){
 80029fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d803      	bhi.n	8002a0a <InputTask+0x25e>
						state = 2;
 8002a02:	2302      	movs	r3, #2
 8002a04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002a08:	e09f      	b.n	8002b4a <InputTask+0x39e>
					} else if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 8002a0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a0c:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002a10:	d30d      	bcc.n	8002a2e <InputTask+0x282>
 8002a12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a14:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8002a18:	d809      	bhi.n	8002a2e <InputTask+0x282>
							TS_State.touchY[0] >= GUI_SD_UNMOUNT_y && TS_State.touchY[0] <= GUI_SD_UNMOUNT_y+GUI_height){
 8002a1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					} else if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 8002a1c:	2b77      	cmp	r3, #119	; 0x77
 8002a1e:	d906      	bls.n	8002a2e <InputTask+0x282>
							TS_State.touchY[0] >= GUI_SD_UNMOUNT_y && TS_State.touchY[0] <= GUI_SD_UNMOUNT_y+GUI_height){
 8002a20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002a22:	2baa      	cmp	r3, #170	; 0xaa
 8002a24:	d803      	bhi.n	8002a2e <InputTask+0x282>
						state = 3;
 8002a26:	2303      	movs	r3, #3
 8002a28:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002a2c:	e08d      	b.n	8002b4a <InputTask+0x39e>
					} else if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 8002a2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a30:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002a34:	d30d      	bcc.n	8002a52 <InputTask+0x2a6>
 8002a36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a38:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8002a3c:	d809      	bhi.n	8002a52 <InputTask+0x2a6>
							TS_State.touchY[0] >= GUI_SD_FORMAT_y && TS_State.touchY[0] <= GUI_SD_FORMAT_y+GUI_height){
 8002a3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					} else if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 8002a40:	2bbd      	cmp	r3, #189	; 0xbd
 8002a42:	d906      	bls.n	8002a52 <InputTask+0x2a6>
							TS_State.touchY[0] >= GUI_SD_FORMAT_y && TS_State.touchY[0] <= GUI_SD_FORMAT_y+GUI_height){
 8002a44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002a46:	2bf0      	cmp	r3, #240	; 0xf0
 8002a48:	d803      	bhi.n	8002a52 <InputTask+0x2a6>
						state = 4;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002a50:	e07b      	b.n	8002b4a <InputTask+0x39e>
					} else if(TS_State.touchX[0] >= GUI_VOC_PREV_x && TS_State.touchX[0] <= (GUI_VOC_PREV_x + GUI_VOC_width) &&
 8002a52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a54:	2b31      	cmp	r3, #49	; 0x31
 8002a56:	d911      	bls.n	8002a7c <InputTask+0x2d0>
 8002a58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a5a:	2b5a      	cmp	r3, #90	; 0x5a
 8002a5c:	d80e      	bhi.n	8002a7c <InputTask+0x2d0>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002a5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					} else if(TS_State.touchX[0] >= GUI_VOC_PREV_x && TS_State.touchX[0] <= (GUI_VOC_PREV_x + GUI_VOC_width) &&
 8002a60:	2bdb      	cmp	r3, #219	; 0xdb
 8002a62:	d90b      	bls.n	8002a7c <InputTask+0x2d0>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002a64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a6a:	d807      	bhi.n	8002a7c <InputTask+0x2d0>
						Draw_GUI_VOC(LCD_COLOR_GRAY, 1);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	482a      	ldr	r0, [pc, #168]	; (8002b18 <InputTask+0x36c>)
 8002a70:	f7ff fde6 	bl	8002640 <Draw_GUI_VOC>
						state = 5;
 8002a74:	2305      	movs	r3, #5
 8002a76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002a7a:	e066      	b.n	8002b4a <InputTask+0x39e>
					} else if(TS_State.touchX[0] >= GUI_VOC_NEXT_x && TS_State.touchX[0] <= (GUI_VOC_NEXT_x + GUI_VOC_width) &&
 8002a7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a7e:	2b6d      	cmp	r3, #109	; 0x6d
 8002a80:	d911      	bls.n	8002aa6 <InputTask+0x2fa>
 8002a82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a84:	2b96      	cmp	r3, #150	; 0x96
 8002a86:	d80e      	bhi.n	8002aa6 <InputTask+0x2fa>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002a88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					} else if(TS_State.touchX[0] >= GUI_VOC_NEXT_x && TS_State.touchX[0] <= (GUI_VOC_NEXT_x + GUI_VOC_width) &&
 8002a8a:	2bdb      	cmp	r3, #219	; 0xdb
 8002a8c:	d90b      	bls.n	8002aa6 <InputTask+0x2fa>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002a8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a94:	d807      	bhi.n	8002aa6 <InputTask+0x2fa>
						Draw_GUI_VOC(LCD_COLOR_GRAY, 2);
 8002a96:	2102      	movs	r1, #2
 8002a98:	481f      	ldr	r0, [pc, #124]	; (8002b18 <InputTask+0x36c>)
 8002a9a:	f7ff fdd1 	bl	8002640 <Draw_GUI_VOC>
						state = 6;
 8002a9e:	2306      	movs	r3, #6
 8002aa0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002aa4:	e051      	b.n	8002b4a <InputTask+0x39e>
					} else if(TS_State.touchX[0] >= GUI_VOC_REC_x && TS_State.touchX[0] <= (GUI_VOC_REC_x + GUI_VOC_width) &&
 8002aa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aa8:	2ba9      	cmp	r3, #169	; 0xa9
 8002aaa:	d90d      	bls.n	8002ac8 <InputTask+0x31c>
 8002aac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aae:	2bd2      	cmp	r3, #210	; 0xd2
 8002ab0:	d80a      	bhi.n	8002ac8 <InputTask+0x31c>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002ab2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					} else if(TS_State.touchX[0] >= GUI_VOC_REC_x && TS_State.touchX[0] <= (GUI_VOC_REC_x + GUI_VOC_width) &&
 8002ab4:	2bdb      	cmp	r3, #219	; 0xdb
 8002ab6:	d907      	bls.n	8002ac8 <InputTask+0x31c>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002ab8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002abe:	d803      	bhi.n	8002ac8 <InputTask+0x31c>
						state = 7;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002ac6:	e040      	b.n	8002b4a <InputTask+0x39e>
					} else if(TS_State.touchX[0] >= GUI_VOC_PLAY_x && TS_State.touchX[0] <= (GUI_VOC_PLAY_x + GUI_VOC_width) &&
 8002ac8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aca:	2be5      	cmp	r3, #229	; 0xe5
 8002acc:	d926      	bls.n	8002b1c <InputTask+0x370>
 8002ace:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ad0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002ad4:	d822      	bhi.n	8002b1c <InputTask+0x370>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002ad6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					} else if(TS_State.touchX[0] >= GUI_VOC_PLAY_x && TS_State.touchX[0] <= (GUI_VOC_PLAY_x + GUI_VOC_width) &&
 8002ad8:	2bdb      	cmp	r3, #219	; 0xdb
 8002ada:	d91f      	bls.n	8002b1c <InputTask+0x370>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002adc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae2:	d81b      	bhi.n	8002b1c <InputTask+0x370>
						state = 8;
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002aea:	e02e      	b.n	8002b4a <InputTask+0x39e>
 8002aec:	08017740 	.word	0x08017740
 8002af0:	ffeeeeee 	.word	0xffeeeeee
 8002af4:	ff0000ff 	.word	0xff0000ff
 8002af8:	2000005c 	.word	0x2000005c
 8002afc:	0801771c 	.word	0x0801771c
 8002b00:	2000f980 	.word	0x2000f980
 8002b04:	2000fb00 	.word	0x2000fb00
 8002b08:	2000f77c 	.word	0x2000f77c
 8002b0c:	200002f4 	.word	0x200002f4
 8002b10:	2000f780 	.word	0x2000f780
 8002b14:	20000627 	.word	0x20000627
 8002b18:	ff808080 	.word	0xff808080
					} else if(TS_State.touchX[0] >= GUI_SAVE_x && TS_State.touchX[0] <= (GUI_SAVE_x + GUI_SAVE_width) &&
 8002b1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b1e:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002b22:	f0c0 8252 	bcc.w	8002fca <InputTask+0x81e>
 8002b26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b28:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002b2c:	f200 824d 	bhi.w	8002fca <InputTask+0x81e>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002b30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					} else if(TS_State.touchX[0] >= GUI_SAVE_x && TS_State.touchX[0] <= (GUI_SAVE_x + GUI_SAVE_width) &&
 8002b32:	2bdb      	cmp	r3, #219	; 0xdb
 8002b34:	f240 8249 	bls.w	8002fca <InputTask+0x81e>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002b38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b3e:	f200 8244 	bhi.w	8002fca <InputTask+0x81e>
						state = 13;
 8002b42:	230d      	movs	r3, #13
 8002b44:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}

					break;
 8002b48:	e23f      	b.n	8002fca <InputTask+0x81e>
 8002b4a:	e23e      	b.n	8002fca <InputTask+0x81e>

				// Show keyboard
				case 1:
					if(TS_State.touchX[0] >= x+len && TS_State.touchX[0] <= x+Width+len &&
 8002b4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8002b54:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002b58:	4413      	add	r3, r2
 8002b5a:	4299      	cmp	r1, r3
 8002b5c:	db34      	blt.n	8002bc8 <InputTask+0x41c>
 8002b5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b60:	4619      	mov	r1, r3
 8002b62:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8002b66:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002b6a:	441a      	add	r2, r3
 8002b6c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002b70:	4413      	add	r3, r2
 8002b72:	4299      	cmp	r1, r3
 8002b74:	dc28      	bgt.n	8002bc8 <InputTask+0x41c>
							TS_State.touchY[0] >= y-10 && TS_State.touchY[0] <= y+Height+10){
 8002b76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002b7e:	3b0a      	subs	r3, #10
					if(TS_State.touchX[0] >= x+len && TS_State.touchX[0] <= x+Width+len &&
 8002b80:	429a      	cmp	r2, r3
 8002b82:	db21      	blt.n	8002bc8 <InputTask+0x41c>
							TS_State.touchY[0] >= y-10 && TS_State.touchY[0] <= y+Height+10){
 8002b84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002b86:	4619      	mov	r1, r3
 8002b88:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8002b8c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002b90:	4413      	add	r3, r2
 8002b92:	330a      	adds	r3, #10
 8002b94:	4299      	cmp	r1, r3
 8002b96:	dc17      	bgt.n	8002bc8 <InputTask+0x41c>
						/* definition and creation of KB */
						osThreadDef(KB, KeyboardTask, osPriorityAboveNormal, 0, 4096);
 8002b98:	4bb9      	ldr	r3, [pc, #740]	; (8002e80 <InputTask+0x6d4>)
 8002b9a:	f107 040c 	add.w	r4, r7, #12
 8002b9e:	461d      	mov	r5, r3
 8002ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ba4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						KBHandle = osThreadCreate(osThread(KB), NULL);
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f010 ff88 	bl	8013ac8 <osThreadCreate>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4ab2      	ldr	r2, [pc, #712]	; (8002e84 <InputTask+0x6d8>)
 8002bbc:	6013      	str	r3, [r2, #0]

						vTaskSuspend(inputHandle);
 8002bbe:	4bb2      	ldr	r3, [pc, #712]	; (8002e88 <InputTask+0x6dc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f012 fc8c 	bl	80154e0 <vTaskSuspend>
					}
					state = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002bce:	e1fd      	b.n	8002fcc <InputTask+0x820>

				// Mount
				case 2:
					if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 8002bd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bd2:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002bd6:	d315      	bcc.n	8002c04 <InputTask+0x458>
 8002bd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bda:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8002bde:	d811      	bhi.n	8002c04 <InputTask+0x458>
							TS_State.touchY[0] >= GUI_SD_MOUNT_y && TS_State.touchY[0] <= GUI_SD_MOUNT_y+GUI_height){
 8002be0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 8002be2:	2b31      	cmp	r3, #49	; 0x31
 8002be4:	d90e      	bls.n	8002c04 <InputTask+0x458>
							TS_State.touchY[0] >= GUI_SD_MOUNT_y && TS_State.touchY[0] <= GUI_SD_MOUNT_y+GUI_height){
 8002be6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002be8:	2b64      	cmp	r3, #100	; 0x64
 8002bea:	d80b      	bhi.n	8002c04 <InputTask+0x458>
						Draw_GUI(1,0);
 8002bec:	2100      	movs	r1, #0
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f7ff fc12 	bl	8002418 <Draw_GUI>
						Draw_GUI(2,1);
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f7ff fc0e 	bl	8002418 <Draw_GUI>
						Draw_GUI(3,1);
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2003      	movs	r0, #3
 8002c00:	f7ff fc0a 	bl	8002418 <Draw_GUI>
					}
					state = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002c0a:	e1df      	b.n	8002fcc <InputTask+0x820>

				// Unmount
				case 3:
					if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 8002c0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c0e:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002c12:	d315      	bcc.n	8002c40 <InputTask+0x494>
 8002c14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c16:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8002c1a:	d811      	bhi.n	8002c40 <InputTask+0x494>
							TS_State.touchY[0] >= GUI_SD_UNMOUNT_y && TS_State.touchY[0] <= GUI_SD_UNMOUNT_y+GUI_height){
 8002c1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 8002c1e:	2b77      	cmp	r3, #119	; 0x77
 8002c20:	d90e      	bls.n	8002c40 <InputTask+0x494>
							TS_State.touchY[0] >= GUI_SD_UNMOUNT_y && TS_State.touchY[0] <= GUI_SD_UNMOUNT_y+GUI_height){
 8002c22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002c24:	2baa      	cmp	r3, #170	; 0xaa
 8002c26:	d80b      	bhi.n	8002c40 <InputTask+0x494>
						Draw_GUI(1,1);
 8002c28:	2101      	movs	r1, #1
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f7ff fbf4 	bl	8002418 <Draw_GUI>
						Draw_GUI(2,0);
 8002c30:	2100      	movs	r1, #0
 8002c32:	2002      	movs	r0, #2
 8002c34:	f7ff fbf0 	bl	8002418 <Draw_GUI>
						Draw_GUI(3,1);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	f7ff fbec 	bl	8002418 <Draw_GUI>
					}
					state = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002c46:	e1c1      	b.n	8002fcc <InputTask+0x820>

				// Format
				case 4:
					if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 8002c48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c4a:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002c4e:	d315      	bcc.n	8002c7c <InputTask+0x4d0>
 8002c50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c52:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8002c56:	d811      	bhi.n	8002c7c <InputTask+0x4d0>
							TS_State.touchY[0] >= GUI_SD_FORMAT_y && TS_State.touchY[0] <= GUI_SD_FORMAT_y+GUI_height){
 8002c58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_SD_x && TS_State.touchX[0] <= (GUI_SD_x + GUI_width) &&
 8002c5a:	2bbd      	cmp	r3, #189	; 0xbd
 8002c5c:	d90e      	bls.n	8002c7c <InputTask+0x4d0>
							TS_State.touchY[0] >= GUI_SD_FORMAT_y && TS_State.touchY[0] <= GUI_SD_FORMAT_y+GUI_height){
 8002c5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002c60:	2bf0      	cmp	r3, #240	; 0xf0
 8002c62:	d80b      	bhi.n	8002c7c <InputTask+0x4d0>
						Draw_GUI(1,1);
 8002c64:	2101      	movs	r1, #1
 8002c66:	2001      	movs	r0, #1
 8002c68:	f7ff fbd6 	bl	8002418 <Draw_GUI>
						Draw_GUI(2,1);
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f7ff fbd2 	bl	8002418 <Draw_GUI>
						Draw_GUI(3,0);
 8002c74:	2100      	movs	r1, #0
 8002c76:	2003      	movs	r0, #3
 8002c78:	f7ff fbce 	bl	8002418 <Draw_GUI>
					}
					state = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002c82:	e1a3      	b.n	8002fcc <InputTask+0x820>

				// Previous
				case 5:
					if(TS_State.touchX[0] >= GUI_VOC_PREV_x && TS_State.touchX[0] <= (GUI_VOC_PREV_x + GUI_VOC_width) &&
 8002c84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c86:	2b31      	cmp	r3, #49	; 0x31
 8002c88:	d931      	bls.n	8002cee <InputTask+0x542>
 8002c8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c8c:	2b5a      	cmp	r3, #90	; 0x5a
 8002c8e:	d82e      	bhi.n	8002cee <InputTask+0x542>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002c90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_VOC_PREV_x && TS_State.touchX[0] <= (GUI_VOC_PREV_x + GUI_VOC_width) &&
 8002c92:	2bdb      	cmp	r3, #219	; 0xdb
 8002c94:	d92b      	bls.n	8002cee <InputTask+0x542>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002c96:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002c98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c9c:	d827      	bhi.n	8002cee <InputTask+0x542>
						if (idx_d <= 0)idx_d = 28;
 8002c9e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <InputTask+0x500>
 8002ca6:	231c      	movs	r3, #28
 8002ca8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
						idx_d--;
 8002cac:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002cb6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002cba:	f001 fd69 	bl	8004790 <BSP_LCD_SetTextColor>
						BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc2:	f001 fd7d 	bl	80047c0 <BSP_LCD_SetBackColor>
						BSP_LCD_DisplayStringAt(50,100, (uint8_t *)"                  ", LEFT_MODE);
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	4a70      	ldr	r2, [pc, #448]	; (8002e8c <InputTask+0x6e0>)
 8002cca:	2164      	movs	r1, #100	; 0x64
 8002ccc:	2032      	movs	r0, #50	; 0x32
 8002cce:	f001 fe17 	bl	8004900 <BSP_LCD_DisplayStringAt>
						BSP_LCD_DisplayStringAt(50,100, (uint8_t *) Dico[idx_d], LEFT_MODE);
 8002cd2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	4a6d      	ldr	r2, [pc, #436]	; (8002e90 <InputTask+0x6e4>)
 8002cda:	441a      	add	r2, r3
 8002cdc:	2303      	movs	r3, #3
 8002cde:	2164      	movs	r1, #100	; 0x64
 8002ce0:	2032      	movs	r0, #50	; 0x32
 8002ce2:	f001 fe0d 	bl	8004900 <BSP_LCD_DisplayStringAt>
						Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 5);
 8002ce6:	2105      	movs	r1, #5
 8002ce8:	486a      	ldr	r0, [pc, #424]	; (8002e94 <InputTask+0x6e8>)
 8002cea:	f7ff fca9 	bl	8002640 <Draw_GUI_VOC>
					}
					Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 1);
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4868      	ldr	r0, [pc, #416]	; (8002e94 <InputTask+0x6e8>)
 8002cf2:	f7ff fca5 	bl	8002640 <Draw_GUI_VOC>
					state = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002cfc:	e166      	b.n	8002fcc <InputTask+0x820>

				// Next
				case 6:
					if(TS_State.touchX[0] >= GUI_VOC_NEXT_x && TS_State.touchX[0] <= (GUI_VOC_NEXT_x + GUI_VOC_width) &&
 8002cfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d00:	2b6d      	cmp	r3, #109	; 0x6d
 8002d02:	d931      	bls.n	8002d68 <InputTask+0x5bc>
 8002d04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d06:	2b96      	cmp	r3, #150	; 0x96
 8002d08:	d82e      	bhi.n	8002d68 <InputTask+0x5bc>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002d0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_VOC_NEXT_x && TS_State.touchX[0] <= (GUI_VOC_NEXT_x + GUI_VOC_width) &&
 8002d0c:	2bdb      	cmp	r3, #219	; 0xdb
 8002d0e:	d92b      	bls.n	8002d68 <InputTask+0x5bc>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002d10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d16:	d827      	bhi.n	8002d68 <InputTask+0x5bc>
						if (idx_d >= 27)idx_d = -1;
 8002d18:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002d1c:	2b1a      	cmp	r3, #26
 8002d1e:	d902      	bls.n	8002d26 <InputTask+0x57a>
 8002d20:	23ff      	movs	r3, #255	; 0xff
 8002d22:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
						idx_d++;
 8002d26:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002d30:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002d34:	f001 fd2c 	bl	8004790 <BSP_LCD_SetTextColor>
						BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f001 fd40 	bl	80047c0 <BSP_LCD_SetBackColor>
						BSP_LCD_DisplayStringAt(50,100, (uint8_t *)"                  ", LEFT_MODE);
 8002d40:	2303      	movs	r3, #3
 8002d42:	4a52      	ldr	r2, [pc, #328]	; (8002e8c <InputTask+0x6e0>)
 8002d44:	2164      	movs	r1, #100	; 0x64
 8002d46:	2032      	movs	r0, #50	; 0x32
 8002d48:	f001 fdda 	bl	8004900 <BSP_LCD_DisplayStringAt>
						BSP_LCD_DisplayStringAt(50,100, (uint8_t *) Dico[idx_d], LEFT_MODE);
 8002d4c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	4a4f      	ldr	r2, [pc, #316]	; (8002e90 <InputTask+0x6e4>)
 8002d54:	441a      	add	r2, r3
 8002d56:	2303      	movs	r3, #3
 8002d58:	2164      	movs	r1, #100	; 0x64
 8002d5a:	2032      	movs	r0, #50	; 0x32
 8002d5c:	f001 fdd0 	bl	8004900 <BSP_LCD_DisplayStringAt>
						Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 5);
 8002d60:	2105      	movs	r1, #5
 8002d62:	484c      	ldr	r0, [pc, #304]	; (8002e94 <InputTask+0x6e8>)
 8002d64:	f7ff fc6c 	bl	8002640 <Draw_GUI_VOC>
					}
					Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 2);
 8002d68:	2102      	movs	r1, #2
 8002d6a:	484a      	ldr	r0, [pc, #296]	; (8002e94 <InputTask+0x6e8>)
 8002d6c:	f7ff fc68 	bl	8002640 <Draw_GUI_VOC>
					state = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002d76:	e129      	b.n	8002fcc <InputTask+0x820>

				// First activation REC
				case 7:
					if(TS_State.touchX[0] >= GUI_VOC_REC_x && TS_State.touchX[0] <= (GUI_VOC_REC_x + GUI_VOC_width) &&
 8002d78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d7a:	2ba9      	cmp	r3, #169	; 0xa9
 8002d7c:	d935      	bls.n	8002dea <InputTask+0x63e>
 8002d7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d80:	2bd2      	cmp	r3, #210	; 0xd2
 8002d82:	d832      	bhi.n	8002dea <InputTask+0x63e>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002d84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_VOC_REC_x && TS_State.touchX[0] <= (GUI_VOC_REC_x + GUI_VOC_width) &&
 8002d86:	2bdb      	cmp	r3, #219	; 0xdb
 8002d88:	d92f      	bls.n	8002dea <InputTask+0x63e>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height){
 8002d8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d90:	d82b      	bhi.n	8002dea <InputTask+0x63e>

						Draw_GUI_VOC(LCD_COLOR_RED, 3);
 8002d92:	2103      	movs	r1, #3
 8002d94:	4840      	ldr	r0, [pc, #256]	; (8002e98 <InputTask+0x6ec>)
 8002d96:	f7ff fc53 	bl	8002640 <Draw_GUI_VOC>


						sprintf((char *) f_name,"%s.wav", Dico_f[idx_d]);
 8002d9a:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	4a3d      	ldr	r2, [pc, #244]	; (8002e9c <InputTask+0x6f0>)
 8002da6:	4413      	add	r3, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	493d      	ldr	r1, [pc, #244]	; (8002ea0 <InputTask+0x6f4>)
 8002dac:	483d      	ldr	r0, [pc, #244]	; (8002ea4 <InputTask+0x6f8>)
 8002dae:	f013 ffbb 	bl	8016d28 <siprintf>
						inst = F_OPEN;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						xQueueSend(SD_instructionHandle, &inst, 0);
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <InputTask+0x6fc>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f011 faec 	bl	80143a0 <xQueueGenericSend>
						vTaskDelay(20);
 8002dc8:	2014      	movs	r0, #20
 8002dca:	f012 fb53 	bl	8015474 <vTaskDelay>

						f_lseek(&SDFile, 44);
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	4836      	ldr	r0, [pc, #216]	; (8002eac <InputTask+0x700>)
 8002dd2:	f00f fd47 	bl	8012864 <f_lseek>
						NB_Bloc=0;
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <InputTask+0x704>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
						etat = 2;
 8002ddc:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <InputTask+0x708>)
 8002dde:	2202      	movs	r2, #2
 8002de0:	701a      	strb	r2, [r3, #0]
						state = 9;
 8002de2:	2309      	movs	r3, #9
 8002de4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					} else {
						Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 3);
						state = 0;
					}

					break;
 8002de8:	e0f0      	b.n	8002fcc <InputTask+0x820>
						Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 3);
 8002dea:	2103      	movs	r1, #3
 8002dec:	4829      	ldr	r0, [pc, #164]	; (8002e94 <InputTask+0x6e8>)
 8002dee:	f7ff fc27 	bl	8002640 <Draw_GUI_VOC>
						state = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002df8:	e0e8      	b.n	8002fcc <InputTask+0x820>

				// First activation PLAY
				case 8:
					if(TS_State.touchX[0] >= GUI_VOC_PLAY_x && TS_State.touchX[0] <= (GUI_VOC_PLAY_x + GUI_VOC_width) &&
 8002dfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dfc:	2be5      	cmp	r3, #229	; 0xe5
 8002dfe:	d921      	bls.n	8002e44 <InputTask+0x698>
 8002e00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e02:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002e06:	d81d      	bhi.n	8002e44 <InputTask+0x698>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height && record_OK){
 8002e08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_VOC_PLAY_x && TS_State.touchX[0] <= (GUI_VOC_PLAY_x + GUI_VOC_width) &&
 8002e0a:	2bdb      	cmp	r3, #219	; 0xdb
 8002e0c:	d91a      	bls.n	8002e44 <InputTask+0x698>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height && record_OK){
 8002e0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e14:	d816      	bhi.n	8002e44 <InputTask+0x698>
 8002e16:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <InputTask+0x70c>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d012      	beq.n	8002e44 <InputTask+0x698>
						Draw_GUI_VOC(LCD_COLOR_LIGHTGREEN, 4);
 8002e1e:	2104      	movs	r1, #4
 8002e20:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 8002e24:	f7ff fc0c 	bl	8002640 <Draw_GUI_VOC>
						f_lseek(&SDFile, 44);
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	4820      	ldr	r0, [pc, #128]	; (8002eac <InputTask+0x700>)
 8002e2c:	f00f fd1a 	bl	8012864 <f_lseek>
						Bloc_Cursor=0;
 8002e30:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <InputTask+0x710>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
						etat=3;
 8002e36:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <InputTask+0x708>)
 8002e38:	2203      	movs	r2, #3
 8002e3a:	701a      	strb	r2, [r3, #0]
						state = 11;
 8002e3c:	230b      	movs	r3, #11
 8002e3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					} else
					{
						Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 4);
						state = 0;
					}
					break;
 8002e42:	e0c3      	b.n	8002fcc <InputTask+0x820>
						Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 4);
 8002e44:	2104      	movs	r1, #4
 8002e46:	4813      	ldr	r0, [pc, #76]	; (8002e94 <InputTask+0x6e8>)
 8002e48:	f7ff fbfa 	bl	8002640 <Draw_GUI_VOC>
						state = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002e52:	e0bb      	b.n	8002fcc <InputTask+0x820>

				// Second touch REC
				case 9:
					if(TS_State.touchX[0] >= GUI_VOC_REC_x && TS_State.touchX[0] <= (GUI_VOC_REC_x + GUI_VOC_width) &&
 8002e54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e56:	2ba9      	cmp	r3, #169	; 0xa9
 8002e58:	d90d      	bls.n	8002e76 <InputTask+0x6ca>
 8002e5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e5c:	2bd2      	cmp	r3, #210	; 0xd2
 8002e5e:	d80a      	bhi.n	8002e76 <InputTask+0x6ca>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height)
 8002e60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_VOC_REC_x && TS_State.touchX[0] <= (GUI_VOC_REC_x + GUI_VOC_width) &&
 8002e62:	2bdb      	cmp	r3, #219	; 0xdb
 8002e64:	d907      	bls.n	8002e76 <InputTask+0x6ca>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height)
 8002e66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e6c:	d803      	bhi.n	8002e76 <InputTask+0x6ca>
					{
						state = 10;
 8002e6e:	230a      	movs	r3, #10
 8002e70:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					} else state = 0;
					break;
 8002e74:	e0aa      	b.n	8002fcc <InputTask+0x820>
					} else state = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002e7c:	e0a6      	b.n	8002fcc <InputTask+0x820>
 8002e7e:	bf00      	nop
 8002e80:	08017748 	.word	0x08017748
 8002e84:	2000fb64 	.word	0x2000fb64
 8002e88:	2000f978 	.word	0x2000f978
 8002e8c:	08017724 	.word	0x08017724
 8002e90:	2000005c 	.word	0x2000005c
 8002e94:	ffd3d3d3 	.word	0xffd3d3d3
 8002e98:	ffff0000 	.word	0xffff0000
 8002e9c:	2000021c 	.word	0x2000021c
 8002ea0:	08017738 	.word	0x08017738
 8002ea4:	2000f758 	.word	0x2000f758
 8002ea8:	2000fb00 	.word	0x2000fb00
 8002eac:	2000fcec 	.word	0x2000fcec
 8002eb0:	20000628 	.word	0x20000628
 8002eb4:	20000627 	.word	0x20000627
 8002eb8:	20000630 	.word	0x20000630
 8002ebc:	2000062c 	.word	0x2000062c

				// Second activation REC
				case 10:
					if(TS_State.touchX[0] >= GUI_VOC_REC_x && TS_State.touchX[0] <= (GUI_VOC_REC_x + GUI_VOC_width) &&
 8002ec0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ec2:	2ba9      	cmp	r3, #169	; 0xa9
 8002ec4:	d91a      	bls.n	8002efc <InputTask+0x750>
 8002ec6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ec8:	2bd2      	cmp	r3, #210	; 0xd2
 8002eca:	d817      	bhi.n	8002efc <InputTask+0x750>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height)
 8002ecc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_VOC_REC_x && TS_State.touchX[0] <= (GUI_VOC_REC_x + GUI_VOC_width) &&
 8002ece:	2bdb      	cmp	r3, #219	; 0xdb
 8002ed0:	d914      	bls.n	8002efc <InputTask+0x750>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height)
 8002ed2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002ed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed8:	d810      	bhi.n	8002efc <InputTask+0x750>
					{
						Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 3);
 8002eda:	2103      	movs	r1, #3
 8002edc:	483d      	ldr	r0, [pc, #244]	; (8002fd4 <InputTask+0x828>)
 8002ede:	f7ff fbaf 	bl	8002640 <Draw_GUI_VOC>
						f_lseek(&SDFile, 44);
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	483c      	ldr	r0, [pc, #240]	; (8002fd8 <InputTask+0x82c>)
 8002ee6:	f00f fcbd 	bl	8012864 <f_lseek>
						Bloc_Cursor=0;
 8002eea:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <InputTask+0x830>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
						etat=1;
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <InputTask+0x834>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
						record_OK=1;
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <InputTask+0x838>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
					}
					state = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002f02:	e063      	b.n	8002fcc <InputTask+0x820>

				// Second touch PLAY
				case 11:
					if(TS_State.touchX[0] >= GUI_VOC_PLAY_x && TS_State.touchX[0] <= (GUI_VOC_PLAY_x + GUI_VOC_width) &&
 8002f04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f06:	2be5      	cmp	r3, #229	; 0xe5
 8002f08:	d90e      	bls.n	8002f28 <InputTask+0x77c>
 8002f0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f0c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002f10:	d80a      	bhi.n	8002f28 <InputTask+0x77c>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height)
 8002f12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_VOC_PLAY_x && TS_State.touchX[0] <= (GUI_VOC_PLAY_x + GUI_VOC_width) &&
 8002f14:	2bdb      	cmp	r3, #219	; 0xdb
 8002f16:	d907      	bls.n	8002f28 <InputTask+0x77c>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height)
 8002f18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f1e:	d803      	bhi.n	8002f28 <InputTask+0x77c>
					{
						state=12;
 8002f20:	230c      	movs	r3, #12
 8002f22:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					} else state = 0;
					break;
 8002f26:	e051      	b.n	8002fcc <InputTask+0x820>
					} else state = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002f2e:	e04d      	b.n	8002fcc <InputTask+0x820>

				// Second activation PLAY
				case 12:
					if(TS_State.touchX[0] >= GUI_VOC_PLAY_x && TS_State.touchX[0] <= (GUI_VOC_PLAY_x + GUI_VOC_width) &&
 8002f30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f32:	2be5      	cmp	r3, #229	; 0xe5
 8002f34:	d911      	bls.n	8002f5a <InputTask+0x7ae>
 8002f36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f38:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002f3c:	d80d      	bhi.n	8002f5a <InputTask+0x7ae>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height)
 8002f3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_VOC_PLAY_x && TS_State.touchX[0] <= (GUI_VOC_PLAY_x + GUI_VOC_width) &&
 8002f40:	2bdb      	cmp	r3, #219	; 0xdb
 8002f42:	d90a      	bls.n	8002f5a <InputTask+0x7ae>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height)
 8002f44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f4a:	d806      	bhi.n	8002f5a <InputTask+0x7ae>
					{
						Draw_GUI_VOC(LCD_COLOR_LIGHTGRAY, 4);
 8002f4c:	2104      	movs	r1, #4
 8002f4e:	4821      	ldr	r0, [pc, #132]	; (8002fd4 <InputTask+0x828>)
 8002f50:	f7ff fb76 	bl	8002640 <Draw_GUI_VOC>
						etat=1;
 8002f54:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <InputTask+0x834>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
					}
					state = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002f60:	e034      	b.n	8002fcc <InputTask+0x820>

				// SAVE
				case 13:
					if(TS_State.touchX[0] >= GUI_SAVE_x && TS_State.touchX[0] <= (GUI_SAVE_x + GUI_SAVE_width) &&
 8002f62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f64:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002f68:	d325      	bcc.n	8002fb6 <InputTask+0x80a>
 8002f6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f6c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002f70:	d821      	bhi.n	8002fb6 <InputTask+0x80a>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height)
 8002f72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
					if(TS_State.touchX[0] >= GUI_SAVE_x && TS_State.touchX[0] <= (GUI_SAVE_x + GUI_SAVE_width) &&
 8002f74:	2bdb      	cmp	r3, #219	; 0xdb
 8002f76:	d91e      	bls.n	8002fb6 <InputTask+0x80a>
							TS_State.touchY[0] >= GUI_VOC_y && TS_State.touchY[0] <= GUI_VOC_y+GUI_VOC_height)
 8002f78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7e:	d81a      	bhi.n	8002fb6 <InputTask+0x80a>
					{
						Draw_GUI_VOC(LCD_COLOR_LIGHTGREEN, 5);
 8002f80:	2105      	movs	r1, #5
 8002f82:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 8002f86:	f7ff fb5b 	bl	8002640 <Draw_GUI_VOC>
						etat=0;
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <InputTask+0x834>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
						if (record_OK){
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <InputTask+0x838>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <InputTask+0x804>
							write_header(NB_Bloc*AUDIO_BLOCK_SIZE);
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <InputTask+0x83c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	025b      	lsls	r3, r3, #9
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fe9c 	bl	8001cdc <write_header>
							f_close(&SDFile);
 8002fa4:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <InputTask+0x82c>)
 8002fa6:	f00f fbdd 	bl	8012764 <f_close>
							record_OK = 0;
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <InputTask+0x838>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
						}
						etat=1;
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <InputTask+0x834>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
					}
					state = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002fbc:	e006      	b.n	8002fcc <InputTask+0x820>

				default:
					state = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8002fc4:	e002      	b.n	8002fcc <InputTask+0x820>
			}
		}
 8002fc6:	bf00      	nop
 8002fc8:	e000      	b.n	8002fcc <InputTask+0x820>
					break;
 8002fca:	bf00      	nop
		osDelay(20);
 8002fcc:	2014      	movs	r0, #20
 8002fce:	f010 fdc7 	bl	8013b60 <osDelay>
		xSemaphoreTake(mutex_LCDHandle, portMAX_DELAY);
 8002fd2:	e45e      	b.n	8002892 <InputTask+0xe6>
 8002fd4:	ffd3d3d3 	.word	0xffd3d3d3
 8002fd8:	2000fcec 	.word	0x2000fcec
 8002fdc:	2000062c 	.word	0x2000062c
 8002fe0:	20000627 	.word	0x20000627
 8002fe4:	20000630 	.word	0x20000630
 8002fe8:	20000628 	.word	0x20000628

08002fec <KeyboardTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyboardTask */
void KeyboardTask(void const * argument)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b09f      	sub	sp, #124	; 0x7c
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN KeyboardTask */

	uint8_t state = 0, idx=strlen((char *)Name), maj_en = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ffa:	48b1      	ldr	r0, [pc, #708]	; (80032c0 <KeyboardTask+0x2d4>)
 8002ffc:	f7fd f908 	bl	8000210 <strlen>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003006:	2300      	movs	r3, #0
 8003008:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	uint16_t Pressed_X, Pressed_Y;
	uint16_t x = 20;
 800300c:	2314      	movs	r3, #20
 800300e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	uint16_t y = 20;
 8003012:	2314      	movs	r3, #20
 8003014:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	uint16_t Width = MAX_c*7;
 8003018:	23d2      	movs	r3, #210	; 0xd2
 800301a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	uint16_t Height = 12;
 800301e:	230c      	movs	r3, #12
 8003020:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	SD_Instruction instruction;
	char isDir = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	TS_StateTypeDef  prev_state;
	TS_StateTypeDef TS_State;
	prev_state.touchDetected = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	// Second layer activation
	BSP_LCD_SetLayerVisible(1, ENABLE);
 8003030:	2101      	movs	r1, #1
 8003032:	2001      	movs	r0, #1
 8003034:	f001 fb6e 	bl	8004714 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SelectLayer(1);
 8003038:	2001      	movs	r0, #1
 800303a:	f001 fb5b 	bl	80046f4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(0);
 800303e:	2000      	movs	r0, #0
 8003040:	f001 fbf2 	bl	8004828 <BSP_LCD_Clear>

	xSemaphoreTake(mutex_LCDHandle, portMAX_DELAY);
 8003044:	4b9f      	ldr	r3, [pc, #636]	; (80032c4 <KeyboardTask+0x2d8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f04f 31ff 	mov.w	r1, #4294967295
 800304c:	4618      	mov	r0, r3
 800304e:	f011 fcc9 	bl	80149e4 <xQueueSemaphoreTake>
	Draw_Keyboard(maj_en);
 8003052:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe ffbe 	bl	8001fd8 <Draw_Keyboard>
	xSemaphoreGive(mutex_LCDHandle);
 800305c:	4b99      	ldr	r3, [pc, #612]	; (80032c4 <KeyboardTask+0x2d8>)
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	2300      	movs	r3, #0
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	f011 f99b 	bl	80143a0 <xQueueGenericSend>

	/* Infinite loop */
	for(;;)
	{
		// Show typing
		BSP_LCD_SetFont(&Font12);
 800306a:	4897      	ldr	r0, [pc, #604]	; (80032c8 <KeyboardTask+0x2dc>)
 800306c:	f001 fbc2 	bl	80047f4 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003070:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003074:	f001 fb8c 	bl	8004790 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	f001 fba0 	bl	80047c0 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(69, y,(uint8_t *) Name, LEFT_MODE);
 8003080:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 8003084:	2303      	movs	r3, #3
 8003086:	4a8e      	ldr	r2, [pc, #568]	; (80032c0 <KeyboardTask+0x2d4>)
 8003088:	2045      	movs	r0, #69	; 0x45
 800308a:	f001 fc39 	bl	8004900 <BSP_LCD_DisplayStringAt>

		// TS waiter
		BSP_TS_GetState(&TS_State);
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	4618      	mov	r0, r3
 8003094:	f002 fd26 	bl	8005ae4 <BSP_TS_GetState>
		if(TS_State.touchDetected != prev_state.touchDetected && TS_State.touchDetected < 2 && idx < MAX_c){
 8003098:	7b3a      	ldrb	r2, [r7, #12]
 800309a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800309e:	429a      	cmp	r2, r3
 80030a0:	f000 8217 	beq.w	80034d2 <KeyboardTask+0x4e6>
 80030a4:	7b3b      	ldrb	r3, [r7, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	f200 8213 	bhi.w	80034d2 <KeyboardTask+0x4e6>
 80030ac:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80030b0:	2b1d      	cmp	r3, #29
 80030b2:	f200 820e 	bhi.w	80034d2 <KeyboardTask+0x4e6>
			prev_state.touchDetected = TS_State.touchDetected;
 80030b6:	7b3b      	ldrb	r3, [r7, #12]
 80030b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

			switch (state){
 80030bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <KeyboardTask+0xde>
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d016      	beq.n	80030f6 <KeyboardTask+0x10a>
 80030c8:	e1ff      	b.n	80034ca <KeyboardTask+0x4de>
				// Getting key value
				case 0:
					Pressed_X = TS_State.touchX[0]/48;
 80030ca:	89fb      	ldrh	r3, [r7, #14]
 80030cc:	4a7f      	ldr	r2, [pc, #508]	; (80032cc <KeyboardTask+0x2e0>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
					Pressed_Y = (TS_State.touchY[0]-132)/28;
 80030d8:	8b3b      	ldrh	r3, [r7, #24]
 80030da:	3b84      	subs	r3, #132	; 0x84
 80030dc:	4a7c      	ldr	r2, [pc, #496]	; (80032d0 <KeyboardTask+0x2e4>)
 80030de:	fb82 1203 	smull	r1, r2, r2, r3
 80030e2:	441a      	add	r2, r3
 80030e4:	1112      	asrs	r2, r2, #4
 80030e6:	17db      	asrs	r3, r3, #31
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
					state = 1;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					break;
 80030f4:	e1ee      	b.n	80034d4 <KeyboardTask+0x4e8>

				case 1:
					if(TS_State.touchX[0]/48 == Pressed_X && (TS_State.touchY[0]-132)/28 == Pressed_Y){
 80030f6:	89fb      	ldrh	r3, [r7, #14]
 80030f8:	4a74      	ldr	r2, [pc, #464]	; (80032cc <KeyboardTask+0x2e0>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	b29b      	uxth	r3, r3
 8003102:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8003106:	429a      	cmp	r2, r3
 8003108:	f040 8197 	bne.w	800343a <KeyboardTask+0x44e>
 800310c:	8b3b      	ldrh	r3, [r7, #24]
 800310e:	3b84      	subs	r3, #132	; 0x84
 8003110:	4a6f      	ldr	r2, [pc, #444]	; (80032d0 <KeyboardTask+0x2e4>)
 8003112:	fb82 1203 	smull	r1, r2, r2, r3
 8003116:	441a      	add	r2, r3
 8003118:	1112      	asrs	r2, r2, #4
 800311a:	17db      	asrs	r3, r3, #31
 800311c:	1ad2      	subs	r2, r2, r3
 800311e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003122:	429a      	cmp	r2, r3
 8003124:	f040 8189 	bne.w	800343a <KeyboardTask+0x44e>
						state = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if(keyboard[Pressed_Y][Pressed_X] == BACKSPACE){
 800312e:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8003132:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 8003136:	4867      	ldr	r0, [pc, #412]	; (80032d4 <KeyboardTask+0x2e8>)
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4403      	add	r3, r0
 8003142:	440b      	add	r3, r1
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b08      	cmp	r3, #8
 8003148:	d122      	bne.n	8003190 <KeyboardTask+0x1a4>
							if(idx>0){
 800314a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 81b9 	beq.w	80034c6 <KeyboardTask+0x4da>
								Name[idx-1] = 0;
 8003154:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003158:	3b01      	subs	r3, #1
 800315a:	4a59      	ldr	r2, [pc, #356]	; (80032c0 <KeyboardTask+0x2d4>)
 800315c:	2100      	movs	r1, #0
 800315e:	54d1      	strb	r1, [r2, r3]
								BSP_LCD_SetTextColor(0xFFEEEEEE);
 8003160:	485d      	ldr	r0, [pc, #372]	; (80032d8 <KeyboardTask+0x2ec>)
 8003162:	f001 fb15 	bl	8004790 <BSP_LCD_SetTextColor>
								BSP_LCD_FillRect(69+7*(idx-1), 20, 7, 12);
 8003166:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800316a:	3b01      	subs	r3, #1
 800316c:	b29b      	uxth	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	00d2      	lsls	r2, r2, #3
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	b29b      	uxth	r3, r3
 8003176:	3345      	adds	r3, #69	; 0x45
 8003178:	b298      	uxth	r0, r3
 800317a:	230c      	movs	r3, #12
 800317c:	2207      	movs	r2, #7
 800317e:	2114      	movs	r1, #20
 8003180:	f001 fe84 	bl	8004e8c <BSP_LCD_FillRect>
								idx--;
 8003184:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003188:	3b01      	subs	r3, #1
 800318a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
						if(keyboard[Pressed_Y][Pressed_X] == BACKSPACE){
 800318e:	e19a      	b.n	80034c6 <KeyboardTask+0x4da>
							}

						} else if(keyboard[Pressed_Y][Pressed_X] == ENTER){
 8003190:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8003194:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 8003198:	484e      	ldr	r0, [pc, #312]	; (80032d4 <KeyboardTask+0x2e8>)
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4403      	add	r3, r0
 80031a4:	440b      	add	r3, r1
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b0a      	cmp	r3, #10
 80031aa:	f040 80da 	bne.w	8003362 <KeyboardTask+0x376>
							xSemaphoreTake(mutex_LCDHandle, portMAX_DELAY);
 80031ae:	4b45      	ldr	r3, [pc, #276]	; (80032c4 <KeyboardTask+0x2d8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f04f 31ff 	mov.w	r1, #4294967295
 80031b6:	4618      	mov	r0, r3
 80031b8:	f011 fc14 	bl	80149e4 <xQueueSemaphoreTake>
							BSP_LCD_SetTextColor(0xFFEEEEEE);
 80031bc:	4846      	ldr	r0, [pc, #280]	; (80032d8 <KeyboardTask+0x2ec>)
 80031be:	f001 fae7 	bl	8004790 <BSP_LCD_SetTextColor>
							BSP_LCD_FillRect(x+idx*7, y, x+Width-7*7, Height);
 80031c2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	00d2      	lsls	r2, r2, #3
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80031d4:	4413      	add	r3, r2
 80031d6:	b298      	uxth	r0, r3
 80031d8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80031dc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80031e0:	4413      	add	r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b31      	subs	r3, #49	; 0x31
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80031ec:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 80031f0:	f001 fe4c 	bl	8004e8c <BSP_LCD_FillRect>
							BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80031f4:	4839      	ldr	r0, [pc, #228]	; (80032dc <KeyboardTask+0x2f0>)
 80031f6:	f001 facb 	bl	8004790 <BSP_LCD_SetTextColor>
							xSemaphoreGive(mutex_LCDHandle);
 80031fa:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <KeyboardTask+0x2d8>)
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	2300      	movs	r3, #0
 8003200:	2200      	movs	r2, #0
 8003202:	2100      	movs	r1, #0
 8003204:	f011 f8cc 	bl	80143a0 <xQueueGenericSend>


							if(strncmp((char *)Name,"circle_",7) == 0){
 8003208:	2207      	movs	r2, #7
 800320a:	4935      	ldr	r1, [pc, #212]	; (80032e0 <KeyboardTask+0x2f4>)
 800320c:	482c      	ldr	r0, [pc, #176]	; (80032c0 <KeyboardTask+0x2d4>)
 800320e:	f013 fdab 	bl	8016d68 <strncmp>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d165      	bne.n	80032e4 <KeyboardTask+0x2f8>
								BSP_LCD_DrawCircle((Name[7]-'0')*100+(Name[8]-'0')*10+(Name[9]-'0'), (Name[11]-'0')*100+(Name[12]-'0')*10+(Name[13]-'0'), (Name[15]-'0')*10+Name[16]-'0');
 8003218:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <KeyboardTask+0x2d4>)
 800321a:	79db      	ldrb	r3, [r3, #7]
 800321c:	3b30      	subs	r3, #48	; 0x30
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	0092      	lsls	r2, r2, #2
 8003224:	4413      	add	r3, r2
 8003226:	461a      	mov	r2, r3
 8003228:	0091      	lsls	r1, r2, #2
 800322a:	461a      	mov	r2, r3
 800322c:	460b      	mov	r3, r1
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	b29a      	uxth	r2, r3
 8003234:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <KeyboardTask+0x2d4>)
 8003236:	7a1b      	ldrb	r3, [r3, #8]
 8003238:	3b30      	subs	r3, #48	; 0x30
 800323a:	b29b      	uxth	r3, r3
 800323c:	4619      	mov	r1, r3
 800323e:	0089      	lsls	r1, r1, #2
 8003240:	440b      	add	r3, r1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	b29b      	uxth	r3, r3
 8003246:	4413      	add	r3, r2
 8003248:	b29a      	uxth	r2, r3
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <KeyboardTask+0x2d4>)
 800324c:	7a5b      	ldrb	r3, [r3, #9]
 800324e:	b29b      	uxth	r3, r3
 8003250:	4413      	add	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b30      	subs	r3, #48	; 0x30
 8003256:	b298      	uxth	r0, r3
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <KeyboardTask+0x2d4>)
 800325a:	7adb      	ldrb	r3, [r3, #11]
 800325c:	3b30      	subs	r3, #48	; 0x30
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	0092      	lsls	r2, r2, #2
 8003264:	4413      	add	r3, r2
 8003266:	461a      	mov	r2, r3
 8003268:	0091      	lsls	r1, r2, #2
 800326a:	461a      	mov	r2, r3
 800326c:	460b      	mov	r3, r1
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	b29a      	uxth	r2, r3
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <KeyboardTask+0x2d4>)
 8003276:	7b1b      	ldrb	r3, [r3, #12]
 8003278:	3b30      	subs	r3, #48	; 0x30
 800327a:	b29b      	uxth	r3, r3
 800327c:	4619      	mov	r1, r3
 800327e:	0089      	lsls	r1, r1, #2
 8003280:	440b      	add	r3, r1
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	b29b      	uxth	r3, r3
 8003286:	4413      	add	r3, r2
 8003288:	b29a      	uxth	r2, r3
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <KeyboardTask+0x2d4>)
 800328c:	7b5b      	ldrb	r3, [r3, #13]
 800328e:	b29b      	uxth	r3, r3
 8003290:	4413      	add	r3, r2
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b30      	subs	r3, #48	; 0x30
 8003296:	b299      	uxth	r1, r3
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <KeyboardTask+0x2d4>)
 800329a:	7bdb      	ldrb	r3, [r3, #15]
 800329c:	3b30      	subs	r3, #48	; 0x30
 800329e:	b29b      	uxth	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	0092      	lsls	r2, r2, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <KeyboardTask+0x2d4>)
 80032ac:	7c1b      	ldrb	r3, [r3, #16]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b30      	subs	r3, #48	; 0x30
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	f001 fcb5 	bl	8004c28 <BSP_LCD_DrawCircle>
 80032be:	e03e      	b.n	800333e <KeyboardTask+0x352>
 80032c0:	2000f780 	.word	0x2000f780
 80032c4:	2000f77c 	.word	0x2000f77c
 80032c8:	200002f4 	.word	0x200002f4
 80032cc:	aaaaaaab 	.word	0xaaaaaaab
 80032d0:	92492493 	.word	0x92492493
 80032d4:	20000028 	.word	0x20000028
 80032d8:	ffeeeeee 	.word	0xffeeeeee
 80032dc:	ff0000ff 	.word	0xff0000ff
 80032e0:	08017764 	.word	0x08017764
							} else {
								/* definition and creation of SD */
								sprintf((char *) dir_name,"/data/%s", Name);
 80032e4:	4a7d      	ldr	r2, [pc, #500]	; (80034dc <KeyboardTask+0x4f0>)
 80032e6:	497e      	ldr	r1, [pc, #504]	; (80034e0 <KeyboardTask+0x4f4>)
 80032e8:	487e      	ldr	r0, [pc, #504]	; (80034e4 <KeyboardTask+0x4f8>)
 80032ea:	f013 fd1d 	bl	8016d28 <siprintf>
								if(isDir == 1){
 80032ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d10a      	bne.n	800330c <KeyboardTask+0x320>
									instruction = F_CHDIR_0;
 80032f6:	230b      	movs	r3, #11
 80032f8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
									xQueueSend(SD_instructionHandle, &instruction, 0);
 80032fc:	4b7a      	ldr	r3, [pc, #488]	; (80034e8 <KeyboardTask+0x4fc>)
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	f107 0165 	add.w	r1, r7, #101	; 0x65
 8003304:	2300      	movs	r3, #0
 8003306:	2200      	movs	r2, #0
 8003308:	f011 f84a 	bl	80143a0 <xQueueGenericSend>
								}
								instruction = F_MKDIR;
 800330c:	2308      	movs	r3, #8
 800330e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
								xQueueSend(SD_instructionHandle, &instruction, 0);
 8003312:	4b75      	ldr	r3, [pc, #468]	; (80034e8 <KeyboardTask+0x4fc>)
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	f107 0165 	add.w	r1, r7, #101	; 0x65
 800331a:	2300      	movs	r3, #0
 800331c:	2200      	movs	r2, #0
 800331e:	f011 f83f 	bl	80143a0 <xQueueGenericSend>
								instruction = F_CHDIR;
 8003322:	230a      	movs	r3, #10
 8003324:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
								xQueueSend(SD_instructionHandle, &instruction, 0);
 8003328:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <KeyboardTask+0x4fc>)
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	f107 0165 	add.w	r1, r7, #101	; 0x65
 8003330:	2300      	movs	r3, #0
 8003332:	2200      	movs	r2, #0
 8003334:	f011 f834 	bl	80143a0 <xQueueGenericSend>
								isDir = 1;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							}
							BSP_LCD_SetLayerVisible(1, DISABLE);
 800333e:	2100      	movs	r1, #0
 8003340:	2001      	movs	r0, #1
 8003342:	f001 f9e7 	bl	8004714 <BSP_LCD_SetLayerVisible>
							BSP_LCD_SelectLayer(0);
 8003346:	2000      	movs	r0, #0
 8003348:	f001 f9d4 	bl	80046f4 <BSP_LCD_SelectLayer>
							vTaskResume(inputHandle);
 800334c:	4b67      	ldr	r3, [pc, #412]	; (80034ec <KeyboardTask+0x500>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f012 f98d 	bl	8015670 <vTaskResume>
							vTaskDelete(KBHandle);
 8003356:	4b66      	ldr	r3, [pc, #408]	; (80034f0 <KeyboardTask+0x504>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f011 fff8 	bl	8015350 <vTaskDelete>
						if(keyboard[Pressed_Y][Pressed_X] == BACKSPACE){
 8003360:	e0b1      	b.n	80034c6 <KeyboardTask+0x4da>

						// Caps enable
						}else if(keyboard[Pressed_Y][Pressed_X] == MAJ){
 8003362:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8003366:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 800336a:	4862      	ldr	r0, [pc, #392]	; (80034f4 <KeyboardTask+0x508>)
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4403      	add	r3, r0
 8003376:	440b      	add	r3, r1
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b14      	cmp	r3, #20
 800337c:	d10e      	bne.n	800339c <KeyboardTask+0x3b0>
							maj_en = !maj_en;
 800337e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
							Draw_Keyboard(maj_en);
 8003390:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe fe1f 	bl	8001fd8 <Draw_Keyboard>
						if(keyboard[Pressed_Y][Pressed_X] == BACKSPACE){
 800339a:	e094      	b.n	80034c6 <KeyboardTask+0x4da>
						}else{
							if(keyboard[Pressed_Y][Pressed_X] >= 'A' && keyboard[Pressed_Y][Pressed_X] <= 'z')Name[idx++] = keyboard[Pressed_Y][Pressed_X]+('A'-'a')*maj_en;
 800339c:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80033a0:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 80033a4:	4853      	ldr	r0, [pc, #332]	; (80034f4 <KeyboardTask+0x508>)
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4403      	add	r3, r0
 80033b0:	440b      	add	r3, r1
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d92b      	bls.n	8003410 <KeyboardTask+0x424>
 80033b8:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80033bc:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 80033c0:	484c      	ldr	r0, [pc, #304]	; (80034f4 <KeyboardTask+0x508>)
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4403      	add	r3, r0
 80033cc:	440b      	add	r3, r1
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b7a      	cmp	r3, #122	; 0x7a
 80033d2:	d81d      	bhi.n	8003410 <KeyboardTask+0x424>
 80033d4:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80033d8:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 80033dc:	4845      	ldr	r0, [pc, #276]	; (80034f4 <KeyboardTask+0x508>)
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4403      	add	r3, r0
 80033e8:	440b      	add	r3, r1
 80033ea:	7819      	ldrb	r1, [r3, #0]
 80033ec:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80033f0:	461a      	mov	r2, r3
 80033f2:	00d2      	lsls	r2, r2, #3
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	015b      	lsls	r3, r3, #5
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80033fe:	1c58      	adds	r0, r3, #1
 8003400:	f887 0076 	strb.w	r0, [r7, #118]	; 0x76
 8003404:	4618      	mov	r0, r3
 8003406:	188b      	adds	r3, r1, r2
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b34      	ldr	r3, [pc, #208]	; (80034dc <KeyboardTask+0x4f0>)
 800340c:	541a      	strb	r2, [r3, r0]
						if(keyboard[Pressed_Y][Pressed_X] == BACKSPACE){
 800340e:	e05a      	b.n	80034c6 <KeyboardTask+0x4da>
							else Name[idx++] = keyboard[Pressed_Y][Pressed_X];
 8003410:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8003414:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 8003418:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800341c:	1c58      	adds	r0, r3, #1
 800341e:	f887 0076 	strb.w	r0, [r7, #118]	; 0x76
 8003422:	461c      	mov	r4, r3
 8003424:	4833      	ldr	r0, [pc, #204]	; (80034f4 <KeyboardTask+0x508>)
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4403      	add	r3, r0
 8003430:	440b      	add	r3, r1
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	4b29      	ldr	r3, [pc, #164]	; (80034dc <KeyboardTask+0x4f0>)
 8003436:	551a      	strb	r2, [r3, r4]
						if(keyboard[Pressed_Y][Pressed_X] == BACKSPACE){
 8003438:	e045      	b.n	80034c6 <KeyboardTask+0x4da>
						}

					// If touch happened outside keyboard, deleting it
					} else if(TS_State.touchY[0] < 132){
 800343a:	8b3b      	ldrh	r3, [r7, #24]
 800343c:	2b83      	cmp	r3, #131	; 0x83
 800343e:	d83e      	bhi.n	80034be <KeyboardTask+0x4d2>
						xSemaphoreTake(mutex_LCDHandle, portMAX_DELAY);
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <KeyboardTask+0x50c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f04f 31ff 	mov.w	r1, #4294967295
 8003448:	4618      	mov	r0, r3
 800344a:	f011 facb 	bl	80149e4 <xQueueSemaphoreTake>
						BSP_LCD_SetTextColor(0xFFEEEEEE);
 800344e:	482b      	ldr	r0, [pc, #172]	; (80034fc <KeyboardTask+0x510>)
 8003450:	f001 f99e 	bl	8004790 <BSP_LCD_SetTextColor>
						BSP_LCD_FillRect(x+idx*7, y, x+Width-7*7, Height);
 8003454:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003458:	b29b      	uxth	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	00d2      	lsls	r2, r2, #3
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	b29a      	uxth	r2, r3
 8003462:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003466:	4413      	add	r3, r2
 8003468:	b298      	uxth	r0, r3
 800346a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800346e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003472:	4413      	add	r3, r2
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b31      	subs	r3, #49	; 0x31
 8003478:	b29a      	uxth	r2, r3
 800347a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800347e:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 8003482:	f001 fd03 	bl	8004e8c <BSP_LCD_FillRect>
						BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8003486:	481e      	ldr	r0, [pc, #120]	; (8003500 <KeyboardTask+0x514>)
 8003488:	f001 f982 	bl	8004790 <BSP_LCD_SetTextColor>
						xSemaphoreGive(mutex_LCDHandle);
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <KeyboardTask+0x50c>)
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	2300      	movs	r3, #0
 8003492:	2200      	movs	r2, #0
 8003494:	2100      	movs	r1, #0
 8003496:	f010 ff83 	bl	80143a0 <xQueueGenericSend>
						BSP_LCD_SetLayerVisible(1, DISABLE);
 800349a:	2100      	movs	r1, #0
 800349c:	2001      	movs	r0, #1
 800349e:	f001 f939 	bl	8004714 <BSP_LCD_SetLayerVisible>
						BSP_LCD_SelectLayer(0);
 80034a2:	2000      	movs	r0, #0
 80034a4:	f001 f926 	bl	80046f4 <BSP_LCD_SelectLayer>
						vTaskResume(inputHandle);
 80034a8:	4b10      	ldr	r3, [pc, #64]	; (80034ec <KeyboardTask+0x500>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f012 f8df 	bl	8015670 <vTaskResume>
						vTaskDelete(KBHandle);
 80034b2:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <KeyboardTask+0x504>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f011 ff4a 	bl	8015350 <vTaskDelete>
					}else state = 0;

					break;
 80034bc:	e00a      	b.n	80034d4 <KeyboardTask+0x4e8>
					}else state = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					break;
 80034c4:	e006      	b.n	80034d4 <KeyboardTask+0x4e8>
						if(keyboard[Pressed_Y][Pressed_X] == BACKSPACE){
 80034c6:	bf00      	nop
					break;
 80034c8:	e004      	b.n	80034d4 <KeyboardTask+0x4e8>

				default:
					state = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					break;
 80034d0:	e000      	b.n	80034d4 <KeyboardTask+0x4e8>
			}
		}
 80034d2:	bf00      	nop
		osDelay(10);
 80034d4:	200a      	movs	r0, #10
 80034d6:	f010 fb43 	bl	8013b60 <osDelay>
		BSP_LCD_SetFont(&Font12);
 80034da:	e5c6      	b.n	800306a <KeyboardTask+0x7e>
 80034dc:	2000f780 	.word	0x2000f780
 80034e0:	0801776c 	.word	0x0801776c
 80034e4:	2000f980 	.word	0x2000f980
 80034e8:	2000fb00 	.word	0x2000fb00
 80034ec:	2000f978 	.word	0x2000f978
 80034f0:	2000fb64 	.word	0x2000fb64
 80034f4:	20000028 	.word	0x20000028
 80034f8:	2000f77c 	.word	0x2000f77c
 80034fc:	ffeeeeee 	.word	0xffeeeeee
 8003500:	ff0000ff 	.word	0xff0000ff

08003504 <StartRecord>:
	}
	/* USER CODE END KeyboardTask */
}
void StartRecord(void const * argument)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	char i;
	uint32_t byteswritten,bytesread;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 800350c:	4b33      	ldr	r3, [pc, #204]	; (80035dc <StartRecord+0xd8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f107 0117 	add.w	r1, r7, #23
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	4618      	mov	r0, r3
 800351a:	f011 f97d 	bl	8014818 <xQueueReceive>
	  if (i==0){
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10c      	bne.n	800353e <StartRecord+0x3a>
		  f_write(&SDFile,(uint8_t*) (AUDIO_BUFFER_OUT) , AUDIO_BLOCK_SIZE,(void*) &byteswritten);
 8003524:	f107 0310 	add.w	r3, r7, #16
 8003528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800352c:	492c      	ldr	r1, [pc, #176]	; (80035e0 <StartRecord+0xdc>)
 800352e:	482d      	ldr	r0, [pc, #180]	; (80035e4 <StartRecord+0xe0>)
 8003530:	f00e feeb 	bl	801230a <f_write>
		  NB_Bloc++;
 8003534:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <StartRecord+0xe4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	4a2b      	ldr	r2, [pc, #172]	; (80035e8 <StartRecord+0xe4>)
 800353c:	6013      	str	r3, [r2, #0]
	  }
	  if (i==1){
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d10c      	bne.n	800355e <StartRecord+0x5a>
		  f_write(&SDFile,(uint8_t*) (AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE), AUDIO_BLOCK_SIZE,(void*) &byteswritten);
 8003544:	f107 0310 	add.w	r3, r7, #16
 8003548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800354c:	4927      	ldr	r1, [pc, #156]	; (80035ec <StartRecord+0xe8>)
 800354e:	4825      	ldr	r0, [pc, #148]	; (80035e4 <StartRecord+0xe0>)
 8003550:	f00e fedb 	bl	801230a <f_write>
		  NB_Bloc++;
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <StartRecord+0xe4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3301      	adds	r3, #1
 800355a:	4a23      	ldr	r2, [pc, #140]	; (80035e8 <StartRecord+0xe4>)
 800355c:	6013      	str	r3, [r2, #0]
	  }
	  if (i==2){
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d11b      	bne.n	800359c <StartRecord+0x98>
		  if (Bloc_Cursor++==NB_Bloc-1){
 8003564:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <StartRecord+0xec>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	4921      	ldr	r1, [pc, #132]	; (80035f0 <StartRecord+0xec>)
 800356c:	600a      	str	r2, [r1, #0]
 800356e:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <StartRecord+0xe4>)
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	3a01      	subs	r2, #1
 8003574:	4293      	cmp	r3, r2
 8003576:	d106      	bne.n	8003586 <StartRecord+0x82>
			  f_lseek(&SDFile, 44);
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	481a      	ldr	r0, [pc, #104]	; (80035e4 <StartRecord+0xe0>)
 800357c:	f00f f972 	bl	8012864 <f_lseek>
			  Bloc_Cursor=0;
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <StartRecord+0xec>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
		  }
		  f_read(&SDFile, ((uint8_t*)AUDIO_BUFFER_READ), AUDIO_BLOCK_SIZE,(void*) &bytesread);
 8003586:	f107 030c 	add.w	r3, r7, #12
 800358a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358e:	4919      	ldr	r1, [pc, #100]	; (80035f4 <StartRecord+0xf0>)
 8003590:	4814      	ldr	r0, [pc, #80]	; (80035e4 <StartRecord+0xe0>)
 8003592:	f00e fd4c 	bl	801202e <f_read>
		  //memcpy((uint16_t*) (AUDIO_BUFFER_OUT),(uint16_t*) (AUDIO_BUFFER_READ),AUDIO_BLOCK_SIZE);
		  Addition(0);
 8003596:	2000      	movs	r0, #0
 8003598:	f7fe fc36 	bl	8001e08 <Addition>
	  }
	  if (i==3){
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d1b4      	bne.n	800350c <StartRecord+0x8>
		  if (Bloc_Cursor++==NB_Bloc-1){
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <StartRecord+0xec>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	4911      	ldr	r1, [pc, #68]	; (80035f0 <StartRecord+0xec>)
 80035aa:	600a      	str	r2, [r1, #0]
 80035ac:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <StartRecord+0xe4>)
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	3a01      	subs	r2, #1
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d106      	bne.n	80035c4 <StartRecord+0xc0>
			  f_lseek(&SDFile, 44);
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	480a      	ldr	r0, [pc, #40]	; (80035e4 <StartRecord+0xe0>)
 80035ba:	f00f f953 	bl	8012864 <f_lseek>
			  Bloc_Cursor=0;
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <StartRecord+0xec>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
		  }
		  f_read(&SDFile, ((uint8_t*)AUDIO_BUFFER_READ+AUDIO_BLOCK_SIZE), AUDIO_BLOCK_SIZE,(void*) &bytesread);
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035cc:	490a      	ldr	r1, [pc, #40]	; (80035f8 <StartRecord+0xf4>)
 80035ce:	4805      	ldr	r0, [pc, #20]	; (80035e4 <StartRecord+0xe0>)
 80035d0:	f00e fd2d 	bl	801202e <f_read>
		  //memcpy((uint16_t*) (AUDIO_BUFFER_OUT+AUDIO_BLOCK_SIZE),(uint16_t*) (AUDIO_BUFFER_READ+AUDIO_BLOCK_SIZE),AUDIO_BLOCK_SIZE);
		  Addition(1);
 80035d4:	2001      	movs	r0, #1
 80035d6:	f7fe fc17 	bl	8001e08 <Addition>
	  xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 80035da:	e797      	b.n	800350c <StartRecord+0x8>
 80035dc:	2000f66c 	.word	0x2000f66c
 80035e0:	c00ff400 	.word	0xc00ff400
 80035e4:	2000fcec 	.word	0x2000fcec
 80035e8:	20000628 	.word	0x20000628
 80035ec:	c00ff600 	.word	0xc00ff600
 80035f0:	2000062c 	.word	0x2000062c
 80035f4:	c00ff800 	.word	0xc00ff800
 80035f8:	c00ffa00 	.word	0xc00ffa00

080035fc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	for (;;) {
		osDelay(1000);
 8003604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003608:	f010 faaa 	bl	8013b60 <osDelay>
 800360c:	e7fa      	b.n	8003604 <StartDefaultTask+0x8>
	...

08003610 <StartSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSD */
void StartSD(void const * argument)
{
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 8003616:	af02      	add	r7, sp, #8
 8003618:	1d3b      	adds	r3, r7, #4
 800361a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartSD */
	SD_Init();
 800361c:	f7fe fa52 	bl	8001ac4 <SD_Init>
	enable = 1;
 8003620:	4b7d      	ldr	r3, [pc, #500]	; (8003818 <StartSD+0x208>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]

	FRESULT res; /* FatFs function common result code */
	uint16_t rtext[_MAX_SS];
	SD_Instruction instruction;

	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003626:	f04f 30ff 	mov.w	r0, #4294967295
 800362a:	f001 f8fd 	bl	8004828 <BSP_LCD_Clear>

	osThreadDef(input, InputTask, osPriorityNormal, 0, 4096);
 800362e:	f107 030c 	add.w	r3, r7, #12
 8003632:	4a7a      	ldr	r2, [pc, #488]	; (800381c <StartSD+0x20c>)
 8003634:	461c      	mov	r4, r3
 8003636:	4615      	mov	r5, r2
 8003638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800363a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800363c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	inputHandle = osThreadCreate(osThread(input), NULL);
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f010 fa3c 	bl	8013ac8 <osThreadCreate>
 8003650:	4603      	mov	r3, r0
 8003652:	4a73      	ldr	r2, [pc, #460]	; (8003820 <StartSD+0x210>)
 8003654:	6013      	str	r3, [r2, #0]
	/* Infinite loop */
	for(;;)
	{
		xQueueReceive(SD_instructionHandle, &instruction, portMAX_DELAY);
 8003656:	4b73      	ldr	r3, [pc, #460]	; (8003824 <StartSD+0x214>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 800365e:	f04f 32ff 	mov.w	r2, #4294967295
 8003662:	4618      	mov	r0, r3
 8003664:	f011 f8d8 	bl	8014818 <xQueueReceive>

		switch(instruction){
 8003668:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	3b01      	subs	r3, #1
 8003670:	2b0a      	cmp	r3, #10
 8003672:	f200 80b9 	bhi.w	80037e8 <StartSD+0x1d8>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <StartSD+0x6c>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	080036a9 	.word	0x080036a9
 8003680:	080037e9 	.word	0x080037e9
 8003684:	080037e9 	.word	0x080037e9
 8003688:	08003767 	.word	0x08003767
 800368c:	080036cf 	.word	0x080036cf
 8003690:	080036f5 	.word	0x080036f5
 8003694:	08003719 	.word	0x08003719
 8003698:	08003747 	.word	0x08003747
 800369c:	08003789 	.word	0x08003789
 80036a0:	080037a9 	.word	0x080037a9
 80036a4:	080037c9 	.word	0x080037c9
			case F_OPEN:
				if((res = f_open(&SDFile, f_name, FA_CREATE_ALWAYS | FA_WRITE | FA_READ)) != FR_OK)Error_Display(res);
 80036a8:	220b      	movs	r2, #11
 80036aa:	495f      	ldr	r1, [pc, #380]	; (8003828 <StartSD+0x218>)
 80036ac:	485f      	ldr	r0, [pc, #380]	; (800382c <StartSD+0x21c>)
 80036ae:	f00e faf9 	bl	8011ca4 <f_open>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 80036b8:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8095 	beq.w	80037ec <StartSD+0x1dc>
 80036c2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff f848 	bl	800275c <Error_Display>
				break;
 80036cc:	e08e      	b.n	80037ec <StartSD+0x1dc>

			case UNMOUNT:
				if ((res = f_mount(&SDFatFS, (TCHAR const*)NULL, 0)) != FR_OK)Error_Display(res);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2100      	movs	r1, #0
 80036d2:	4857      	ldr	r0, [pc, #348]	; (8003830 <StartSD+0x220>)
 80036d4:	f00e fa82 	bl	8011bdc <f_mount>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 80036de:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8084 	beq.w	80037f0 <StartSD+0x1e0>
 80036e8:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f835 	bl	800275c <Error_Display>
				break;
 80036f2:	e07d      	b.n	80037f0 <StartSD+0x1e0>

			case MOUNT:
				if ((res = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0)) != FR_OK)Error_Display(res);
 80036f4:	2200      	movs	r2, #0
 80036f6:	494f      	ldr	r1, [pc, #316]	; (8003834 <StartSD+0x224>)
 80036f8:	484d      	ldr	r0, [pc, #308]	; (8003830 <StartSD+0x220>)
 80036fa:	f00e fa6f 	bl	8011bdc <f_mount>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 8003704:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8003708:	2b00      	cmp	r3, #0
 800370a:	d073      	beq.n	80037f4 <StartSD+0x1e4>
 800370c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff f823 	bl	800275c <Error_Display>
				break;
 8003716:	e06d      	b.n	80037f4 <StartSD+0x1e4>

			case FORMAT:
				if ((res = f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext))) != FR_OK)Error_Display(res);
 8003718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800371c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003720:	9200      	str	r2, [sp, #0]
 8003722:	2200      	movs	r2, #0
 8003724:	2107      	movs	r1, #7
 8003726:	4843      	ldr	r0, [pc, #268]	; (8003834 <StartSD+0x224>)
 8003728:	f00f fcae 	bl	8013088 <f_mkfs>
 800372c:	4603      	mov	r3, r0
 800372e:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 8003732:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8003736:	2b00      	cmp	r3, #0
 8003738:	d05e      	beq.n	80037f8 <StartSD+0x1e8>
 800373a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff f80c 	bl	800275c <Error_Display>
				break;
 8003744:	e058      	b.n	80037f8 <StartSD+0x1e8>

			case F_MKDIR:
				if ((res = f_mkdir(dir_name)) != FR_OK)Error_Display(res);
 8003746:	483c      	ldr	r0, [pc, #240]	; (8003838 <StartSD+0x228>)
 8003748:	f00f fb83 	bl	8012e52 <f_mkdir>
 800374c:	4603      	mov	r3, r0
 800374e:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 8003752:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8003756:	2b00      	cmp	r3, #0
 8003758:	d050      	beq.n	80037fc <StartSD+0x1ec>
 800375a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fffc 	bl	800275c <Error_Display>
				break;
 8003764:	e04a      	b.n	80037fc <StartSD+0x1ec>

			case F_OPENDIR:
				if ((res = f_opendir(&SDDir, dir_name)) != FR_OK)Error_Display(res);
 8003766:	4934      	ldr	r1, [pc, #208]	; (8003838 <StartSD+0x228>)
 8003768:	4834      	ldr	r0, [pc, #208]	; (800383c <StartSD+0x22c>)
 800376a:	f00f face 	bl	8012d0a <f_opendir>
 800376e:	4603      	mov	r3, r0
 8003770:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 8003774:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8003778:	2b00      	cmp	r3, #0
 800377a:	d041      	beq.n	8003800 <StartSD+0x1f0>
 800377c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe ffeb 	bl	800275c <Error_Display>
				break;
 8003786:	e03b      	b.n	8003800 <StartSD+0x1f0>

			case F_CLOSEDIR:
				if ((res = f_closedir(&SDDir)) != FR_OK)Error_Display(res);
 8003788:	482c      	ldr	r0, [pc, #176]	; (800383c <StartSD+0x22c>)
 800378a:	f00f fb37 	bl	8012dfc <f_closedir>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 8003794:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8003798:	2b00      	cmp	r3, #0
 800379a:	d033      	beq.n	8003804 <StartSD+0x1f4>
 800379c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe ffdb 	bl	800275c <Error_Display>
				break;
 80037a6:	e02d      	b.n	8003804 <StartSD+0x1f4>

			case F_CHDIR:
				if ((res = f_chdir(dir_name)) != FR_OK)Error_Display(res);
 80037a8:	4823      	ldr	r0, [pc, #140]	; (8003838 <StartSD+0x228>)
 80037aa:	f00f f80a 	bl	80127c2 <f_chdir>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 80037b4:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d025      	beq.n	8003808 <StartSD+0x1f8>
 80037bc:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe ffcb 	bl	800275c <Error_Display>
				break;
 80037c6:	e01f      	b.n	8003808 <StartSD+0x1f8>

			case F_CHDIR_0:
				if ((res = f_chdir("/data")) != FR_OK)Error_Display(res);
 80037c8:	481d      	ldr	r0, [pc, #116]	; (8003840 <StartSD+0x230>)
 80037ca:	f00e fffa 	bl	80127c2 <f_chdir>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 80037d4:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <StartSD+0x1fc>
 80037dc:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe ffbb 	bl	800275c <Error_Display>
				break;
 80037e6:	e011      	b.n	800380c <StartSD+0x1fc>

			default:
				break;
 80037e8:	bf00      	nop
 80037ea:	e010      	b.n	800380e <StartSD+0x1fe>
				break;
 80037ec:	bf00      	nop
 80037ee:	e00e      	b.n	800380e <StartSD+0x1fe>
				break;
 80037f0:	bf00      	nop
 80037f2:	e00c      	b.n	800380e <StartSD+0x1fe>
				break;
 80037f4:	bf00      	nop
 80037f6:	e00a      	b.n	800380e <StartSD+0x1fe>
				break;
 80037f8:	bf00      	nop
 80037fa:	e008      	b.n	800380e <StartSD+0x1fe>
				break;
 80037fc:	bf00      	nop
 80037fe:	e006      	b.n	800380e <StartSD+0x1fe>
				break;
 8003800:	bf00      	nop
 8003802:	e004      	b.n	800380e <StartSD+0x1fe>
				break;
 8003804:	bf00      	nop
 8003806:	e002      	b.n	800380e <StartSD+0x1fe>
				break;
 8003808:	bf00      	nop
 800380a:	e000      	b.n	800380e <StartSD+0x1fe>
				break;
 800380c:	bf00      	nop
		}
		osDelay(10);
 800380e:	200a      	movs	r0, #10
 8003810:	f010 f9a6 	bl	8013b60 <osDelay>
		xQueueReceive(SD_instructionHandle, &instruction, portMAX_DELAY);
 8003814:	e71f      	b.n	8003656 <StartSD+0x46>
 8003816:	bf00      	nop
 8003818:	20000626 	.word	0x20000626
 800381c:	08017778 	.word	0x08017778
 8003820:	2000f978 	.word	0x2000f978
 8003824:	2000fb00 	.word	0x2000fb00
 8003828:	2000f758 	.word	0x2000f758
 800382c:	2000fcec 	.word	0x2000fcec
 8003830:	2000ff1c 	.word	0x2000ff1c
 8003834:	2000fce8 	.word	0x2000fce8
 8003838:	2000f980 	.word	0x2000f980
 800383c:	2000f990 	.word	0x2000f990
 8003840:	0801771c 	.word	0x0801771c

08003844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003856:	f004 fd85 	bl	8008364 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40001000 	.word	0x40001000

08003868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800386c:	b672      	cpsid	i
}
 800386e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003870:	e7fe      	b.n	8003870 <Error_Handler+0x8>
	...

08003874 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	; 0x30
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a51      	ldr	r2, [pc, #324]	; (80039c4 <I2Cx_MspInit+0x150>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d14d      	bne.n	8003920 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <I2Cx_MspInit+0x154>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	4a4f      	ldr	r2, [pc, #316]	; (80039c8 <I2Cx_MspInit+0x154>)
 800388a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388e:	6313      	str	r3, [r2, #48]	; 0x30
 8003890:	4b4d      	ldr	r3, [pc, #308]	; (80039c8 <I2Cx_MspInit+0x154>)
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80038a0:	2312      	movs	r3, #18
 80038a2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80038a8:	2302      	movs	r3, #2
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80038ac:	2304      	movs	r3, #4
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80038b0:	f107 031c 	add.w	r3, r7, #28
 80038b4:	4619      	mov	r1, r3
 80038b6:	4845      	ldr	r0, [pc, #276]	; (80039cc <I2Cx_MspInit+0x158>)
 80038b8:	f005 fd0a 	bl	80092d0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80038bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80038c2:	f107 031c 	add.w	r3, r7, #28
 80038c6:	4619      	mov	r1, r3
 80038c8:	4840      	ldr	r0, [pc, #256]	; (80039cc <I2Cx_MspInit+0x158>)
 80038ca:	f005 fd01 	bl	80092d0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80038ce:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <I2Cx_MspInit+0x154>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a3d      	ldr	r2, [pc, #244]	; (80039c8 <I2Cx_MspInit+0x154>)
 80038d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <I2Cx_MspInit+0x154>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80038e6:	4b38      	ldr	r3, [pc, #224]	; (80039c8 <I2Cx_MspInit+0x154>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	4a37      	ldr	r2, [pc, #220]	; (80039c8 <I2Cx_MspInit+0x154>)
 80038ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038f0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80038f2:	4b35      	ldr	r3, [pc, #212]	; (80039c8 <I2Cx_MspInit+0x154>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	4a34      	ldr	r2, [pc, #208]	; (80039c8 <I2Cx_MspInit+0x154>)
 80038f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038fc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80038fe:	2200      	movs	r2, #0
 8003900:	210f      	movs	r1, #15
 8003902:	2048      	movs	r0, #72	; 0x48
 8003904:	f004 fe2a 	bl	800855c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003908:	2048      	movs	r0, #72	; 0x48
 800390a:	f004 fe43 	bl	8008594 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800390e:	2200      	movs	r2, #0
 8003910:	210f      	movs	r1, #15
 8003912:	2049      	movs	r0, #73	; 0x49
 8003914:	f004 fe22 	bl	800855c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003918:	2049      	movs	r0, #73	; 0x49
 800391a:	f004 fe3b 	bl	8008594 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800391e:	e04d      	b.n	80039bc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <I2Cx_MspInit+0x154>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	4a28      	ldr	r2, [pc, #160]	; (80039c8 <I2Cx_MspInit+0x154>)
 8003926:	f043 0302 	orr.w	r3, r3, #2
 800392a:	6313      	str	r3, [r2, #48]	; 0x30
 800392c:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <I2Cx_MspInit+0x154>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800393c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800393e:	2312      	movs	r3, #18
 8003940:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003946:	2302      	movs	r3, #2
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800394a:	2304      	movs	r3, #4
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800394e:	f107 031c 	add.w	r3, r7, #28
 8003952:	4619      	mov	r1, r3
 8003954:	481e      	ldr	r0, [pc, #120]	; (80039d0 <I2Cx_MspInit+0x15c>)
 8003956:	f005 fcbb 	bl	80092d0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800395a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800395e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003960:	f107 031c 	add.w	r3, r7, #28
 8003964:	4619      	mov	r1, r3
 8003966:	481a      	ldr	r0, [pc, #104]	; (80039d0 <I2Cx_MspInit+0x15c>)
 8003968:	f005 fcb2 	bl	80092d0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800396c:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <I2Cx_MspInit+0x154>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <I2Cx_MspInit+0x154>)
 8003972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <I2Cx_MspInit+0x154>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <I2Cx_MspInit+0x154>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4a0f      	ldr	r2, [pc, #60]	; (80039c8 <I2Cx_MspInit+0x154>)
 800398a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800398e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003990:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <I2Cx_MspInit+0x154>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <I2Cx_MspInit+0x154>)
 8003996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800399a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800399c:	2200      	movs	r2, #0
 800399e:	210f      	movs	r1, #15
 80039a0:	201f      	movs	r0, #31
 80039a2:	f004 fddb 	bl	800855c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80039a6:	201f      	movs	r0, #31
 80039a8:	f004 fdf4 	bl	8008594 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80039ac:	2200      	movs	r2, #0
 80039ae:	210f      	movs	r1, #15
 80039b0:	2020      	movs	r0, #32
 80039b2:	f004 fdd3 	bl	800855c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80039b6:	2020      	movs	r0, #32
 80039b8:	f004 fdec 	bl	8008594 <HAL_NVIC_EnableIRQ>
}
 80039bc:	bf00      	nop
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000634 	.word	0x20000634
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40021c00 	.word	0x40021c00
 80039d0:	40020400 	.word	0x40020400

080039d4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f006 fa63 	bl	8009ea8 <HAL_I2C_GetState>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d125      	bne.n	8003a34 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <I2Cx_Init+0x68>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d103      	bne.n	80039f8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <I2Cx_Init+0x6c>)
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e002      	b.n	80039fe <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <I2Cx_Init+0x70>)
 80039fc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <I2Cx_Init+0x74>)
 8003a02:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff ff23 	bl	8003874 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f005 ff38 	bl	80098a4 <HAL_I2C_Init>
  }
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000634 	.word	0x20000634
 8003a40:	40005c00 	.word	0x40005c00
 8003a44:	40005400 	.word	0x40005400
 8003a48:	40912732 	.word	0x40912732

08003a4c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af04      	add	r7, sp, #16
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	4608      	mov	r0, r1
 8003a56:	4611      	mov	r1, r2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	72fb      	strb	r3, [r7, #11]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	813b      	strh	r3, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	b299      	uxth	r1, r3
 8003a6e:	88f8      	ldrh	r0, [r7, #6]
 8003a70:	893a      	ldrh	r2, [r7, #8]
 8003a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a76:	9302      	str	r3, [sp, #8]
 8003a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	4603      	mov	r3, r0
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f006 f8f6 	bl	8009c74 <HAL_I2C_Mem_Read>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003a92:	7afb      	ldrb	r3, [r7, #11]
 8003a94:	4619      	mov	r1, r3
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f832 	bl	8003b00 <I2Cx_Error>
  }
  return status;    
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b08a      	sub	sp, #40	; 0x28
 8003aaa:	af04      	add	r7, sp, #16
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	4608      	mov	r0, r1
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	72fb      	strb	r3, [r7, #11]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	813b      	strh	r3, [r7, #8]
 8003abc:	4613      	mov	r3, r2
 8003abe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003ac4:	7afb      	ldrb	r3, [r7, #11]
 8003ac6:	b299      	uxth	r1, r3
 8003ac8:	88f8      	ldrh	r0, [r7, #6]
 8003aca:	893a      	ldrh	r2, [r7, #8]
 8003acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ad0:	9302      	str	r3, [sp, #8]
 8003ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	4603      	mov	r3, r0
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f005 ffb5 	bl	8009a4c <HAL_I2C_Mem_Write>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003aec:	7afb      	ldrb	r3, [r7, #11]
 8003aee:	4619      	mov	r1, r3
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f805 	bl	8003b00 <I2Cx_Error>
  }
  return status;
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f005 ff59 	bl	80099c4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff ff5e 	bl	80039d4 <I2Cx_Init>
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <AUDIO_IO_Init+0x10>)
 8003b26:	f7ff ff55 	bl	80039d4 <I2Cx_Init>
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000634 	.word	0x20000634

08003b34 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	80bb      	strh	r3, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003b56:	887b      	ldrh	r3, [r7, #2]
 8003b58:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003b5a:	89fb      	ldrh	r3, [r7, #14]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003b62:	89fb      	ldrh	r3, [r7, #14]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	b21a      	sxth	r2, r3
 8003b6a:	887b      	ldrh	r3, [r7, #2]
 8003b6c:	b21b      	sxth	r3, r3
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	b21b      	sxth	r3, r3
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003b76:	88ba      	ldrh	r2, [r7, #4]
 8003b78:	79f9      	ldrb	r1, [r7, #7]
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	1cbb      	adds	r3, r7, #2
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2302      	movs	r3, #2
 8003b84:	4803      	ldr	r0, [pc, #12]	; (8003b94 <AUDIO_IO_Write+0x50>)
 8003b86:	f7ff ff8e 	bl	8003aa6 <I2Cx_WriteMultiple>
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000634 	.word	0x20000634

08003b98 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	460a      	mov	r2, r1
 8003ba2:	71fb      	strb	r3, [r7, #7]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	81bb      	strh	r3, [r7, #12]
 8003bac:	2300      	movs	r3, #0
 8003bae:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003bb0:	88ba      	ldrh	r2, [r7, #4]
 8003bb2:	79f9      	ldrb	r1, [r7, #7]
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	480a      	ldr	r0, [pc, #40]	; (8003bec <AUDIO_IO_Read+0x54>)
 8003bc2:	f7ff ff43 	bl	8003a4c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003bc6:	89bb      	ldrh	r3, [r7, #12]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003bcc:	89bb      	ldrh	r3, [r7, #12]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	b21a      	sxth	r2, r3
 8003bd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	b21b      	sxth	r3, r3
 8003bdc:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003bde:	89fb      	ldrh	r3, [r7, #14]
 8003be0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003be2:	89bb      	ldrh	r3, [r7, #12]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000634 	.word	0x20000634

08003bf0 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f004 fbd3 	bl	80083a4 <HAL_Delay>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003c0c:	4802      	ldr	r0, [pc, #8]	; (8003c18 <TS_IO_Init+0x10>)
 8003c0e:	f7ff fee1 	bl	80039d4 <I2Cx_Init>
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000634 	.word	0x20000634

08003c1c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
 8003c26:	460b      	mov	r3, r1
 8003c28:	71bb      	strb	r3, [r7, #6]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003c2e:	79bb      	ldrb	r3, [r7, #6]
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	79f9      	ldrb	r1, [r7, #7]
 8003c34:	2301      	movs	r3, #1
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	1d7b      	adds	r3, r7, #5
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	4803      	ldr	r0, [pc, #12]	; (8003c4c <TS_IO_Write+0x30>)
 8003c40:	f7ff ff31 	bl	8003aa6 <I2Cx_WriteMultiple>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000634 	.word	0x20000634

08003c50 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	4603      	mov	r3, r0
 8003c58:	460a      	mov	r2, r1
 8003c5a:	71fb      	strb	r3, [r7, #7]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003c64:	79bb      	ldrb	r3, [r7, #6]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	79f9      	ldrb	r1, [r7, #7]
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	f107 030f 	add.w	r3, r7, #15
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2301      	movs	r3, #1
 8003c76:	4804      	ldr	r0, [pc, #16]	; (8003c88 <TS_IO_Read+0x38>)
 8003c78:	f7ff fee8 	bl	8003a4c <I2Cx_ReadMultiple>

  return read_value;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000634 	.word	0x20000634

08003c8c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f004 fb85 	bl	80083a4 <HAL_Delay>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <BSP_AUDIO_OUT_Play>:
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data in BYTES unit.
 *         In memory, first element is for left channel, second element is for right channel
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <BSP_AUDIO_OUT_Play+0x4c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	b292      	uxth	r2, r2
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	2034      	movs	r0, #52	; 0x34
 8003cbc:	4798      	blx	r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e00f      	b.n	8003ce8 <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cce:	d203      	bcs.n	8003cd8 <BSP_AUDIO_OUT_Play+0x34>
				DMA_MAX(Size / AUDIODATA_SIZE));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	085b      	lsrs	r3, r3, #1
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	e001      	b.n	8003cdc <BSP_AUDIO_OUT_Play+0x38>
 8003cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4804      	ldr	r0, [pc, #16]	; (8003cf4 <BSP_AUDIO_OUT_Play+0x50>)
 8003ce2:	f008 fb83 	bl	800c3ec <HAL_SAI_Transmit_DMA>

		return AUDIO_OK;
 8003ce6:	2300      	movs	r3, #0
	}
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	2000fbb4 	.word	0x2000fbb4
 8003cf4:	20000680 	.word	0x20000680

08003cf8 <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeOut(AUDIO_I2C_ADDRESS, Volume) != 0) {
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	79fa      	ldrb	r2, [r7, #7]
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	2034      	movs	r0, #52	; 0x34
 8003d0e:	4798      	blx	r3
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 8003d1a:	2300      	movs	r3, #0
	}
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	2000fbb4 	.word	0x2000fbb4

08003d28 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
 *            @arg CODEC_AUDIOFRAME_SLOT_13
 * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
 *         audio frame slot.
 * @retval None
 */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d3e:	601a      	str	r2, [r3, #0]

	/* Update the SAI audio frame slot configuration */
	haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8003d40:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6613      	str	r3, [r2, #96]	; 0x60
	HAL_SAI_Init(&haudio_out_sai);
 8003d46:	4807      	ldr	r0, [pc, #28]	; (8003d64 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003d48:	f008 f99c 	bl	800c084 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d5a:	601a      	str	r2, [r3, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000680 	.word	0x20000680

08003d68 <HAL_SAI_TxCpltCallback>:
/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_TransferComplete_CallBack();
 8003d70:	f000 f834 	bl	8003ddc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_SAI_TxHalfCpltCallback>:
/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8003d84:	f000 f831 	bl	8003dea <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_SAI_ErrorCallback>:
/**
 * @brief  SAI error callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	HAL_SAI_StateTypeDef audio_out_state;
	HAL_SAI_StateTypeDef audio_in_state;

	audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003d98:	480e      	ldr	r0, [pc, #56]	; (8003dd4 <HAL_SAI_ErrorCallback+0x44>)
 8003d9a:	f008 fc65 	bl	800c668 <HAL_SAI_GetState>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	73fb      	strb	r3, [r7, #15]
	audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003da2:	480d      	ldr	r0, [pc, #52]	; (8003dd8 <HAL_SAI_ErrorCallback+0x48>)
 8003da4:	f008 fc60 	bl	800c668 <HAL_SAI_GetState>
 8003da8:	4603      	mov	r3, r0
 8003daa:	73bb      	strb	r3, [r7, #14]

	/* Determines if it is an audio out or audio in error */
	if ((audio_out_state == HAL_SAI_STATE_BUSY)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d002      	beq.n	8003db8 <HAL_SAI_ErrorCallback+0x28>
			|| (audio_out_state == HAL_SAI_STATE_BUSY_TX)) {
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	2b12      	cmp	r3, #18
 8003db6:	d101      	bne.n	8003dbc <HAL_SAI_ErrorCallback+0x2c>
		BSP_AUDIO_OUT_Error_CallBack();
 8003db8:	f000 f81e 	bl	8003df8 <BSP_AUDIO_OUT_Error_CallBack>
	}

	if ((audio_in_state == HAL_SAI_STATE_BUSY)
 8003dbc:	7bbb      	ldrb	r3, [r7, #14]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d002      	beq.n	8003dc8 <HAL_SAI_ErrorCallback+0x38>
			|| (audio_in_state == HAL_SAI_STATE_BUSY_RX)) {
 8003dc2:	7bbb      	ldrb	r3, [r7, #14]
 8003dc4:	2b22      	cmp	r3, #34	; 0x22
 8003dc6:	d101      	bne.n	8003dcc <HAL_SAI_ErrorCallback+0x3c>
		BSP_AUDIO_IN_Error_CallBack();
 8003dc8:	f000 fa16 	bl	80041f8 <BSP_AUDIO_IN_Error_CallBack>
	}
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000680 	.word	0x20000680
 8003dd8:	20000704 	.word	0x20000704

08003ddc <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
 * @brief  Manages the DMA full Transfer complete event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

/**
 * @brief  Manages the DMA Half Transfer complete event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void) {
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <BSP_AUDIO_OUT_Error_CallBack>:

/**
 * @brief  Manages the DMA FIFO error event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <BSP_AUDIO_OUT_MspInit>:
 * @brief  Initializes BSP_AUDIO_OUT MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	; 0x30
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_tx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_OUT_SAIx_CLK_ENABLE();
 8003e12:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	4a62      	ldr	r2, [pc, #392]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e1e:	4b60      	ldr	r3, [pc, #384]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	69bb      	ldr	r3, [r7, #24]

	/* Enable GPIO clock */
	AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003e2a:	4b5d      	ldr	r3, [pc, #372]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a5c      	ldr	r2, [pc, #368]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b5a      	ldr	r3, [pc, #360]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	697b      	ldr	r3, [r7, #20]
	AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003e42:	4b57      	ldr	r3, [pc, #348]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a56      	ldr	r2, [pc, #344]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]
	AUDIO_OUT_SAIx_FS_ENABLE();
 8003e5a:	4b51      	ldr	r3, [pc, #324]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4a50      	ldr	r2, [pc, #320]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6313      	str	r3, [r2, #48]	; 0x30
 8003e66:	4b4e      	ldr	r3, [pc, #312]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
	/* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
	gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003e82:	230a      	movs	r3, #10
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003e86:	f107 031c 	add.w	r3, r7, #28
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4845      	ldr	r0, [pc, #276]	; (8003fa4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003e8e:	f005 fa1f 	bl	80092d0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003e92:	2320      	movs	r3, #32
 8003e94:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003e96:	2302      	movs	r3, #2
 8003e98:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003ea2:	230a      	movs	r3, #10
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003ea6:	f107 031c 	add.w	r3, r7, #28
 8003eaa:	4619      	mov	r1, r3
 8003eac:	483d      	ldr	r0, [pc, #244]	; (8003fa4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003eae:	f005 fa0f 	bl	80092d0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 8003eb2:	2340      	movs	r3, #64	; 0x40
 8003eb4:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003ec2:	230a      	movs	r3, #10
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003ec6:	f107 031c 	add.w	r3, r7, #28
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4835      	ldr	r0, [pc, #212]	; (8003fa4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003ece:	f005 f9ff 	bl	80092d0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003ed2:	2310      	movs	r3, #16
 8003ed4:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003ee2:	230a      	movs	r3, #10
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8003ee6:	f107 031c 	add.w	r3, r7, #28
 8003eea:	4619      	mov	r1, r3
 8003eec:	482d      	ldr	r0, [pc, #180]	; (8003fa4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003eee:	f005 f9ef 	bl	80092d0 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]

	if (hsai->Instance == AUDIO_OUT_SAIx) {
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d138      	bne.n	8003f86 <BSP_AUDIO_OUT_MspInit+0x17e>
		/* Configure the hdma_saiTx handle parameters */
		hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f16:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003f1a:	605a      	str	r2, [r3, #4]
		hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f1e:	2240      	movs	r2, #64	; 0x40
 8003f20:	609a      	str	r2, [r3, #8]
		hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f22:	4b22      	ldr	r3, [pc, #136]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	60da      	str	r2, [r3, #12]
		hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f28:	4b20      	ldr	r3, [pc, #128]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f2e:	611a      	str	r2, [r3, #16]
		hdma_sai_tx.Init.PeriphDataAlignment =
 8003f30:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f36:	615a      	str	r2, [r3, #20]
				AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003f38:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f3e:	619a      	str	r2, [r3, #24]
		hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 8003f40:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f46:	61da      	str	r2, [r3, #28]
		hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f48:	4b18      	ldr	r3, [pc, #96]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f4e:	621a      	str	r2, [r3, #32]
		hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f50:	4b16      	ldr	r3, [pc, #88]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f52:	2204      	movs	r2, #4
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f58:	2203      	movs	r2, #3
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003f5c:	4b13      	ldr	r3, [pc, #76]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003f68:	4b10      	ldr	r3, [pc, #64]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f6a:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003f6c:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a0e      	ldr	r2, [pc, #56]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f72:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f74:	4a0d      	ldr	r2, [pc, #52]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_tx);
 8003f7a:	480c      	ldr	r0, [pc, #48]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f7c:	f004 fbc6 	bl	800870c <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_tx);
 8003f80:	480a      	ldr	r0, [pc, #40]	; (8003fac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f82:	f004 fb15 	bl	80085b0 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003f86:	2200      	movs	r2, #0
 8003f88:	210e      	movs	r1, #14
 8003f8a:	203c      	movs	r0, #60	; 0x3c
 8003f8c:	f004 fae6 	bl	800855c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8003f90:	203c      	movs	r0, #60	; 0x3c
 8003f92:	f004 faff 	bl	8008594 <HAL_NVIC_EnableIRQ>
}
 8003f96:	bf00      	nop
 8003f98:	3730      	adds	r7, #48	; 0x30
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40015c04 	.word	0x40015c04
 8003fac:	20000788 	.word	0x20000788
 8003fb0:	40026470 	.word	0x40026470

08003fb4 <BSP_AUDIO_OUT_ClockConfig>:
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai,
		uint32_t AudioFreq, void *Params) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b0a6      	sub	sp, #152	; 0x98
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

	HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f007 fe0d 	bl	800bbe4 <HAL_RCCEx_GetPeriphCLKConfig>

	/* Set the PLL configuration according to the audio frequency */
	if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f245 6222 	movw	r2, #22050	; 0x5622
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <BSP_AUDIO_OUT_ClockConfig+0x34>
			|| (AudioFreq == AUDIO_FREQUENCY_44K)) {
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d112      	bne.n	800400e <BSP_AUDIO_OUT_ClockConfig+0x5a>
		/* Configure PLLI2S prescalers */
		/* PLLI2S_VCO: VCO_429M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003fe8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fec:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003fee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ff2:	657b      	str	r3, [r7, #84]	; 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8003ff4:	f240 13ad 	movw	r3, #429	; 0x1ad
 8003ff8:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003ffe:	2313      	movs	r3, #19
 8004000:	63bb      	str	r3, [r7, #56]	; 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	4618      	mov	r0, r3
 8004008:	f007 f9fc 	bl	800b404 <HAL_RCCEx_PeriphCLKConfig>
 800400c:	e012      	b.n	8004034 <BSP_AUDIO_OUT_ClockConfig+0x80>
	{
		/* I2S clock config
		 PLLI2S_VCO: VCO_344M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800400e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004012:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004014:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004018:	657b      	str	r3, [r7, #84]	; 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800401a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800401e:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8004020:	2307      	movs	r3, #7
 8004022:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004024:	2301      	movs	r3, #1
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	4618      	mov	r0, r3
 800402e:	f007 f9e9 	bl	800b404 <HAL_RCCEx_PeriphCLKConfig>
	}
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	3798      	adds	r7, #152	; 0x98
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <SAIx_Out_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void) {
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <SAIx_Out_DeInit+0x24>)
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <SAIx_Out_DeInit+0x28>)
 8004044:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <SAIx_Out_DeInit+0x24>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <SAIx_Out_DeInit+0x24>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004054:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_out_sai);
 8004056:	4802      	ldr	r0, [pc, #8]	; (8004060 <SAIx_Out_DeInit+0x24>)
 8004058:	f008 f992 	bl	800c380 <HAL_SAI_DeInit>
}
 800405c:	bf00      	nop
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000680 	.word	0x20000680
 8004064:	40015c04 	.word	0x40015c04

08004068 <BSP_AUDIO_IN_OUT_Init>:
 * @param  BitRes: Audio frequency to be configured.
 * @param  ChnlNbr: Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice,
		uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b089      	sub	sp, #36	; 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60ba      	str	r2, [r7, #8]
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	4603      	mov	r3, r0
 8004074:	81fb      	strh	r3, [r7, #14]
 8004076:	460b      	mov	r3, r1
 8004078:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = AUDIO_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	77fb      	strb	r3, [r7, #31]
	uint32_t deviceid = 0x00;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
	uint32_t slot_active;

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8004082:	89fb      	ldrh	r3, [r7, #14]
 8004084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004088:	d006      	beq.n	8004098 <BSP_AUDIO_IN_OUT_Init+0x30>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)) /* Only MICROPHONE_2 input supported */
 800408a:	89fb      	ldrh	r3, [r7, #14]
 800408c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004090:	d002      	beq.n	8004098 <BSP_AUDIO_IN_OUT_Init+0x30>
			{
		ret = AUDIO_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e054      	b.n	8004142 <BSP_AUDIO_IN_OUT_Init+0xda>
	} else {
		/* Disable SAI */
		SAIx_In_DeInit();
 8004098:	f000 fa1e 	bl	80044d8 <SAIx_In_DeInit>
		SAIx_Out_DeInit();
 800409c:	f7ff ffce 	bl	800403c <SAIx_Out_DeInit>

		/* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
		BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80040a0:	2200      	movs	r2, #0
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	4829      	ldr	r0, [pc, #164]	; (800414c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80040a6:	f7ff ff85 	bl	8003fb4 <BSP_AUDIO_OUT_ClockConfig>

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
		haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80040aa:	4b28      	ldr	r3, [pc, #160]	; (800414c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80040ac:	4a28      	ldr	r2, [pc, #160]	; (8004150 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 80040ae:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET) {
 80040b0:	4826      	ldr	r0, [pc, #152]	; (800414c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80040b2:	f008 fad9 	bl	800c668 <HAL_SAI_GetState>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <BSP_AUDIO_IN_OUT_Init+0x5c>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80040bc:	2100      	movs	r1, #0
 80040be:	4823      	ldr	r0, [pc, #140]	; (800414c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80040c0:	f000 f8a2 	bl	8004208 <BSP_AUDIO_IN_MspInit>
		}

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
		haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80040c4:	4b23      	ldr	r3, [pc, #140]	; (8004154 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80040c6:	4a24      	ldr	r2, [pc, #144]	; (8004158 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 80040c8:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET) {
 80040ca:	4822      	ldr	r0, [pc, #136]	; (8004154 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80040cc:	f008 facc 	bl	800c668 <HAL_SAI_GetState>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <BSP_AUDIO_IN_OUT_Init+0x76>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80040d6:	2100      	movs	r1, #0
 80040d8:	481e      	ldr	r0, [pc, #120]	; (8004154 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80040da:	f7ff fe95 	bl	8003e08 <BSP_AUDIO_OUT_MspInit>

		/* Configure SAI in master mode :
		 *   - SAI2_block_A in master TX mode
		 *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
		 */
		if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2) {
 80040de:	89fb      	ldrh	r3, [r7, #14]
 80040e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e4:	d102      	bne.n	80040ec <BSP_AUDIO_IN_OUT_Init+0x84>
			slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80040e6:	230a      	movs	r3, #10
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	e001      	b.n	80040f0 <BSP_AUDIO_IN_OUT_Init+0x88>
		} else {
			slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80040ec:	2305      	movs	r3, #5
 80040ee:	61bb      	str	r3, [r7, #24]
		}
		SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	69b9      	ldr	r1, [r7, #24]
 80040f4:	2000      	movs	r0, #0
 80040f6:	f000 f939 	bl	800436c <SAIx_In_Init>

		/* wm8994 codec initialization */
		deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <BSP_AUDIO_IN_OUT_Init+0xf4>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2034      	movs	r0, #52	; 0x34
 8004100:	4798      	blx	r3
 8004102:	6178      	str	r0, [r7, #20]

		if ((deviceid) == WM8994_ID) {
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f648 1294 	movw	r2, #35220	; 0x8994
 800410a:	4293      	cmp	r3, r2
 800410c:	d109      	bne.n	8004122 <BSP_AUDIO_IN_OUT_Init+0xba>
			/* Reset the Codec Registers */
			wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800410e:	4b13      	ldr	r3, [pc, #76]	; (800415c <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	2034      	movs	r0, #52	; 0x34
 8004114:	4798      	blx	r3
			/* Initialize the audio driver structure */
			audio_drv = &wm8994_drv;
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 8004118:	4a10      	ldr	r2, [pc, #64]	; (800415c <BSP_AUDIO_IN_OUT_Init+0xf4>)
 800411a:	601a      	str	r2, [r3, #0]
			ret = AUDIO_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e001      	b.n	8004126 <BSP_AUDIO_IN_OUT_Init+0xbe>
		} else {
			ret = AUDIO_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == AUDIO_OK) {
 8004126:	7ffb      	ldrb	r3, [r7, #31]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <BSP_AUDIO_IN_OUT_Init+0xda>
			/* Initialize the codec internal registers */
			audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100,
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681c      	ldr	r4, [r3, #0]
 8004132:	89fa      	ldrh	r2, [r7, #14]
 8004134:	89bb      	ldrh	r3, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	b299      	uxth	r1, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2264      	movs	r2, #100	; 0x64
 800413e:	2034      	movs	r0, #52	; 0x34
 8004140:	47a0      	blx	r4
					AudioFreq);
		}
	}
	return ret;
 8004142:	7ffb      	ldrb	r3, [r7, #31]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3724      	adds	r7, #36	; 0x24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd90      	pop	{r4, r7, pc}
 800414c:	20000704 	.word	0x20000704
 8004150:	40015c24 	.word	0x40015c24
 8004154:	20000680 	.word	0x20000680
 8004158:	40015c04 	.word	0x40015c04
 800415c:	20000304 	.word	0x20000304
 8004160:	2000fbb4 	.word	0x2000fbb4

08004164 <BSP_AUDIO_IN_Record>:
 * @param  pbuf: Main buffer pointer for the recorded data storing
 * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
 *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Record(uint16_t *pbuf, uint32_t size) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
	uint32_t ret = AUDIO_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	60fb      	str	r3, [r7, #12]

	/* Start the process receive DMA */
	HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*) pbuf, size);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4805      	ldr	r0, [pc, #20]	; (8004190 <BSP_AUDIO_IN_Record+0x2c>)
 800417c:	f008 f9e6 	bl	800c54c <HAL_SAI_Receive_DMA>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]

	return ret;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	b2db      	uxtb	r3, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000704 	.word	0x20000704

08004194 <BSP_AUDIO_IN_SetVolume>:
/**
 * @brief  Controls the audio in volume level.
 * @param  Volume: Volume level in range 0(Mute)..80(+0dB)..100(+17.625dB)
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_SetVolume(uint8_t Volume) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeIn(AUDIO_I2C_ADDRESS, Volume) != 0) {
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <BSP_AUDIO_IN_SetVolume+0x34>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	79fa      	ldrb	r2, [r7, #7]
 80041a6:	4611      	mov	r1, r2
 80041a8:	2034      	movs	r0, #52	; 0x34
 80041aa:	4798      	blx	r3
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <BSP_AUDIO_IN_SetVolume+0x22>
		return AUDIO_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e004      	b.n	80041c0 <BSP_AUDIO_IN_SetVolume+0x2c>
	} else {
		/* Set the Global variable AudioInVolume  */
		AudioInVolume = Volume;
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <BSP_AUDIO_IN_SetVolume+0x38>)
 80041bc:	801a      	strh	r2, [r3, #0]
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 80041be:	2300      	movs	r3, #0
	}
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	2000fbb4 	.word	0x2000fbb4
 80041cc:	200002e0 	.word	0x200002e0

080041d0 <HAL_SAI_RxCpltCallback>:
/**
 * @brief  Rx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	/* Call the record update function to get the next buffer to fill and its size (size is ignored) */
	BSP_AUDIO_IN_TransferComplete_CallBack();
 80041d8:	f7fd fe76 	bl	8001ec8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_SAI_RxHalfCpltCallback>:
/**
 * @brief  Rx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_IN_HalfTransfer_CallBack();
 80041ec:	f7fd feb0 	bl	8001f50 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <BSP_AUDIO_IN_Error_CallBack>:

/**
 * @brief  Audio IN Error callback function.
 * @retval None
 */
__weak void BSP_AUDIO_IN_Error_CallBack(void) {
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <BSP_AUDIO_IN_MspInit>:
 * @brief  Initializes BSP_AUDIO_IN MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	; 0x30
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_rx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_IN_SAIx_CLK_ENABLE();
 8004212:	4b50      	ldr	r3, [pc, #320]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	4a4f      	ldr	r2, [pc, #316]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800421c:	6453      	str	r3, [r2, #68]	; 0x44
 800421e:	4b4d      	ldr	r3, [pc, #308]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004226:	61bb      	str	r3, [r7, #24]
 8004228:	69bb      	ldr	r3, [r7, #24]

	/* Enable SD GPIO clock */
	AUDIO_IN_SAIx_SD_ENABLE();
 800422a:	4b4a      	ldr	r3, [pc, #296]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	4a49      	ldr	r2, [pc, #292]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004234:	6313      	str	r3, [r2, #48]	; 0x30
 8004236:	4b47      	ldr	r3, [pc, #284]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]
	/* CODEC_SAI pin configuration: SD pin */
	gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8004242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004246:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004248:	2302      	movs	r3, #2
 800424a:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004250:	2302      	movs	r3, #2
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8004254:	230a      	movs	r3, #10
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004258:	f107 031c 	add.w	r3, r7, #28
 800425c:	4619      	mov	r1, r3
 800425e:	483e      	ldr	r0, [pc, #248]	; (8004358 <BSP_AUDIO_IN_MspInit+0x150>)
 8004260:	f005 f836 	bl	80092d0 <HAL_GPIO_Init>

	/* Enable Audio INT GPIO clock */
	AUDIO_IN_INT_GPIO_ENABLE();
 8004264:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	4a3a      	ldr	r2, [pc, #232]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 800426a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426e:	6313      	str	r3, [r2, #48]	; 0x30
 8004270:	4b38      	ldr	r3, [pc, #224]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	693b      	ldr	r3, [r7, #16]
	/* Audio INT pin configuration: input */
	gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 800427c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004280:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004282:	2300      	movs	r3, #0
 8004284:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8004286:	2300      	movs	r3, #0
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800428a:	2302      	movs	r3, #2
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800428e:	f107 031c 	add.w	r3, r7, #28
 8004292:	4619      	mov	r1, r3
 8004294:	4831      	ldr	r0, [pc, #196]	; (800435c <BSP_AUDIO_IN_MspInit+0x154>)
 8004296:	f005 f81b 	bl	80092d0 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800429a:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042a4:	6313      	str	r3, [r2, #48]	; 0x30
 80042a6:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]

	if (hsai->Instance == AUDIO_IN_SAIx) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2a      	ldr	r2, [pc, #168]	; (8004360 <BSP_AUDIO_IN_MspInit+0x158>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d137      	bne.n	800432c <BSP_AUDIO_IN_MspInit+0x124>
		/* Configure the hdma_sai_rx handle parameters */
		hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80042bc:	4b29      	ldr	r3, [pc, #164]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 80042be:	2200      	movs	r2, #0
 80042c0:	605a      	str	r2, [r3, #4]
		hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042c2:	4b28      	ldr	r3, [pc, #160]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
		hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c8:	4b26      	ldr	r3, [pc, #152]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	60da      	str	r2, [r3, #12]
		hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042ce:	4b25      	ldr	r3, [pc, #148]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 80042d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042d4:	611a      	str	r2, [r3, #16]
		hdma_sai_rx.Init.PeriphDataAlignment =
 80042d6:	4b23      	ldr	r3, [pc, #140]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 80042d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042dc:	615a      	str	r2, [r3, #20]
				AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80042de:	4b21      	ldr	r3, [pc, #132]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 80042e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042e4:	619a      	str	r2, [r3, #24]
		hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 80042e6:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 80042e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042ec:	61da      	str	r2, [r3, #28]
		hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 80042f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042f4:	621a      	str	r2, [r3, #32]
		hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042f6:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80042fc:	4b19      	ldr	r3, [pc, #100]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 80042fe:	2203      	movs	r2, #3
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004304:	2200      	movs	r2, #0
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8004308:	4b16      	ldr	r3, [pc, #88]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800430e:	4b15      	ldr	r3, [pc, #84]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004310:	4a15      	ldr	r2, [pc, #84]	; (8004368 <BSP_AUDIO_IN_MspInit+0x160>)
 8004312:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a13      	ldr	r2, [pc, #76]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004318:	671a      	str	r2, [r3, #112]	; 0x70
 800431a:	4a12      	ldr	r2, [pc, #72]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_rx);
 8004320:	4810      	ldr	r0, [pc, #64]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004322:	f004 f9f3 	bl	800870c <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_rx);
 8004326:	480f      	ldr	r0, [pc, #60]	; (8004364 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004328:	f004 f942 	bl	80085b0 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800432c:	2200      	movs	r2, #0
 800432e:	210f      	movs	r1, #15
 8004330:	2046      	movs	r0, #70	; 0x46
 8004332:	f004 f913 	bl	800855c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004336:	2046      	movs	r0, #70	; 0x46
 8004338:	f004 f92c 	bl	8008594 <HAL_NVIC_EnableIRQ>

	/* Audio INT IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800433c:	2200      	movs	r2, #0
 800433e:	210f      	movs	r1, #15
 8004340:	2028      	movs	r0, #40	; 0x28
 8004342:	f004 f90b 	bl	800855c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004346:	2028      	movs	r0, #40	; 0x28
 8004348:	f004 f924 	bl	8008594 <HAL_NVIC_EnableIRQ>
}
 800434c:	bf00      	nop
 800434e:	3730      	adds	r7, #48	; 0x30
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	40021800 	.word	0x40021800
 800435c:	40021c00 	.word	0x40021c00
 8004360:	40015c24 	.word	0x40015c24
 8004364:	200007e8 	.word	0x200007e8
 8004368:	400264b8 	.word	0x400264b8

0800436c <SAIx_In_Init>:
 * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
 * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
 * @retval None
 */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive,
		uint32_t AudioFreq) {
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
	/* Initialize SAI2 block A in MASTER RX */
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004378:	4b53      	ldr	r3, [pc, #332]	; (80044c8 <SAIx_In_Init+0x15c>)
 800437a:	4a54      	ldr	r2, [pc, #336]	; (80044cc <SAIx_In_Init+0x160>)
 800437c:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 800437e:	4b52      	ldr	r3, [pc, #328]	; (80044c8 <SAIx_In_Init+0x15c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b50      	ldr	r3, [pc, #320]	; (80044c8 <SAIx_In_Init+0x15c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800438c:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800438e:	4a4e      	ldr	r2, [pc, #312]	; (80044c8 <SAIx_In_Init+0x15c>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	61d3      	str	r3, [r2, #28]
	haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004394:	4a4c      	ldr	r2, [pc, #304]	; (80044c8 <SAIx_In_Init+0x15c>)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6053      	str	r3, [r2, #4]
	haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800439a:	4b4b      	ldr	r3, [pc, #300]	; (80044c8 <SAIx_In_Init+0x15c>)
 800439c:	2200      	movs	r2, #0
 800439e:	615a      	str	r2, [r3, #20]
	haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80043a0:	4b49      	ldr	r3, [pc, #292]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
	haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80043a6:	4b48      	ldr	r3, [pc, #288]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	635a      	str	r2, [r3, #52]	; 0x34
	haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80043ac:	4b46      	ldr	r3, [pc, #280]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
	haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80043b2:	4b45      	ldr	r3, [pc, #276]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	63da      	str	r2, [r3, #60]	; 0x3c
	haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80043b8:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
	haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80043be:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043c4:	611a      	str	r2, [r3, #16]
	haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80043c6:	4b40      	ldr	r3, [pc, #256]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_out_sai.FrameInit.FrameLength = 64;
 80043cc:	4b3e      	ldr	r3, [pc, #248]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043ce:	2240      	movs	r2, #64	; 0x40
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
	haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80043d2:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043d4:	2220      	movs	r2, #32
 80043d6:	645a      	str	r2, [r3, #68]	; 0x44
	haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80043d8:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043de:	649a      	str	r2, [r3, #72]	; 0x48
	haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80043e0:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	64da      	str	r2, [r3, #76]	; 0x4c
	haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80043e6:	4b38      	ldr	r3, [pc, #224]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043ec:	651a      	str	r2, [r3, #80]	; 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot actives */
	haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80043ee:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
	haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80043f4:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	659a      	str	r2, [r3, #88]	; 0x58
	haudio_out_sai.SlotInit.SlotNumber = 4;
 80043fa:	4b33      	ldr	r3, [pc, #204]	; (80044c8 <SAIx_In_Init+0x15c>)
 80043fc:	2204      	movs	r2, #4
 80043fe:	65da      	str	r2, [r3, #92]	; 0x5c
	haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004400:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <SAIx_In_Init+0x15c>)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6613      	str	r3, [r2, #96]	; 0x60

	HAL_SAI_Init(&haudio_out_sai);
 8004406:	4830      	ldr	r0, [pc, #192]	; (80044c8 <SAIx_In_Init+0x15c>)
 8004408:	f007 fe3c 	bl	800c084 <HAL_SAI_Init>

	/* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800440c:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <SAIx_In_Init+0x164>)
 800440e:	4a31      	ldr	r2, [pc, #196]	; (80044d4 <SAIx_In_Init+0x168>)
 8004410:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8004412:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <SAIx_In_Init+0x164>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <SAIx_In_Init+0x164>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004420:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8004422:	4a2b      	ldr	r2, [pc, #172]	; (80044d0 <SAIx_In_Init+0x164>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	61d3      	str	r3, [r2, #28]
	haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004428:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <SAIx_In_Init+0x164>)
 800442a:	2203      	movs	r2, #3
 800442c:	605a      	str	r2, [r3, #4]
	haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <SAIx_In_Init+0x164>)
 8004430:	2200      	movs	r2, #0
 8004432:	615a      	str	r2, [r3, #20]
	haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004434:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <SAIx_In_Init+0x164>)
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
	haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800443a:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <SAIx_In_Init+0x164>)
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	635a      	str	r2, [r3, #52]	; 0x34
	haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004440:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <SAIx_In_Init+0x164>)
 8004442:	2200      	movs	r2, #0
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
	haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004446:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <SAIx_In_Init+0x164>)
 8004448:	2201      	movs	r2, #1
 800444a:	63da      	str	r2, [r3, #60]	; 0x3c
	haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800444c:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <SAIx_In_Init+0x164>)
 800444e:	2201      	movs	r2, #1
 8004450:	609a      	str	r2, [r3, #8]
	haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8004452:	4b1f      	ldr	r3, [pc, #124]	; (80044d0 <SAIx_In_Init+0x164>)
 8004454:	2200      	movs	r2, #0
 8004456:	611a      	str	r2, [r3, #16]
	haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004458:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <SAIx_In_Init+0x164>)
 800445a:	2201      	movs	r2, #1
 800445c:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_in_sai.FrameInit.FrameLength = 64;
 800445e:	4b1c      	ldr	r3, [pc, #112]	; (80044d0 <SAIx_In_Init+0x164>)
 8004460:	2240      	movs	r2, #64	; 0x40
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
	haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004464:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <SAIx_In_Init+0x164>)
 8004466:	2220      	movs	r2, #32
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
	haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800446a:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <SAIx_In_Init+0x164>)
 800446c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004470:	649a      	str	r2, [r3, #72]	; 0x48
	haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004472:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <SAIx_In_Init+0x164>)
 8004474:	2200      	movs	r2, #0
 8004476:	64da      	str	r2, [r3, #76]	; 0x4c
	haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <SAIx_In_Init+0x164>)
 800447a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800447e:	651a      	str	r2, [r3, #80]	; 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot active */
	haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8004480:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <SAIx_In_Init+0x164>)
 8004482:	2200      	movs	r2, #0
 8004484:	655a      	str	r2, [r3, #84]	; 0x54
	haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <SAIx_In_Init+0x164>)
 8004488:	2200      	movs	r2, #0
 800448a:	659a      	str	r2, [r3, #88]	; 0x58
	haudio_in_sai.SlotInit.SlotNumber = 4;
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <SAIx_In_Init+0x164>)
 800448e:	2204      	movs	r2, #4
 8004490:	65da      	str	r2, [r3, #92]	; 0x5c
	haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8004492:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <SAIx_In_Init+0x164>)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6613      	str	r3, [r2, #96]	; 0x60

	HAL_SAI_Init(&haudio_in_sai);
 8004498:	480d      	ldr	r0, [pc, #52]	; (80044d0 <SAIx_In_Init+0x164>)
 800449a:	f007 fdf3 	bl	800c084 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <SAIx_In_Init+0x15c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <SAIx_In_Init+0x15c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044ac:	601a      	str	r2, [r3, #0]

	/* Enable SAI peripheral */
	__HAL_SAI_ENABLE(&haudio_in_sai);
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <SAIx_In_Init+0x164>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <SAIx_In_Init+0x164>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044bc:	601a      	str	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000680 	.word	0x20000680
 80044cc:	40015c04 	.word	0x40015c04
 80044d0:	20000704 	.word	0x20000704
 80044d4:	40015c24 	.word	0x40015c24

080044d8 <SAIx_In_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <SAIx_In_DeInit+0x24>)
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <SAIx_In_DeInit+0x28>)
 80044e0:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <SAIx_In_DeInit+0x24>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <SAIx_In_DeInit+0x24>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80044f0:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_in_sai);
 80044f2:	4802      	ldr	r0, [pc, #8]	; (80044fc <SAIx_In_DeInit+0x24>)
 80044f4:	f007 ff44 	bl	800c380 <HAL_SAI_DeInit>
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000704 	.word	0x20000704
 8004500:	40015c24 	.word	0x40015c24

08004504 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004508:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <BSP_LCD_Init+0xcc>)
 800450a:	2228      	movs	r2, #40	; 0x28
 800450c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800450e:	4b30      	ldr	r3, [pc, #192]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004510:	2209      	movs	r2, #9
 8004512:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004514:	4b2e      	ldr	r3, [pc, #184]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004516:	2235      	movs	r2, #53	; 0x35
 8004518:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800451a:	4b2d      	ldr	r3, [pc, #180]	; (80045d0 <BSP_LCD_Init+0xcc>)
 800451c:	220b      	movs	r2, #11
 800451e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004520:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004522:	f240 121b 	movw	r2, #283	; 0x11b
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004528:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <BSP_LCD_Init+0xcc>)
 800452a:	f240 2215 	movw	r2, #533	; 0x215
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004530:	4b27      	ldr	r3, [pc, #156]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004532:	f240 121d 	movw	r2, #285	; 0x11d
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004538:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <BSP_LCD_Init+0xcc>)
 800453a:	f240 2235 	movw	r2, #565	; 0x235
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004540:	2100      	movs	r1, #0
 8004542:	4823      	ldr	r0, [pc, #140]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004544:	f000 fef8 	bl	8005338 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004548:	4b21      	ldr	r3, [pc, #132]	; (80045d0 <BSP_LCD_Init+0xcc>)
 800454a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800454e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004550:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004552:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004556:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <BSP_LCD_Init+0xcc>)
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004560:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004568:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <BSP_LCD_Init+0xcc>)
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004570:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004572:	2200      	movs	r2, #0
 8004574:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004576:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004578:	2200      	movs	r2, #0
 800457a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800457c:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <BSP_LCD_Init+0xcc>)
 800457e:	2200      	movs	r2, #0
 8004580:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004582:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004584:	2200      	movs	r2, #0
 8004586:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004588:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <BSP_LCD_Init+0xcc>)
 800458a:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <BSP_LCD_Init+0xd0>)
 800458c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800458e:	4810      	ldr	r0, [pc, #64]	; (80045d0 <BSP_LCD_Init+0xcc>)
 8004590:	f006 f884 	bl	800a69c <HAL_LTDC_GetState>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800459a:	2100      	movs	r1, #0
 800459c:	480c      	ldr	r0, [pc, #48]	; (80045d0 <BSP_LCD_Init+0xcc>)
 800459e:	f000 fdf1 	bl	8005184 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80045a2:	480b      	ldr	r0, [pc, #44]	; (80045d0 <BSP_LCD_Init+0xcc>)
 80045a4:	f005 feaa 	bl	800a2fc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80045a8:	2201      	movs	r2, #1
 80045aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045ae:	480a      	ldr	r0, [pc, #40]	; (80045d8 <BSP_LCD_Init+0xd4>)
 80045b0:	f005 f95e 	bl	8009870 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80045b4:	2201      	movs	r2, #1
 80045b6:	2108      	movs	r1, #8
 80045b8:	4808      	ldr	r0, [pc, #32]	; (80045dc <BSP_LCD_Init+0xd8>)
 80045ba:	f005 f959 	bl	8009870 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80045be:	f001 f89b 	bl	80056f8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80045c2:	4807      	ldr	r0, [pc, #28]	; (80045e0 <BSP_LCD_Init+0xdc>)
 80045c4:	f000 f916 	bl	80047f4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2000fbb8 	.word	0x2000fbb8
 80045d4:	40016800 	.word	0x40016800
 80045d8:	40022000 	.word	0x40022000
 80045dc:	40022800 	.word	0x40022800
 80045e0:	200002e4 	.word	0x200002e4

080045e4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <BSP_LCD_GetXSize+0x20>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a06      	ldr	r2, [pc, #24]	; (8004608 <BSP_LCD_GetXSize+0x24>)
 80045ee:	2134      	movs	r1, #52	; 0x34
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	3360      	adds	r3, #96	; 0x60
 80045f8:	681b      	ldr	r3, [r3, #0]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	20000888 	.word	0x20000888
 8004608:	2000fbb8 	.word	0x2000fbb8

0800460c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <BSP_LCD_GetYSize+0x20>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a06      	ldr	r2, [pc, #24]	; (8004630 <BSP_LCD_GetYSize+0x24>)
 8004616:	2134      	movs	r1, #52	; 0x34
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	3364      	adds	r3, #100	; 0x64
 8004620:	681b      	ldr	r3, [r3, #0]
}
 8004622:	4618      	mov	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000888 	.word	0x20000888
 8004630:	2000fbb8 	.word	0x2000fbb8

08004634 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004634:	b580      	push	{r7, lr}
 8004636:	b090      	sub	sp, #64	; 0x40
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	6039      	str	r1, [r7, #0]
 800463e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004644:	f7ff ffce 	bl	80045e4 <BSP_LCD_GetXSize>
 8004648:	4603      	mov	r3, r0
 800464a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004650:	f7ff ffdc 	bl	800460c <BSP_LCD_GetYSize>
 8004654:	4603      	mov	r3, r0
 8004656:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004658:	2300      	movs	r3, #0
 800465a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004660:	23ff      	movs	r3, #255	; 0xff
 8004662:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800467a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004680:	2307      	movs	r3, #7
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004684:	f7ff ffae 	bl	80045e4 <BSP_LCD_GetXSize>
 8004688:	4603      	mov	r3, r0
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800468c:	f7ff ffbe 	bl	800460c <BSP_LCD_GetYSize>
 8004690:	4603      	mov	r3, r0
 8004692:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	f107 030c 	add.w	r3, r7, #12
 800469a:	4619      	mov	r1, r3
 800469c:	4812      	ldr	r0, [pc, #72]	; (80046e8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800469e:	f005 ffbf 	bl	800a620 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	4911      	ldr	r1, [pc, #68]	; (80046ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	3304      	adds	r3, #4
 80046b2:	f04f 32ff 	mov.w	r2, #4294967295
 80046b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	490c      	ldr	r1, [pc, #48]	; (80046ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80046bc:	4613      	mov	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	3308      	adds	r3, #8
 80046c8:	4a09      	ldr	r2, [pc, #36]	; (80046f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80046ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	4907      	ldr	r1, [pc, #28]	; (80046ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80046de:	601a      	str	r2, [r3, #0]
}
 80046e0:	bf00      	nop
 80046e2:	3740      	adds	r7, #64	; 0x40
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	2000fbb8 	.word	0x2000fbb8
 80046ec:	2000088c 	.word	0x2000088c
 80046f0:	200002e4 	.word	0x200002e4

080046f4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <BSP_LCD_SelectLayer+0x1c>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6013      	str	r3, [r2, #0]
} 
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000888 	.word	0x20000888

08004714 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d112      	bne.n	800474c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8004726:	4b19      	ldr	r3, [pc, #100]	; (800478c <BSP_LCD_SetLayerVisible+0x78>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	01db      	lsls	r3, r3, #7
 8004730:	4413      	add	r3, r2
 8004732:	3384      	adds	r3, #132	; 0x84
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a15      	ldr	r2, [pc, #84]	; (800478c <BSP_LCD_SetLayerVisible+0x78>)
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	4611      	mov	r1, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	01d2      	lsls	r2, r2, #7
 8004740:	440a      	add	r2, r1
 8004742:	3284      	adds	r2, #132	; 0x84
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e011      	b.n	8004770 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <BSP_LCD_SetLayerVisible+0x78>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	4413      	add	r3, r2
 8004758:	3384      	adds	r3, #132	; 0x84
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0b      	ldr	r2, [pc, #44]	; (800478c <BSP_LCD_SetLayerVisible+0x78>)
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	4611      	mov	r1, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	01d2      	lsls	r2, r2, #7
 8004766:	440a      	add	r2, r1
 8004768:	3284      	adds	r2, #132	; 0x84
 800476a:	f023 0301 	bic.w	r3, r3, #1
 800476e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <BSP_LCD_SetLayerVisible+0x78>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <BSP_LCD_SetLayerVisible+0x78>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	2000fbb8 	.word	0x2000fbb8

08004790 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004798:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <BSP_LCD_SetTextColor+0x28>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4907      	ldr	r1, [pc, #28]	; (80047bc <BSP_LCD_SetTextColor+0x2c>)
 800479e:	4613      	mov	r3, r2
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	601a      	str	r2, [r3, #0]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	20000888 	.word	0x20000888
 80047bc:	2000088c 	.word	0x2000088c

080047c0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80047c8:	4b08      	ldr	r3, [pc, #32]	; (80047ec <BSP_LCD_SetBackColor+0x2c>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4908      	ldr	r1, [pc, #32]	; (80047f0 <BSP_LCD_SetBackColor+0x30>)
 80047ce:	4613      	mov	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	3304      	adds	r3, #4
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000888 	.word	0x20000888
 80047f0:	2000088c 	.word	0x2000088c

080047f4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80047fc:	4b08      	ldr	r3, [pc, #32]	; (8004820 <BSP_LCD_SetFont+0x2c>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4908      	ldr	r1, [pc, #32]	; (8004824 <BSP_LCD_SetFont+0x30>)
 8004802:	4613      	mov	r3, r2
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	3308      	adds	r3, #8
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000888 	.word	0x20000888
 8004824:	2000088c 	.word	0x2000088c

08004828 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482a:	b085      	sub	sp, #20
 800482c:	af02      	add	r7, sp, #8
 800482e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004830:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <BSP_LCD_Clear+0x48>)
 8004832:	681c      	ldr	r4, [r3, #0]
 8004834:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <BSP_LCD_Clear+0x48>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a0e      	ldr	r2, [pc, #56]	; (8004874 <BSP_LCD_Clear+0x4c>)
 800483a:	2134      	movs	r1, #52	; 0x34
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	4413      	add	r3, r2
 8004842:	335c      	adds	r3, #92	; 0x5c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461e      	mov	r6, r3
 8004848:	f7ff fecc 	bl	80045e4 <BSP_LCD_GetXSize>
 800484c:	4605      	mov	r5, r0
 800484e:	f7ff fedd 	bl	800460c <BSP_LCD_GetYSize>
 8004852:	4602      	mov	r2, r0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	2300      	movs	r3, #0
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	462a      	mov	r2, r5
 8004860:	4631      	mov	r1, r6
 8004862:	4620      	mov	r0, r4
 8004864:	f000 fefc 	bl	8005660 <LL_FillBuffer>
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004870:	20000888 	.word	0x20000888
 8004874:	2000fbb8 	.word	0x2000fbb8

08004878 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	80fb      	strh	r3, [r7, #6]
 8004882:	460b      	mov	r3, r1
 8004884:	80bb      	strh	r3, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800488a:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <BSP_LCD_DisplayChar+0x80>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	491b      	ldr	r1, [pc, #108]	; (80048fc <BSP_LCD_DisplayChar+0x84>)
 8004890:	4613      	mov	r3, r2
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	3308      	adds	r3, #8
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80048a6:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <BSP_LCD_DisplayChar+0x80>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4c14      	ldr	r4, [pc, #80]	; (80048fc <BSP_LCD_DisplayChar+0x84>)
 80048ac:	4613      	mov	r3, r2
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4423      	add	r3, r4
 80048b6:	3308      	adds	r3, #8
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80048bc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <BSP_LCD_DisplayChar+0x80>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4c0d      	ldr	r4, [pc, #52]	; (80048fc <BSP_LCD_DisplayChar+0x84>)
 80048c6:	4613      	mov	r3, r2
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4423      	add	r3, r4
 80048d0:	3308      	adds	r3, #8
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	889b      	ldrh	r3, [r3, #4]
 80048d6:	3307      	adds	r3, #7
 80048d8:	2b00      	cmp	r3, #0
 80048da:	da00      	bge.n	80048de <BSP_LCD_DisplayChar+0x66>
 80048dc:	3307      	adds	r3, #7
 80048de:	10db      	asrs	r3, r3, #3
 80048e0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80048e4:	18ca      	adds	r2, r1, r3
 80048e6:	88b9      	ldrh	r1, [r7, #4]
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fd40 	bl	8005370 <DrawChar>
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd90      	pop	{r4, r7, pc}
 80048f8:	20000888 	.word	0x20000888
 80048fc:	2000088c 	.word	0x2000088c

08004900 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004900:	b5b0      	push	{r4, r5, r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	60ba      	str	r2, [r7, #8]
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	81fb      	strh	r3, [r7, #14]
 800490e:	460b      	mov	r3, r1
 8004910:	81bb      	strh	r3, [r7, #12]
 8004912:	4613      	mov	r3, r2
 8004914:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004916:	2301      	movs	r3, #1
 8004918:	83fb      	strh	r3, [r7, #30]
 800491a:	2300      	movs	r3, #0
 800491c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800492a:	e002      	b.n	8004932 <BSP_LCD_DisplayStringAt+0x32>
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	3301      	adds	r3, #1
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	617a      	str	r2, [r7, #20]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f6      	bne.n	800492c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800493e:	f7ff fe51 	bl	80045e4 <BSP_LCD_GetXSize>
 8004942:	4601      	mov	r1, r0
 8004944:	4b50      	ldr	r3, [pc, #320]	; (8004a88 <BSP_LCD_DisplayStringAt+0x188>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4850      	ldr	r0, [pc, #320]	; (8004a8c <BSP_LCD_DisplayStringAt+0x18c>)
 800494a:	4613      	mov	r3, r2
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4403      	add	r3, r0
 8004954:	3308      	adds	r3, #8
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	889b      	ldrh	r3, [r3, #4]
 800495a:	fbb1 f3f3 	udiv	r3, r1, r3
 800495e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d01c      	beq.n	80049a0 <BSP_LCD_DisplayStringAt+0xa0>
 8004966:	2b03      	cmp	r3, #3
 8004968:	dc33      	bgt.n	80049d2 <BSP_LCD_DisplayStringAt+0xd2>
 800496a:	2b01      	cmp	r3, #1
 800496c:	d002      	beq.n	8004974 <BSP_LCD_DisplayStringAt+0x74>
 800496e:	2b02      	cmp	r3, #2
 8004970:	d019      	beq.n	80049a6 <BSP_LCD_DisplayStringAt+0xa6>
 8004972:	e02e      	b.n	80049d2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	1ad1      	subs	r1, r2, r3
 800497a:	4b43      	ldr	r3, [pc, #268]	; (8004a88 <BSP_LCD_DisplayStringAt+0x188>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4843      	ldr	r0, [pc, #268]	; (8004a8c <BSP_LCD_DisplayStringAt+0x18c>)
 8004980:	4613      	mov	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4403      	add	r3, r0
 800498a:	3308      	adds	r3, #8
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	889b      	ldrh	r3, [r3, #4]
 8004990:	fb03 f301 	mul.w	r3, r3, r1
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	89fb      	ldrh	r3, [r7, #14]
 800499a:	4413      	add	r3, r2
 800499c:	83fb      	strh	r3, [r7, #30]
      break;
 800499e:	e01b      	b.n	80049d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80049a0:	89fb      	ldrh	r3, [r7, #14]
 80049a2:	83fb      	strh	r3, [r7, #30]
      break;
 80049a4:	e018      	b.n	80049d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	b299      	uxth	r1, r3
 80049ae:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <BSP_LCD_DisplayStringAt+0x188>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4836      	ldr	r0, [pc, #216]	; (8004a8c <BSP_LCD_DisplayStringAt+0x18c>)
 80049b4:	4613      	mov	r3, r2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4403      	add	r3, r0
 80049be:	3308      	adds	r3, #8
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	889b      	ldrh	r3, [r3, #4]
 80049c4:	fb11 f303 	smulbb	r3, r1, r3
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	89fb      	ldrh	r3, [r7, #14]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	83fb      	strh	r3, [r7, #30]
      break;
 80049d0:	e002      	b.n	80049d8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80049d2:	89fb      	ldrh	r3, [r7, #14]
 80049d4:	83fb      	strh	r3, [r7, #30]
      break;
 80049d6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80049d8:	8bfb      	ldrh	r3, [r7, #30]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <BSP_LCD_DisplayStringAt+0xe6>
 80049de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da1d      	bge.n	8004a22 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80049e6:	2301      	movs	r3, #1
 80049e8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80049ea:	e01a      	b.n	8004a22 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	781a      	ldrb	r2, [r3, #0]
 80049f0:	89b9      	ldrh	r1, [r7, #12]
 80049f2:	8bfb      	ldrh	r3, [r7, #30]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff ff3f 	bl	8004878 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80049fa:	4b23      	ldr	r3, [pc, #140]	; (8004a88 <BSP_LCD_DisplayStringAt+0x188>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4923      	ldr	r1, [pc, #140]	; (8004a8c <BSP_LCD_DisplayStringAt+0x18c>)
 8004a00:	4613      	mov	r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	889a      	ldrh	r2, [r3, #4]
 8004a10:	8bfb      	ldrh	r3, [r7, #30]
 8004a12:	4413      	add	r3, r2
 8004a14:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	60bb      	str	r3, [r7, #8]
    i++;
 8004a1c:	8bbb      	ldrh	r3, [r7, #28]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2dc      	uxtb	r4, r3
 8004a30:	f7ff fdd8 	bl	80045e4 <BSP_LCD_GetXSize>
 8004a34:	8bb9      	ldrh	r1, [r7, #28]
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <BSP_LCD_DisplayStringAt+0x188>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4d14      	ldr	r5, [pc, #80]	; (8004a8c <BSP_LCD_DisplayStringAt+0x18c>)
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	442b      	add	r3, r5
 8004a46:	3308      	adds	r3, #8
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	889b      	ldrh	r3, [r3, #4]
 8004a4c:	fb03 f301 	mul.w	r3, r3, r1
 8004a50:	1ac3      	subs	r3, r0, r3
 8004a52:	b299      	uxth	r1, r3
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <BSP_LCD_DisplayStringAt+0x188>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	480c      	ldr	r0, [pc, #48]	; (8004a8c <BSP_LCD_DisplayStringAt+0x18c>)
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4403      	add	r3, r0
 8004a64:	3308      	adds	r3, #8
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	889b      	ldrh	r3, [r3, #4]
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	bf2c      	ite	cs
 8004a6e:	2301      	movcs	r3, #1
 8004a70:	2300      	movcc	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	4023      	ands	r3, r4
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1b7      	bne.n	80049ec <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bdb0      	pop	{r4, r5, r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000888 	.word	0x20000888
 8004a8c:	2000088c 	.word	0x2000088c

08004a90 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b08b      	sub	sp, #44	; 0x2c
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4604      	mov	r4, r0
 8004a98:	4608      	mov	r0, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	80fb      	strh	r3, [r7, #6]
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	80bb      	strh	r3, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	807b      	strh	r3, [r7, #2]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8004aae:	2300      	movs	r3, #0
 8004ab0:	823b      	strh	r3, [r7, #16]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	81fb      	strh	r3, [r7, #14]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004aba:	2300      	movs	r3, #0
 8004abc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004abe:	2300      	movs	r3, #0
 8004ac0:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	83fb      	strh	r3, [r7, #30]
 8004aca:	2300      	movs	r3, #0
 8004acc:	83bb      	strh	r3, [r7, #28]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	837b      	strh	r3, [r7, #26]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	833b      	strh	r3, [r7, #24]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	82fb      	strh	r3, [r7, #22]
 8004ada:	2300      	movs	r3, #0
 8004adc:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	88fb      	ldrh	r3, [r7, #6]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bfb8      	it	lt
 8004aec:	425b      	neglt	r3, r3
 8004aee:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8004af0:	883a      	ldrh	r2, [r7, #0]
 8004af2:	88bb      	ldrh	r3, [r7, #4]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bfb8      	it	lt
 8004afa:	425b      	neglt	r3, r3
 8004afc:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8004b02:	88bb      	ldrh	r3, [r7, #4]
 8004b04:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d304      	bcc.n	8004b18 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8004b12:	2301      	movs	r3, #1
 8004b14:	843b      	strh	r3, [r7, #32]
 8004b16:	e005      	b.n	8004b24 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8004b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b1c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8004b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b22:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8004b24:	883a      	ldrh	r2, [r7, #0]
 8004b26:	88bb      	ldrh	r3, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d304      	bcc.n	8004b36 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8004b30:	2301      	movs	r3, #1
 8004b32:	83bb      	strh	r3, [r7, #28]
 8004b34:	e005      	b.n	8004b42 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8004b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b3a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8004b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b40:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8004b42:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004b46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	db11      	blt.n	8004b72 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8004b4e:	2300      	movs	r3, #0
 8004b50:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8004b52:	2300      	movs	r3, #0
 8004b54:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8004b56:	8a3b      	ldrh	r3, [r7, #16]
 8004b58:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8004b5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da00      	bge.n	8004b64 <BSP_LCD_DrawLine+0xd4>
 8004b62:	3301      	adds	r3, #1
 8004b64:	105b      	asrs	r3, r3, #1
 8004b66:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8004b68:	89fb      	ldrh	r3, [r7, #14]
 8004b6a:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8004b6c:	8a3b      	ldrh	r3, [r7, #16]
 8004b6e:	82bb      	strh	r3, [r7, #20]
 8004b70:	e010      	b.n	8004b94 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8004b72:	2300      	movs	r3, #0
 8004b74:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8004b76:	2300      	movs	r3, #0
 8004b78:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8004b7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	da00      	bge.n	8004b88 <BSP_LCD_DrawLine+0xf8>
 8004b86:	3301      	adds	r3, #1
 8004b88:	105b      	asrs	r3, r3, #1
 8004b8a:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8004b8c:	8a3b      	ldrh	r3, [r7, #16]
 8004b8e:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8004b90:	89fb      	ldrh	r3, [r7, #14]
 8004b92:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	827b      	strh	r3, [r7, #18]
 8004b98:	e037      	b.n	8004c0a <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8004b9a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004b9c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <BSP_LCD_DrawLine+0x190>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4c20      	ldr	r4, [pc, #128]	; (8004c24 <BSP_LCD_DrawLine+0x194>)
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4423      	add	r3, r4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f000 f923 	bl	8004dfc <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8004bb6:	8b3a      	ldrh	r2, [r7, #24]
 8004bb8:	8afb      	ldrh	r3, [r7, #22]
 8004bba:	4413      	add	r3, r2
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8004bc0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004bc4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	db0e      	blt.n	8004bea <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8004bcc:	8b3a      	ldrh	r2, [r7, #24]
 8004bce:	8b7b      	ldrh	r3, [r7, #26]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8004bd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004bd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bda:	4413      	add	r3, r2
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8004be0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004be2:	8bfb      	ldrh	r3, [r7, #30]
 8004be4:	4413      	add	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8004bea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004bec:	8c3b      	ldrh	r3, [r7, #32]
 8004bee:	4413      	add	r3, r2
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8004bf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bf6:	8bbb      	ldrh	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8004bfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3301      	adds	r3, #1
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	827b      	strh	r3, [r7, #18]
 8004c0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004c0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	ddc1      	ble.n	8004b9a <BSP_LCD_DrawLine+0x10a>
  }
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	372c      	adds	r7, #44	; 0x2c
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd90      	pop	{r4, r7, pc}
 8004c20:	20000888 	.word	0x20000888
 8004c24:	2000088c 	.word	0x2000088c

08004c28 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	80fb      	strh	r3, [r7, #6]
 8004c32:	460b      	mov	r3, r1
 8004c34:	80bb      	strh	r3, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	f1c3 0303 	rsb	r3, r3, #3
 8004c42:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004c48:	887b      	ldrh	r3, [r7, #2]
 8004c4a:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8004c4c:	e0c7      	b.n	8004dde <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	4413      	add	r3, r2
 8004c56:	b298      	uxth	r0, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	88ba      	ldrh	r2, [r7, #4]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	b299      	uxth	r1, r3
 8004c62:	4b64      	ldr	r3, [pc, #400]	; (8004df4 <BSP_LCD_DrawCircle+0x1cc>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4c64      	ldr	r4, [pc, #400]	; (8004df8 <BSP_LCD_DrawCircle+0x1d0>)
 8004c68:	4613      	mov	r3, r2
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4423      	add	r3, r4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	f000 f8c1 	bl	8004dfc <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	b298      	uxth	r0, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	88ba      	ldrh	r2, [r7, #4]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	b299      	uxth	r1, r3
 8004c8e:	4b59      	ldr	r3, [pc, #356]	; (8004df4 <BSP_LCD_DrawCircle+0x1cc>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4c59      	ldr	r4, [pc, #356]	; (8004df8 <BSP_LCD_DrawCircle+0x1d0>)
 8004c94:	4613      	mov	r3, r2
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4423      	add	r3, r4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f000 f8ab 	bl	8004dfc <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	4413      	add	r3, r2
 8004cae:	b298      	uxth	r0, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	88ba      	ldrh	r2, [r7, #4]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	b299      	uxth	r1, r3
 8004cba:	4b4e      	ldr	r3, [pc, #312]	; (8004df4 <BSP_LCD_DrawCircle+0x1cc>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4c4e      	ldr	r4, [pc, #312]	; (8004df8 <BSP_LCD_DrawCircle+0x1d0>)
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4423      	add	r3, r4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f000 f895 	bl	8004dfc <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	b298      	uxth	r0, r3
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	88ba      	ldrh	r2, [r7, #4]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	b299      	uxth	r1, r3
 8004ce6:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <BSP_LCD_DrawCircle+0x1cc>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4c43      	ldr	r4, [pc, #268]	; (8004df8 <BSP_LCD_DrawCircle+0x1d0>)
 8004cec:	4613      	mov	r3, r2
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4423      	add	r3, r4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f000 f87f 	bl	8004dfc <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	4413      	add	r3, r2
 8004d06:	b298      	uxth	r0, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	88bb      	ldrh	r3, [r7, #4]
 8004d0e:	4413      	add	r3, r2
 8004d10:	b299      	uxth	r1, r3
 8004d12:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <BSP_LCD_DrawCircle+0x1cc>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4c38      	ldr	r4, [pc, #224]	; (8004df8 <BSP_LCD_DrawCircle+0x1d0>)
 8004d18:	4613      	mov	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4423      	add	r3, r4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f000 f869 	bl	8004dfc <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	b298      	uxth	r0, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	88bb      	ldrh	r3, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	b299      	uxth	r1, r3
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <BSP_LCD_DrawCircle+0x1cc>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4c2d      	ldr	r4, [pc, #180]	; (8004df8 <BSP_LCD_DrawCircle+0x1d0>)
 8004d44:	4613      	mov	r3, r2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4423      	add	r3, r4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	f000 f853 	bl	8004dfc <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	b298      	uxth	r0, r3
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	88bb      	ldrh	r3, [r7, #4]
 8004d66:	4413      	add	r3, r2
 8004d68:	b299      	uxth	r1, r3
 8004d6a:	4b22      	ldr	r3, [pc, #136]	; (8004df4 <BSP_LCD_DrawCircle+0x1cc>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4c22      	ldr	r4, [pc, #136]	; (8004df8 <BSP_LCD_DrawCircle+0x1d0>)
 8004d70:	4613      	mov	r3, r2
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4423      	add	r3, r4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f000 f83d 	bl	8004dfc <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	88fa      	ldrh	r2, [r7, #6]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	b298      	uxth	r0, r3
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	88bb      	ldrh	r3, [r7, #4]
 8004d92:	4413      	add	r3, r2
 8004d94:	b299      	uxth	r1, r3
 8004d96:	4b17      	ldr	r3, [pc, #92]	; (8004df4 <BSP_LCD_DrawCircle+0x1cc>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4c17      	ldr	r4, [pc, #92]	; (8004df8 <BSP_LCD_DrawCircle+0x1d0>)
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4423      	add	r3, r4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	f000 f827 	bl	8004dfc <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	da06      	bge.n	8004dc2 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	009a      	lsls	r2, r3, #2
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	3306      	adds	r3, #6
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e00a      	b.n	8004dd8 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	009a      	lsls	r2, r3, #2
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	4413      	add	r3, r2
 8004dce:	330a      	adds	r3, #10
 8004dd0:	617b      	str	r3, [r7, #20]
      current_y--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	f67f af33 	bls.w	8004c4e <BSP_LCD_DrawCircle+0x26>
  } 
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd90      	pop	{r4, r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000888 	.word	0x20000888
 8004df8:	2000088c 	.word	0x2000088c

08004dfc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004dfc:	b5b0      	push	{r4, r5, r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	603a      	str	r2, [r7, #0]
 8004e06:	80fb      	strh	r3, [r7, #6]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <BSP_LCD_DrawPixel+0x88>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <BSP_LCD_DrawPixel+0x8c>)
 8004e12:	2134      	movs	r1, #52	; 0x34
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	3348      	adds	r3, #72	; 0x48
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d116      	bne.n	8004e50 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004e22:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <BSP_LCD_DrawPixel+0x88>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <BSP_LCD_DrawPixel+0x8c>)
 8004e28:	2134      	movs	r1, #52	; 0x34
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	335c      	adds	r3, #92	; 0x5c
 8004e32:	681c      	ldr	r4, [r3, #0]
 8004e34:	88bd      	ldrh	r5, [r7, #4]
 8004e36:	f7ff fbd5 	bl	80045e4 <BSP_LCD_GetXSize>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	fb03 f205 	mul.w	r2, r3, r5
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	4413      	add	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	4423      	add	r3, r4
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004e4e:	e015      	b.n	8004e7c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004e50:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <BSP_LCD_DrawPixel+0x88>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a0c      	ldr	r2, [pc, #48]	; (8004e88 <BSP_LCD_DrawPixel+0x8c>)
 8004e56:	2134      	movs	r1, #52	; 0x34
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	335c      	adds	r3, #92	; 0x5c
 8004e60:	681c      	ldr	r4, [r3, #0]
 8004e62:	88bd      	ldrh	r5, [r7, #4]
 8004e64:	f7ff fbbe 	bl	80045e4 <BSP_LCD_GetXSize>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	fb03 f205 	mul.w	r2, r3, r5
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4423      	add	r3, r4
 8004e76:	461a      	mov	r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6013      	str	r3, [r2, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bdb0      	pop	{r4, r5, r7, pc}
 8004e84:	20000888 	.word	0x20000888
 8004e88:	2000fbb8 	.word	0x2000fbb8

08004e8c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af02      	add	r7, sp, #8
 8004e94:	4604      	mov	r4, r0
 8004e96:	4608      	mov	r0, r1
 8004e98:	4611      	mov	r1, r2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	80fb      	strh	r3, [r7, #6]
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	80bb      	strh	r3, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	807b      	strh	r3, [r7, #2]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004eb0:	4b30      	ldr	r3, [pc, #192]	; (8004f74 <BSP_LCD_FillRect+0xe8>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4930      	ldr	r1, [pc, #192]	; (8004f78 <BSP_LCD_FillRect+0xec>)
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fc64 	bl	8004790 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004ec8:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <BSP_LCD_FillRect+0xe8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2b      	ldr	r2, [pc, #172]	; (8004f7c <BSP_LCD_FillRect+0xf0>)
 8004ece:	2134      	movs	r1, #52	; 0x34
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3348      	adds	r3, #72	; 0x48
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d114      	bne.n	8004f08 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004ede:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <BSP_LCD_FillRect+0xe8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a26      	ldr	r2, [pc, #152]	; (8004f7c <BSP_LCD_FillRect+0xf0>)
 8004ee4:	2134      	movs	r1, #52	; 0x34
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	335c      	adds	r3, #92	; 0x5c
 8004eee:	681c      	ldr	r4, [r3, #0]
 8004ef0:	f7ff fb78 	bl	80045e4 <BSP_LCD_GetXSize>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	88bb      	ldrh	r3, [r7, #4]
 8004ef8:	fb03 f202 	mul.w	r2, r3, r2
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	4413      	add	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4423      	add	r3, r4
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e013      	b.n	8004f30 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004f08:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <BSP_LCD_FillRect+0xe8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <BSP_LCD_FillRect+0xf0>)
 8004f0e:	2134      	movs	r1, #52	; 0x34
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	335c      	adds	r3, #92	; 0x5c
 8004f18:	681c      	ldr	r4, [r3, #0]
 8004f1a:	f7ff fb63 	bl	80045e4 <BSP_LCD_GetXSize>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	88bb      	ldrh	r3, [r7, #4]
 8004f22:	fb03 f202 	mul.w	r2, r3, r2
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4423      	add	r3, r4
 8004f2e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004f30:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <BSP_LCD_FillRect+0xe8>)
 8004f32:	681c      	ldr	r4, [r3, #0]
 8004f34:	68fd      	ldr	r5, [r7, #12]
 8004f36:	887e      	ldrh	r6, [r7, #2]
 8004f38:	f8b7 8000 	ldrh.w	r8, [r7]
 8004f3c:	f7ff fb52 	bl	80045e4 <BSP_LCD_GetXSize>
 8004f40:	4602      	mov	r2, r0
 8004f42:	887b      	ldrh	r3, [r7, #2]
 8004f44:	1ad1      	subs	r1, r2, r3
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <BSP_LCD_FillRect+0xe8>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	480b      	ldr	r0, [pc, #44]	; (8004f78 <BSP_LCD_FillRect+0xec>)
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4403      	add	r3, r0
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	9100      	str	r1, [sp, #0]
 8004f5c:	4643      	mov	r3, r8
 8004f5e:	4632      	mov	r2, r6
 8004f60:	4629      	mov	r1, r5
 8004f62:	4620      	mov	r0, r4
 8004f64:	f000 fb7c 	bl	8005660 <LL_FillBuffer>
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f72:	bf00      	nop
 8004f74:	20000888 	.word	0x20000888
 8004f78:	2000088c 	.word	0x2000088c
 8004f7c:	2000fbb8 	.word	0x2000fbb8

08004f80 <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8004f80:	b5b0      	push	{r4, r5, r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	833b      	strh	r3, [r7, #24]
 8004f90:	2300      	movs	r3, #0
 8004f92:	82fb      	strh	r3, [r7, #22]
 8004f94:	2300      	movs	r3, #0
 8004f96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f98:	2300      	movs	r3, #0
 8004f9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	82bb      	strh	r3, [r7, #20]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	827b      	strh	r3, [r7, #18]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	823b      	strh	r3, [r7, #16]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	81fb      	strh	r3, [r7, #14]
 8004fac:	2300      	movs	r3, #0
 8004fae:	81bb      	strh	r3, [r7, #12]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	817b      	strh	r3, [r7, #10]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	843b      	strh	r3, [r7, #32]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	83fb      	strh	r3, [r7, #30]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	83bb      	strh	r3, [r7, #28]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fce:	83fb      	strh	r3, [r7, #30]
 8004fd0:	8bfb      	ldrh	r3, [r7, #30]
 8004fd2:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fda:	837b      	strh	r3, [r7, #26]
 8004fdc:	8b7b      	ldrh	r3, [r7, #26]
 8004fde:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fe4:	e02f      	b.n	8005046 <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 8004fe6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	4413      	add	r3, r2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 8004ff4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ff8:	8c3b      	ldrh	r3, [r7, #32]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	da01      	bge.n	8005002 <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 8004ffe:	89bb      	ldrh	r3, [r7, #12]
 8005000:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 8005002:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005006:	8bfb      	ldrh	r3, [r7, #30]
 8005008:	429a      	cmp	r2, r3
 800500a:	dd01      	ble.n	8005010 <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 800500c:	89bb      	ldrh	r3, [r7, #12]
 800500e:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8005010:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	4413      	add	r3, r2
 800501a:	885b      	ldrh	r3, [r3, #2]
 800501c:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 800501e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005022:	8bbb      	ldrh	r3, [r7, #28]
 8005024:	429a      	cmp	r2, r3
 8005026:	da01      	bge.n	800502c <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 8005028:	897b      	ldrh	r3, [r7, #10]
 800502a:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 800502c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005030:	8b7b      	ldrh	r3, [r7, #26]
 8005032:	429a      	cmp	r2, r3
 8005034:	dd01      	ble.n	800503a <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 8005036:	897b      	ldrh	r3, [r7, #10]
 8005038:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 800503a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800503e:	b29b      	uxth	r3, r3
 8005040:	3301      	adds	r3, #1
 8005042:	b29b      	uxth	r3, r3
 8005044:	847b      	strh	r3, [r7, #34]	; 0x22
 8005046:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800504a:	887b      	ldrh	r3, [r7, #2]
 800504c:	429a      	cmp	r2, r3
 800504e:	dbca      	blt.n	8004fe6 <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 8005050:	887b      	ldrh	r3, [r7, #2]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d974      	bls.n	8005140 <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 8005056:	8c3a      	ldrh	r2, [r7, #32]
 8005058:	8bfb      	ldrh	r3, [r7, #30]
 800505a:	4413      	add	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	da00      	bge.n	8005062 <BSP_LCD_FillPolygon+0xe2>
 8005060:	3301      	adds	r3, #1
 8005062:	105b      	asrs	r3, r3, #1
 8005064:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 8005066:	8b7a      	ldrh	r2, [r7, #26]
 8005068:	8bbb      	ldrh	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	da00      	bge.n	8005072 <BSP_LCD_FillPolygon+0xf2>
 8005070:	3301      	adds	r3, #1
 8005072:	105b      	asrs	r3, r3, #1
 8005074:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	885b      	ldrh	r3, [r3, #2]
 8005080:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 8005082:	e032      	b.n	80050ea <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	885b      	ldrh	r3, [r3, #2]
 800508e:	82fb      	strh	r3, [r7, #22]
    Points++;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	885b      	ldrh	r3, [r3, #2]
 80050a0:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80050a2:	8b38      	ldrh	r0, [r7, #24]
 80050a4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80050a6:	8abc      	ldrh	r4, [r7, #20]
 80050a8:	8afd      	ldrh	r5, [r7, #22]
 80050aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050ac:	8a7a      	ldrh	r2, [r7, #18]
 80050ae:	9201      	str	r2, [sp, #4]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	462b      	mov	r3, r5
 80050b4:	4622      	mov	r2, r4
 80050b6:	f000 fa13 	bl	80054e0 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 80050ba:	8b38      	ldrh	r0, [r7, #24]
 80050bc:	8ab9      	ldrh	r1, [r7, #20]
 80050be:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80050c0:	8afd      	ldrh	r5, [r7, #22]
 80050c2:	8a7b      	ldrh	r3, [r7, #18]
 80050c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050c6:	9201      	str	r2, [sp, #4]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	462b      	mov	r3, r5
 80050cc:	4622      	mov	r2, r4
 80050ce:	f000 fa07 	bl	80054e0 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 80050d2:	8ab8      	ldrh	r0, [r7, #20]
 80050d4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80050d6:	8b3c      	ldrh	r4, [r7, #24]
 80050d8:	8a7d      	ldrh	r5, [r7, #18]
 80050da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050dc:	8afa      	ldrh	r2, [r7, #22]
 80050de:	9201      	str	r2, [sp, #4]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	462b      	mov	r3, r5
 80050e4:	4622      	mov	r2, r4
 80050e6:	f000 f9fb 	bl	80054e0 <FillTriangle>
  while(--PointCount)
 80050ea:	887b      	ldrh	r3, [r7, #2]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	807b      	strh	r3, [r7, #2]
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1c6      	bne.n	8005084 <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80050f6:	8a38      	ldrh	r0, [r7, #16]
 80050f8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80050fa:	8abc      	ldrh	r4, [r7, #20]
 80050fc:	89fd      	ldrh	r5, [r7, #14]
 80050fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005100:	8a7a      	ldrh	r2, [r7, #18]
 8005102:	9201      	str	r2, [sp, #4]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	462b      	mov	r3, r5
 8005108:	4622      	mov	r2, r4
 800510a:	f000 f9e9 	bl	80054e0 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 800510e:	8a38      	ldrh	r0, [r7, #16]
 8005110:	8ab9      	ldrh	r1, [r7, #20]
 8005112:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8005114:	89fd      	ldrh	r5, [r7, #14]
 8005116:	8a7b      	ldrh	r3, [r7, #18]
 8005118:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800511a:	9201      	str	r2, [sp, #4]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	462b      	mov	r3, r5
 8005120:	4622      	mov	r2, r4
 8005122:	f000 f9dd 	bl	80054e0 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 8005126:	8ab8      	ldrh	r0, [r7, #20]
 8005128:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800512a:	8a3c      	ldrh	r4, [r7, #16]
 800512c:	8a7d      	ldrh	r5, [r7, #18]
 800512e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005130:	89fa      	ldrh	r2, [r7, #14]
 8005132:	9201      	str	r2, [sp, #4]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	462b      	mov	r3, r5
 8005138:	4622      	mov	r2, r4
 800513a:	f000 f9d1 	bl	80054e0 <FillTriangle>
 800513e:	e000      	b.n	8005142 <BSP_LCD_FillPolygon+0x1c2>
    return;
 8005140:	bf00      	nop
}
 8005142:	3728      	adds	r7, #40	; 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bdb0      	pop	{r4, r5, r7, pc}

08005148 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <BSP_LCD_DisplayOn+0x30>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <BSP_LCD_DisplayOn+0x30>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800515c:	2201      	movs	r2, #1
 800515e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005162:	4806      	ldr	r0, [pc, #24]	; (800517c <BSP_LCD_DisplayOn+0x34>)
 8005164:	f004 fb84 	bl	8009870 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005168:	2201      	movs	r2, #1
 800516a:	2108      	movs	r1, #8
 800516c:	4804      	ldr	r0, [pc, #16]	; (8005180 <BSP_LCD_DisplayOn+0x38>)
 800516e:	f004 fb7f 	bl	8009870 <HAL_GPIO_WritePin>
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	2000fbb8 	.word	0x2000fbb8
 800517c:	40022000 	.word	0x40022000
 8005180:	40022800 	.word	0x40022800

08005184 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b090      	sub	sp, #64	; 0x40
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800518e:	4b64      	ldr	r3, [pc, #400]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	4a63      	ldr	r2, [pc, #396]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 8005194:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005198:	6453      	str	r3, [r2, #68]	; 0x44
 800519a:	4b61      	ldr	r3, [pc, #388]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80051a6:	4b5e      	ldr	r3, [pc, #376]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	4a5d      	ldr	r2, [pc, #372]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051b0:	6313      	str	r3, [r2, #48]	; 0x30
 80051b2:	4b5b      	ldr	r3, [pc, #364]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80051be:	4b58      	ldr	r3, [pc, #352]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	4a57      	ldr	r2, [pc, #348]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051c4:	f043 0310 	orr.w	r3, r3, #16
 80051c8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ca:	4b55      	ldr	r3, [pc, #340]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	f003 0310 	and.w	r3, r3, #16
 80051d2:	623b      	str	r3, [r7, #32]
 80051d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80051d6:	4b52      	ldr	r3, [pc, #328]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	4a51      	ldr	r2, [pc, #324]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e0:	6313      	str	r3, [r2, #48]	; 0x30
 80051e2:	4b4f      	ldr	r3, [pc, #316]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80051ee:	4b4c      	ldr	r3, [pc, #304]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	4a4b      	ldr	r2, [pc, #300]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f8:	6313      	str	r3, [r2, #48]	; 0x30
 80051fa:	4b49      	ldr	r3, [pc, #292]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005206:	4b46      	ldr	r3, [pc, #280]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	4a45      	ldr	r2, [pc, #276]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 800520c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005210:	6313      	str	r3, [r2, #48]	; 0x30
 8005212:	4b43      	ldr	r3, [pc, #268]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800521e:	4b40      	ldr	r3, [pc, #256]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	4a3f      	ldr	r2, [pc, #252]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 8005224:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005228:	6313      	str	r3, [r2, #48]	; 0x30
 800522a:	4b3d      	ldr	r3, [pc, #244]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8005236:	4b3a      	ldr	r3, [pc, #232]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	4a39      	ldr	r2, [pc, #228]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	6313      	str	r3, [r2, #48]	; 0x30
 8005242:	4b37      	ldr	r3, [pc, #220]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800524e:	4b34      	ldr	r3, [pc, #208]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	4a33      	ldr	r2, [pc, #204]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 8005254:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005258:	6313      	str	r3, [r2, #48]	; 0x30
 800525a:	4b31      	ldr	r3, [pc, #196]	; (8005320 <BSP_LCD_MspInit+0x19c>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8005266:	2310      	movs	r3, #16
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800526a:	2302      	movs	r3, #2
 800526c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800526e:	2300      	movs	r3, #0
 8005270:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005272:	2302      	movs	r3, #2
 8005274:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8005276:	230e      	movs	r3, #14
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800527a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800527e:	4619      	mov	r1, r3
 8005280:	4828      	ldr	r0, [pc, #160]	; (8005324 <BSP_LCD_MspInit+0x1a0>)
 8005282:	f004 f825 	bl	80092d0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800528c:	2302      	movs	r3, #2
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005290:	2309      	movs	r3, #9
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005298:	4619      	mov	r1, r3
 800529a:	4823      	ldr	r0, [pc, #140]	; (8005328 <BSP_LCD_MspInit+0x1a4>)
 800529c:	f004 f818 	bl	80092d0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80052a0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80052a6:	2302      	movs	r3, #2
 80052a8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80052aa:	230e      	movs	r3, #14
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80052ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052b2:	4619      	mov	r1, r3
 80052b4:	481d      	ldr	r0, [pc, #116]	; (800532c <BSP_LCD_MspInit+0x1a8>)
 80052b6:	f004 f80b 	bl	80092d0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80052ba:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80052c0:	2302      	movs	r3, #2
 80052c2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80052c4:	230e      	movs	r3, #14
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80052c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052cc:	4619      	mov	r1, r3
 80052ce:	4818      	ldr	r0, [pc, #96]	; (8005330 <BSP_LCD_MspInit+0x1ac>)
 80052d0:	f003 fffe 	bl	80092d0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80052d4:	23f7      	movs	r3, #247	; 0xf7
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80052d8:	2302      	movs	r3, #2
 80052da:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80052dc:	230e      	movs	r3, #14
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80052e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052e4:	4619      	mov	r1, r3
 80052e6:	4813      	ldr	r0, [pc, #76]	; (8005334 <BSP_LCD_MspInit+0x1b0>)
 80052e8:	f003 fff2 	bl	80092d0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80052ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80052f2:	2301      	movs	r3, #1
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80052f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052fa:	4619      	mov	r1, r3
 80052fc:	480b      	ldr	r0, [pc, #44]	; (800532c <BSP_LCD_MspInit+0x1a8>)
 80052fe:	f003 ffe7 	bl	80092d0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8005302:	2308      	movs	r3, #8
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005306:	2301      	movs	r3, #1
 8005308:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800530a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800530e:	4619      	mov	r1, r3
 8005310:	4808      	ldr	r0, [pc, #32]	; (8005334 <BSP_LCD_MspInit+0x1b0>)
 8005312:	f003 ffdd 	bl	80092d0 <HAL_GPIO_Init>
}
 8005316:	bf00      	nop
 8005318:	3740      	adds	r7, #64	; 0x40
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800
 8005324:	40021000 	.word	0x40021000
 8005328:	40021800 	.word	0x40021800
 800532c:	40022000 	.word	0x40022000
 8005330:	40022400 	.word	0x40022400
 8005334:	40022800 	.word	0x40022800

08005338 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005342:	4b0a      	ldr	r3, [pc, #40]	; (800536c <BSP_LCD_ClockConfig+0x34>)
 8005344:	2208      	movs	r2, #8
 8005346:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <BSP_LCD_ClockConfig+0x34>)
 800534a:	22c0      	movs	r2, #192	; 0xc0
 800534c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <BSP_LCD_ClockConfig+0x34>)
 8005350:	2205      	movs	r2, #5
 8005352:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <BSP_LCD_ClockConfig+0x34>)
 8005356:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800535c:	4803      	ldr	r0, [pc, #12]	; (800536c <BSP_LCD_ClockConfig+0x34>)
 800535e:	f006 f851 	bl	800b404 <HAL_RCCEx_PeriphCLKConfig>
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	200008a4 	.word	0x200008a4

08005370 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	603a      	str	r2, [r7, #0]
 800537a:	80fb      	strh	r3, [r7, #6]
 800537c:	460b      	mov	r3, r1
 800537e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	2300      	movs	r3, #0
 8005386:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005388:	4b53      	ldr	r3, [pc, #332]	; (80054d8 <DrawChar+0x168>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4953      	ldr	r1, [pc, #332]	; (80054dc <DrawChar+0x16c>)
 800538e:	4613      	mov	r3, r2
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	3308      	adds	r3, #8
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	88db      	ldrh	r3, [r3, #6]
 800539e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80053a0:	4b4d      	ldr	r3, [pc, #308]	; (80054d8 <DrawChar+0x168>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	494d      	ldr	r1, [pc, #308]	; (80054dc <DrawChar+0x16c>)
 80053a6:	4613      	mov	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	3308      	adds	r3, #8
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	889b      	ldrh	r3, [r3, #4]
 80053b6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80053b8:	8a3b      	ldrh	r3, [r7, #16]
 80053ba:	3307      	adds	r3, #7
 80053bc:	2b00      	cmp	r3, #0
 80053be:	da00      	bge.n	80053c2 <DrawChar+0x52>
 80053c0:	3307      	adds	r3, #7
 80053c2:	10db      	asrs	r3, r3, #3
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	8a3b      	ldrh	r3, [r7, #16]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80053d2:	2300      	movs	r3, #0
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	e076      	b.n	80054c6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80053d8:	8a3b      	ldrh	r3, [r7, #16]
 80053da:	3307      	adds	r3, #7
 80053dc:	2b00      	cmp	r3, #0
 80053de:	da00      	bge.n	80053e2 <DrawChar+0x72>
 80053e0:	3307      	adds	r3, #7
 80053e2:	10db      	asrs	r3, r3, #3
 80053e4:	461a      	mov	r2, r3
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	fb03 f302 	mul.w	r3, r3, r2
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	4413      	add	r3, r2
 80053f0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80053f2:	8a3b      	ldrh	r3, [r7, #16]
 80053f4:	3307      	adds	r3, #7
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da00      	bge.n	80053fc <DrawChar+0x8c>
 80053fa:	3307      	adds	r3, #7
 80053fc:	10db      	asrs	r3, r3, #3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d002      	beq.n	8005408 <DrawChar+0x98>
 8005402:	2b02      	cmp	r3, #2
 8005404:	d004      	beq.n	8005410 <DrawChar+0xa0>
 8005406:	e00c      	b.n	8005422 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	617b      	str	r3, [r7, #20]
      break;
 800540e:	e016      	b.n	800543e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	3201      	adds	r2, #1
 800541a:	7812      	ldrb	r2, [r2, #0]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
      break;
 8005420:	e00d      	b.n	800543e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	041a      	lsls	r2, r3, #16
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	3301      	adds	r3, #1
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	4313      	orrs	r3, r2
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	3202      	adds	r2, #2
 8005436:	7812      	ldrb	r2, [r2, #0]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
      break;
 800543c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800543e:	2300      	movs	r3, #0
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	e036      	b.n	80054b2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8005444:	8a3a      	ldrh	r2, [r7, #16]
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	1ad2      	subs	r2, r2, r3
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	4413      	add	r3, r2
 800544e:	3b01      	subs	r3, #1
 8005450:	2201      	movs	r2, #1
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	461a      	mov	r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d012      	beq.n	8005486 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	b29a      	uxth	r2, r3
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	4413      	add	r3, r2
 8005468:	b298      	uxth	r0, r3
 800546a:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <DrawChar+0x168>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	491b      	ldr	r1, [pc, #108]	; (80054dc <DrawChar+0x16c>)
 8005470:	4613      	mov	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	88bb      	ldrh	r3, [r7, #4]
 800547e:	4619      	mov	r1, r3
 8005480:	f7ff fcbc 	bl	8004dfc <BSP_LCD_DrawPixel>
 8005484:	e012      	b.n	80054ac <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	b29a      	uxth	r2, r3
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	4413      	add	r3, r2
 800548e:	b298      	uxth	r0, r3
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <DrawChar+0x168>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4911      	ldr	r1, [pc, #68]	; (80054dc <DrawChar+0x16c>)
 8005496:	4613      	mov	r3, r2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	3304      	adds	r3, #4
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	88bb      	ldrh	r3, [r7, #4]
 80054a6:	4619      	mov	r1, r3
 80054a8:	f7ff fca8 	bl	8004dfc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	3301      	adds	r3, #1
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	8a3b      	ldrh	r3, [r7, #16]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d3c4      	bcc.n	8005444 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80054ba:	88bb      	ldrh	r3, [r7, #4]
 80054bc:	3301      	adds	r3, #1
 80054be:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	3301      	adds	r3, #1
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	8a7b      	ldrh	r3, [r7, #18]
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d384      	bcc.n	80053d8 <DrawChar+0x68>
  }
}
 80054ce:	bf00      	nop
 80054d0:	bf00      	nop
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000888 	.word	0x20000888
 80054dc:	2000088c 	.word	0x2000088c

080054e0 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b08b      	sub	sp, #44	; 0x2c
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	461a      	mov	r2, r3
 80054ee:	4623      	mov	r3, r4
 80054f0:	80fb      	strh	r3, [r7, #6]
 80054f2:	4603      	mov	r3, r0
 80054f4:	80bb      	strh	r3, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	807b      	strh	r3, [r7, #2]
 80054fa:	4613      	mov	r3, r2
 80054fc:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80054fe:	2300      	movs	r3, #0
 8005500:	823b      	strh	r3, [r7, #16]
 8005502:	2300      	movs	r3, #0
 8005504:	81fb      	strh	r3, [r7, #14]
 8005506:	2300      	movs	r3, #0
 8005508:	84fb      	strh	r3, [r7, #38]	; 0x26
 800550a:	2300      	movs	r3, #0
 800550c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800550e:	2300      	movs	r3, #0
 8005510:	847b      	strh	r3, [r7, #34]	; 0x22
 8005512:	2300      	movs	r3, #0
 8005514:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 8005516:	2300      	movs	r3, #0
 8005518:	83fb      	strh	r3, [r7, #30]
 800551a:	2300      	movs	r3, #0
 800551c:	83bb      	strh	r3, [r7, #28]
 800551e:	2300      	movs	r3, #0
 8005520:	837b      	strh	r3, [r7, #26]
 8005522:	2300      	movs	r3, #0
 8005524:	833b      	strh	r3, [r7, #24]
 8005526:	2300      	movs	r3, #0
 8005528:	82fb      	strh	r3, [r7, #22]
 800552a:	2300      	movs	r3, #0
 800552c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8005532:	88ba      	ldrh	r2, [r7, #4]
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	bfb8      	it	lt
 800553c:	425b      	neglt	r3, r3
 800553e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8005540:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005542:	883b      	ldrh	r3, [r7, #0]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	bfb8      	it	lt
 800554a:	425b      	neglt	r3, r3
 800554c:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8005552:	883b      	ldrh	r3, [r7, #0]
 8005554:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8005556:	88ba      	ldrh	r2, [r7, #4]
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	429a      	cmp	r2, r3
 800555c:	d304      	bcc.n	8005568 <FillTriangle+0x88>
  {
    xinc1 = 1;
 800555e:	2301      	movs	r3, #1
 8005560:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8005562:	2301      	movs	r3, #1
 8005564:	843b      	strh	r3, [r7, #32]
 8005566:	e005      	b.n	8005574 <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8005568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800556c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800556e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005572:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8005574:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005576:	883b      	ldrh	r3, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d304      	bcc.n	8005586 <FillTriangle+0xa6>
  {
    yinc1 = 1;
 800557c:	2301      	movs	r3, #1
 800557e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8005580:	2301      	movs	r3, #1
 8005582:	83bb      	strh	r3, [r7, #28]
 8005584:	e005      	b.n	8005592 <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8005586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800558a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800558c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005590:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8005592:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800559a:	429a      	cmp	r2, r3
 800559c:	db11      	blt.n	80055c2 <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800559e:	2300      	movs	r3, #0
 80055a0:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80055a2:	2300      	movs	r3, #0
 80055a4:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80055a6:	8a3b      	ldrh	r3, [r7, #16]
 80055a8:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80055aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da00      	bge.n	80055b4 <FillTriangle+0xd4>
 80055b2:	3301      	adds	r3, #1
 80055b4:	105b      	asrs	r3, r3, #1
 80055b6:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80055bc:	8a3b      	ldrh	r3, [r7, #16]
 80055be:	82bb      	strh	r3, [r7, #20]
 80055c0:	e010      	b.n	80055e4 <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80055c2:	2300      	movs	r3, #0
 80055c4:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80055c6:	2300      	movs	r3, #0
 80055c8:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80055ca:	89fb      	ldrh	r3, [r7, #14]
 80055cc:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80055ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da00      	bge.n	80055d8 <FillTriangle+0xf8>
 80055d6:	3301      	adds	r3, #1
 80055d8:	105b      	asrs	r3, r3, #1
 80055da:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 80055dc:	8a3b      	ldrh	r3, [r7, #16]
 80055de:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80055e0:	89fb      	ldrh	r3, [r7, #14]
 80055e2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80055e4:	2300      	movs	r3, #0
 80055e6:	827b      	strh	r3, [r7, #18]
 80055e8:	e02f      	b.n	800564a <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 80055ea:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80055ec:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80055ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80055f0:	887a      	ldrh	r2, [r7, #2]
 80055f2:	f7ff fa4d 	bl	8004a90 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80055f6:	8b3a      	ldrh	r2, [r7, #24]
 80055f8:	8afb      	ldrh	r3, [r7, #22]
 80055fa:	4413      	add	r3, r2
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8005600:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005604:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005608:	429a      	cmp	r2, r3
 800560a:	db0e      	blt.n	800562a <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 800560c:	8b3a      	ldrh	r2, [r7, #24]
 800560e:	8b7b      	ldrh	r3, [r7, #26]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8005616:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800561a:	4413      	add	r3, r2
 800561c:	b29b      	uxth	r3, r3
 800561e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8005620:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005622:	8bfb      	ldrh	r3, [r7, #30]
 8005624:	4413      	add	r3, r2
 8005626:	b29b      	uxth	r3, r3
 8005628:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 800562a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800562c:	8c3b      	ldrh	r3, [r7, #32]
 800562e:	4413      	add	r3, r2
 8005630:	b29b      	uxth	r3, r3
 8005632:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8005634:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005636:	8bbb      	ldrh	r3, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	b29b      	uxth	r3, r3
 800563c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800563e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005642:	b29b      	uxth	r3, r3
 8005644:	3301      	adds	r3, #1
 8005646:	b29b      	uxth	r3, r3
 8005648:	827b      	strh	r3, [r7, #18]
 800564a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800564e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005652:	429a      	cmp	r2, r3
 8005654:	ddc9      	ble.n	80055ea <FillTriangle+0x10a>
  } 
}
 8005656:	bf00      	nop
 8005658:	bf00      	nop
 800565a:	372c      	adds	r7, #44	; 0x2c
 800565c:	46bd      	mov	sp, r7
 800565e:	bd90      	pop	{r4, r7, pc}

08005660 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af02      	add	r7, sp, #8
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800566e:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <LL_FillBuffer+0x88>)
 8005670:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005674:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005676:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <LL_FillBuffer+0x8c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <LL_FillBuffer+0x90>)
 800567c:	2134      	movs	r1, #52	; 0x34
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	3348      	adds	r3, #72	; 0x48
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d103      	bne.n	8005694 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800568c:	4b16      	ldr	r3, [pc, #88]	; (80056e8 <LL_FillBuffer+0x88>)
 800568e:	2202      	movs	r2, #2
 8005690:	609a      	str	r2, [r3, #8]
 8005692:	e002      	b.n	800569a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005694:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <LL_FillBuffer+0x88>)
 8005696:	2200      	movs	r2, #0
 8005698:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800569a:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <LL_FillBuffer+0x88>)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80056a0:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <LL_FillBuffer+0x88>)
 80056a2:	4a14      	ldr	r2, [pc, #80]	; (80056f4 <LL_FillBuffer+0x94>)
 80056a4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80056a6:	4810      	ldr	r0, [pc, #64]	; (80056e8 <LL_FillBuffer+0x88>)
 80056a8:	f003 fb86 	bl	8008db8 <HAL_DMA2D_Init>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d115      	bne.n	80056de <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80056b2:	68f9      	ldr	r1, [r7, #12]
 80056b4:	480c      	ldr	r0, [pc, #48]	; (80056e8 <LL_FillBuffer+0x88>)
 80056b6:	f003 fcdd 	bl	8009074 <HAL_DMA2D_ConfigLayer>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10e      	bne.n	80056de <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69f9      	ldr	r1, [r7, #28]
 80056ca:	4807      	ldr	r0, [pc, #28]	; (80056e8 <LL_FillBuffer+0x88>)
 80056cc:	f003 fbbe 	bl	8008e4c <HAL_DMA2D_Start>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80056d6:	210a      	movs	r1, #10
 80056d8:	4803      	ldr	r0, [pc, #12]	; (80056e8 <LL_FillBuffer+0x88>)
 80056da:	f003 fbe2 	bl	8008ea2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000848 	.word	0x20000848
 80056ec:	20000888 	.word	0x20000888
 80056f0:	2000fbb8 	.word	0x2000fbb8
 80056f4:	4002b000 	.word	0x4002b000

080056f8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80056fc:	4b29      	ldr	r3, [pc, #164]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 80056fe:	4a2a      	ldr	r2, [pc, #168]	; (80057a8 <BSP_SDRAM_Init+0xb0>)
 8005700:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005702:	4b2a      	ldr	r3, [pc, #168]	; (80057ac <BSP_SDRAM_Init+0xb4>)
 8005704:	2202      	movs	r2, #2
 8005706:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005708:	4b28      	ldr	r3, [pc, #160]	; (80057ac <BSP_SDRAM_Init+0xb4>)
 800570a:	2207      	movs	r2, #7
 800570c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800570e:	4b27      	ldr	r3, [pc, #156]	; (80057ac <BSP_SDRAM_Init+0xb4>)
 8005710:	2204      	movs	r2, #4
 8005712:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005714:	4b25      	ldr	r3, [pc, #148]	; (80057ac <BSP_SDRAM_Init+0xb4>)
 8005716:	2207      	movs	r2, #7
 8005718:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800571a:	4b24      	ldr	r3, [pc, #144]	; (80057ac <BSP_SDRAM_Init+0xb4>)
 800571c:	2202      	movs	r2, #2
 800571e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005720:	4b22      	ldr	r3, [pc, #136]	; (80057ac <BSP_SDRAM_Init+0xb4>)
 8005722:	2202      	movs	r2, #2
 8005724:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8005726:	4b21      	ldr	r3, [pc, #132]	; (80057ac <BSP_SDRAM_Init+0xb4>)
 8005728:	2202      	movs	r2, #2
 800572a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800572c:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 800572e:	2200      	movs	r2, #0
 8005730:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 8005734:	2200      	movs	r2, #0
 8005736:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005738:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 800573a:	2204      	movs	r2, #4
 800573c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800573e:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 8005740:	2210      	movs	r2, #16
 8005742:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005744:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 8005746:	2240      	movs	r2, #64	; 0x40
 8005748:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800574a:	4b16      	ldr	r3, [pc, #88]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 800574c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005750:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 8005754:	2200      	movs	r2, #0
 8005756:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005758:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 800575a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800575e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005760:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 8005762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005766:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005768:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 800576a:	2200      	movs	r2, #0
 800576c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800576e:	2100      	movs	r1, #0
 8005770:	480c      	ldr	r0, [pc, #48]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 8005772:	f000 f87f 	bl	8005874 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8005776:	490d      	ldr	r1, [pc, #52]	; (80057ac <BSP_SDRAM_Init+0xb4>)
 8005778:	480a      	ldr	r0, [pc, #40]	; (80057a4 <BSP_SDRAM_Init+0xac>)
 800577a:	f008 fbc8 	bl	800df0e <HAL_SDRAM_Init>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <BSP_SDRAM_Init+0xb8>)
 8005786:	2201      	movs	r2, #1
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	e002      	b.n	8005792 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800578c:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <BSP_SDRAM_Init+0xb8>)
 800578e:	2200      	movs	r2, #0
 8005790:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005792:	f240 6003 	movw	r0, #1539	; 0x603
 8005796:	f000 f80d 	bl	80057b4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <BSP_SDRAM_Init+0xb8>)
 800579c:	781b      	ldrb	r3, [r3, #0]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	2000fc60 	.word	0x2000fc60
 80057a8:	a0000140 	.word	0xa0000140
 80057ac:	20000928 	.word	0x20000928
 80057b0:	200002fc 	.word	0x200002fc

080057b4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80057c0:	4b2a      	ldr	r3, [pc, #168]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80057c6:	4b29      	ldr	r3, [pc, #164]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80057c8:	2210      	movs	r2, #16
 80057ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80057cc:	4b27      	ldr	r3, [pc, #156]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80057d2:	4b26      	ldr	r3, [pc, #152]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80057d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057dc:	4923      	ldr	r1, [pc, #140]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80057de:	4824      	ldr	r0, [pc, #144]	; (8005870 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80057e0:	f008 fbc9 	bl	800df76 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80057e4:	2001      	movs	r0, #1
 80057e6:	f002 fddd 	bl	80083a4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80057ea:	4b20      	ldr	r3, [pc, #128]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80057ec:	2202      	movs	r2, #2
 80057ee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80057f0:	4b1e      	ldr	r3, [pc, #120]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80057f2:	2210      	movs	r2, #16
 80057f4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80057f6:	4b1d      	ldr	r3, [pc, #116]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80057fc:	4b1b      	ldr	r3, [pc, #108]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80057fe:	2200      	movs	r2, #0
 8005800:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005806:	4919      	ldr	r1, [pc, #100]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005808:	4819      	ldr	r0, [pc, #100]	; (8005870 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800580a:	f008 fbb4 	bl	800df76 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800580e:	4b17      	ldr	r3, [pc, #92]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005810:	2203      	movs	r2, #3
 8005812:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005814:	4b15      	ldr	r3, [pc, #84]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005816:	2210      	movs	r2, #16
 8005818:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800581a:	4b14      	ldr	r3, [pc, #80]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800581c:	2208      	movs	r2, #8
 800581e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005820:	4b12      	ldr	r3, [pc, #72]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005822:	2200      	movs	r2, #0
 8005824:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800582a:	4910      	ldr	r1, [pc, #64]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800582c:	4810      	ldr	r0, [pc, #64]	; (8005870 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800582e:	f008 fba2 	bl	800df76 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005832:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005836:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800583a:	2204      	movs	r2, #4
 800583c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005840:	2210      	movs	r2, #16
 8005842:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005846:	2201      	movs	r2, #1
 8005848:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a07      	ldr	r2, [pc, #28]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800584e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005854:	4905      	ldr	r1, [pc, #20]	; (800586c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005856:	4806      	ldr	r0, [pc, #24]	; (8005870 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005858:	f008 fb8d 	bl	800df76 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	4804      	ldr	r0, [pc, #16]	; (8005870 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005860:	f008 fbb4 	bl	800dfcc <HAL_SDRAM_ProgramRefreshRate>
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000944 	.word	0x20000944
 8005870:	2000fc60 	.word	0x2000fc60

08005874 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005874:	b580      	push	{r7, lr}
 8005876:	b090      	sub	sp, #64	; 0x40
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800587e:	4b70      	ldr	r3, [pc, #448]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4a6f      	ldr	r2, [pc, #444]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	6393      	str	r3, [r2, #56]	; 0x38
 800588a:	4b6d      	ldr	r3, [pc, #436]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005896:	4b6a      	ldr	r3, [pc, #424]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	4a69      	ldr	r2, [pc, #420]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 800589c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058a0:	6313      	str	r3, [r2, #48]	; 0x30
 80058a2:	4b67      	ldr	r3, [pc, #412]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ae:	4b64      	ldr	r3, [pc, #400]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	4a63      	ldr	r2, [pc, #396]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058b4:	f043 0304 	orr.w	r3, r3, #4
 80058b8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ba:	4b61      	ldr	r3, [pc, #388]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80058c6:	4b5e      	ldr	r3, [pc, #376]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	4a5d      	ldr	r2, [pc, #372]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058cc:	f043 0308 	orr.w	r3, r3, #8
 80058d0:	6313      	str	r3, [r2, #48]	; 0x30
 80058d2:	4b5b      	ldr	r3, [pc, #364]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058de:	4b58      	ldr	r3, [pc, #352]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	4a57      	ldr	r2, [pc, #348]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058e4:	f043 0310 	orr.w	r3, r3, #16
 80058e8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ea:	4b55      	ldr	r3, [pc, #340]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80058f6:	4b52      	ldr	r3, [pc, #328]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	4a51      	ldr	r2, [pc, #324]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 80058fc:	f043 0320 	orr.w	r3, r3, #32
 8005900:	6313      	str	r3, [r2, #48]	; 0x30
 8005902:	4b4f      	ldr	r3, [pc, #316]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800590e:	4b4c      	ldr	r3, [pc, #304]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	4a4b      	ldr	r2, [pc, #300]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 8005914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005918:	6313      	str	r3, [r2, #48]	; 0x30
 800591a:	4b49      	ldr	r3, [pc, #292]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005926:	4b46      	ldr	r3, [pc, #280]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	4a45      	ldr	r2, [pc, #276]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 800592c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005930:	6313      	str	r3, [r2, #48]	; 0x30
 8005932:	4b43      	ldr	r3, [pc, #268]	; (8005a40 <BSP_SDRAM_MspInit+0x1cc>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800593e:	2302      	movs	r3, #2
 8005940:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005942:	2301      	movs	r3, #1
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005946:	2302      	movs	r3, #2
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800594a:	230c      	movs	r3, #12
 800594c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800594e:	2308      	movs	r3, #8
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005956:	4619      	mov	r1, r3
 8005958:	483a      	ldr	r0, [pc, #232]	; (8005a44 <BSP_SDRAM_MspInit+0x1d0>)
 800595a:	f003 fcb9 	bl	80092d0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800595e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005968:	4619      	mov	r1, r3
 800596a:	4837      	ldr	r0, [pc, #220]	; (8005a48 <BSP_SDRAM_MspInit+0x1d4>)
 800596c:	f003 fcb0 	bl	80092d0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005970:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005974:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800597a:	4619      	mov	r1, r3
 800597c:	4833      	ldr	r0, [pc, #204]	; (8005a4c <BSP_SDRAM_MspInit+0x1d8>)
 800597e:	f003 fca7 	bl	80092d0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005982:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800598c:	4619      	mov	r1, r3
 800598e:	4830      	ldr	r0, [pc, #192]	; (8005a50 <BSP_SDRAM_MspInit+0x1dc>)
 8005990:	f003 fc9e 	bl	80092d0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005994:	f248 1333 	movw	r3, #33075	; 0x8133
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800599a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800599e:	4619      	mov	r1, r3
 80059a0:	482c      	ldr	r0, [pc, #176]	; (8005a54 <BSP_SDRAM_MspInit+0x1e0>)
 80059a2:	f003 fc95 	bl	80092d0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80059a6:	2328      	movs	r3, #40	; 0x28
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80059aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059ae:	4619      	mov	r1, r3
 80059b0:	4829      	ldr	r0, [pc, #164]	; (8005a58 <BSP_SDRAM_MspInit+0x1e4>)
 80059b2:	f003 fc8d 	bl	80092d0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80059b6:	4b29      	ldr	r3, [pc, #164]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80059bc:	4b27      	ldr	r3, [pc, #156]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059be:	2280      	movs	r2, #128	; 0x80
 80059c0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80059c2:	4b26      	ldr	r3, [pc, #152]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80059ca:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059d0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80059d2:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059d8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80059da:	4b20      	ldr	r3, [pc, #128]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059e0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80059e2:	4b1e      	ldr	r3, [pc, #120]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80059e8:	4b1c      	ldr	r3, [pc, #112]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059ee:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80059f0:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80059f6:	4b19      	ldr	r3, [pc, #100]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059f8:	2203      	movs	r2, #3
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80059fc:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005a02:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005a08:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 8005a0a:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <BSP_SDRAM_MspInit+0x1ec>)
 8005a0c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a12      	ldr	r2, [pc, #72]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
 8005a14:	4a11      	ldr	r2, [pc, #68]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005a1a:	4810      	ldr	r0, [pc, #64]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 8005a1c:	f002 fe76 	bl	800870c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005a20:	480e      	ldr	r0, [pc, #56]	; (8005a5c <BSP_SDRAM_MspInit+0x1e8>)
 8005a22:	f002 fdc5 	bl	80085b0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005a26:	2200      	movs	r2, #0
 8005a28:	210f      	movs	r1, #15
 8005a2a:	2038      	movs	r0, #56	; 0x38
 8005a2c:	f002 fd96 	bl	800855c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005a30:	2038      	movs	r0, #56	; 0x38
 8005a32:	f002 fdaf 	bl	8008594 <HAL_NVIC_EnableIRQ>
}
 8005a36:	bf00      	nop
 8005a38:	3740      	adds	r7, #64	; 0x40
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
 8005a44:	40020800 	.word	0x40020800
 8005a48:	40020c00 	.word	0x40020c00
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40021400 	.word	0x40021400
 8005a54:	40021800 	.word	0x40021800
 8005a58:	40021c00 	.word	0x40021c00
 8005a5c:	20000954 	.word	0x20000954
 8005a60:	40026410 	.word	0x40026410

08005a64 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	460a      	mov	r2, r1
 8005a6e:	80fb      	strh	r3, [r7, #6]
 8005a70:	4613      	mov	r3, r2
 8005a72:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <BSP_TS_Init+0x68>)
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005a7e:	4a14      	ldr	r2, [pc, #80]	; (8005ad0 <BSP_TS_Init+0x6c>)
 8005a80:	88bb      	ldrh	r3, [r7, #4]
 8005a82:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005a84:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <BSP_TS_Init+0x70>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2070      	movs	r0, #112	; 0x70
 8005a8a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8005a8c:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <BSP_TS_Init+0x70>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2070      	movs	r0, #112	; 0x70
 8005a92:	4798      	blx	r3
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b51      	cmp	r3, #81	; 0x51
 8005a98:	d111      	bne.n	8005abe <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <BSP_TS_Init+0x74>)
 8005a9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ad4 <BSP_TS_Init+0x70>)
 8005a9e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005aa0:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <BSP_TS_Init+0x78>)
 8005aa2:	2270      	movs	r2, #112	; 0x70
 8005aa4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8005aa6:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <BSP_TS_Init+0x7c>)
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <BSP_TS_Init+0x74>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	4a0a      	ldr	r2, [pc, #40]	; (8005adc <BSP_TS_Init+0x78>)
 8005ab4:	7812      	ldrb	r2, [r2, #0]
 8005ab6:	b292      	uxth	r2, r2
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	e001      	b.n	8005ac2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	200009b8 	.word	0x200009b8
 8005ad0:	200009ba 	.word	0x200009ba
 8005ad4:	20000000 	.word	0x20000000
 8005ad8:	200009b4 	.word	0x200009b4
 8005adc:	200009bd 	.word	0x200009bd
 8005ae0:	200009bc 	.word	0x200009bc

08005ae4 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8005ae4:	b590      	push	{r4, r7, lr}
 8005ae6:	b097      	sub	sp, #92	; 0x5c
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005afe:	4b97      	ldr	r3, [pc, #604]	; (8005d5c <BSP_TS_GetState+0x278>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	4a96      	ldr	r2, [pc, #600]	; (8005d60 <BSP_TS_GetState+0x27c>)
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	b292      	uxth	r2, r2
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4798      	blx	r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	461a      	mov	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 81a8 	beq.w	8005e70 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8005b20:	2300      	movs	r3, #0
 8005b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b24:	e197      	b.n	8005e56 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8005b26:	4b8d      	ldr	r3, [pc, #564]	; (8005d5c <BSP_TS_GetState+0x278>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	4a8c      	ldr	r2, [pc, #560]	; (8005d60 <BSP_TS_GetState+0x27c>)
 8005b2e:	7812      	ldrb	r2, [r2, #0]
 8005b30:	b290      	uxth	r0, r2
 8005b32:	f107 0120 	add.w	r1, r7, #32
 8005b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b38:	0052      	lsls	r2, r2, #1
 8005b3a:	188c      	adds	r4, r1, r2
 8005b3c:	f107 0114 	add.w	r1, r7, #20
 8005b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b42:	0052      	lsls	r2, r2, #1
 8005b44:	440a      	add	r2, r1
 8005b46:	4621      	mov	r1, r4
 8005b48:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8005b4a:	4b86      	ldr	r3, [pc, #536]	; (8005d64 <BSP_TS_GetState+0x280>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d11b      	bne.n	8005b8a <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8005b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005b68:	440b      	add	r3, r1
 8005b6a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8005b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005b76:	4413      	add	r3, r2
 8005b78:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005b84:	440b      	add	r3, r1
 8005b86:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8005b8a:	4b76      	ldr	r3, [pc, #472]	; (8005d64 <BSP_TS_GetState+0x280>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d010      	beq.n	8005bb8 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8005b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8005ba4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005bb2:	440b      	add	r3, r1
 8005bb4:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005bb8:	4b6a      	ldr	r3, [pc, #424]	; (8005d64 <BSP_TS_GetState+0x280>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d010      	beq.n	8005be6 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8005bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005bcc:	4413      	add	r3, r2
 8005bce:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8005bd2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005be0:	440b      	add	r3, r1
 8005be2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8005be6:	4b5f      	ldr	r3, [pc, #380]	; (8005d64 <BSP_TS_GetState+0x280>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01b      	beq.n	8005c2a <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8005bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005c08:	440b      	add	r3, r1
 8005c0a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8005c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005c16:	4413      	add	r3, r2
 8005c18:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005c24:	440b      	add	r3, r1
 8005c26:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005c32:	4413      	add	r3, r2
 8005c34:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4a4b      	ldr	r2, [pc, #300]	; (8005d68 <BSP_TS_GetState+0x284>)
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c42:	4299      	cmp	r1, r3
 8005c44:	d90e      	bls.n	8005c64 <BSP_TS_GetState+0x180>
 8005c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005c4e:	4413      	add	r3, r2
 8005c50:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8005c54:	4944      	ldr	r1, [pc, #272]	; (8005d68 <BSP_TS_GetState+0x284>)
 8005c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	e00d      	b.n	8005c80 <BSP_TS_GetState+0x19c>
 8005c64:	4a40      	ldr	r2, [pc, #256]	; (8005d68 <BSP_TS_GetState+0x284>)
 8005c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005c76:	440b      	add	r3, r1
 8005c78:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005c92:	4619      	mov	r1, r3
 8005c94:	4a35      	ldr	r2, [pc, #212]	; (8005d6c <BSP_TS_GetState+0x288>)
 8005c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9c:	4299      	cmp	r1, r3
 8005c9e:	d90e      	bls.n	8005cbe <BSP_TS_GetState+0x1da>
 8005ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005ca8:	4413      	add	r3, r2
 8005caa:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005cae:	492f      	ldr	r1, [pc, #188]	; (8005d6c <BSP_TS_GetState+0x288>)
 8005cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	e00d      	b.n	8005cda <BSP_TS_GetState+0x1f6>
 8005cbe:	4a2b      	ldr	r2, [pc, #172]	; (8005d6c <BSP_TS_GetState+0x288>)
 8005cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005cd0:	440b      	add	r3, r1
 8005cd2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8005cde:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005ce2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ce6:	4413      	add	r3, r2
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	dd17      	ble.n	8005d1c <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8005cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4a1a      	ldr	r2, [pc, #104]	; (8005d68 <BSP_TS_GetState+0x284>)
 8005cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005d12:	4619      	mov	r1, r3
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <BSP_TS_GetState+0x288>)
 8005d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005d1c:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <BSP_TS_GetState+0x27c>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b70      	cmp	r3, #112	; 0x70
 8005d22:	d125      	bne.n	8005d70 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8005d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	4413      	add	r3, r2
 8005d3a:	460a      	mov	r2, r1
 8005d3c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8005d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005d46:	4413      	add	r3, r2
 8005d48:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d50:	3304      	adds	r3, #4
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	4413      	add	r3, r2
 8005d56:	460a      	mov	r2, r1
 8005d58:	809a      	strh	r2, [r3, #4]
 8005d5a:	e02c      	b.n	8005db6 <BSP_TS_GetState+0x2d2>
 8005d5c:	200009b4 	.word	0x200009b4
 8005d60:	200009bd 	.word	0x200009bd
 8005d64:	200009bc 	.word	0x200009bc
 8005d68:	200009c0 	.word	0x200009c0
 8005d6c:	200009d4 	.word	0x200009d4
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005d70:	4b42      	ldr	r3, [pc, #264]	; (8005e7c <BSP_TS_GetState+0x398>)
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	4619      	mov	r1, r3
 8005d76:	4a42      	ldr	r2, [pc, #264]	; (8005e80 <BSP_TS_GetState+0x39c>)
 8005d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d7e:	fb03 f301 	mul.w	r3, r3, r1
 8005d82:	0b1b      	lsrs	r3, r3, #12
 8005d84:	b299      	uxth	r1, r3
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	460a      	mov	r2, r1
 8005d90:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005d92:	4b3c      	ldr	r3, [pc, #240]	; (8005e84 <BSP_TS_GetState+0x3a0>)
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	4619      	mov	r1, r3
 8005d98:	4a3b      	ldr	r2, [pc, #236]	; (8005e88 <BSP_TS_GetState+0x3a4>)
 8005d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da0:	fb03 f301 	mul.w	r3, r3, r1
 8005da4:	0b1b      	lsrs	r3, r3, #12
 8005da6:	b299      	uxth	r1, r3
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dac:	3304      	adds	r3, #4
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	4413      	add	r3, r2
 8005db2:	460a      	mov	r2, r1
 8005db4:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8005db6:	4b35      	ldr	r3, [pc, #212]	; (8005e8c <BSP_TS_GetState+0x3a8>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	b298      	uxth	r0, r3
 8005dbc:	f107 010c 	add.w	r1, r7, #12
 8005dc0:	f107 0210 	add.w	r2, r7, #16
 8005dc4:	f107 0308 	add.w	r3, r7, #8
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005dce:	f7fa fde9 	bl	80009a4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	b2d9      	uxtb	r1, r3
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dda:	4413      	add	r3, r2
 8005ddc:	3316      	adds	r3, #22
 8005dde:	460a      	mov	r2, r1
 8005de0:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	b2d9      	uxtb	r1, r3
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dea:	4413      	add	r3, r2
 8005dec:	3320      	adds	r3, #32
 8005dee:	460a      	mov	r2, r1
 8005df0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d827      	bhi.n	8005e48 <BSP_TS_GetState+0x364>
 8005df8:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <BSP_TS_GetState+0x31c>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e11 	.word	0x08005e11
 8005e04:	08005e1f 	.word	0x08005e1f
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e3b 	.word	0x08005e3b
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e14:	4413      	add	r3, r2
 8005e16:	331b      	adds	r3, #27
 8005e18:	2201      	movs	r2, #1
 8005e1a:	701a      	strb	r2, [r3, #0]
          break;
 8005e1c:	e018      	b.n	8005e50 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e22:	4413      	add	r3, r2
 8005e24:	331b      	adds	r3, #27
 8005e26:	2202      	movs	r2, #2
 8005e28:	701a      	strb	r2, [r3, #0]
          break;
 8005e2a:	e011      	b.n	8005e50 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e30:	4413      	add	r3, r2
 8005e32:	331b      	adds	r3, #27
 8005e34:	2203      	movs	r2, #3
 8005e36:	701a      	strb	r2, [r3, #0]
          break;
 8005e38:	e00a      	b.n	8005e50 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e3e:	4413      	add	r3, r2
 8005e40:	331b      	adds	r3, #27
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
          break;
 8005e46:	e003      	b.n	8005e50 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8005e4e:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e52:	3301      	adds	r3, #1
 8005e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	f4ff ae61 	bcc.w	8005b26 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f813 	bl	8005e90 <BSP_TS_Get_GestureId>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005e70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3754      	adds	r7, #84	; 0x54
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd90      	pop	{r4, r7, pc}
 8005e7c:	200009b8 	.word	0x200009b8
 8005e80:	200009c0 	.word	0x200009c0
 8005e84:	200009ba 	.word	0x200009ba
 8005e88:	200009d4 	.word	0x200009d4
 8005e8c:	200009bd 	.word	0x200009bd

08005e90 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005ea0:	4b3b      	ldr	r3, [pc, #236]	; (8005f90 <BSP_TS_Get_GestureId+0x100>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f107 0208 	add.w	r2, r7, #8
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fa fd60 	bl	8000972 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b49      	cmp	r3, #73	; 0x49
 8005eb6:	d05e      	beq.n	8005f76 <BSP_TS_Get_GestureId+0xe6>
 8005eb8:	2b49      	cmp	r3, #73	; 0x49
 8005eba:	d860      	bhi.n	8005f7e <BSP_TS_Get_GestureId+0xee>
 8005ebc:	2b1c      	cmp	r3, #28
 8005ebe:	d83f      	bhi.n	8005f40 <BSP_TS_Get_GestureId+0xb0>
 8005ec0:	2b1c      	cmp	r3, #28
 8005ec2:	d85c      	bhi.n	8005f7e <BSP_TS_Get_GestureId+0xee>
 8005ec4:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <BSP_TS_Get_GestureId+0x3c>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005f47 	.word	0x08005f47
 8005ed0:	08005f7f 	.word	0x08005f7f
 8005ed4:	08005f7f 	.word	0x08005f7f
 8005ed8:	08005f7f 	.word	0x08005f7f
 8005edc:	08005f7f 	.word	0x08005f7f
 8005ee0:	08005f7f 	.word	0x08005f7f
 8005ee4:	08005f7f 	.word	0x08005f7f
 8005ee8:	08005f7f 	.word	0x08005f7f
 8005eec:	08005f7f 	.word	0x08005f7f
 8005ef0:	08005f7f 	.word	0x08005f7f
 8005ef4:	08005f7f 	.word	0x08005f7f
 8005ef8:	08005f7f 	.word	0x08005f7f
 8005efc:	08005f7f 	.word	0x08005f7f
 8005f00:	08005f7f 	.word	0x08005f7f
 8005f04:	08005f7f 	.word	0x08005f7f
 8005f08:	08005f7f 	.word	0x08005f7f
 8005f0c:	08005f4f 	.word	0x08005f4f
 8005f10:	08005f7f 	.word	0x08005f7f
 8005f14:	08005f7f 	.word	0x08005f7f
 8005f18:	08005f7f 	.word	0x08005f7f
 8005f1c:	08005f57 	.word	0x08005f57
 8005f20:	08005f7f 	.word	0x08005f7f
 8005f24:	08005f7f 	.word	0x08005f7f
 8005f28:	08005f7f 	.word	0x08005f7f
 8005f2c:	08005f5f 	.word	0x08005f5f
 8005f30:	08005f7f 	.word	0x08005f7f
 8005f34:	08005f7f 	.word	0x08005f7f
 8005f38:	08005f7f 	.word	0x08005f7f
 8005f3c:	08005f67 	.word	0x08005f67
 8005f40:	2b40      	cmp	r3, #64	; 0x40
 8005f42:	d014      	beq.n	8005f6e <BSP_TS_Get_GestureId+0xde>
 8005f44:	e01b      	b.n	8005f7e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f4c:	e01a      	b.n	8005f84 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f54:	e016      	b.n	8005f84 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f5c:	e012      	b.n	8005f84 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2203      	movs	r2, #3
 8005f62:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f64:	e00e      	b.n	8005f84 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f6c:	e00a      	b.n	8005f84 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2205      	movs	r2, #5
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f74:	e006      	b.n	8005f84 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2206      	movs	r2, #6
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f7c:	e002      	b.n	8005f84 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	73fb      	strb	r3, [r7, #15]
      break;
 8005f82:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200009bd 	.word	0x200009bd

08005f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_MspInit+0x4c>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	4a10      	ldr	r2, [pc, #64]	; (8005fe0 <HAL_MspInit+0x4c>)
 8005fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <HAL_MspInit+0x4c>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <HAL_MspInit+0x4c>)
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <HAL_MspInit+0x4c>)
 8005fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fbe:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <HAL_MspInit+0x4c>)
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005fca:	2200      	movs	r2, #0
 8005fcc:	210f      	movs	r1, #15
 8005fce:	f06f 0001 	mvn.w	r0, #1
 8005fd2:	f002 fac3 	bl	800855c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023800 	.word	0x40023800

08005fe4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	; (800601c <HAL_DMA2D_MspInit+0x38>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d10b      	bne.n	800600e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <HAL_DMA2D_MspInit+0x3c>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	4a09      	ldr	r2, [pc, #36]	; (8006020 <HAL_DMA2D_MspInit+0x3c>)
 8005ffc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006000:	6313      	str	r3, [r2, #48]	; 0x30
 8006002:	4b07      	ldr	r3, [pc, #28]	; (8006020 <HAL_DMA2D_MspInit+0x3c>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	4002b000 	.word	0x4002b000
 8006020:	40023800 	.word	0x40023800

08006024 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08e      	sub	sp, #56	; 0x38
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800602c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	609a      	str	r2, [r3, #8]
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a55      	ldr	r2, [pc, #340]	; (8006198 <HAL_LTDC_MspInit+0x174>)
 8006042:	4293      	cmp	r3, r2
 8006044:	f040 80a3 	bne.w	800618e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006048:	4b54      	ldr	r3, [pc, #336]	; (800619c <HAL_LTDC_MspInit+0x178>)
 800604a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604c:	4a53      	ldr	r2, [pc, #332]	; (800619c <HAL_LTDC_MspInit+0x178>)
 800604e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006052:	6453      	str	r3, [r2, #68]	; 0x44
 8006054:	4b51      	ldr	r3, [pc, #324]	; (800619c <HAL_LTDC_MspInit+0x178>)
 8006056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800605c:	623b      	str	r3, [r7, #32]
 800605e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006060:	4b4e      	ldr	r3, [pc, #312]	; (800619c <HAL_LTDC_MspInit+0x178>)
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	4a4d      	ldr	r2, [pc, #308]	; (800619c <HAL_LTDC_MspInit+0x178>)
 8006066:	f043 0310 	orr.w	r3, r3, #16
 800606a:	6313      	str	r3, [r2, #48]	; 0x30
 800606c:	4b4b      	ldr	r3, [pc, #300]	; (800619c <HAL_LTDC_MspInit+0x178>)
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006078:	4b48      	ldr	r3, [pc, #288]	; (800619c <HAL_LTDC_MspInit+0x178>)
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	4a47      	ldr	r2, [pc, #284]	; (800619c <HAL_LTDC_MspInit+0x178>)
 800607e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006082:	6313      	str	r3, [r2, #48]	; 0x30
 8006084:	4b45      	ldr	r3, [pc, #276]	; (800619c <HAL_LTDC_MspInit+0x178>)
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8006090:	4b42      	ldr	r3, [pc, #264]	; (800619c <HAL_LTDC_MspInit+0x178>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	4a41      	ldr	r2, [pc, #260]	; (800619c <HAL_LTDC_MspInit+0x178>)
 8006096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800609a:	6313      	str	r3, [r2, #48]	; 0x30
 800609c:	4b3f      	ldr	r3, [pc, #252]	; (800619c <HAL_LTDC_MspInit+0x178>)
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060a8:	4b3c      	ldr	r3, [pc, #240]	; (800619c <HAL_LTDC_MspInit+0x178>)
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	4a3b      	ldr	r2, [pc, #236]	; (800619c <HAL_LTDC_MspInit+0x178>)
 80060ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b2:	6313      	str	r3, [r2, #48]	; 0x30
 80060b4:	4b39      	ldr	r3, [pc, #228]	; (800619c <HAL_LTDC_MspInit+0x178>)
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80060c0:	4b36      	ldr	r3, [pc, #216]	; (800619c <HAL_LTDC_MspInit+0x178>)
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	4a35      	ldr	r2, [pc, #212]	; (800619c <HAL_LTDC_MspInit+0x178>)
 80060c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ca:	6313      	str	r3, [r2, #48]	; 0x30
 80060cc:	4b33      	ldr	r3, [pc, #204]	; (800619c <HAL_LTDC_MspInit+0x178>)
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80060d8:	2310      	movs	r3, #16
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060dc:	2302      	movs	r3, #2
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060e4:	2300      	movs	r3, #0
 80060e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80060e8:	230e      	movs	r3, #14
 80060ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80060ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060f0:	4619      	mov	r1, r3
 80060f2:	482b      	ldr	r0, [pc, #172]	; (80061a0 <HAL_LTDC_MspInit+0x17c>)
 80060f4:	f003 f8ec 	bl	80092d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80060f8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fe:	2302      	movs	r3, #2
 8006100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006102:	2300      	movs	r3, #0
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006106:	2300      	movs	r3, #0
 8006108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800610a:	230e      	movs	r3, #14
 800610c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800610e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006112:	4619      	mov	r1, r3
 8006114:	4823      	ldr	r0, [pc, #140]	; (80061a4 <HAL_LTDC_MspInit+0x180>)
 8006116:	f003 f8db 	bl	80092d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800611a:	23f7      	movs	r3, #247	; 0xf7
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611e:	2302      	movs	r3, #2
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006122:	2300      	movs	r3, #0
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006126:	2300      	movs	r3, #0
 8006128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800612a:	230e      	movs	r3, #14
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800612e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006132:	4619      	mov	r1, r3
 8006134:	481c      	ldr	r0, [pc, #112]	; (80061a8 <HAL_LTDC_MspInit+0x184>)
 8006136:	f003 f8cb 	bl	80092d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800613a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006140:	2302      	movs	r3, #2
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006144:	2300      	movs	r3, #0
 8006146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006148:	2300      	movs	r3, #0
 800614a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800614c:	2309      	movs	r3, #9
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8006150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006154:	4619      	mov	r1, r3
 8006156:	4815      	ldr	r0, [pc, #84]	; (80061ac <HAL_LTDC_MspInit+0x188>)
 8006158:	f003 f8ba 	bl	80092d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800615c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006162:	2302      	movs	r3, #2
 8006164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006166:	2300      	movs	r3, #0
 8006168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800616a:	2300      	movs	r3, #0
 800616c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800616e:	230e      	movs	r3, #14
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006176:	4619      	mov	r1, r3
 8006178:	480d      	ldr	r0, [pc, #52]	; (80061b0 <HAL_LTDC_MspInit+0x18c>)
 800617a:	f003 f8a9 	bl	80092d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800617e:	2200      	movs	r2, #0
 8006180:	2105      	movs	r1, #5
 8006182:	2058      	movs	r0, #88	; 0x58
 8006184:	f002 f9ea 	bl	800855c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006188:	2058      	movs	r0, #88	; 0x58
 800618a:	f002 fa03 	bl	8008594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800618e:	bf00      	nop
 8006190:	3738      	adds	r7, #56	; 0x38
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40016800 	.word	0x40016800
 800619c:	40023800 	.word	0x40023800
 80061a0:	40021000 	.word	0x40021000
 80061a4:	40022400 	.word	0x40022400
 80061a8:	40022800 	.word	0x40022800
 80061ac:	40021800 	.word	0x40021800
 80061b0:	40022000 	.word	0x40022000

080061b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061bc:	f107 0314 	add.w	r3, r7, #20
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	605a      	str	r2, [r3, #4]
 80061c6:	609a      	str	r2, [r3, #8]
 80061c8:	60da      	str	r2, [r3, #12]
 80061ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a65      	ldr	r2, [pc, #404]	; (8006368 <HAL_SD_MspInit+0x1b4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	f040 80c3 	bne.w	800635e <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80061d8:	4b64      	ldr	r3, [pc, #400]	; (800636c <HAL_SD_MspInit+0x1b8>)
 80061da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061dc:	4a63      	ldr	r2, [pc, #396]	; (800636c <HAL_SD_MspInit+0x1b8>)
 80061de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061e2:	6453      	str	r3, [r2, #68]	; 0x44
 80061e4:	4b61      	ldr	r3, [pc, #388]	; (800636c <HAL_SD_MspInit+0x1b8>)
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061f0:	4b5e      	ldr	r3, [pc, #376]	; (800636c <HAL_SD_MspInit+0x1b8>)
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	4a5d      	ldr	r2, [pc, #372]	; (800636c <HAL_SD_MspInit+0x1b8>)
 80061f6:	f043 0304 	orr.w	r3, r3, #4
 80061fa:	6313      	str	r3, [r2, #48]	; 0x30
 80061fc:	4b5b      	ldr	r3, [pc, #364]	; (800636c <HAL_SD_MspInit+0x1b8>)
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006208:	4b58      	ldr	r3, [pc, #352]	; (800636c <HAL_SD_MspInit+0x1b8>)
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	4a57      	ldr	r2, [pc, #348]	; (800636c <HAL_SD_MspInit+0x1b8>)
 800620e:	f043 0308 	orr.w	r3, r3, #8
 8006212:	6313      	str	r3, [r2, #48]	; 0x30
 8006214:	4b55      	ldr	r3, [pc, #340]	; (800636c <HAL_SD_MspInit+0x1b8>)
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8006220:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006224:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006226:	2302      	movs	r3, #2
 8006228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800622a:	2300      	movs	r3, #0
 800622c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800622e:	2303      	movs	r3, #3
 8006230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006232:	230c      	movs	r3, #12
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006236:	f107 0314 	add.w	r3, r7, #20
 800623a:	4619      	mov	r1, r3
 800623c:	484c      	ldr	r0, [pc, #304]	; (8006370 <HAL_SD_MspInit+0x1bc>)
 800623e:	f003 f847 	bl	80092d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8006242:	2304      	movs	r3, #4
 8006244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006246:	2302      	movs	r3, #2
 8006248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800624e:	2303      	movs	r3, #3
 8006250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006252:	230c      	movs	r3, #12
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8006256:	f107 0314 	add.w	r3, r7, #20
 800625a:	4619      	mov	r1, r3
 800625c:	4845      	ldr	r0, [pc, #276]	; (8006374 <HAL_SD_MspInit+0x1c0>)
 800625e:	f003 f837 	bl	80092d0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8006262:	4b45      	ldr	r3, [pc, #276]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 8006264:	4a45      	ldr	r2, [pc, #276]	; (800637c <HAL_SD_MspInit+0x1c8>)
 8006266:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8006268:	4b43      	ldr	r3, [pc, #268]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 800626a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800626e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006270:	4b41      	ldr	r3, [pc, #260]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 8006272:	2200      	movs	r2, #0
 8006274:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006276:	4b40      	ldr	r3, [pc, #256]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 8006278:	2200      	movs	r2, #0
 800627a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800627c:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 800627e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006282:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006284:	4b3c      	ldr	r3, [pc, #240]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 8006286:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800628a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800628c:	4b3a      	ldr	r3, [pc, #232]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 800628e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006292:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8006294:	4b38      	ldr	r3, [pc, #224]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 8006296:	2220      	movs	r2, #32
 8006298:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800629a:	4b37      	ldr	r3, [pc, #220]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 800629c:	2200      	movs	r2, #0
 800629e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80062a0:	4b35      	ldr	r3, [pc, #212]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 80062a2:	2204      	movs	r2, #4
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80062a6:	4b34      	ldr	r3, [pc, #208]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 80062a8:	2203      	movs	r2, #3
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80062ac:	4b32      	ldr	r3, [pc, #200]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 80062ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80062b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80062b4:	4b30      	ldr	r3, [pc, #192]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 80062b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80062bc:	482e      	ldr	r0, [pc, #184]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 80062be:	f002 f977 	bl	80085b0 <HAL_DMA_Init>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80062c8:	f7fd face 	bl	8003868 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a2a      	ldr	r2, [pc, #168]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 80062d0:	641a      	str	r2, [r3, #64]	; 0x40
 80062d2:	4a29      	ldr	r2, [pc, #164]	; (8006378 <HAL_SD_MspInit+0x1c4>)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80062d8:	4b29      	ldr	r3, [pc, #164]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 80062da:	4a2a      	ldr	r2, [pc, #168]	; (8006384 <HAL_SD_MspInit+0x1d0>)
 80062dc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80062de:	4b28      	ldr	r3, [pc, #160]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 80062e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062e4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062e6:	4b26      	ldr	r3, [pc, #152]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 80062e8:	2240      	movs	r2, #64	; 0x40
 80062ea:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062ec:	4b24      	ldr	r3, [pc, #144]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80062f2:	4b23      	ldr	r3, [pc, #140]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 80062f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062f8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80062fa:	4b21      	ldr	r3, [pc, #132]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 80062fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006300:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006302:	4b1f      	ldr	r3, [pc, #124]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 8006304:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006308:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800630a:	4b1d      	ldr	r3, [pc, #116]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 800630c:	2220      	movs	r2, #32
 800630e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006310:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 8006312:	2200      	movs	r2, #0
 8006314:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006316:	4b1a      	ldr	r3, [pc, #104]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 8006318:	2204      	movs	r2, #4
 800631a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800631c:	4b18      	ldr	r3, [pc, #96]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 800631e:	2203      	movs	r2, #3
 8006320:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006322:	4b17      	ldr	r3, [pc, #92]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 8006324:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006328:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800632a:	4b15      	ldr	r3, [pc, #84]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 800632c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8006332:	4813      	ldr	r0, [pc, #76]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 8006334:	f002 f93c 	bl	80085b0 <HAL_DMA_Init>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800633e:	f7fd fa93 	bl	8003868 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a0e      	ldr	r2, [pc, #56]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 8006346:	63da      	str	r2, [r3, #60]	; 0x3c
 8006348:	4a0d      	ldr	r2, [pc, #52]	; (8006380 <HAL_SD_MspInit+0x1cc>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800634e:	2200      	movs	r2, #0
 8006350:	2105      	movs	r1, #5
 8006352:	2031      	movs	r0, #49	; 0x31
 8006354:	f002 f902 	bl	800855c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8006358:	2031      	movs	r0, #49	; 0x31
 800635a:	f002 f91b 	bl	8008594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800635e:	bf00      	nop
 8006360:	3728      	adds	r7, #40	; 0x28
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40023800 	.word	0x40023800
 8006370:	40020800 	.word	0x40020800
 8006374:	40020c00 	.word	0x40020c00
 8006378:	2000f9c0 	.word	0x2000f9c0
 800637c:	40026458 	.word	0x40026458
 8006380:	2000fb04 	.word	0x2000fb04
 8006384:	400264a0 	.word	0x400264a0

08006388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08a      	sub	sp, #40	; 0x28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006390:	f107 0314 	add.w	r3, r7, #20
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	605a      	str	r2, [r3, #4]
 800639a:	609a      	str	r2, [r3, #8]
 800639c:	60da      	str	r2, [r3, #12]
 800639e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a25      	ldr	r2, [pc, #148]	; (800643c <HAL_UART_MspInit+0xb4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d144      	bne.n	8006434 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063aa:	4b25      	ldr	r3, [pc, #148]	; (8006440 <HAL_UART_MspInit+0xb8>)
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	4a24      	ldr	r2, [pc, #144]	; (8006440 <HAL_UART_MspInit+0xb8>)
 80063b0:	f043 0310 	orr.w	r3, r3, #16
 80063b4:	6453      	str	r3, [r2, #68]	; 0x44
 80063b6:	4b22      	ldr	r3, [pc, #136]	; (8006440 <HAL_UART_MspInit+0xb8>)
 80063b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ba:	f003 0310 	and.w	r3, r3, #16
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063c2:	4b1f      	ldr	r3, [pc, #124]	; (8006440 <HAL_UART_MspInit+0xb8>)
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	4a1e      	ldr	r2, [pc, #120]	; (8006440 <HAL_UART_MspInit+0xb8>)
 80063c8:	f043 0302 	orr.w	r3, r3, #2
 80063cc:	6313      	str	r3, [r2, #48]	; 0x30
 80063ce:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <HAL_UART_MspInit+0xb8>)
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063da:	4b19      	ldr	r3, [pc, #100]	; (8006440 <HAL_UART_MspInit+0xb8>)
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	4a18      	ldr	r2, [pc, #96]	; (8006440 <HAL_UART_MspInit+0xb8>)
 80063e0:	f043 0301 	orr.w	r3, r3, #1
 80063e4:	6313      	str	r3, [r2, #48]	; 0x30
 80063e6:	4b16      	ldr	r3, [pc, #88]	; (8006440 <HAL_UART_MspInit+0xb8>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	60bb      	str	r3, [r7, #8]
 80063f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80063f2:	2380      	movs	r3, #128	; 0x80
 80063f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063f6:	2302      	movs	r3, #2
 80063f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063fe:	2300      	movs	r3, #0
 8006400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006402:	2307      	movs	r3, #7
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8006406:	f107 0314 	add.w	r3, r7, #20
 800640a:	4619      	mov	r1, r3
 800640c:	480d      	ldr	r0, [pc, #52]	; (8006444 <HAL_UART_MspInit+0xbc>)
 800640e:	f002 ff5f 	bl	80092d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8006412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006418:	2302      	movs	r3, #2
 800641a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641c:	2300      	movs	r3, #0
 800641e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006420:	2300      	movs	r3, #0
 8006422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006424:	2307      	movs	r3, #7
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8006428:	f107 0314 	add.w	r3, r7, #20
 800642c:	4619      	mov	r1, r3
 800642e:	4806      	ldr	r0, [pc, #24]	; (8006448 <HAL_UART_MspInit+0xc0>)
 8006430:	f002 ff4e 	bl	80092d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006434:	bf00      	nop
 8006436:	3728      	adds	r7, #40	; 0x28
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40011000 	.word	0x40011000
 8006440:	40023800 	.word	0x40023800
 8006444:	40020400 	.word	0x40020400
 8006448:	40020000 	.word	0x40020000

0800644c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006452:	1d3b      	adds	r3, r7, #4
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	605a      	str	r2, [r3, #4]
 800645a:	609a      	str	r2, [r3, #8]
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006460:	4b42      	ldr	r3, [pc, #264]	; (800656c <HAL_FMC_MspInit+0x120>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d17c      	bne.n	8006562 <HAL_FMC_MspInit+0x116>
    return;
  }
  FMC_Initialized = 1;
 8006468:	4b40      	ldr	r3, [pc, #256]	; (800656c <HAL_FMC_MspInit+0x120>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800646e:	4b40      	ldr	r3, [pc, #256]	; (8006570 <HAL_FMC_MspInit+0x124>)
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	4a3f      	ldr	r2, [pc, #252]	; (8006570 <HAL_FMC_MspInit+0x124>)
 8006474:	f043 0301 	orr.w	r3, r3, #1
 8006478:	6393      	str	r3, [r2, #56]	; 0x38
 800647a:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <HAL_FMC_MspInit+0x124>)
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8006486:	f64f 7383 	movw	r3, #65411	; 0xff83
 800648a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800648c:	2302      	movs	r3, #2
 800648e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006494:	2303      	movs	r3, #3
 8006496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006498:	230c      	movs	r3, #12
 800649a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	4619      	mov	r1, r3
 80064a0:	4834      	ldr	r0, [pc, #208]	; (8006574 <HAL_FMC_MspInit+0x128>)
 80064a2:	f002 ff15 	bl	80092d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80064a6:	2360      	movs	r3, #96	; 0x60
 80064a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064aa:	2302      	movs	r3, #2
 80064ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064b2:	2303      	movs	r3, #3
 80064b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064b6:	230c      	movs	r3, #12
 80064b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064ba:	1d3b      	adds	r3, r7, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	482e      	ldr	r0, [pc, #184]	; (8006578 <HAL_FMC_MspInit+0x12c>)
 80064c0:	f002 ff06 	bl	80092d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80064c4:	f248 1333 	movw	r3, #33075	; 0x8133
 80064c8:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ca:	2302      	movs	r3, #2
 80064cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064d2:	2303      	movs	r3, #3
 80064d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064d6:	230c      	movs	r3, #12
 80064d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80064da:	1d3b      	adds	r3, r7, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4827      	ldr	r0, [pc, #156]	; (800657c <HAL_FMC_MspInit+0x130>)
 80064e0:	f002 fef6 	bl	80092d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80064e4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80064e8:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ea:	2302      	movs	r3, #2
 80064ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064f2:	2303      	movs	r3, #3
 80064f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064f6:	230c      	movs	r3, #12
 80064f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064fa:	1d3b      	adds	r3, r7, #4
 80064fc:	4619      	mov	r1, r3
 80064fe:	4820      	ldr	r0, [pc, #128]	; (8006580 <HAL_FMC_MspInit+0x134>)
 8006500:	f002 fee6 	bl	80092d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8006504:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006508:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650a:	2302      	movs	r3, #2
 800650c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006512:	2303      	movs	r3, #3
 8006514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006516:	230c      	movs	r3, #12
 8006518:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800651a:	1d3b      	adds	r3, r7, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4819      	ldr	r0, [pc, #100]	; (8006584 <HAL_FMC_MspInit+0x138>)
 8006520:	f002 fed6 	bl	80092d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8006524:	2328      	movs	r3, #40	; 0x28
 8006526:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006528:	2302      	movs	r3, #2
 800652a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006530:	2303      	movs	r3, #3
 8006532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006534:	230c      	movs	r3, #12
 8006536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006538:	1d3b      	adds	r3, r7, #4
 800653a:	4619      	mov	r1, r3
 800653c:	4812      	ldr	r0, [pc, #72]	; (8006588 <HAL_FMC_MspInit+0x13c>)
 800653e:	f002 fec7 	bl	80092d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8006542:	2308      	movs	r3, #8
 8006544:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006546:	2302      	movs	r3, #2
 8006548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800654e:	2303      	movs	r3, #3
 8006550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006552:	230c      	movs	r3, #12
 8006554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8006556:	1d3b      	adds	r3, r7, #4
 8006558:	4619      	mov	r1, r3
 800655a:	480c      	ldr	r0, [pc, #48]	; (800658c <HAL_FMC_MspInit+0x140>)
 800655c:	f002 feb8 	bl	80092d0 <HAL_GPIO_Init>
 8006560:	e000      	b.n	8006564 <HAL_FMC_MspInit+0x118>
    return;
 8006562:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	200009e8 	.word	0x200009e8
 8006570:	40023800 	.word	0x40023800
 8006574:	40021000 	.word	0x40021000
 8006578:	40020400 	.word	0x40020400
 800657c:	40021800 	.word	0x40021800
 8006580:	40020c00 	.word	0x40020c00
 8006584:	40021400 	.word	0x40021400
 8006588:	40021c00 	.word	0x40021c00
 800658c:	40020800 	.word	0x40020800

08006590 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006598:	f7ff ff58 	bl	800644c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08a      	sub	sp, #40	; 0x28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a61      	ldr	r2, [pc, #388]	; (8006738 <HAL_SAI_MspInit+0x194>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d15b      	bne.n	800666e <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80065b6:	4b61      	ldr	r3, [pc, #388]	; (800673c <HAL_SAI_MspInit+0x198>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80065be:	4b60      	ldr	r3, [pc, #384]	; (8006740 <HAL_SAI_MspInit+0x19c>)
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	4a5f      	ldr	r2, [pc, #380]	; (8006740 <HAL_SAI_MspInit+0x19c>)
 80065c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065c8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ca:	4b5d      	ldr	r3, [pc, #372]	; (8006740 <HAL_SAI_MspInit+0x19c>)
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80065d6:	4b59      	ldr	r3, [pc, #356]	; (800673c <HAL_SAI_MspInit+0x198>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3301      	adds	r3, #1
 80065dc:	4a57      	ldr	r2, [pc, #348]	; (800673c <HAL_SAI_MspInit+0x198>)
 80065de:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80065e0:	23f0      	movs	r3, #240	; 0xf0
 80065e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e4:	2302      	movs	r3, #2
 80065e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ec:	2300      	movs	r3, #0
 80065ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80065f0:	230a      	movs	r3, #10
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80065f4:	f107 0314 	add.w	r3, r7, #20
 80065f8:	4619      	mov	r1, r3
 80065fa:	4852      	ldr	r0, [pc, #328]	; (8006744 <HAL_SAI_MspInit+0x1a0>)
 80065fc:	f002 fe68 	bl	80092d0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8006600:	4b51      	ldr	r3, [pc, #324]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 8006602:	4a52      	ldr	r2, [pc, #328]	; (800674c <HAL_SAI_MspInit+0x1a8>)
 8006604:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8006606:	4b50      	ldr	r3, [pc, #320]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 8006608:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800660c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800660e:	4b4e      	ldr	r3, [pc, #312]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 8006610:	2240      	movs	r2, #64	; 0x40
 8006612:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8006614:	4b4c      	ldr	r3, [pc, #304]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 8006616:	2200      	movs	r2, #0
 8006618:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800661a:	4b4b      	ldr	r3, [pc, #300]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 800661c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006620:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006622:	4b49      	ldr	r3, [pc, #292]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 8006624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006628:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800662a:	4b47      	ldr	r3, [pc, #284]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 800662c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006630:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8006632:	4b45      	ldr	r3, [pc, #276]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 8006634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006638:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 800663a:	4b43      	ldr	r3, [pc, #268]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 800663c:	2200      	movs	r2, #0
 800663e:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006640:	4b41      	ldr	r3, [pc, #260]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 8006642:	2200      	movs	r2, #0
 8006644:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8006646:	4840      	ldr	r0, [pc, #256]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 8006648:	f001 ffb2 	bl	80085b0 <HAL_DMA_Init>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 8006652:	f7fd f909 	bl	8003868 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a3b      	ldr	r2, [pc, #236]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 800665a:	671a      	str	r2, [r3, #112]	; 0x70
 800665c:	4a3a      	ldr	r2, [pc, #232]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a38      	ldr	r2, [pc, #224]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 8006666:	66da      	str	r2, [r3, #108]	; 0x6c
 8006668:	4a37      	ldr	r2, [pc, #220]	; (8006748 <HAL_SAI_MspInit+0x1a4>)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a37      	ldr	r2, [pc, #220]	; (8006750 <HAL_SAI_MspInit+0x1ac>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d15b      	bne.n	8006730 <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8006678:	4b30      	ldr	r3, [pc, #192]	; (800673c <HAL_SAI_MspInit+0x198>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10b      	bne.n	8006698 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8006680:	4b2f      	ldr	r3, [pc, #188]	; (8006740 <HAL_SAI_MspInit+0x19c>)
 8006682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006684:	4a2e      	ldr	r2, [pc, #184]	; (8006740 <HAL_SAI_MspInit+0x19c>)
 8006686:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800668a:	6453      	str	r3, [r2, #68]	; 0x44
 800668c:	4b2c      	ldr	r3, [pc, #176]	; (8006740 <HAL_SAI_MspInit+0x19c>)
 800668e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8006698:	4b28      	ldr	r3, [pc, #160]	; (800673c <HAL_SAI_MspInit+0x198>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3301      	adds	r3, #1
 800669e:	4a27      	ldr	r2, [pc, #156]	; (800673c <HAL_SAI_MspInit+0x198>)
 80066a0:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80066a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a8:	2302      	movs	r3, #2
 80066aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066b0:	2300      	movs	r3, #0
 80066b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80066b4:	230a      	movs	r3, #10
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80066b8:	f107 0314 	add.w	r3, r7, #20
 80066bc:	4619      	mov	r1, r3
 80066be:	4825      	ldr	r0, [pc, #148]	; (8006754 <HAL_SAI_MspInit+0x1b0>)
 80066c0:	f002 fe06 	bl	80092d0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 80066c4:	4b24      	ldr	r3, [pc, #144]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 80066c6:	4a25      	ldr	r2, [pc, #148]	; (800675c <HAL_SAI_MspInit+0x1b8>)
 80066c8:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 80066ca:	4b23      	ldr	r3, [pc, #140]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066d0:	4b21      	ldr	r3, [pc, #132]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80066d6:	4b20      	ldr	r3, [pc, #128]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 80066d8:	2200      	movs	r2, #0
 80066da:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80066dc:	4b1e      	ldr	r3, [pc, #120]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 80066de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066e2:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80066e4:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 80066e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ea:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80066ec:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 80066ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066f2:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80066f4:	4b18      	ldr	r3, [pc, #96]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 80066f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066fa:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 80066fc:	4b16      	ldr	r3, [pc, #88]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 80066fe:	2200      	movs	r2, #0
 8006700:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 8006704:	2200      	movs	r2, #0
 8006706:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8006708:	4813      	ldr	r0, [pc, #76]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 800670a:	f001 ff51 	bl	80085b0 <HAL_DMA_Init>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 8006714:	f7fd f8a8 	bl	8003868 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a0f      	ldr	r2, [pc, #60]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 800671c:	671a      	str	r2, [r3, #112]	; 0x70
 800671e:	4a0e      	ldr	r2, [pc, #56]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a0c      	ldr	r2, [pc, #48]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 8006728:	66da      	str	r2, [r3, #108]	; 0x6c
 800672a:	4a0b      	ldr	r2, [pc, #44]	; (8006758 <HAL_SAI_MspInit+0x1b4>)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8006730:	bf00      	nop
 8006732:	3728      	adds	r7, #40	; 0x28
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40015c04 	.word	0x40015c04
 800673c:	200009ec 	.word	0x200009ec
 8006740:	40023800 	.word	0x40023800
 8006744:	40022000 	.word	0x40022000
 8006748:	2000fa20 	.word	0x2000fa20
 800674c:	40026470 	.word	0x40026470
 8006750:	40015c24 	.word	0x40015c24
 8006754:	40021800 	.word	0x40021800
 8006758:	2000f674 	.word	0x2000f674
 800675c:	400264b8 	.word	0x400264b8

08006760 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a23      	ldr	r2, [pc, #140]	; (80067fc <HAL_SAI_MspDeInit+0x9c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d11c      	bne.n	80067ac <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8006772:	4b23      	ldr	r3, [pc, #140]	; (8006800 <HAL_SAI_MspDeInit+0xa0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3b01      	subs	r3, #1
 8006778:	4a21      	ldr	r2, [pc, #132]	; (8006800 <HAL_SAI_MspDeInit+0xa0>)
 800677a:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 800677c:	4b20      	ldr	r3, [pc, #128]	; (8006800 <HAL_SAI_MspDeInit+0xa0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8006784:	4b1f      	ldr	r3, [pc, #124]	; (8006804 <HAL_SAI_MspDeInit+0xa4>)
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	4a1e      	ldr	r2, [pc, #120]	; (8006804 <HAL_SAI_MspDeInit+0xa4>)
 800678a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800678e:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8006790:	21f0      	movs	r1, #240	; 0xf0
 8006792:	481d      	ldr	r0, [pc, #116]	; (8006808 <HAL_SAI_MspDeInit+0xa8>)
 8006794:	f002 ff48 	bl	8009628 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hsai->hdmarx);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	4618      	mov	r0, r3
 800679e:	f001 ffb5 	bl	800870c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 ffb0 	bl	800870c <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a16      	ldr	r2, [pc, #88]	; (800680c <HAL_SAI_MspDeInit+0xac>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d11d      	bne.n	80067f2 <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <HAL_SAI_MspDeInit+0xa0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	4a10      	ldr	r2, [pc, #64]	; (8006800 <HAL_SAI_MspDeInit+0xa0>)
 80067be:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 80067c0:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <HAL_SAI_MspDeInit+0xa0>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 80067c8:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <HAL_SAI_MspDeInit+0xa4>)
 80067ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067cc:	4a0d      	ldr	r2, [pc, #52]	; (8006804 <HAL_SAI_MspDeInit+0xa4>)
 80067ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80067d2:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 80067d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067d8:	480d      	ldr	r0, [pc, #52]	; (8006810 <HAL_SAI_MspDeInit+0xb0>)
 80067da:	f002 ff25 	bl	8009628 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hsai->hdmarx);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 ff92 	bl	800870c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 ff8d 	bl	800870c <HAL_DMA_DeInit>
    }
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40015c04 	.word	0x40015c04
 8006800:	200009ec 	.word	0x200009ec
 8006804:	40023800 	.word	0x40023800
 8006808:	40022000 	.word	0x40022000
 800680c:	40015c24 	.word	0x40015c24
 8006810:	40021800 	.word	0x40021800

08006814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08c      	sub	sp, #48	; 0x30
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006824:	2200      	movs	r2, #0
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	2036      	movs	r0, #54	; 0x36
 800682a:	f001 fe97 	bl	800855c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800682e:	2036      	movs	r0, #54	; 0x36
 8006830:	f001 feb0 	bl	8008594 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006834:	4b1f      	ldr	r3, [pc, #124]	; (80068b4 <HAL_InitTick+0xa0>)
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	4a1e      	ldr	r2, [pc, #120]	; (80068b4 <HAL_InitTick+0xa0>)
 800683a:	f043 0310 	orr.w	r3, r3, #16
 800683e:	6413      	str	r3, [r2, #64]	; 0x40
 8006840:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <HAL_InitTick+0xa0>)
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800684c:	f107 0210 	add.w	r2, r7, #16
 8006850:	f107 0314 	add.w	r3, r7, #20
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f004 fda2 	bl	800b3a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800685c:	f004 fd78 	bl	800b350 <HAL_RCC_GetPCLK1Freq>
 8006860:	4603      	mov	r3, r0
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	4a13      	ldr	r2, [pc, #76]	; (80068b8 <HAL_InitTick+0xa4>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	0c9b      	lsrs	r3, r3, #18
 8006870:	3b01      	subs	r3, #1
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006874:	4b11      	ldr	r3, [pc, #68]	; (80068bc <HAL_InitTick+0xa8>)
 8006876:	4a12      	ldr	r2, [pc, #72]	; (80068c0 <HAL_InitTick+0xac>)
 8006878:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800687a:	4b10      	ldr	r3, [pc, #64]	; (80068bc <HAL_InitTick+0xa8>)
 800687c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006880:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006882:	4a0e      	ldr	r2, [pc, #56]	; (80068bc <HAL_InitTick+0xa8>)
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006886:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006888:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <HAL_InitTick+0xa8>)
 800688a:	2200      	movs	r2, #0
 800688c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800688e:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <HAL_InitTick+0xa8>)
 8006890:	2200      	movs	r2, #0
 8006892:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006894:	4809      	ldr	r0, [pc, #36]	; (80068bc <HAL_InitTick+0xa8>)
 8006896:	f007 fbb9 	bl	800e00c <HAL_TIM_Base_Init>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d104      	bne.n	80068aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80068a0:	4806      	ldr	r0, [pc, #24]	; (80068bc <HAL_InitTick+0xa8>)
 80068a2:	f007 fc15 	bl	800e0d0 <HAL_TIM_Base_Start_IT>
 80068a6:	4603      	mov	r3, r0
 80068a8:	e000      	b.n	80068ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3730      	adds	r7, #48	; 0x30
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40023800 	.word	0x40023800
 80068b8:	431bde83 	.word	0x431bde83
 80068bc:	2000fc94 	.word	0x2000fc94
 80068c0:	40001000 	.word	0x40001000

080068c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80068c8:	e7fe      	b.n	80068c8 <NMI_Handler+0x4>

080068ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068ca:	b480      	push	{r7}
 80068cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068ce:	e7fe      	b.n	80068ce <HardFault_Handler+0x4>

080068d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068d4:	e7fe      	b.n	80068d4 <MemManage_Handler+0x4>

080068d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068d6:	b480      	push	{r7}
 80068d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068da:	e7fe      	b.n	80068da <BusFault_Handler+0x4>

080068dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068e0:	e7fe      	b.n	80068e0 <UsageFault_Handler+0x4>

080068e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068e2:	b480      	push	{r7}
 80068e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068e6:	bf00      	nop
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80068f4:	4802      	ldr	r0, [pc, #8]	; (8006900 <SDMMC1_IRQHandler+0x10>)
 80068f6:	f006 fa61 	bl	800cdbc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80068fa:	bf00      	nop
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	2000f78c 	.word	0x2000f78c

08006904 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006908:	4802      	ldr	r0, [pc, #8]	; (8006914 <TIM6_DAC_IRQHandler+0x10>)
 800690a:	f007 fc59 	bl	800e1c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800690e:	bf00      	nop
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	2000fc94 	.word	0x2000fc94

08006918 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800691c:	4802      	ldr	r0, [pc, #8]	; (8006928 <DMA2_Stream3_IRQHandler+0x10>)
 800691e:	f001 ffd5 	bl	80088cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006922:	bf00      	nop
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	2000f9c0 	.word	0x2000f9c0

0800692c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8006930:	4802      	ldr	r0, [pc, #8]	; (800693c <DMA2_Stream4_IRQHandler+0x10>)
 8006932:	f001 ffcb 	bl	80088cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8006936:	bf00      	nop
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	2000fa20 	.word	0x2000fa20

08006940 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8006944:	4802      	ldr	r0, [pc, #8]	; (8006950 <DMA2_Stream6_IRQHandler+0x10>)
 8006946:	f001 ffc1 	bl	80088cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800694a:	bf00      	nop
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	2000fb04 	.word	0x2000fb04

08006954 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8006958:	4802      	ldr	r0, [pc, #8]	; (8006964 <DMA2_Stream7_IRQHandler+0x10>)
 800695a:	f001 ffb7 	bl	80088cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800695e:	bf00      	nop
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	2000f674 	.word	0x2000f674

08006968 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800696c:	4802      	ldr	r0, [pc, #8]	; (8006978 <LTDC_IRQHandler+0x10>)
 800696e:	f003 fd95 	bl	800a49c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8006972:	bf00      	nop
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	2000f818 	.word	0x2000f818

0800697c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006984:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <_sbrk+0x5c>)
 8006986:	4b15      	ldr	r3, [pc, #84]	; (80069dc <_sbrk+0x60>)
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006990:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <_sbrk+0x64>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d102      	bne.n	800699e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006998:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <_sbrk+0x64>)
 800699a:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <_sbrk+0x68>)
 800699c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <_sbrk+0x64>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4413      	add	r3, r2
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d207      	bcs.n	80069bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069ac:	f010 f97c 	bl	8016ca8 <__errno>
 80069b0:	4603      	mov	r3, r0
 80069b2:	220c      	movs	r2, #12
 80069b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069b6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ba:	e009      	b.n	80069d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069bc:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <_sbrk+0x64>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <_sbrk+0x64>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4413      	add	r3, r2
 80069ca:	4a05      	ldr	r2, [pc, #20]	; (80069e0 <_sbrk+0x64>)
 80069cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069ce:	68fb      	ldr	r3, [r7, #12]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	20050000 	.word	0x20050000
 80069dc:	00000800 	.word	0x00000800
 80069e0:	200009f0 	.word	0x200009f0
 80069e4:	200101a8 	.word	0x200101a8

080069e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <SystemInit+0x20>)
 80069ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f2:	4a05      	ldr	r2, [pc, #20]	; (8006a08 <SystemInit+0x20>)
 80069f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069fc:	bf00      	nop
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	e000ed00 	.word	0xe000ed00

08006a0c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	4603      	mov	r3, r0
 8006a16:	81fb      	strh	r3, [r7, #14]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	81bb      	strh	r3, [r7, #12]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8006a24:	89bb      	ldrh	r3, [r7, #12]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8006a2a:	89bb      	ldrh	r3, [r7, #12]
 8006a2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a30:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8006a36:	f7fd f873 	bl	8003b20 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8006a3a:	89fb      	ldrh	r3, [r7, #14]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2203      	movs	r2, #3
 8006a40:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fc35 	bl	80082b4 <CODEC_IO_Write>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8006a54:	89fb      	ldrh	r3, [r7, #14]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f640 0117 	movw	r1, #2071	; 0x817
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f001 fc28 	bl	80082b4 <CODEC_IO_Write>
 8006a64:	4603      	mov	r3, r0
 8006a66:	461a      	mov	r2, r3
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8006a6e:	89fb      	ldrh	r3, [r7, #14]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2200      	movs	r2, #0
 8006a74:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f001 fc1b 	bl	80082b4 <CODEC_IO_Write>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8006a88:	89fb      	ldrh	r3, [r7, #14]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	226c      	movs	r2, #108	; 0x6c
 8006a8e:	2139      	movs	r1, #57	; 0x39
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 fc0f 	bl	80082b4 <CODEC_IO_Write>
 8006a96:	4603      	mov	r3, r0
 8006a98:	461a      	mov	r2, r3
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8006aa0:	8afb      	ldrh	r3, [r7, #22]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00c      	beq.n	8006ac0 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8006aa6:	89fb      	ldrh	r3, [r7, #14]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2213      	movs	r2, #19
 8006aac:	2101      	movs	r1, #1
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 fc00 	bl	80082b4 <CODEC_IO_Write>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	61fb      	str	r3, [r7, #28]
 8006abe:	e00b      	b.n	8006ad8 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8006ac0:	89fb      	ldrh	r3, [r7, #14]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 fbf3 	bl	80082b4 <CODEC_IO_Write>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8006ad8:	2032      	movs	r0, #50	; 0x32
 8006ada:	f7fd f889 	bl	8003bf0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8006ade:	8b3b      	ldrh	r3, [r7, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 815f 	beq.w	8006da4 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8006ae6:	4bae      	ldr	r3, [pc, #696]	; (8006da0 <wm8994_Init+0x394>)
 8006ae8:	2201      	movs	r2, #1
 8006aea:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8006aec:	8b3b      	ldrh	r3, [r7, #24]
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	f000 808c 	beq.w	8006c0c <wm8994_Init+0x200>
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	f300 8111 	bgt.w	8006d1c <wm8994_Init+0x310>
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d002      	beq.n	8006b04 <wm8994_Init+0xf8>
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d042      	beq.n	8006b88 <wm8994_Init+0x17c>
 8006b02:	e10b      	b.n	8006d1c <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	f640 420c 	movw	r2, #3084	; 0xc0c
 8006b0c:	2105      	movs	r1, #5
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 fbd0 	bl	80082b4 <CODEC_IO_Write>
 8006b14:	4603      	mov	r3, r0
 8006b16:	461a      	mov	r2, r3
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8006b1e:	89fb      	ldrh	r3, [r7, #14]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2200      	movs	r2, #0
 8006b24:	f240 6101 	movw	r1, #1537	; 0x601
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f001 fbc3 	bl	80082b4 <CODEC_IO_Write>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	461a      	mov	r2, r3
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8006b38:	89fb      	ldrh	r3, [r7, #14]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f240 6102 	movw	r1, #1538	; 0x602
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 fbb6 	bl	80082b4 <CODEC_IO_Write>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006b52:	89fb      	ldrh	r3, [r7, #14]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2202      	movs	r2, #2
 8006b58:	f240 6104 	movw	r1, #1540	; 0x604
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 fba9 	bl	80082b4 <CODEC_IO_Write>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006b6c:	89fb      	ldrh	r3, [r7, #14]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2202      	movs	r2, #2
 8006b72:	f240 6105 	movw	r1, #1541	; 0x605
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 fb9c 	bl	80082b4 <CODEC_IO_Write>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4413      	add	r3, r2
 8006b84:	61fb      	str	r3, [r7, #28]
      break;
 8006b86:	e110      	b.n	8006daa <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006b88:	89fb      	ldrh	r3, [r7, #14]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f240 3203 	movw	r2, #771	; 0x303
 8006b90:	2105      	movs	r1, #5
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 fb8e 	bl	80082b4 <CODEC_IO_Write>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006ba2:	89fb      	ldrh	r3, [r7, #14]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f240 6101 	movw	r1, #1537	; 0x601
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 fb81 	bl	80082b4 <CODEC_IO_Write>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006bbc:	89fb      	ldrh	r3, [r7, #14]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f240 6102 	movw	r1, #1538	; 0x602
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 fb74 	bl	80082b4 <CODEC_IO_Write>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	461a      	mov	r2, r3
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006bd6:	89fb      	ldrh	r3, [r7, #14]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f240 6104 	movw	r1, #1540	; 0x604
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 fb67 	bl	80082b4 <CODEC_IO_Write>
 8006be6:	4603      	mov	r3, r0
 8006be8:	461a      	mov	r2, r3
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006bf0:	89fb      	ldrh	r3, [r7, #14]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f240 6105 	movw	r1, #1541	; 0x605
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 fb5a 	bl	80082b4 <CODEC_IO_Write>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	61fb      	str	r3, [r7, #28]
      break;
 8006c0a:	e0ce      	b.n	8006daa <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006c0c:	8afb      	ldrh	r3, [r7, #22]
 8006c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c12:	d141      	bne.n	8006c98 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006c14:	89fb      	ldrh	r3, [r7, #14]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006c1c:	2105      	movs	r1, #5
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fb48 	bl	80082b4 <CODEC_IO_Write>
 8006c24:	4603      	mov	r3, r0
 8006c26:	461a      	mov	r2, r3
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8006c2e:	89fb      	ldrh	r3, [r7, #14]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2203      	movs	r2, #3
 8006c34:	f240 6101 	movw	r1, #1537	; 0x601
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f001 fb3b 	bl	80082b4 <CODEC_IO_Write>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	461a      	mov	r2, r3
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8006c48:	89fb      	ldrh	r3, [r7, #14]
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	f240 6102 	movw	r1, #1538	; 0x602
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 fb2e 	bl	80082b4 <CODEC_IO_Write>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	4413      	add	r3, r2
 8006c60:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8006c62:	89fb      	ldrh	r3, [r7, #14]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2203      	movs	r2, #3
 8006c68:	f240 6104 	movw	r1, #1540	; 0x604
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 fb21 	bl	80082b4 <CODEC_IO_Write>
 8006c72:	4603      	mov	r3, r0
 8006c74:	461a      	mov	r2, r3
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8006c7c:	89fb      	ldrh	r3, [r7, #14]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2203      	movs	r2, #3
 8006c82:	f240 6105 	movw	r1, #1541	; 0x605
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 fb14 	bl	80082b4 <CODEC_IO_Write>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	461a      	mov	r2, r3
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8006c96:	e088      	b.n	8006daa <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006c98:	89fb      	ldrh	r3, [r7, #14]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006ca0:	2105      	movs	r1, #5
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f001 fb06 	bl	80082b4 <CODEC_IO_Write>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	461a      	mov	r2, r3
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006cb2:	89fb      	ldrh	r3, [r7, #14]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f240 6101 	movw	r1, #1537	; 0x601
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f001 faf9 	bl	80082b4 <CODEC_IO_Write>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006ccc:	89fb      	ldrh	r3, [r7, #14]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f240 6102 	movw	r1, #1538	; 0x602
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 faec 	bl	80082b4 <CODEC_IO_Write>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006ce6:	89fb      	ldrh	r3, [r7, #14]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2202      	movs	r2, #2
 8006cec:	f240 6104 	movw	r1, #1540	; 0x604
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f001 fadf 	bl	80082b4 <CODEC_IO_Write>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8006d00:	89fb      	ldrh	r3, [r7, #14]
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2202      	movs	r2, #2
 8006d06:	f240 6105 	movw	r1, #1541	; 0x605
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 fad2 	bl	80082b4 <CODEC_IO_Write>
 8006d10:	4603      	mov	r3, r0
 8006d12:	461a      	mov	r2, r3
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	61fb      	str	r3, [r7, #28]
      break;
 8006d1a:	e046      	b.n	8006daa <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006d1c:	89fb      	ldrh	r3, [r7, #14]
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	f240 3203 	movw	r2, #771	; 0x303
 8006d24:	2105      	movs	r1, #5
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 fac4 	bl	80082b4 <CODEC_IO_Write>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	461a      	mov	r2, r3
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006d36:	89fb      	ldrh	r3, [r7, #14]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f240 6101 	movw	r1, #1537	; 0x601
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 fab7 	bl	80082b4 <CODEC_IO_Write>
 8006d46:	4603      	mov	r3, r0
 8006d48:	461a      	mov	r2, r3
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006d50:	89fb      	ldrh	r3, [r7, #14]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2201      	movs	r2, #1
 8006d56:	f240 6102 	movw	r1, #1538	; 0x602
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 faaa 	bl	80082b4 <CODEC_IO_Write>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006d6a:	89fb      	ldrh	r3, [r7, #14]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f240 6104 	movw	r1, #1540	; 0x604
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 fa9d 	bl	80082b4 <CODEC_IO_Write>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006d84:	89fb      	ldrh	r3, [r7, #14]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f240 6105 	movw	r1, #1541	; 0x605
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 fa90 	bl	80082b4 <CODEC_IO_Write>
 8006d94:	4603      	mov	r3, r0
 8006d96:	461a      	mov	r2, r3
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	61fb      	str	r3, [r7, #28]
      break;
 8006d9e:	e004      	b.n	8006daa <wm8994_Init+0x39e>
 8006da0:	200009f4 	.word	0x200009f4
    }
  }
  else
  {
    outputEnabled = 0;
 8006da4:	4ba5      	ldr	r3, [pc, #660]	; (800703c <wm8994_Init+0x630>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8006daa:	8afb      	ldrh	r3, [r7, #22]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 81c3 	beq.w	8007138 <wm8994_Init+0x72c>
  {
    inputEnabled = 1;
 8006db2:	4ba3      	ldr	r3, [pc, #652]	; (8007040 <wm8994_Init+0x634>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8006db8:	8afb      	ldrh	r3, [r7, #22]
 8006dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dbe:	f000 8141 	beq.w	8007044 <wm8994_Init+0x638>
 8006dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc6:	f300 81b3 	bgt.w	8007130 <wm8994_Init+0x724>
 8006dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dce:	d05a      	beq.n	8006e86 <wm8994_Init+0x47a>
 8006dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dd4:	f300 81ac 	bgt.w	8007130 <wm8994_Init+0x724>
 8006dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ddc:	f000 80de 	beq.w	8006f9c <wm8994_Init+0x590>
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de4:	f040 81a4 	bne.w	8007130 <wm8994_Init+0x724>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8006de8:	89fb      	ldrh	r3, [r7, #14]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8006df0:	2104      	movs	r1, #4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fa5e 	bl	80082b4 <CODEC_IO_Write>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	4413      	add	r3, r2
 8006e00:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006e02:	89fb      	ldrh	r3, [r7, #14]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	22db      	movs	r2, #219	; 0xdb
 8006e08:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f001 fa51 	bl	80082b4 <CODEC_IO_Write>
 8006e12:	4603      	mov	r3, r0
 8006e14:	461a      	mov	r2, r3
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	4413      	add	r3, r2
 8006e1a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8006e1c:	89fb      	ldrh	r3, [r7, #14]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8006e24:	2102      	movs	r1, #2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 fa44 	bl	80082b4 <CODEC_IO_Write>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	461a      	mov	r2, r3
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8006e36:	89fb      	ldrh	r3, [r7, #14]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 fa37 	bl	80082b4 <CODEC_IO_Write>
 8006e46:	4603      	mov	r3, r0
 8006e48:	461a      	mov	r2, r3
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006e50:	89fb      	ldrh	r3, [r7, #14]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2202      	movs	r2, #2
 8006e56:	f240 6109 	movw	r1, #1545	; 0x609
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 fa2a 	bl	80082b4 <CODEC_IO_Write>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8006e6a:	89fb      	ldrh	r3, [r7, #14]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	220e      	movs	r2, #14
 8006e70:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 fa1d 	bl	80082b4 <CODEC_IO_Write>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	61fb      	str	r3, [r7, #28]
      break;
 8006e84:	e15b      	b.n	800713e <wm8994_Init+0x732>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8006e86:	89fb      	ldrh	r3, [r7, #14]
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2211      	movs	r2, #17
 8006e8c:	2128      	movs	r1, #40	; 0x28
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 fa10 	bl	80082b4 <CODEC_IO_Write>
 8006e94:	4603      	mov	r3, r0
 8006e96:	461a      	mov	r2, r3
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8006e9e:	89fb      	ldrh	r3, [r7, #14]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	2129      	movs	r1, #41	; 0x29
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f001 fa04 	bl	80082b4 <CODEC_IO_Write>
 8006eac:	4603      	mov	r3, r0
 8006eae:	461a      	mov	r2, r3
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8006eb6:	89fb      	ldrh	r3, [r7, #14]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2220      	movs	r2, #32
 8006ebc:	212a      	movs	r1, #42	; 0x2a
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f001 f9f8 	bl	80082b4 <CODEC_IO_Write>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4413      	add	r3, r2
 8006ecc:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2B, 0x0000);
 8006ece:	89fb      	ldrh	r3, [r7, #14]
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	212b      	movs	r1, #43	; 0x2b
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 f9ec 	bl	80082b4 <CODEC_IO_Write>
 8006edc:	4603      	mov	r3, r0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2C, 0x0000);
 8006ee6:	89fb      	ldrh	r3, [r7, #14]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2200      	movs	r2, #0
 8006eec:	212c      	movs	r1, #44	; 0x2c
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f001 f9e0 	bl	80082b4 <CODEC_IO_Write>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8006efe:	89fb      	ldrh	r3, [r7, #14]
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	f240 3203 	movw	r2, #771	; 0x303
 8006f06:	2104      	movs	r1, #4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 f9d3 	bl	80082b4 <CODEC_IO_Write>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	461a      	mov	r2, r3
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	4413      	add	r3, r2
 8006f16:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006f18:	89fb      	ldrh	r3, [r7, #14]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	22db      	movs	r2, #219	; 0xdb
 8006f1e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 f9c6 	bl	80082b4 <CODEC_IO_Write>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8006f32:	89fb      	ldrh	r3, [r7, #14]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	f246 3250 	movw	r2, #25424	; 0x6350
 8006f3a:	2102      	movs	r1, #2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 f9b9 	bl	80082b4 <CODEC_IO_Write>
 8006f42:	4603      	mov	r3, r0
 8006f44:	461a      	mov	r2, r3
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	4413      	add	r3, r2
 8006f4a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006f4c:	89fb      	ldrh	r3, [r7, #14]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2202      	movs	r2, #2
 8006f52:	f240 6106 	movw	r1, #1542	; 0x606
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 f9ac 	bl	80082b4 <CODEC_IO_Write>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	461a      	mov	r2, r3
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	4413      	add	r3, r2
 8006f64:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8006f66:	89fb      	ldrh	r3, [r7, #14]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f240 6107 	movw	r1, #1543	; 0x607
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 f99f 	bl	80082b4 <CODEC_IO_Write>
 8006f76:	4603      	mov	r3, r0
 8006f78:	461a      	mov	r2, r3
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006f80:	89fb      	ldrh	r3, [r7, #14]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	220d      	movs	r2, #13
 8006f86:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 f992 	bl	80082b4 <CODEC_IO_Write>
 8006f90:	4603      	mov	r3, r0
 8006f92:	461a      	mov	r2, r3
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	4413      	add	r3, r2
 8006f98:	61fb      	str	r3, [r7, #28]
      break;
 8006f9a:	e0d0      	b.n	800713e <wm8994_Init+0x732>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8006f9c:	89fb      	ldrh	r3, [r7, #14]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8006fa4:	2104      	movs	r1, #4
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 f984 	bl	80082b4 <CODEC_IO_Write>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006fb6:	89fb      	ldrh	r3, [r7, #14]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	22db      	movs	r2, #219	; 0xdb
 8006fbc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f001 f977 	bl	80082b4 <CODEC_IO_Write>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	461a      	mov	r2, r3
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	4413      	add	r3, r2
 8006fce:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8006fd0:	89fb      	ldrh	r3, [r7, #14]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f246 3250 	movw	r2, #25424	; 0x6350
 8006fd8:	2102      	movs	r1, #2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 f96a 	bl	80082b4 <CODEC_IO_Write>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006fea:	89fb      	ldrh	r3, [r7, #14]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f240 6106 	movw	r1, #1542	; 0x606
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 f95d 	bl	80082b4 <CODEC_IO_Write>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2202      	movs	r2, #2
 800700a:	f240 6107 	movw	r1, #1543	; 0x607
 800700e:	4618      	mov	r0, r3
 8007010:	f001 f950 	bl	80082b4 <CODEC_IO_Write>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800701e:	89fb      	ldrh	r3, [r7, #14]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	220d      	movs	r2, #13
 8007024:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007028:	4618      	mov	r0, r3
 800702a:	f001 f943 	bl	80082b4 <CODEC_IO_Write>
 800702e:	4603      	mov	r3, r0
 8007030:	461a      	mov	r2, r3
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	61fb      	str	r3, [r7, #28]
      break; 
 8007038:	e081      	b.n	800713e <wm8994_Init+0x732>
 800703a:	bf00      	nop
 800703c:	200009f4 	.word	0x200009f4
 8007040:	200009f8 	.word	0x200009f8
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8007044:	89fb      	ldrh	r3, [r7, #14]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f640 723c 	movw	r2, #3900	; 0xf3c
 800704c:	2104      	movs	r1, #4
 800704e:	4618      	mov	r0, r3
 8007050:	f001 f930 	bl	80082b4 <CODEC_IO_Write>
 8007054:	4603      	mov	r3, r0
 8007056:	461a      	mov	r2, r3
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800705e:	89fb      	ldrh	r3, [r7, #14]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	22db      	movs	r2, #219	; 0xdb
 8007064:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8007068:	4618      	mov	r0, r3
 800706a:	f001 f923 	bl	80082b4 <CODEC_IO_Write>
 800706e:	4603      	mov	r3, r0
 8007070:	461a      	mov	r2, r3
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4413      	add	r3, r2
 8007076:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8007078:	89fb      	ldrh	r3, [r7, #14]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	22db      	movs	r2, #219	; 0xdb
 800707e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8007082:	4618      	mov	r0, r3
 8007084:	f001 f916 	bl	80082b4 <CODEC_IO_Write>
 8007088:	4603      	mov	r3, r0
 800708a:	461a      	mov	r2, r3
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	4413      	add	r3, r2
 8007090:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8007092:	89fb      	ldrh	r3, [r7, #14]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	f246 32a0 	movw	r2, #25504	; 0x63a0
 800709a:	2102      	movs	r1, #2
 800709c:	4618      	mov	r0, r3
 800709e:	f001 f909 	bl	80082b4 <CODEC_IO_Write>
 80070a2:	4603      	mov	r3, r0
 80070a4:	461a      	mov	r2, r3
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80070ac:	89fb      	ldrh	r3, [r7, #14]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2202      	movs	r2, #2
 80070b2:	f240 6106 	movw	r1, #1542	; 0x606
 80070b6:	4618      	mov	r0, r3
 80070b8:	f001 f8fc 	bl	80082b4 <CODEC_IO_Write>
 80070bc:	4603      	mov	r3, r0
 80070be:	461a      	mov	r2, r3
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	4413      	add	r3, r2
 80070c4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80070c6:	89fb      	ldrh	r3, [r7, #14]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2202      	movs	r2, #2
 80070cc:	f240 6107 	movw	r1, #1543	; 0x607
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 f8ef 	bl	80082b4 <CODEC_IO_Write>
 80070d6:	4603      	mov	r3, r0
 80070d8:	461a      	mov	r2, r3
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80070e0:	89fb      	ldrh	r3, [r7, #14]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2202      	movs	r2, #2
 80070e6:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 f8e2 	bl	80082b4 <CODEC_IO_Write>
 80070f0:	4603      	mov	r3, r0
 80070f2:	461a      	mov	r2, r3
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80070fa:	89fb      	ldrh	r3, [r7, #14]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2202      	movs	r2, #2
 8007100:	f240 6109 	movw	r1, #1545	; 0x609
 8007104:	4618      	mov	r0, r3
 8007106:	f001 f8d5 	bl	80082b4 <CODEC_IO_Write>
 800710a:	4603      	mov	r3, r0
 800710c:	461a      	mov	r2, r3
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8007114:	89fb      	ldrh	r3, [r7, #14]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	220d      	movs	r2, #13
 800711a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f8c8 	bl	80082b4 <CODEC_IO_Write>
 8007124:	4603      	mov	r3, r0
 8007126:	461a      	mov	r2, r3
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	61fb      	str	r3, [r7, #28]
      break;    
 800712e:	e006      	b.n	800713e <wm8994_Init+0x732>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	3301      	adds	r3, #1
 8007134:	61fb      	str	r3, [r7, #28]
      break;
 8007136:	e002      	b.n	800713e <wm8994_Init+0x732>
    }
  }
  else
  {
    inputEnabled = 0;
 8007138:	4ba4      	ldr	r3, [pc, #656]	; (80073cc <wm8994_Init+0x9c0>)
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4aa3      	ldr	r2, [pc, #652]	; (80073d0 <wm8994_Init+0x9c4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d079      	beq.n	800723a <wm8994_Init+0x82e>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4aa1      	ldr	r2, [pc, #644]	; (80073d0 <wm8994_Init+0x9c4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	f200 80ad 	bhi.w	80072aa <wm8994_Init+0x89e>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8007156:	4293      	cmp	r3, r2
 8007158:	d061      	beq.n	800721e <wm8994_Init+0x812>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8007160:	4293      	cmp	r3, r2
 8007162:	f200 80a2 	bhi.w	80072aa <wm8994_Init+0x89e>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f64a 4244 	movw	r2, #44100	; 0xac44
 800716c:	4293      	cmp	r3, r2
 800716e:	f000 808e 	beq.w	800728e <wm8994_Init+0x882>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f64a 4244 	movw	r2, #44100	; 0xac44
 8007178:	4293      	cmp	r3, r2
 800717a:	f200 8096 	bhi.w	80072aa <wm8994_Init+0x89e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007184:	d03d      	beq.n	8007202 <wm8994_Init+0x7f6>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800718c:	f200 808d 	bhi.w	80072aa <wm8994_Init+0x89e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f245 6222 	movw	r2, #22050	; 0x5622
 8007196:	4293      	cmp	r3, r2
 8007198:	d06b      	beq.n	8007272 <wm8994_Init+0x866>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f245 6222 	movw	r2, #22050	; 0x5622
 80071a0:	4293      	cmp	r3, r2
 80071a2:	f200 8082 	bhi.w	80072aa <wm8994_Init+0x89e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80071ac:	d01b      	beq.n	80071e6 <wm8994_Init+0x7da>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80071b4:	d879      	bhi.n	80072aa <wm8994_Init+0x89e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80071bc:	d005      	beq.n	80071ca <wm8994_Init+0x7be>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d046      	beq.n	8007256 <wm8994_Init+0x84a>
 80071c8:	e06f      	b.n	80072aa <wm8994_Init+0x89e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80071ca:	89fb      	ldrh	r3, [r7, #14]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2203      	movs	r2, #3
 80071d0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80071d4:	4618      	mov	r0, r3
 80071d6:	f001 f86d 	bl	80082b4 <CODEC_IO_Write>
 80071da:	4603      	mov	r3, r0
 80071dc:	461a      	mov	r2, r3
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	4413      	add	r3, r2
 80071e2:	61fb      	str	r3, [r7, #28]
    break;
 80071e4:	e06f      	b.n	80072c6 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80071e6:	89fb      	ldrh	r3, [r7, #14]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2233      	movs	r2, #51	; 0x33
 80071ec:	f44f 7104 	mov.w	r1, #528	; 0x210
 80071f0:	4618      	mov	r0, r3
 80071f2:	f001 f85f 	bl	80082b4 <CODEC_IO_Write>
 80071f6:	4603      	mov	r3, r0
 80071f8:	461a      	mov	r2, r3
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	61fb      	str	r3, [r7, #28]
    break;
 8007200:	e061      	b.n	80072c6 <wm8994_Init+0x8ba>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8007202:	89fb      	ldrh	r3, [r7, #14]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2263      	movs	r2, #99	; 0x63
 8007208:	f44f 7104 	mov.w	r1, #528	; 0x210
 800720c:	4618      	mov	r0, r3
 800720e:	f001 f851 	bl	80082b4 <CODEC_IO_Write>
 8007212:	4603      	mov	r3, r0
 8007214:	461a      	mov	r2, r3
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	4413      	add	r3, r2
 800721a:	61fb      	str	r3, [r7, #28]
    break;
 800721c:	e053      	b.n	80072c6 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800721e:	89fb      	ldrh	r3, [r7, #14]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2283      	movs	r2, #131	; 0x83
 8007224:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007228:	4618      	mov	r0, r3
 800722a:	f001 f843 	bl	80082b4 <CODEC_IO_Write>
 800722e:	4603      	mov	r3, r0
 8007230:	461a      	mov	r2, r3
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	61fb      	str	r3, [r7, #28]
    break;
 8007238:	e045      	b.n	80072c6 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800723a:	89fb      	ldrh	r3, [r7, #14]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	22a3      	movs	r2, #163	; 0xa3
 8007240:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007244:	4618      	mov	r0, r3
 8007246:	f001 f835 	bl	80082b4 <CODEC_IO_Write>
 800724a:	4603      	mov	r3, r0
 800724c:	461a      	mov	r2, r3
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	61fb      	str	r3, [r7, #28]
    break;
 8007254:	e037      	b.n	80072c6 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8007256:	89fb      	ldrh	r3, [r7, #14]
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2213      	movs	r2, #19
 800725c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f827 	bl	80082b4 <CODEC_IO_Write>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	61fb      	str	r3, [r7, #28]
    break;
 8007270:	e029      	b.n	80072c6 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8007272:	89fb      	ldrh	r3, [r7, #14]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2243      	movs	r2, #67	; 0x43
 8007278:	f44f 7104 	mov.w	r1, #528	; 0x210
 800727c:	4618      	mov	r0, r3
 800727e:	f001 f819 	bl	80082b4 <CODEC_IO_Write>
 8007282:	4603      	mov	r3, r0
 8007284:	461a      	mov	r2, r3
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	61fb      	str	r3, [r7, #28]
    break;
 800728c:	e01b      	b.n	80072c6 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800728e:	89fb      	ldrh	r3, [r7, #14]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2273      	movs	r2, #115	; 0x73
 8007294:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007298:	4618      	mov	r0, r3
 800729a:	f001 f80b 	bl	80082b4 <CODEC_IO_Write>
 800729e:	4603      	mov	r3, r0
 80072a0:	461a      	mov	r2, r3
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	61fb      	str	r3, [r7, #28]
    break; 
 80072a8:	e00d      	b.n	80072c6 <wm8994_Init+0x8ba>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80072aa:	89fb      	ldrh	r3, [r7, #14]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2283      	movs	r2, #131	; 0x83
 80072b0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fffd 	bl	80082b4 <CODEC_IO_Write>
 80072ba:	4603      	mov	r3, r0
 80072bc:	461a      	mov	r2, r3
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	4413      	add	r3, r2
 80072c2:	61fb      	str	r3, [r7, #28]
    break; 
 80072c4:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80072c6:	8afb      	ldrh	r3, [r7, #22]
 80072c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072cc:	d10e      	bne.n	80072ec <wm8994_Init+0x8e0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80072ce:	89fb      	ldrh	r3, [r7, #14]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f244 0218 	movw	r2, #16408	; 0x4018
 80072d6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 ffea 	bl	80082b4 <CODEC_IO_Write>
 80072e0:	4603      	mov	r3, r0
 80072e2:	461a      	mov	r2, r3
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	e00d      	b.n	8007308 <wm8994_Init+0x8fc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80072ec:	89fb      	ldrh	r3, [r7, #14]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f244 0210 	movw	r2, #16400	; 0x4010
 80072f4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 ffdb 	bl	80082b4 <CODEC_IO_Write>
 80072fe:	4603      	mov	r3, r0
 8007300:	461a      	mov	r2, r3
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	4413      	add	r3, r2
 8007306:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8007308:	89fb      	ldrh	r3, [r7, #14]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2200      	movs	r2, #0
 800730e:	f240 3102 	movw	r1, #770	; 0x302
 8007312:	4618      	mov	r0, r3
 8007314:	f000 ffce 	bl	80082b4 <CODEC_IO_Write>
 8007318:	4603      	mov	r3, r0
 800731a:	461a      	mov	r2, r3
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	4413      	add	r3, r2
 8007320:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8007322:	89fb      	ldrh	r3, [r7, #14]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	220a      	movs	r2, #10
 8007328:	f44f 7102 	mov.w	r1, #520	; 0x208
 800732c:	4618      	mov	r0, r3
 800732e:	f000 ffc1 	bl	80082b4 <CODEC_IO_Write>
 8007332:	4603      	mov	r3, r0
 8007334:	461a      	mov	r2, r3
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4413      	add	r3, r2
 800733a:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 800733c:	89fb      	ldrh	r3, [r7, #14]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2201      	movs	r2, #1
 8007342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007346:	4618      	mov	r0, r3
 8007348:	f000 ffb4 	bl	80082b4 <CODEC_IO_Write>
 800734c:	4603      	mov	r3, r0
 800734e:	461a      	mov	r2, r3
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	4413      	add	r3, r2
 8007354:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8007356:	8b3b      	ldrh	r3, [r7, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 817b 	beq.w	8007654 <wm8994_Init+0xc48>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800735e:	8b3b      	ldrh	r3, [r7, #24]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d157      	bne.n	8007414 <wm8994_Init+0xa08>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8007364:	89fb      	ldrh	r3, [r7, #14]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800736c:	212d      	movs	r1, #45	; 0x2d
 800736e:	4618      	mov	r0, r3
 8007370:	f000 ffa0 	bl	80082b4 <CODEC_IO_Write>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	4413      	add	r3, r2
 800737c:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800737e:	89fb      	ldrh	r3, [r7, #14]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007386:	212e      	movs	r1, #46	; 0x2e
 8007388:	4618      	mov	r0, r3
 800738a:	f000 ff93 	bl	80082b4 <CODEC_IO_Write>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	4413      	add	r3, r2
 8007396:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8007398:	4b0e      	ldr	r3, [pc, #56]	; (80073d4 <wm8994_Init+0x9c8>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01b      	beq.n	80073d8 <wm8994_Init+0x9cc>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80073a0:	89fb      	ldrh	r3, [r7, #14]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80073a8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 ff81 	bl	80082b4 <CODEC_IO_Write>
 80073b2:	4603      	mov	r3, r0
 80073b4:	461a      	mov	r2, r3
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4413      	add	r3, r2
 80073ba:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <wm8994_Init+0x9c8>)
 80073be:	2200      	movs	r2, #0
 80073c0:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80073c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80073c6:	f7fc fc13 	bl	8003bf0 <AUDIO_IO_Delay>
 80073ca:	e016      	b.n	80073fa <wm8994_Init+0x9ee>
 80073cc:	200009f8 	.word	0x200009f8
 80073d0:	00017700 	.word	0x00017700
 80073d4:	2000033c 	.word	0x2000033c
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80073d8:	89fb      	ldrh	r3, [r7, #14]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	f248 1208 	movw	r2, #33032	; 0x8108
 80073e0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 ff65 	bl	80082b4 <CODEC_IO_Write>
 80073ea:	4603      	mov	r3, r0
 80073ec:	461a      	mov	r2, r3
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	4413      	add	r3, r2
 80073f2:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80073f4:	2032      	movs	r0, #50	; 0x32
 80073f6:	f7fc fbfb 	bl	8003bf0 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80073fa:	89fb      	ldrh	r3, [r7, #14]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2200      	movs	r2, #0
 8007400:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8007404:	4618      	mov	r0, r3
 8007406:	f000 ff55 	bl	80082b4 <CODEC_IO_Write>
 800740a:	4603      	mov	r3, r0
 800740c:	461a      	mov	r2, r3
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	4413      	add	r3, r2
 8007412:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8007414:	89fb      	ldrh	r3, [r7, #14]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f44f 7240 	mov.w	r2, #768	; 0x300
 800741c:	2103      	movs	r1, #3
 800741e:	4618      	mov	r0, r3
 8007420:	f000 ff48 	bl	80082b4 <CODEC_IO_Write>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	4413      	add	r3, r2
 800742c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800742e:	89fb      	ldrh	r3, [r7, #14]
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2200      	movs	r2, #0
 8007434:	2122      	movs	r1, #34	; 0x22
 8007436:	4618      	mov	r0, r3
 8007438:	f000 ff3c 	bl	80082b4 <CODEC_IO_Write>
 800743c:	4603      	mov	r3, r0
 800743e:	461a      	mov	r2, r3
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8007446:	89fb      	ldrh	r3, [r7, #14]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2200      	movs	r2, #0
 800744c:	2123      	movs	r1, #35	; 0x23
 800744e:	4618      	mov	r0, r3
 8007450:	f000 ff30 	bl	80082b4 <CODEC_IO_Write>
 8007454:	4603      	mov	r3, r0
 8007456:	461a      	mov	r2, r3
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	4413      	add	r3, r2
 800745c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800745e:	89fb      	ldrh	r3, [r7, #14]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007466:	2136      	movs	r1, #54	; 0x36
 8007468:	4618      	mov	r0, r3
 800746a:	f000 ff23 	bl	80082b4 <CODEC_IO_Write>
 800746e:	4603      	mov	r3, r0
 8007470:	461a      	mov	r2, r3
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8007478:	89fb      	ldrh	r3, [r7, #14]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f243 0203 	movw	r2, #12291	; 0x3003
 8007480:	2101      	movs	r1, #1
 8007482:	4618      	mov	r0, r3
 8007484:	f000 ff16 	bl	80082b4 <CODEC_IO_Write>
 8007488:	4603      	mov	r3, r0
 800748a:	461a      	mov	r2, r3
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	4413      	add	r3, r2
 8007490:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8007492:	8afb      	ldrh	r3, [r7, #22]
 8007494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007498:	d10d      	bne.n	80074b6 <wm8994_Init+0xaaa>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800749a:	89fb      	ldrh	r3, [r7, #14]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	f240 2205 	movw	r2, #517	; 0x205
 80074a2:	2151      	movs	r1, #81	; 0x51
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 ff05 	bl	80082b4 <CODEC_IO_Write>
 80074aa:	4603      	mov	r3, r0
 80074ac:	461a      	mov	r2, r3
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	61fb      	str	r3, [r7, #28]
 80074b4:	e00b      	b.n	80074ce <wm8994_Init+0xac2>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80074b6:	89fb      	ldrh	r3, [r7, #14]
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2205      	movs	r2, #5
 80074bc:	2151      	movs	r1, #81	; 0x51
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fef8 	bl	80082b4 <CODEC_IO_Write>
 80074c4:	4603      	mov	r3, r0
 80074c6:	461a      	mov	r2, r3
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80074ce:	8b7b      	ldrh	r3, [r7, #26]
 80074d0:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80074d4:	f043 0303 	orr.w	r3, r3, #3
 80074d8:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80074da:	89fb      	ldrh	r3, [r7, #14]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	8b7a      	ldrh	r2, [r7, #26]
 80074e0:	2101      	movs	r1, #1
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fee6 	bl	80082b4 <CODEC_IO_Write>
 80074e8:	4603      	mov	r3, r0
 80074ea:	461a      	mov	r2, r3
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80074f2:	89fb      	ldrh	r3, [r7, #14]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2222      	movs	r2, #34	; 0x22
 80074f8:	2160      	movs	r1, #96	; 0x60
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 feda 	bl	80082b4 <CODEC_IO_Write>
 8007500:	4603      	mov	r3, r0
 8007502:	461a      	mov	r2, r3
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	4413      	add	r3, r2
 8007508:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800750a:	89fb      	ldrh	r3, [r7, #14]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f649 7225 	movw	r2, #40741	; 0x9f25
 8007512:	214c      	movs	r1, #76	; 0x4c
 8007514:	4618      	mov	r0, r3
 8007516:	f000 fecd 	bl	80082b4 <CODEC_IO_Write>
 800751a:	4603      	mov	r3, r0
 800751c:	461a      	mov	r2, r3
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8007524:	200f      	movs	r0, #15
 8007526:	f7fc fb63 	bl	8003bf0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800752a:	89fb      	ldrh	r3, [r7, #14]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2201      	movs	r2, #1
 8007530:	212d      	movs	r1, #45	; 0x2d
 8007532:	4618      	mov	r0, r3
 8007534:	f000 febe 	bl	80082b4 <CODEC_IO_Write>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	4413      	add	r3, r2
 8007540:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8007542:	89fb      	ldrh	r3, [r7, #14]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2201      	movs	r2, #1
 8007548:	212e      	movs	r1, #46	; 0x2e
 800754a:	4618      	mov	r0, r3
 800754c:	f000 feb2 	bl	80082b4 <CODEC_IO_Write>
 8007550:	4603      	mov	r3, r0
 8007552:	461a      	mov	r2, r3
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800755a:	89fb      	ldrh	r3, [r7, #14]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	f44f 724c 	mov.w	r2, #816	; 0x330
 8007562:	2103      	movs	r1, #3
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fea5 	bl	80082b4 <CODEC_IO_Write>
 800756a:	4603      	mov	r3, r0
 800756c:	461a      	mov	r2, r3
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8007574:	89fb      	ldrh	r3, [r7, #14]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2233      	movs	r2, #51	; 0x33
 800757a:	2154      	movs	r1, #84	; 0x54
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fe99 	bl	80082b4 <CODEC_IO_Write>
 8007582:	4603      	mov	r3, r0
 8007584:	461a      	mov	r2, r3
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	4413      	add	r3, r2
 800758a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 800758c:	f240 1001 	movw	r0, #257	; 0x101
 8007590:	f7fc fb2e 	bl	8003bf0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8007594:	89fb      	ldrh	r3, [r7, #14]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	22ee      	movs	r2, #238	; 0xee
 800759a:	2160      	movs	r1, #96	; 0x60
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fe89 	bl	80082b4 <CODEC_IO_Write>
 80075a2:	4603      	mov	r3, r0
 80075a4:	461a      	mov	r2, r3
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80075ac:	89fb      	ldrh	r3, [r7, #14]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	22c0      	movs	r2, #192	; 0xc0
 80075b2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fe7c 	bl	80082b4 <CODEC_IO_Write>
 80075bc:	4603      	mov	r3, r0
 80075be:	461a      	mov	r2, r3
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	4413      	add	r3, r2
 80075c4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80075c6:	89fb      	ldrh	r3, [r7, #14]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	22c0      	movs	r2, #192	; 0xc0
 80075cc:	f240 6111 	movw	r1, #1553	; 0x611
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fe6f 	bl	80082b4 <CODEC_IO_Write>
 80075d6:	4603      	mov	r3, r0
 80075d8:	461a      	mov	r2, r3
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80075e0:	89fb      	ldrh	r3, [r7, #14]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2210      	movs	r2, #16
 80075e6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fe62 	bl	80082b4 <CODEC_IO_Write>
 80075f0:	4603      	mov	r3, r0
 80075f2:	461a      	mov	r2, r3
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80075fa:	89fb      	ldrh	r3, [r7, #14]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	22c0      	movs	r2, #192	; 0xc0
 8007600:	f240 6112 	movw	r1, #1554	; 0x612
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fe55 	bl	80082b4 <CODEC_IO_Write>
 800760a:	4603      	mov	r3, r0
 800760c:	461a      	mov	r2, r3
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4413      	add	r3, r2
 8007612:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8007614:	89fb      	ldrh	r3, [r7, #14]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	22c0      	movs	r2, #192	; 0xc0
 800761a:	f240 6113 	movw	r1, #1555	; 0x613
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fe48 	bl	80082b4 <CODEC_IO_Write>
 8007624:	4603      	mov	r3, r0
 8007626:	461a      	mov	r2, r3
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	4413      	add	r3, r2
 800762c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800762e:	89fb      	ldrh	r3, [r7, #14]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2210      	movs	r2, #16
 8007634:	f240 4122 	movw	r1, #1058	; 0x422
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fe3b 	bl	80082b4 <CODEC_IO_Write>
 800763e:	4603      	mov	r3, r0
 8007640:	461a      	mov	r2, r3
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8007648:	7afa      	ldrb	r2, [r7, #11]
 800764a:	89fb      	ldrh	r3, [r7, #14]
 800764c:	4611      	mov	r1, r2
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f984 	bl	800795c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8007654:	8afb      	ldrh	r3, [r7, #22]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80a6 	beq.w	80077a8 <wm8994_Init+0xd9c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 800765c:	8afb      	ldrh	r3, [r7, #22]
 800765e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007662:	d003      	beq.n	800766c <wm8994_Init+0xc60>
 8007664:	8afb      	ldrh	r3, [r7, #22]
 8007666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800766a:	d12b      	bne.n	80076c4 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800766c:	8b7b      	ldrh	r3, [r7, #26]
 800766e:	f043 0313 	orr.w	r3, r3, #19
 8007672:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8007674:	89fb      	ldrh	r3, [r7, #14]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	8b7a      	ldrh	r2, [r7, #26]
 800767a:	2101      	movs	r1, #1
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fe19 	bl	80082b4 <CODEC_IO_Write>
 8007682:	4603      	mov	r3, r0
 8007684:	461a      	mov	r2, r3
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800768c:	89fb      	ldrh	r3, [r7, #14]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2202      	movs	r2, #2
 8007692:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fe0c 	bl	80082b4 <CODEC_IO_Write>
 800769c:	4603      	mov	r3, r0
 800769e:	461a      	mov	r2, r3
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80076a6:	89fb      	ldrh	r3, [r7, #14]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80076ae:	f240 4111 	movw	r1, #1041	; 0x411
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fdfe 	bl	80082b4 <CODEC_IO_Write>
 80076b8:	4603      	mov	r3, r0
 80076ba:	461a      	mov	r2, r3
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	4413      	add	r3, r2
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	e06b      	b.n	800779c <wm8994_Init+0xd90>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80076c4:	8afb      	ldrh	r3, [r7, #22]
 80076c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ca:	d139      	bne.n	8007740 <wm8994_Init+0xd34>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80076cc:	8b7b      	ldrh	r3, [r7, #26]
 80076ce:	f043 0313 	orr.w	r3, r3, #19
 80076d2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80076d4:	89fb      	ldrh	r3, [r7, #14]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	8b7a      	ldrh	r2, [r7, #26]
 80076da:	2101      	movs	r1, #1
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fde9 	bl	80082b4 <CODEC_IO_Write>
 80076e2:	4603      	mov	r3, r0
 80076e4:	461a      	mov	r2, r3
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80076ec:	89fb      	ldrh	r3, [r7, #14]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2202      	movs	r2, #2
 80076f2:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fddc 	bl	80082b4 <CODEC_IO_Write>
 80076fc:	4603      	mov	r3, r0
 80076fe:	461a      	mov	r2, r3
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	4413      	add	r3, r2
 8007704:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8007706:	89fb      	ldrh	r3, [r7, #14]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800770e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fdce 	bl	80082b4 <CODEC_IO_Write>
 8007718:	4603      	mov	r3, r0
 800771a:	461a      	mov	r2, r3
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	4413      	add	r3, r2
 8007720:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8007722:	89fb      	ldrh	r3, [r7, #14]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800772a:	f240 4111 	movw	r1, #1041	; 0x411
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fdc0 	bl	80082b4 <CODEC_IO_Write>
 8007734:	4603      	mov	r3, r0
 8007736:	461a      	mov	r2, r3
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	4413      	add	r3, r2
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	e02d      	b.n	800779c <wm8994_Init+0xd90>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8007740:	8afb      	ldrh	r3, [r7, #22]
 8007742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007746:	d003      	beq.n	8007750 <wm8994_Init+0xd44>
 8007748:	8afb      	ldrh	r3, [r7, #22]
 800774a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774e:	d125      	bne.n	800779c <wm8994_Init+0xd90>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x008B);
 8007750:	89fb      	ldrh	r3, [r7, #14]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	228b      	movs	r2, #139	; 0x8b
 8007756:	2118      	movs	r1, #24
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fdab 	bl	80082b4 <CODEC_IO_Write>
 800775e:	4603      	mov	r3, r0
 8007760:	461a      	mov	r2, r3
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	4413      	add	r3, r2
 8007766:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x008B);
 8007768:	89fb      	ldrh	r3, [r7, #14]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	228b      	movs	r2, #139	; 0x8b
 800776e:	211a      	movs	r1, #26
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fd9f 	bl	80082b4 <CODEC_IO_Write>
 8007776:	4603      	mov	r3, r0
 8007778:	461a      	mov	r2, r3
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4413      	add	r3, r2
 800777e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8007780:	89fb      	ldrh	r3, [r7, #14]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8007788:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fd91 	bl	80082b4 <CODEC_IO_Write>
 8007792:	4603      	mov	r3, r0
 8007794:	461a      	mov	r2, r3
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	4413      	add	r3, r2
 800779a:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 800779c:	7afa      	ldrb	r2, [r7, #11]
 800779e:	89fb      	ldrh	r3, [r7, #14]
 80077a0:	4611      	mov	r1, r2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 f8da 	bl	800795c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80077a8:	69fb      	ldr	r3, [r7, #28]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3720      	adds	r7, #32
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop

080077b4 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80077b8:	f7fc f9bc 	bl	8003b34 <AUDIO_IO_DeInit>
}
 80077bc:	bf00      	nop
 80077be:	bd80      	pop	{r7, pc}

080077c0 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80077ca:	f7fc f9a9 	bl	8003b20 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2100      	movs	r1, #0
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fc f9df 	bl	8003b98 <AUDIO_IO_Read>
 80077da:	4603      	mov	r3, r0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	6039      	str	r1, [r7, #0]
 80077ee:	80fb      	strh	r3, [r7, #6]
 80077f0:	4613      	mov	r3, r2
 80077f2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80077f8:	88fb      	ldrh	r3, [r7, #6]
 80077fa:	2100      	movs	r1, #0
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 faf3 	bl	8007de8 <wm8994_SetMute>
 8007802:	4602      	mov	r2, r0
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800780a:	68fb      	ldr	r3, [r7, #12]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	2101      	movs	r1, #1
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fade 	bl	8007de8 <wm8994_SetMute>
 800782c:	4602      	mov	r2, r0
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4413      	add	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8007834:	88fb      	ldrh	r3, [r7, #6]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2201      	movs	r2, #1
 800783a:	2102      	movs	r1, #2
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fd39 	bl	80082b4 <CODEC_IO_Write>
 8007842:	4603      	mov	r3, r0
 8007844:	461a      	mov	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800784c:	68fb      	ldr	r3, [r7, #12]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	4603      	mov	r3, r0
 800785e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	2100      	movs	r1, #0
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fabd 	bl	8007de8 <wm8994_SetMute>
 800786e:	4602      	mov	r2, r0
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8007876:	68fb      	ldr	r3, [r7, #12]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	6039      	str	r1, [r7, #0]
 800788a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8007890:	4b31      	ldr	r3, [pc, #196]	; (8007958 <wm8994_Stop+0xd8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d05a      	beq.n	800794e <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	2101      	movs	r1, #1
 800789c:	4618      	mov	r0, r3
 800789e:	f000 faa3 	bl	8007de8 <wm8994_SetMute>
 80078a2:	4602      	mov	r2, r0
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d04e      	beq.n	800794e <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078b8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fcf9 	bl	80082b4 <CODEC_IO_Write>
 80078c2:	4603      	mov	r3, r0
 80078c4:	461a      	mov	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80078cc:	88fb      	ldrh	r3, [r7, #6]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078d4:	f240 4122 	movw	r1, #1058	; 0x422
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fceb 	bl	80082b4 <CODEC_IO_Write>
 80078de:	4603      	mov	r3, r0
 80078e0:	461a      	mov	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2200      	movs	r2, #0
 80078ee:	212d      	movs	r1, #45	; 0x2d
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fcdf 	bl	80082b4 <CODEC_IO_Write>
 80078f6:	4603      	mov	r3, r0
 80078f8:	461a      	mov	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4413      	add	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2200      	movs	r2, #0
 8007906:	212e      	movs	r1, #46	; 0x2e
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fcd3 	bl	80082b4 <CODEC_IO_Write>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	4413      	add	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2200      	movs	r2, #0
 800791e:	2105      	movs	r1, #5
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fcc7 	bl	80082b4 <CODEC_IO_Write>
 8007926:	4603      	mov	r3, r0
 8007928:	461a      	mov	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8007930:	88fb      	ldrh	r3, [r7, #6]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2200      	movs	r2, #0
 8007936:	2100      	movs	r1, #0
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fcbb 	bl	80082b4 <CODEC_IO_Write>
 800793e:	4603      	mov	r3, r0
 8007940:	461a      	mov	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8007948:	4b03      	ldr	r3, [pc, #12]	; (8007958 <wm8994_Stop+0xd8>)
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800794e:	68fb      	ldr	r3, [r7, #12]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	200009f4 	.word	0x200009f4

0800795c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	460a      	mov	r2, r1
 8007966:	80fb      	strh	r3, [r7, #6]
 8007968:	4613      	mov	r3, r2
 800796a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8007970:	797b      	ldrb	r3, [r7, #5]
 8007972:	2b64      	cmp	r3, #100	; 0x64
 8007974:	d80b      	bhi.n	800798e <wm8994_SetVolume+0x32>
 8007976:	797a      	ldrb	r2, [r7, #5]
 8007978:	4613      	mov	r3, r2
 800797a:	019b      	lsls	r3, r3, #6
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	4a86      	ldr	r2, [pc, #536]	; (8007b98 <wm8994_SetVolume+0x23c>)
 8007980:	fb82 1203 	smull	r1, r2, r2, r3
 8007984:	1152      	asrs	r2, r2, #5
 8007986:	17db      	asrs	r3, r3, #31
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	b2db      	uxtb	r3, r3
 800798c:	e000      	b.n	8007990 <wm8994_SetVolume+0x34>
 800798e:	2364      	movs	r3, #100	; 0x64
 8007990:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8007992:	4b82      	ldr	r3, [pc, #520]	; (8007b9c <wm8994_SetVolume+0x240>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 809b 	beq.w	8007ad2 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	2b3e      	cmp	r3, #62	; 0x3e
 80079a0:	d93d      	bls.n	8007a1e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80079a2:	88fb      	ldrh	r3, [r7, #6]
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fa1e 	bl	8007de8 <wm8994_SetMute>
 80079ac:	4602      	mov	r2, r0
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80079b4:	88fb      	ldrh	r3, [r7, #6]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f240 127f 	movw	r2, #383	; 0x17f
 80079bc:	211c      	movs	r1, #28
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fc78 	bl	80082b4 <CODEC_IO_Write>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80079ce:	88fb      	ldrh	r3, [r7, #6]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f240 127f 	movw	r2, #383	; 0x17f
 80079d6:	211d      	movs	r1, #29
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fc6b 	bl	80082b4 <CODEC_IO_Write>
 80079de:	4603      	mov	r3, r0
 80079e0:	461a      	mov	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80079e8:	88fb      	ldrh	r3, [r7, #6]
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	f240 127f 	movw	r2, #383	; 0x17f
 80079f0:	2126      	movs	r1, #38	; 0x26
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fc5e 	bl	80082b4 <CODEC_IO_Write>
 80079f8:	4603      	mov	r3, r0
 80079fa:	461a      	mov	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8007a02:	88fb      	ldrh	r3, [r7, #6]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	f240 127f 	movw	r2, #383	; 0x17f
 8007a0a:	2127      	movs	r1, #39	; 0x27
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fc51 	bl	80082b4 <CODEC_IO_Write>
 8007a12:	4603      	mov	r3, r0
 8007a14:	461a      	mov	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4413      	add	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e059      	b.n	8007ad2 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8007a1e:	797b      	ldrb	r3, [r7, #5]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d109      	bne.n	8007a38 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	2101      	movs	r1, #1
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 f9dd 	bl	8007de8 <wm8994_SetMute>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4413      	add	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	e04c      	b.n	8007ad2 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007a38:	88fb      	ldrh	r3, [r7, #6]
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f9d3 	bl	8007de8 <wm8994_SetMute>
 8007a42:	4602      	mov	r2, r0
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4413      	add	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	b2d8      	uxtb	r0, r3
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	b21b      	sxth	r3, r3
 8007a52:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	211c      	movs	r1, #28
 8007a5e:	f000 fc29 	bl	80082b4 <CODEC_IO_Write>
 8007a62:	4603      	mov	r3, r0
 8007a64:	461a      	mov	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4413      	add	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8007a6c:	88fb      	ldrh	r3, [r7, #6]
 8007a6e:	b2d8      	uxtb	r0, r3
 8007a70:	7afb      	ldrb	r3, [r7, #11]
 8007a72:	b21b      	sxth	r3, r3
 8007a74:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8007a78:	b21b      	sxth	r3, r3
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	211d      	movs	r1, #29
 8007a80:	f000 fc18 	bl	80082b4 <CODEC_IO_Write>
 8007a84:	4603      	mov	r3, r0
 8007a86:	461a      	mov	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8007a8e:	88fb      	ldrh	r3, [r7, #6]
 8007a90:	b2d8      	uxtb	r0, r3
 8007a92:	7afb      	ldrb	r3, [r7, #11]
 8007a94:	b21b      	sxth	r3, r3
 8007a96:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8007a9a:	b21b      	sxth	r3, r3
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	2126      	movs	r1, #38	; 0x26
 8007aa2:	f000 fc07 	bl	80082b4 <CODEC_IO_Write>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	4413      	add	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	b2d8      	uxtb	r0, r3
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	b21b      	sxth	r3, r3
 8007ab8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8007abc:	b21b      	sxth	r3, r3
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2127      	movs	r1, #39	; 0x27
 8007ac4:	f000 fbf6 	bl	80082b4 <CODEC_IO_Write>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	461a      	mov	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8007ad2:	4b33      	ldr	r3, [pc, #204]	; (8007ba0 <wm8994_SetVolume+0x244>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d059      	beq.n	8007b8e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8007ada:	797b      	ldrb	r3, [r7, #5]
 8007adc:	2b63      	cmp	r3, #99	; 0x63
 8007ade:	d80c      	bhi.n	8007afa <wm8994_SetVolume+0x19e>
 8007ae0:	797a      	ldrb	r2, [r7, #5]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	4a2b      	ldr	r2, [pc, #172]	; (8007b98 <wm8994_SetVolume+0x23c>)
 8007aec:	fb82 1203 	smull	r1, r2, r2, r3
 8007af0:	1152      	asrs	r2, r2, #5
 8007af2:	17db      	asrs	r3, r3, #31
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	e000      	b.n	8007afc <wm8994_SetVolume+0x1a0>
 8007afa:	23ef      	movs	r3, #239	; 0xef
 8007afc:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	b2d8      	uxtb	r0, r3
 8007b02:	7afb      	ldrb	r3, [r7, #11]
 8007b04:	b21b      	sxth	r3, r3
 8007b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0a:	b21b      	sxth	r3, r3
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b14:	f000 fbce 	bl	80082b4 <CODEC_IO_Write>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8007b22:	88fb      	ldrh	r3, [r7, #6]
 8007b24:	b2d8      	uxtb	r0, r3
 8007b26:	7afb      	ldrb	r3, [r7, #11]
 8007b28:	b21b      	sxth	r3, r3
 8007b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b2e:	b21b      	sxth	r3, r3
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	461a      	mov	r2, r3
 8007b34:	f240 4101 	movw	r1, #1025	; 0x401
 8007b38:	f000 fbbc 	bl	80082b4 <CODEC_IO_Write>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8007b46:	88fb      	ldrh	r3, [r7, #6]
 8007b48:	b2d8      	uxtb	r0, r3
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	b21b      	sxth	r3, r3
 8007b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b52:	b21b      	sxth	r3, r3
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	f240 4104 	movw	r1, #1028	; 0x404
 8007b5c:	f000 fbaa 	bl	80082b4 <CODEC_IO_Write>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8007b6a:	88fb      	ldrh	r3, [r7, #6]
 8007b6c:	b2d8      	uxtb	r0, r3
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	b21b      	sxth	r3, r3
 8007b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b76:	b21b      	sxth	r3, r3
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f240 4105 	movw	r1, #1029	; 0x405
 8007b80:	f000 fb98 	bl	80082b4 <CODEC_IO_Write>
 8007b84:	4603      	mov	r3, r0
 8007b86:	461a      	mov	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	51eb851f 	.word	0x51eb851f
 8007b9c:	200009f4 	.word	0x200009f4
 8007ba0:	200009f8 	.word	0x200009f8

08007ba4 <wm8994_SetVolumeOut>:
uint32_t wm8994_SetVolumeOut(uint16_t DeviceAddr, uint8_t Volume) {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	460a      	mov	r2, r1
 8007bae:	80fb      	strh	r3, [r7, #6]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8007bb8:	797b      	ldrb	r3, [r7, #5]
 8007bba:	2b64      	cmp	r3, #100	; 0x64
 8007bbc:	d80b      	bhi.n	8007bd6 <wm8994_SetVolumeOut+0x32>
 8007bbe:	797a      	ldrb	r2, [r7, #5]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	019b      	lsls	r3, r3, #6
 8007bc4:	1a9b      	subs	r3, r3, r2
 8007bc6:	4a57      	ldr	r2, [pc, #348]	; (8007d24 <wm8994_SetVolumeOut+0x180>)
 8007bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8007bcc:	1152      	asrs	r2, r2, #5
 8007bce:	17db      	asrs	r3, r3, #31
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	e000      	b.n	8007bd8 <wm8994_SetVolumeOut+0x34>
 8007bd6:	2364      	movs	r3, #100	; 0x64
 8007bd8:	72fb      	strb	r3, [r7, #11]

	/* Output volume */
	if (outputEnabled != 0) {
 8007bda:	4b53      	ldr	r3, [pc, #332]	; (8007d28 <wm8994_SetVolumeOut+0x184>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 809b 	beq.w	8007d1a <wm8994_SetVolumeOut+0x176>
		if (convertedvol > 0x3E) {
 8007be4:	7afb      	ldrb	r3, [r7, #11]
 8007be6:	2b3e      	cmp	r3, #62	; 0x3e
 8007be8:	d93d      	bls.n	8007c66 <wm8994_SetVolumeOut+0xc2>
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f8fa 	bl	8007de8 <wm8994_SetMute>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f240 127f 	movw	r2, #383	; 0x17f
 8007c04:	211c      	movs	r1, #28
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fb54 	bl	80082b4 <CODEC_IO_Write>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	461a      	mov	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8007c16:	88fb      	ldrh	r3, [r7, #6]
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f240 127f 	movw	r2, #383	; 0x17f
 8007c1e:	211d      	movs	r1, #29
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fb47 	bl	80082b4 <CODEC_IO_Write>
 8007c26:	4603      	mov	r3, r0
 8007c28:	461a      	mov	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8007c30:	88fb      	ldrh	r3, [r7, #6]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f240 127f 	movw	r2, #383	; 0x17f
 8007c38:	2126      	movs	r1, #38	; 0x26
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fb3a 	bl	80082b4 <CODEC_IO_Write>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8007c4a:	88fb      	ldrh	r3, [r7, #6]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f240 127f 	movw	r2, #383	; 0x17f
 8007c52:	2127      	movs	r1, #39	; 0x27
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fb2d 	bl	80082b4 <CODEC_IO_Write>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e059      	b.n	8007d1a <wm8994_SetVolumeOut+0x176>
		} else if (Volume == 0) {
 8007c66:	797b      	ldrb	r3, [r7, #5]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d109      	bne.n	8007c80 <wm8994_SetVolumeOut+0xdc>
			/* Mute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	2101      	movs	r1, #1
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 f8b9 	bl	8007de8 <wm8994_SetMute>
 8007c76:	4602      	mov	r2, r0
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	e04c      	b.n	8007d1a <wm8994_SetVolumeOut+0x176>
		} else {
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	2100      	movs	r1, #0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f8af 	bl	8007de8 <wm8994_SetMute>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4413      	add	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8007c92:	88fb      	ldrh	r3, [r7, #6]
 8007c94:	b2d8      	uxtb	r0, r3
 8007c96:	7afb      	ldrb	r3, [r7, #11]
 8007c98:	b21b      	sxth	r3, r3
 8007c9a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8007c9e:	b21b      	sxth	r3, r3
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	211c      	movs	r1, #28
 8007ca6:	f000 fb05 	bl	80082b4 <CODEC_IO_Write>
 8007caa:	4603      	mov	r3, r0
 8007cac:	461a      	mov	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8007cb4:	88fb      	ldrh	r3, [r7, #6]
 8007cb6:	b2d8      	uxtb	r0, r3
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	b21b      	sxth	r3, r3
 8007cbc:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8007cc0:	b21b      	sxth	r3, r3
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	211d      	movs	r1, #29
 8007cc8:	f000 faf4 	bl	80082b4 <CODEC_IO_Write>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	b2d8      	uxtb	r0, r3
 8007cda:	7afb      	ldrb	r3, [r7, #11]
 8007cdc:	b21b      	sxth	r3, r3
 8007cde:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8007ce2:	b21b      	sxth	r3, r3
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	2126      	movs	r1, #38	; 0x26
 8007cea:	f000 fae3 	bl	80082b4 <CODEC_IO_Write>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8007cf8:	88fb      	ldrh	r3, [r7, #6]
 8007cfa:	b2d8      	uxtb	r0, r3
 8007cfc:	7afb      	ldrb	r3, [r7, #11]
 8007cfe:	b21b      	sxth	r3, r3
 8007d00:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8007d04:	b21b      	sxth	r3, r3
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2127      	movs	r1, #39	; 0x27
 8007d0c:	f000 fad2 	bl	80082b4 <CODEC_IO_Write>
 8007d10:	4603      	mov	r3, r0
 8007d12:	461a      	mov	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
		}
	}
	return counter;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	51eb851f 	.word	0x51eb851f
 8007d28:	200009f4 	.word	0x200009f4

08007d2c <wm8994_SetVolumeIn>:
uint32_t wm8994_SetVolumeIn(uint16_t DeviceAddr, uint8_t Volume) {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	460a      	mov	r2, r1
 8007d36:	80fb      	strh	r3, [r7, #6]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60fb      	str	r3, [r7, #12]
	if (inputEnabled != 0) {
 8007d40:	4b28      	ldr	r3, [pc, #160]	; (8007de4 <wm8994_SetVolumeIn+0xb8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d047      	beq.n	8007dd8 <wm8994_SetVolumeIn+0xac>
		// B1 = 0dB
		/* Left AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x400, Volume | 0x100);
 8007d48:	88fb      	ldrh	r3, [r7, #6]
 8007d4a:	b2d8      	uxtb	r0, r3
 8007d4c:	797b      	ldrb	r3, [r7, #5]
 8007d4e:	b21b      	sxth	r3, r3
 8007d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d54:	b21b      	sxth	r3, r3
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d5e:	f000 faa9 	bl	80082b4 <CODEC_IO_Write>
 8007d62:	4603      	mov	r3, r0
 8007d64:	461a      	mov	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	4413      	add	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x401, Volume | 0x100);
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	b2d8      	uxtb	r0, r3
 8007d70:	797b      	ldrb	r3, [r7, #5]
 8007d72:	b21b      	sxth	r3, r3
 8007d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d78:	b21b      	sxth	r3, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	f240 4101 	movw	r1, #1025	; 0x401
 8007d82:	f000 fa97 	bl	80082b4 <CODEC_IO_Write>
 8007d86:	4603      	mov	r3, r0
 8007d88:	461a      	mov	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]

		/* Left AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x404, Volume | 0x100);
 8007d90:	88fb      	ldrh	r3, [r7, #6]
 8007d92:	b2d8      	uxtb	r0, r3
 8007d94:	797b      	ldrb	r3, [r7, #5]
 8007d96:	b21b      	sxth	r3, r3
 8007d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d9c:	b21b      	sxth	r3, r3
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	f240 4104 	movw	r1, #1028	; 0x404
 8007da6:	f000 fa85 	bl	80082b4 <CODEC_IO_Write>
 8007daa:	4603      	mov	r3, r0
 8007dac:	461a      	mov	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x405, Volume | 0x100);
 8007db4:	88fb      	ldrh	r3, [r7, #6]
 8007db6:	b2d8      	uxtb	r0, r3
 8007db8:	797b      	ldrb	r3, [r7, #5]
 8007dba:	b21b      	sxth	r3, r3
 8007dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dc0:	b21b      	sxth	r3, r3
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f240 4105 	movw	r1, #1029	; 0x405
 8007dca:	f000 fa73 	bl	80082b4 <CODEC_IO_Write>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	200009f8 	.word	0x200009f8

08007de8 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	6039      	str	r1, [r7, #0]
 8007df2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8007df8:	4b21      	ldr	r3, [pc, #132]	; (8007e80 <wm8994_SetMute+0x98>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d039      	beq.n	8007e74 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d11c      	bne.n	8007e40 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e0e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fa4e 	bl	80082b4 <CODEC_IO_Write>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e2a:	f240 4122 	movw	r1, #1058	; 0x422
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fa40 	bl	80082b4 <CODEC_IO_Write>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	e019      	b.n	8007e74 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2210      	movs	r2, #16
 8007e46:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fa32 	bl	80082b4 <CODEC_IO_Write>
 8007e50:	4603      	mov	r3, r0
 8007e52:	461a      	mov	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2210      	movs	r2, #16
 8007e60:	f240 4122 	movw	r1, #1058	; 0x422
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fa25 	bl	80082b4 <CODEC_IO_Write>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8007e74:	68fb      	ldr	r3, [r7, #12]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	200009f4 	.word	0x200009f4

08007e84 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	460a      	mov	r2, r1
 8007e8e:	80fb      	strh	r3, [r7, #6]
 8007e90:	4613      	mov	r3, r2
 8007e92:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8007e94:	2300      	movs	r3, #0
 8007e96:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8007e98:	797b      	ldrb	r3, [r7, #5]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	f000 808c 	beq.w	8007fb8 <wm8994_SetOutputMode+0x134>
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	f300 80cb 	bgt.w	800803c <wm8994_SetOutputMode+0x1b8>
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d002      	beq.n	8007eb0 <wm8994_SetOutputMode+0x2c>
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d042      	beq.n	8007f34 <wm8994_SetOutputMode+0xb0>
 8007eae:	e0c5      	b.n	800803c <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f640 420c 	movw	r2, #3084	; 0xc0c
 8007eb8:	2105      	movs	r1, #5
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 f9fa 	bl	80082b4 <CODEC_IO_Write>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f240 6101 	movw	r1, #1537	; 0x601
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 f9ed 	bl	80082b4 <CODEC_IO_Write>
 8007eda:	4603      	mov	r3, r0
 8007edc:	461a      	mov	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8007ee4:	88fb      	ldrh	r3, [r7, #6]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f240 6102 	movw	r1, #1538	; 0x602
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 f9e0 	bl	80082b4 <CODEC_IO_Write>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4413      	add	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8007efe:	88fb      	ldrh	r3, [r7, #6]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2202      	movs	r2, #2
 8007f04:	f240 6104 	movw	r1, #1540	; 0x604
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 f9d3 	bl	80082b4 <CODEC_IO_Write>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	461a      	mov	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8007f18:	88fb      	ldrh	r3, [r7, #6]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	f240 6105 	movw	r1, #1541	; 0x605
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 f9c6 	bl	80082b4 <CODEC_IO_Write>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
    break;
 8007f32:	e0c5      	b.n	80080c0 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f240 3203 	movw	r2, #771	; 0x303
 8007f3c:	2105      	movs	r1, #5
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f9b8 	bl	80082b4 <CODEC_IO_Write>
 8007f44:	4603      	mov	r3, r0
 8007f46:	461a      	mov	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2201      	movs	r2, #1
 8007f54:	f240 6101 	movw	r1, #1537	; 0x601
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 f9ab 	bl	80082b4 <CODEC_IO_Write>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	461a      	mov	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4413      	add	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007f68:	88fb      	ldrh	r3, [r7, #6]
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f240 6102 	movw	r1, #1538	; 0x602
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 f99e 	bl	80082b4 <CODEC_IO_Write>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2200      	movs	r2, #0
 8007f88:	f240 6104 	movw	r1, #1540	; 0x604
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 f991 	bl	80082b4 <CODEC_IO_Write>
 8007f92:	4603      	mov	r3, r0
 8007f94:	461a      	mov	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f240 6105 	movw	r1, #1541	; 0x605
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 f984 	bl	80082b4 <CODEC_IO_Write>
 8007fac:	4603      	mov	r3, r0
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]
    break;
 8007fb6:	e083      	b.n	80080c0 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8007fb8:	88fb      	ldrh	r3, [r7, #6]
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f640 720f 	movw	r2, #3855	; 0xf0f
 8007fc0:	2105      	movs	r1, #5
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f976 	bl	80082b4 <CODEC_IO_Write>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	461a      	mov	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007fd2:	88fb      	ldrh	r3, [r7, #6]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f240 6101 	movw	r1, #1537	; 0x601
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 f969 	bl	80082b4 <CODEC_IO_Write>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4413      	add	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f240 6102 	movw	r1, #1538	; 0x602
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 f95c 	bl	80082b4 <CODEC_IO_Write>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	461a      	mov	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4413      	add	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2202      	movs	r2, #2
 800800c:	f240 6104 	movw	r1, #1540	; 0x604
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f94f 	bl	80082b4 <CODEC_IO_Write>
 8008016:	4603      	mov	r3, r0
 8008018:	461a      	mov	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4413      	add	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8008020:	88fb      	ldrh	r3, [r7, #6]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2202      	movs	r2, #2
 8008026:	f240 6105 	movw	r1, #1541	; 0x605
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f942 	bl	80082b4 <CODEC_IO_Write>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]
    break;
 800803a:	e041      	b.n	80080c0 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	f240 3203 	movw	r2, #771	; 0x303
 8008044:	2105      	movs	r1, #5
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f934 	bl	80082b4 <CODEC_IO_Write>
 800804c:	4603      	mov	r3, r0
 800804e:	461a      	mov	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4413      	add	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2201      	movs	r2, #1
 800805c:	f240 6101 	movw	r1, #1537	; 0x601
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f927 	bl	80082b4 <CODEC_IO_Write>
 8008066:	4603      	mov	r3, r0
 8008068:	461a      	mov	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4413      	add	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8008070:	88fb      	ldrh	r3, [r7, #6]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2201      	movs	r2, #1
 8008076:	f240 6102 	movw	r1, #1538	; 0x602
 800807a:	4618      	mov	r0, r3
 800807c:	f000 f91a 	bl	80082b4 <CODEC_IO_Write>
 8008080:	4603      	mov	r3, r0
 8008082:	461a      	mov	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2200      	movs	r2, #0
 8008090:	f240 6104 	movw	r1, #1540	; 0x604
 8008094:	4618      	mov	r0, r3
 8008096:	f000 f90d 	bl	80082b4 <CODEC_IO_Write>
 800809a:	4603      	mov	r3, r0
 800809c:	461a      	mov	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	4413      	add	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80080a4:	88fb      	ldrh	r3, [r7, #6]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2200      	movs	r2, #0
 80080aa:	f240 6105 	movw	r1, #1541	; 0x605
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f900 	bl	80082b4 <CODEC_IO_Write>
 80080b4:	4603      	mov	r3, r0
 80080b6:	461a      	mov	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]
    break;    
 80080be:	bf00      	nop
  }  
  return counter;
 80080c0:	68fb      	ldr	r3, [r7, #12]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	4a64      	ldr	r2, [pc, #400]	; (8008270 <wm8994_SetFrequency+0x1a4>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d079      	beq.n	80081d8 <wm8994_SetFrequency+0x10c>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	4a62      	ldr	r2, [pc, #392]	; (8008270 <wm8994_SetFrequency+0x1a4>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	f200 80ad 	bhi.w	8008248 <wm8994_SetFrequency+0x17c>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d061      	beq.n	80081bc <wm8994_SetFrequency+0xf0>
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80080fe:	4293      	cmp	r3, r2
 8008100:	f200 80a2 	bhi.w	8008248 <wm8994_SetFrequency+0x17c>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	f64a 4244 	movw	r2, #44100	; 0xac44
 800810a:	4293      	cmp	r3, r2
 800810c:	f000 808e 	beq.w	800822c <wm8994_SetFrequency+0x160>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	f64a 4244 	movw	r2, #44100	; 0xac44
 8008116:	4293      	cmp	r3, r2
 8008118:	f200 8096 	bhi.w	8008248 <wm8994_SetFrequency+0x17c>
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8008122:	d03d      	beq.n	80081a0 <wm8994_SetFrequency+0xd4>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800812a:	f200 808d 	bhi.w	8008248 <wm8994_SetFrequency+0x17c>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f245 6222 	movw	r2, #22050	; 0x5622
 8008134:	4293      	cmp	r3, r2
 8008136:	d06b      	beq.n	8008210 <wm8994_SetFrequency+0x144>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	f245 6222 	movw	r2, #22050	; 0x5622
 800813e:	4293      	cmp	r3, r2
 8008140:	f200 8082 	bhi.w	8008248 <wm8994_SetFrequency+0x17c>
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800814a:	d01b      	beq.n	8008184 <wm8994_SetFrequency+0xb8>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008152:	d879      	bhi.n	8008248 <wm8994_SetFrequency+0x17c>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800815a:	d005      	beq.n	8008168 <wm8994_SetFrequency+0x9c>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8008162:	4293      	cmp	r3, r2
 8008164:	d046      	beq.n	80081f4 <wm8994_SetFrequency+0x128>
 8008166:	e06f      	b.n	8008248 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8008168:	88fb      	ldrh	r3, [r7, #6]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2203      	movs	r2, #3
 800816e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8008172:	4618      	mov	r0, r3
 8008174:	f000 f89e 	bl	80082b4 <CODEC_IO_Write>
 8008178:	4603      	mov	r3, r0
 800817a:	461a      	mov	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
    break;
 8008182:	e06f      	b.n	8008264 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8008184:	88fb      	ldrh	r3, [r7, #6]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2233      	movs	r2, #51	; 0x33
 800818a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800818e:	4618      	mov	r0, r3
 8008190:	f000 f890 	bl	80082b4 <CODEC_IO_Write>
 8008194:	4603      	mov	r3, r0
 8008196:	461a      	mov	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]
    break;
 800819e:	e061      	b.n	8008264 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80081a0:	88fb      	ldrh	r3, [r7, #6]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2263      	movs	r2, #99	; 0x63
 80081a6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 f882 	bl	80082b4 <CODEC_IO_Write>
 80081b0:	4603      	mov	r3, r0
 80081b2:	461a      	mov	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
    break;
 80081ba:	e053      	b.n	8008264 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2283      	movs	r2, #131	; 0x83
 80081c2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 f874 	bl	80082b4 <CODEC_IO_Write>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4413      	add	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]
    break;
 80081d6:	e045      	b.n	8008264 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80081d8:	88fb      	ldrh	r3, [r7, #6]
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	22a3      	movs	r2, #163	; 0xa3
 80081de:	f44f 7104 	mov.w	r1, #528	; 0x210
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f866 	bl	80082b4 <CODEC_IO_Write>
 80081e8:	4603      	mov	r3, r0
 80081ea:	461a      	mov	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
    break;
 80081f2:	e037      	b.n	8008264 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80081f4:	88fb      	ldrh	r3, [r7, #6]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2213      	movs	r2, #19
 80081fa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 f858 	bl	80082b4 <CODEC_IO_Write>
 8008204:	4603      	mov	r3, r0
 8008206:	461a      	mov	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]
    break;
 800820e:	e029      	b.n	8008264 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8008210:	88fb      	ldrh	r3, [r7, #6]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2243      	movs	r2, #67	; 0x43
 8008216:	f44f 7104 	mov.w	r1, #528	; 0x210
 800821a:	4618      	mov	r0, r3
 800821c:	f000 f84a 	bl	80082b4 <CODEC_IO_Write>
 8008220:	4603      	mov	r3, r0
 8008222:	461a      	mov	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4413      	add	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
    break;
 800822a:	e01b      	b.n	8008264 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2273      	movs	r2, #115	; 0x73
 8008232:	f44f 7104 	mov.w	r1, #528	; 0x210
 8008236:	4618      	mov	r0, r3
 8008238:	f000 f83c 	bl	80082b4 <CODEC_IO_Write>
 800823c:	4603      	mov	r3, r0
 800823e:	461a      	mov	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
    break; 
 8008246:	e00d      	b.n	8008264 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8008248:	88fb      	ldrh	r3, [r7, #6]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2283      	movs	r2, #131	; 0x83
 800824e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f82e 	bl	80082b4 <CODEC_IO_Write>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
    break; 
 8008262:	bf00      	nop
  }
  return counter;
 8008264:	68fb      	ldr	r3, [r7, #12]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	00017700 	.word	0x00017700

08008274 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8008282:	88fb      	ldrh	r3, [r7, #6]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2200      	movs	r2, #0
 8008288:	2100      	movs	r1, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f812 	bl	80082b4 <CODEC_IO_Write>
 8008290:	4603      	mov	r3, r0
 8008292:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <wm8994_Reset+0x38>)
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800829a:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <wm8994_Reset+0x3c>)
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]

  return counter;
 80082a0:	68fb      	ldr	r3, [r7, #12]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	200009f4 	.word	0x200009f4
 80082b0:	200009f8 	.word	0x200009f8

080082b4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	4603      	mov	r3, r0
 80082bc:	71fb      	strb	r3, [r7, #7]
 80082be:	460b      	mov	r3, r1
 80082c0:	80bb      	strh	r3, [r7, #4]
 80082c2:	4613      	mov	r3, r2
 80082c4:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80082ca:	887a      	ldrh	r2, [r7, #2]
 80082cc:	88b9      	ldrh	r1, [r7, #4]
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fb fc37 	bl	8003b44 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	b2db      	uxtb	r3, r3
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80082e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800831c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80082e8:	480d      	ldr	r0, [pc, #52]	; (8008320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80082ea:	490e      	ldr	r1, [pc, #56]	; (8008324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80082ec:	4a0e      	ldr	r2, [pc, #56]	; (8008328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80082ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80082f0:	e002      	b.n	80082f8 <LoopCopyDataInit>

080082f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80082f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80082f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80082f6:	3304      	adds	r3, #4

080082f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80082f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80082fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80082fc:	d3f9      	bcc.n	80082f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80082fe:	4a0b      	ldr	r2, [pc, #44]	; (800832c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008300:	4c0b      	ldr	r4, [pc, #44]	; (8008330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008304:	e001      	b.n	800830a <LoopFillZerobss>

08008306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008308:	3204      	adds	r2, #4

0800830a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800830a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800830c:	d3fb      	bcc.n	8008306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800830e:	f7fe fb6b 	bl	80069e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008312:	f00e fccf 	bl	8016cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008316:	f7f8 fc87 	bl	8000c28 <main>
  bx  lr    
 800831a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800831c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8008320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008324:	200003b0 	.word	0x200003b0
  ldr r2, =_sidata
 8008328:	0801a414 	.word	0x0801a414
  ldr r2, =_sbss
 800832c:	200003b0 	.word	0x200003b0
  ldr r4, =_ebss
 8008330:	200101a4 	.word	0x200101a4

08008334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008334:	e7fe      	b.n	8008334 <ADC_IRQHandler>
	...

08008338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800833c:	4b08      	ldr	r3, [pc, #32]	; (8008360 <HAL_Init+0x28>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a07      	ldr	r2, [pc, #28]	; (8008360 <HAL_Init+0x28>)
 8008342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008346:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008348:	2003      	movs	r0, #3
 800834a:	f000 f8fc 	bl	8008546 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800834e:	2000      	movs	r0, #0
 8008350:	f7fe fa60 	bl	8006814 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008354:	f7fd fe1e 	bl	8005f94 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40023c00 	.word	0x40023c00

08008364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008368:	4b06      	ldr	r3, [pc, #24]	; (8008384 <HAL_IncTick+0x20>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	4b06      	ldr	r3, [pc, #24]	; (8008388 <HAL_IncTick+0x24>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4413      	add	r3, r2
 8008374:	4a04      	ldr	r2, [pc, #16]	; (8008388 <HAL_IncTick+0x24>)
 8008376:	6013      	str	r3, [r2, #0]
}
 8008378:	bf00      	nop
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000344 	.word	0x20000344
 8008388:	2000fce0 	.word	0x2000fce0

0800838c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  return uwTick;
 8008390:	4b03      	ldr	r3, [pc, #12]	; (80083a0 <HAL_GetTick+0x14>)
 8008392:	681b      	ldr	r3, [r3, #0]
}
 8008394:	4618      	mov	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	2000fce0 	.word	0x2000fce0

080083a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083ac:	f7ff ffee 	bl	800838c <HAL_GetTick>
 80083b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083bc:	d005      	beq.n	80083ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80083be:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <HAL_Delay+0x44>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4413      	add	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80083ca:	bf00      	nop
 80083cc:	f7ff ffde 	bl	800838c <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d8f7      	bhi.n	80083cc <HAL_Delay+0x28>
  {
  }
}
 80083dc:	bf00      	nop
 80083de:	bf00      	nop
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000344 	.word	0x20000344

080083ec <__NVIC_SetPriorityGrouping>:
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083fc:	4b0b      	ldr	r3, [pc, #44]	; (800842c <__NVIC_SetPriorityGrouping+0x40>)
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008408:	4013      	ands	r3, r2
 800840a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008414:	4b06      	ldr	r3, [pc, #24]	; (8008430 <__NVIC_SetPriorityGrouping+0x44>)
 8008416:	4313      	orrs	r3, r2
 8008418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800841a:	4a04      	ldr	r2, [pc, #16]	; (800842c <__NVIC_SetPriorityGrouping+0x40>)
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	60d3      	str	r3, [r2, #12]
}
 8008420:	bf00      	nop
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	e000ed00 	.word	0xe000ed00
 8008430:	05fa0000 	.word	0x05fa0000

08008434 <__NVIC_GetPriorityGrouping>:
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008438:	4b04      	ldr	r3, [pc, #16]	; (800844c <__NVIC_GetPriorityGrouping+0x18>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	0a1b      	lsrs	r3, r3, #8
 800843e:	f003 0307 	and.w	r3, r3, #7
}
 8008442:	4618      	mov	r0, r3
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	e000ed00 	.word	0xe000ed00

08008450 <__NVIC_EnableIRQ>:
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800845a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800845e:	2b00      	cmp	r3, #0
 8008460:	db0b      	blt.n	800847a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	f003 021f 	and.w	r2, r3, #31
 8008468:	4907      	ldr	r1, [pc, #28]	; (8008488 <__NVIC_EnableIRQ+0x38>)
 800846a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	2001      	movs	r0, #1
 8008472:	fa00 f202 	lsl.w	r2, r0, r2
 8008476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	e000e100 	.word	0xe000e100

0800848c <__NVIC_SetPriority>:
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	6039      	str	r1, [r7, #0]
 8008496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800849c:	2b00      	cmp	r3, #0
 800849e:	db0a      	blt.n	80084b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	490c      	ldr	r1, [pc, #48]	; (80084d8 <__NVIC_SetPriority+0x4c>)
 80084a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084aa:	0112      	lsls	r2, r2, #4
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	440b      	add	r3, r1
 80084b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80084b4:	e00a      	b.n	80084cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	4908      	ldr	r1, [pc, #32]	; (80084dc <__NVIC_SetPriority+0x50>)
 80084bc:	79fb      	ldrb	r3, [r7, #7]
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	3b04      	subs	r3, #4
 80084c4:	0112      	lsls	r2, r2, #4
 80084c6:	b2d2      	uxtb	r2, r2
 80084c8:	440b      	add	r3, r1
 80084ca:	761a      	strb	r2, [r3, #24]
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	e000e100 	.word	0xe000e100
 80084dc:	e000ed00 	.word	0xe000ed00

080084e0 <NVIC_EncodePriority>:
{
 80084e0:	b480      	push	{r7}
 80084e2:	b089      	sub	sp, #36	; 0x24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f1c3 0307 	rsb	r3, r3, #7
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	bf28      	it	cs
 80084fe:	2304      	movcs	r3, #4
 8008500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	3304      	adds	r3, #4
 8008506:	2b06      	cmp	r3, #6
 8008508:	d902      	bls.n	8008510 <NVIC_EncodePriority+0x30>
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	3b03      	subs	r3, #3
 800850e:	e000      	b.n	8008512 <NVIC_EncodePriority+0x32>
 8008510:	2300      	movs	r3, #0
 8008512:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008514:	f04f 32ff 	mov.w	r2, #4294967295
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	fa02 f303 	lsl.w	r3, r2, r3
 800851e:	43da      	mvns	r2, r3
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	401a      	ands	r2, r3
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008528:	f04f 31ff 	mov.w	r1, #4294967295
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	fa01 f303 	lsl.w	r3, r1, r3
 8008532:	43d9      	mvns	r1, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008538:	4313      	orrs	r3, r2
}
 800853a:	4618      	mov	r0, r3
 800853c:	3724      	adds	r7, #36	; 0x24
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff ff4c 	bl	80083ec <__NVIC_SetPriorityGrouping>
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800856a:	2300      	movs	r3, #0
 800856c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800856e:	f7ff ff61 	bl	8008434 <__NVIC_GetPriorityGrouping>
 8008572:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	68b9      	ldr	r1, [r7, #8]
 8008578:	6978      	ldr	r0, [r7, #20]
 800857a:	f7ff ffb1 	bl	80084e0 <NVIC_EncodePriority>
 800857e:	4602      	mov	r2, r0
 8008580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff ff80 	bl	800848c <__NVIC_SetPriority>
}
 800858c:	bf00      	nop
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800859e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff ff54 	bl	8008450 <__NVIC_EnableIRQ>
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80085bc:	f7ff fee6 	bl	800838c <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e099      	b.n	8008700 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0201 	bic.w	r2, r2, #1
 80085ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085ec:	e00f      	b.n	800860e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085ee:	f7ff fecd 	bl	800838c <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b05      	cmp	r3, #5
 80085fa:	d908      	bls.n	800860e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2203      	movs	r2, #3
 8008606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e078      	b.n	8008700 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e8      	bne.n	80085ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4b38      	ldr	r3, [pc, #224]	; (8008708 <HAL_DMA_Init+0x158>)
 8008628:	4013      	ands	r3, r2
 800862a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800863a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a1b      	ldr	r3, [r3, #32]
 8008658:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b04      	cmp	r3, #4
 8008666:	d107      	bne.n	8008678 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008670:	4313      	orrs	r3, r2
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f023 0307 	bic.w	r3, r3, #7
 800868e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d117      	bne.n	80086d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00e      	beq.n	80086d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fb03 	bl	8008cc0 <DMA_CheckFifoParam>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d008      	beq.n	80086d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2240      	movs	r2, #64	; 0x40
 80086c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80086ce:	2301      	movs	r3, #1
 80086d0:	e016      	b.n	8008700 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 faba 	bl	8008c54 <DMA_CalcBaseAndBitshift>
 80086e0:	4603      	mov	r3, r0
 80086e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e8:	223f      	movs	r2, #63	; 0x3f
 80086ea:	409a      	lsls	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	f010803f 	.word	0xf010803f

0800870c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e050      	b.n	80087c0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d101      	bne.n	800872e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800872a:	2302      	movs	r3, #2
 800872c:	e048      	b.n	80087c0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0201 	bic.w	r2, r2, #1
 800873c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2200      	movs	r2, #0
 8008754:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2200      	movs	r2, #0
 8008764:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2221      	movs	r2, #33	; 0x21
 800876c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fa70 	bl	8008c54 <DMA_CalcBaseAndBitshift>
 8008774:	4603      	mov	r3, r0
 8008776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800877c:	223f      	movs	r2, #63	; 0x3f
 800877e:	409a      	lsls	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d101      	bne.n	80087ee <HAL_DMA_Start_IT+0x26>
 80087ea:	2302      	movs	r3, #2
 80087ec:	e048      	b.n	8008880 <HAL_DMA_Start_IT+0xb8>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d137      	bne.n	8008872 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2202      	movs	r2, #2
 8008806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 f9ee 	bl	8008bf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008820:	223f      	movs	r2, #63	; 0x3f
 8008822:	409a      	lsls	r2, r3
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0216 	orr.w	r2, r2, #22
 8008836:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	695a      	ldr	r2, [r3, #20]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008846:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	2b00      	cmp	r3, #0
 800884e:	d007      	beq.n	8008860 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0208 	orr.w	r2, r2, #8
 800885e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0201 	orr.w	r2, r2, #1
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	e005      	b.n	800887e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800887a:	2302      	movs	r3, #2
 800887c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800887e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d004      	beq.n	80088a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2280      	movs	r2, #128	; 0x80
 80088a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e00c      	b.n	80088c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2205      	movs	r2, #5
 80088aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0201 	bic.w	r2, r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80088d8:	4b92      	ldr	r3, [pc, #584]	; (8008b24 <HAL_DMA_IRQHandler+0x258>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a92      	ldr	r2, [pc, #584]	; (8008b28 <HAL_DMA_IRQHandler+0x25c>)
 80088de:	fba2 2303 	umull	r2, r3, r2, r3
 80088e2:	0a9b      	lsrs	r3, r3, #10
 80088e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f6:	2208      	movs	r2, #8
 80088f8:	409a      	lsls	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4013      	ands	r3, r2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01a      	beq.n	8008938 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d013      	beq.n	8008938 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0204 	bic.w	r2, r2, #4
 800891e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008924:	2208      	movs	r2, #8
 8008926:	409a      	lsls	r2, r3
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008930:	f043 0201 	orr.w	r2, r3, #1
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800893c:	2201      	movs	r2, #1
 800893e:	409a      	lsls	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4013      	ands	r3, r2
 8008944:	2b00      	cmp	r3, #0
 8008946:	d012      	beq.n	800896e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00b      	beq.n	800896e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895a:	2201      	movs	r2, #1
 800895c:	409a      	lsls	r2, r3
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008966:	f043 0202 	orr.w	r2, r3, #2
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008972:	2204      	movs	r2, #4
 8008974:	409a      	lsls	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	4013      	ands	r3, r2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d012      	beq.n	80089a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008990:	2204      	movs	r2, #4
 8008992:	409a      	lsls	r2, r3
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899c:	f043 0204 	orr.w	r2, r3, #4
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a8:	2210      	movs	r2, #16
 80089aa:	409a      	lsls	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4013      	ands	r3, r2
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d043      	beq.n	8008a3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0308 	and.w	r3, r3, #8
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d03c      	beq.n	8008a3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c6:	2210      	movs	r2, #16
 80089c8:	409a      	lsls	r2, r3
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d018      	beq.n	8008a0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d108      	bne.n	80089fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d024      	beq.n	8008a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	4798      	blx	r3
 80089fa:	e01f      	b.n	8008a3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d01b      	beq.n	8008a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
 8008a0c:	e016      	b.n	8008a3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d107      	bne.n	8008a2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0208 	bic.w	r2, r2, #8
 8008a2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a40:	2220      	movs	r2, #32
 8008a42:	409a      	lsls	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4013      	ands	r3, r2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 808e 	beq.w	8008b6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 8086 	beq.w	8008b6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a62:	2220      	movs	r2, #32
 8008a64:	409a      	lsls	r2, r3
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b05      	cmp	r3, #5
 8008a74:	d136      	bne.n	8008ae4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0216 	bic.w	r2, r2, #22
 8008a84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	695a      	ldr	r2, [r3, #20]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d103      	bne.n	8008aa6 <HAL_DMA_IRQHandler+0x1da>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d007      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 0208 	bic.w	r2, r2, #8
 8008ab4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aba:	223f      	movs	r2, #63	; 0x3f
 8008abc:	409a      	lsls	r2, r3
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d07d      	beq.n	8008bd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
        }
        return;
 8008ae2:	e078      	b.n	8008bd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d01c      	beq.n	8008b2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d108      	bne.n	8008b12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d030      	beq.n	8008b6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
 8008b10:	e02b      	b.n	8008b6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d027      	beq.n	8008b6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	4798      	blx	r3
 8008b22:	e022      	b.n	8008b6a <HAL_DMA_IRQHandler+0x29e>
 8008b24:	20000300 	.word	0x20000300
 8008b28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10f      	bne.n	8008b5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f022 0210 	bic.w	r2, r2, #16
 8008b48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d032      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d022      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2205      	movs	r2, #5
 8008b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f022 0201 	bic.w	r2, r2, #1
 8008b94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	60bb      	str	r3, [r7, #8]
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d307      	bcc.n	8008bb2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1f2      	bne.n	8008b96 <HAL_DMA_IRQHandler+0x2ca>
 8008bb0:	e000      	b.n	8008bb4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008bb2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	4798      	blx	r3
 8008bd4:	e000      	b.n	8008bd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008bd6:	bf00      	nop
    }
  }
}
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop

08008be0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	2b40      	cmp	r3, #64	; 0x40
 8008c24:	d108      	bne.n	8008c38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008c36:	e007      	b.n	8008c48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	60da      	str	r2, [r3, #12]
}
 8008c48:	bf00      	nop
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	3b10      	subs	r3, #16
 8008c64:	4a13      	ldr	r2, [pc, #76]	; (8008cb4 <DMA_CalcBaseAndBitshift+0x60>)
 8008c66:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6a:	091b      	lsrs	r3, r3, #4
 8008c6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c6e:	4a12      	ldr	r2, [pc, #72]	; (8008cb8 <DMA_CalcBaseAndBitshift+0x64>)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d908      	bls.n	8008c94 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <DMA_CalcBaseAndBitshift+0x68>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	1d1a      	adds	r2, r3, #4
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	659a      	str	r2, [r3, #88]	; 0x58
 8008c92:	e006      	b.n	8008ca2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	4b08      	ldr	r3, [pc, #32]	; (8008cbc <DMA_CalcBaseAndBitshift+0x68>)
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	aaaaaaab 	.word	0xaaaaaaab
 8008cb8:	0801a314 	.word	0x0801a314
 8008cbc:	fffffc00 	.word	0xfffffc00

08008cc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d11f      	bne.n	8008d1a <DMA_CheckFifoParam+0x5a>
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d856      	bhi.n	8008d8e <DMA_CheckFifoParam+0xce>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <DMA_CheckFifoParam+0x28>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008d0b 	.word	0x08008d0b
 8008cf0:	08008cf9 	.word	0x08008cf9
 8008cf4:	08008d8f 	.word	0x08008d8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d046      	beq.n	8008d92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d08:	e043      	b.n	8008d92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d12:	d140      	bne.n	8008d96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d18:	e03d      	b.n	8008d96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d22:	d121      	bne.n	8008d68 <DMA_CheckFifoParam+0xa8>
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d837      	bhi.n	8008d9a <DMA_CheckFifoParam+0xda>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <DMA_CheckFifoParam+0x70>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d41 	.word	0x08008d41
 8008d34:	08008d47 	.word	0x08008d47
 8008d38:	08008d41 	.word	0x08008d41
 8008d3c:	08008d59 	.word	0x08008d59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	73fb      	strb	r3, [r7, #15]
      break;
 8008d44:	e030      	b.n	8008da8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d025      	beq.n	8008d9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d56:	e022      	b.n	8008d9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d60:	d11f      	bne.n	8008da2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008d66:	e01c      	b.n	8008da2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d903      	bls.n	8008d76 <DMA_CheckFifoParam+0xb6>
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d003      	beq.n	8008d7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008d74:	e018      	b.n	8008da8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	73fb      	strb	r3, [r7, #15]
      break;
 8008d7a:	e015      	b.n	8008da8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00e      	beq.n	8008da6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8c:	e00b      	b.n	8008da6 <DMA_CheckFifoParam+0xe6>
      break;
 8008d8e:	bf00      	nop
 8008d90:	e00a      	b.n	8008da8 <DMA_CheckFifoParam+0xe8>
      break;
 8008d92:	bf00      	nop
 8008d94:	e008      	b.n	8008da8 <DMA_CheckFifoParam+0xe8>
      break;
 8008d96:	bf00      	nop
 8008d98:	e006      	b.n	8008da8 <DMA_CheckFifoParam+0xe8>
      break;
 8008d9a:	bf00      	nop
 8008d9c:	e004      	b.n	8008da8 <DMA_CheckFifoParam+0xe8>
      break;
 8008d9e:	bf00      	nop
 8008da0:	e002      	b.n	8008da8 <DMA_CheckFifoParam+0xe8>
      break;   
 8008da2:	bf00      	nop
 8008da4:	e000      	b.n	8008da8 <DMA_CheckFifoParam+0xe8>
      break;
 8008da6:	bf00      	nop
    }
  } 
  
  return status; 
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e039      	b.n	8008e3e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d106      	bne.n	8008de4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7fd f900 	bl	8005fe4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	f023 0107 	bic.w	r1, r3, #7
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	430a      	orrs	r2, r1
 8008e16:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e1e:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <HAL_DMA2D_Init+0x90>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	68d1      	ldr	r1, [r2, #12]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	6812      	ldr	r2, [r2, #0]
 8008e2a:	430b      	orrs	r3, r1
 8008e2c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	ffffc000 	.word	0xffffc000

08008e4c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d101      	bne.n	8008e68 <HAL_DMA2D_Start+0x1c>
 8008e64:	2302      	movs	r3, #2
 8008e66:	e018      	b.n	8008e9a <HAL_DMA2D_Start+0x4e>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	68b9      	ldr	r1, [r7, #8]
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 f988 	bl	8009198 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0201 	orr.w	r2, r2, #1
 8008e96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d056      	beq.n	8008f6c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ebe:	f7ff fa65 	bl	800838c <HAL_GetTick>
 8008ec2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008ec4:	e04b      	b.n	8008f5e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d023      	beq.n	8008f20 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f003 0320 	and.w	r3, r3, #32
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d005      	beq.n	8008eee <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee6:	f043 0202 	orr.w	r2, r3, #2
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d005      	beq.n	8008f04 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efc:	f043 0201 	orr.w	r2, r3, #1
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2221      	movs	r2, #33	; 0x21
 8008f0a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2204      	movs	r2, #4
 8008f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e0a5      	b.n	800906c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f26:	d01a      	beq.n	8008f5e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f28:	f7ff fa30 	bl	800838c <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d302      	bcc.n	8008f3e <HAL_DMA2D_PollForTransfer+0x9c>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10f      	bne.n	8008f5e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f42:	f043 0220 	orr.w	r2, r3, #32
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e086      	b.n	800906c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0ac      	beq.n	8008ec6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	f003 0320 	and.w	r3, r3, #32
 8008f76:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	f003 0320 	and.w	r3, r3, #32
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d061      	beq.n	8009052 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f8e:	f7ff f9fd 	bl	800838c <HAL_GetTick>
 8008f92:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008f94:	e056      	b.n	8009044 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d02e      	beq.n	8009006 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f003 0308 	and.w	r3, r3, #8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb6:	f043 0204 	orr.w	r2, r3, #4
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fcc:	f043 0202 	orr.w	r2, r3, #2
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d005      	beq.n	8008fea <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe2:	f043 0201 	orr.w	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2229      	movs	r2, #41	; 0x29
 8008ff0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2204      	movs	r2, #4
 8008ff6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e032      	b.n	800906c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900c:	d01a      	beq.n	8009044 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800900e:	f7ff f9bd 	bl	800838c <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	429a      	cmp	r2, r3
 800901c:	d302      	bcc.n	8009024 <HAL_DMA2D_PollForTransfer+0x182>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10f      	bne.n	8009044 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	f043 0220 	orr.w	r2, r3, #32
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2203      	movs	r2, #3
 8009034:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e013      	b.n	800906c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f003 0310 	and.w	r3, r3, #16
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0a1      	beq.n	8008f96 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2212      	movs	r2, #18
 8009058:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <HAL_DMA2D_ConfigLayer+0x20>
 8009090:	2302      	movs	r3, #2
 8009092:	e079      	b.n	8009188 <HAL_DMA2D_ConfigLayer+0x114>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	3318      	adds	r3, #24
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	4413      	add	r3, r2
 80090ae:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	041b      	lsls	r3, r3, #16
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80090be:	4b35      	ldr	r3, [pc, #212]	; (8009194 <HAL_DMA2D_ConfigLayer+0x120>)
 80090c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2b0a      	cmp	r3, #10
 80090c8:	d003      	beq.n	80090d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	2b09      	cmp	r3, #9
 80090d0:	d107      	bne.n	80090e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	4313      	orrs	r3, r2
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	e005      	b.n	80090ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	061b      	lsls	r3, r3, #24
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d120      	bne.n	8009136 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	43db      	mvns	r3, r3
 80090fe:	ea02 0103 	and.w	r1, r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	430a      	orrs	r2, r1
 800910a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	6812      	ldr	r2, [r2, #0]
 8009114:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	2b0a      	cmp	r3, #10
 800911c:	d003      	beq.n	8009126 <HAL_DMA2D_ConfigLayer+0xb2>
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	2b09      	cmp	r3, #9
 8009124:	d127      	bne.n	8009176 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009132:	629a      	str	r2, [r3, #40]	; 0x28
 8009134:	e01f      	b.n	8009176 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69da      	ldr	r2, [r3, #28]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	43db      	mvns	r3, r3
 8009140:	ea02 0103 	and.w	r1, r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	430a      	orrs	r2, r1
 800914c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	6812      	ldr	r2, [r2, #0]
 8009156:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	2b0a      	cmp	r3, #10
 800915e:	d003      	beq.n	8009168 <HAL_DMA2D_ConfigLayer+0xf4>
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	2b09      	cmp	r3, #9
 8009166:	d106      	bne.n	8009176 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009174:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	ff03000f 	.word	0xff03000f

08009198 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8009198:	b480      	push	{r7}
 800919a:	b08b      	sub	sp, #44	; 0x2c
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	041a      	lsls	r2, r3, #16
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	431a      	orrs	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091d0:	d174      	bne.n	80092bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80091d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80091e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d108      	bne.n	800920a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	431a      	orrs	r2, r3
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	4313      	orrs	r3, r2
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	4313      	orrs	r3, r2
 8009206:	627b      	str	r3, [r7, #36]	; 0x24
 8009208:	e053      	b.n	80092b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d106      	bne.n	8009220 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	4313      	orrs	r3, r2
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	4313      	orrs	r3, r2
 800921c:	627b      	str	r3, [r7, #36]	; 0x24
 800921e:	e048      	b.n	80092b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	2b02      	cmp	r3, #2
 8009226:	d111      	bne.n	800924c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	0cdb      	lsrs	r3, r3, #19
 800922c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	0a9b      	lsrs	r3, r3, #10
 8009232:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	08db      	lsrs	r3, r3, #3
 8009238:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	02db      	lsls	r3, r3, #11
 8009242:	4313      	orrs	r3, r2
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	627b      	str	r3, [r7, #36]	; 0x24
 800924a:	e032      	b.n	80092b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	2b03      	cmp	r3, #3
 8009252:	d117      	bne.n	8009284 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	0fdb      	lsrs	r3, r3, #31
 8009258:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	0cdb      	lsrs	r3, r3, #19
 800925e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	0adb      	lsrs	r3, r3, #11
 8009264:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	08db      	lsrs	r3, r3, #3
 800926a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	029b      	lsls	r3, r3, #10
 8009274:	431a      	orrs	r2, r3
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	03db      	lsls	r3, r3, #15
 800927a:	4313      	orrs	r3, r2
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	4313      	orrs	r3, r2
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
 8009282:	e016      	b.n	80092b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	0f1b      	lsrs	r3, r3, #28
 8009288:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	0d1b      	lsrs	r3, r3, #20
 800928e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	0b1b      	lsrs	r3, r3, #12
 8009294:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	091b      	lsrs	r3, r3, #4
 800929a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	011a      	lsls	r2, r3, #4
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	431a      	orrs	r2, r3
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	031b      	lsls	r3, r3, #12
 80092aa:	4313      	orrs	r3, r2
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80092ba:	e003      	b.n	80092c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	60da      	str	r2, [r3, #12]
}
 80092c4:	bf00      	nop
 80092c6:	372c      	adds	r7, #44	; 0x2c
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b089      	sub	sp, #36	; 0x24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80092da:	2300      	movs	r3, #0
 80092dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80092de:	2300      	movs	r3, #0
 80092e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80092ea:	2300      	movs	r3, #0
 80092ec:	61fb      	str	r3, [r7, #28]
 80092ee:	e175      	b.n	80095dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80092f0:	2201      	movs	r2, #1
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	fa02 f303 	lsl.w	r3, r2, r3
 80092f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	4013      	ands	r3, r2
 8009302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	429a      	cmp	r2, r3
 800930a:	f040 8164 	bne.w	80095d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d00b      	beq.n	800932e <HAL_GPIO_Init+0x5e>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	2b02      	cmp	r3, #2
 800931c:	d007      	beq.n	800932e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009322:	2b11      	cmp	r3, #17
 8009324:	d003      	beq.n	800932e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	2b12      	cmp	r3, #18
 800932c:	d130      	bne.n	8009390 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	2203      	movs	r2, #3
 800933a:	fa02 f303 	lsl.w	r3, r2, r3
 800933e:	43db      	mvns	r3, r3
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	4013      	ands	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	fa02 f303 	lsl.w	r3, r2, r3
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	4313      	orrs	r3, r2
 8009356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009364:	2201      	movs	r2, #1
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	fa02 f303 	lsl.w	r3, r2, r3
 800936c:	43db      	mvns	r3, r3
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	4013      	ands	r3, r2
 8009372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	091b      	lsrs	r3, r3, #4
 800937a:	f003 0201 	and.w	r2, r3, #1
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	4313      	orrs	r3, r2
 8009388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	2203      	movs	r2, #3
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	43db      	mvns	r3, r3
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	4013      	ands	r3, r2
 80093a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	fa02 f303 	lsl.w	r3, r2, r3
 80093b4:	69ba      	ldr	r2, [r7, #24]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d003      	beq.n	80093d0 <HAL_GPIO_Init+0x100>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	2b12      	cmp	r3, #18
 80093ce:	d123      	bne.n	8009418 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	08da      	lsrs	r2, r3, #3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3208      	adds	r2, #8
 80093d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	f003 0307 	and.w	r3, r3, #7
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	220f      	movs	r2, #15
 80093e8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ec:	43db      	mvns	r3, r3
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	4013      	ands	r3, r2
 80093f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	fa02 f303 	lsl.w	r3, r2, r3
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	4313      	orrs	r3, r2
 8009408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	08da      	lsrs	r2, r3, #3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	3208      	adds	r2, #8
 8009412:	69b9      	ldr	r1, [r7, #24]
 8009414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	2203      	movs	r2, #3
 8009424:	fa02 f303 	lsl.w	r3, r2, r3
 8009428:	43db      	mvns	r3, r3
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	4013      	ands	r3, r2
 800942e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f003 0203 	and.w	r2, r3, #3
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	fa02 f303 	lsl.w	r3, r2, r3
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	4313      	orrs	r3, r2
 8009444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 80be 	beq.w	80095d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800945a:	4b66      	ldr	r3, [pc, #408]	; (80095f4 <HAL_GPIO_Init+0x324>)
 800945c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800945e:	4a65      	ldr	r2, [pc, #404]	; (80095f4 <HAL_GPIO_Init+0x324>)
 8009460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009464:	6453      	str	r3, [r2, #68]	; 0x44
 8009466:	4b63      	ldr	r3, [pc, #396]	; (80095f4 <HAL_GPIO_Init+0x324>)
 8009468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009472:	4a61      	ldr	r2, [pc, #388]	; (80095f8 <HAL_GPIO_Init+0x328>)
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	089b      	lsrs	r3, r3, #2
 8009478:	3302      	adds	r3, #2
 800947a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800947e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	220f      	movs	r2, #15
 800948a:	fa02 f303 	lsl.w	r3, r2, r3
 800948e:	43db      	mvns	r3, r3
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	4013      	ands	r3, r2
 8009494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a58      	ldr	r2, [pc, #352]	; (80095fc <HAL_GPIO_Init+0x32c>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d037      	beq.n	800950e <HAL_GPIO_Init+0x23e>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a57      	ldr	r2, [pc, #348]	; (8009600 <HAL_GPIO_Init+0x330>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d031      	beq.n	800950a <HAL_GPIO_Init+0x23a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a56      	ldr	r2, [pc, #344]	; (8009604 <HAL_GPIO_Init+0x334>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d02b      	beq.n	8009506 <HAL_GPIO_Init+0x236>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a55      	ldr	r2, [pc, #340]	; (8009608 <HAL_GPIO_Init+0x338>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d025      	beq.n	8009502 <HAL_GPIO_Init+0x232>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a54      	ldr	r2, [pc, #336]	; (800960c <HAL_GPIO_Init+0x33c>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d01f      	beq.n	80094fe <HAL_GPIO_Init+0x22e>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a53      	ldr	r2, [pc, #332]	; (8009610 <HAL_GPIO_Init+0x340>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d019      	beq.n	80094fa <HAL_GPIO_Init+0x22a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a52      	ldr	r2, [pc, #328]	; (8009614 <HAL_GPIO_Init+0x344>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d013      	beq.n	80094f6 <HAL_GPIO_Init+0x226>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a51      	ldr	r2, [pc, #324]	; (8009618 <HAL_GPIO_Init+0x348>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00d      	beq.n	80094f2 <HAL_GPIO_Init+0x222>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a50      	ldr	r2, [pc, #320]	; (800961c <HAL_GPIO_Init+0x34c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d007      	beq.n	80094ee <HAL_GPIO_Init+0x21e>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a4f      	ldr	r2, [pc, #316]	; (8009620 <HAL_GPIO_Init+0x350>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d101      	bne.n	80094ea <HAL_GPIO_Init+0x21a>
 80094e6:	2309      	movs	r3, #9
 80094e8:	e012      	b.n	8009510 <HAL_GPIO_Init+0x240>
 80094ea:	230a      	movs	r3, #10
 80094ec:	e010      	b.n	8009510 <HAL_GPIO_Init+0x240>
 80094ee:	2308      	movs	r3, #8
 80094f0:	e00e      	b.n	8009510 <HAL_GPIO_Init+0x240>
 80094f2:	2307      	movs	r3, #7
 80094f4:	e00c      	b.n	8009510 <HAL_GPIO_Init+0x240>
 80094f6:	2306      	movs	r3, #6
 80094f8:	e00a      	b.n	8009510 <HAL_GPIO_Init+0x240>
 80094fa:	2305      	movs	r3, #5
 80094fc:	e008      	b.n	8009510 <HAL_GPIO_Init+0x240>
 80094fe:	2304      	movs	r3, #4
 8009500:	e006      	b.n	8009510 <HAL_GPIO_Init+0x240>
 8009502:	2303      	movs	r3, #3
 8009504:	e004      	b.n	8009510 <HAL_GPIO_Init+0x240>
 8009506:	2302      	movs	r3, #2
 8009508:	e002      	b.n	8009510 <HAL_GPIO_Init+0x240>
 800950a:	2301      	movs	r3, #1
 800950c:	e000      	b.n	8009510 <HAL_GPIO_Init+0x240>
 800950e:	2300      	movs	r3, #0
 8009510:	69fa      	ldr	r2, [r7, #28]
 8009512:	f002 0203 	and.w	r2, r2, #3
 8009516:	0092      	lsls	r2, r2, #2
 8009518:	4093      	lsls	r3, r2
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	4313      	orrs	r3, r2
 800951e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009520:	4935      	ldr	r1, [pc, #212]	; (80095f8 <HAL_GPIO_Init+0x328>)
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	089b      	lsrs	r3, r3, #2
 8009526:	3302      	adds	r3, #2
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800952e:	4b3d      	ldr	r3, [pc, #244]	; (8009624 <HAL_GPIO_Init+0x354>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	43db      	mvns	r3, r3
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	4013      	ands	r3, r2
 800953c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	4313      	orrs	r3, r2
 8009550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009552:	4a34      	ldr	r2, [pc, #208]	; (8009624 <HAL_GPIO_Init+0x354>)
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009558:	4b32      	ldr	r3, [pc, #200]	; (8009624 <HAL_GPIO_Init+0x354>)
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	43db      	mvns	r3, r3
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	4013      	ands	r3, r2
 8009566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	4313      	orrs	r3, r2
 800957a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800957c:	4a29      	ldr	r2, [pc, #164]	; (8009624 <HAL_GPIO_Init+0x354>)
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009582:	4b28      	ldr	r3, [pc, #160]	; (8009624 <HAL_GPIO_Init+0x354>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	43db      	mvns	r3, r3
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	4013      	ands	r3, r2
 8009590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80095a6:	4a1f      	ldr	r2, [pc, #124]	; (8009624 <HAL_GPIO_Init+0x354>)
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80095ac:	4b1d      	ldr	r3, [pc, #116]	; (8009624 <HAL_GPIO_Init+0x354>)
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	43db      	mvns	r3, r3
 80095b6:	69ba      	ldr	r2, [r7, #24]
 80095b8:	4013      	ands	r3, r2
 80095ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d003      	beq.n	80095d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80095d0:	4a14      	ldr	r2, [pc, #80]	; (8009624 <HAL_GPIO_Init+0x354>)
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	3301      	adds	r3, #1
 80095da:	61fb      	str	r3, [r7, #28]
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	2b0f      	cmp	r3, #15
 80095e0:	f67f ae86 	bls.w	80092f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	3724      	adds	r7, #36	; 0x24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	40023800 	.word	0x40023800
 80095f8:	40013800 	.word	0x40013800
 80095fc:	40020000 	.word	0x40020000
 8009600:	40020400 	.word	0x40020400
 8009604:	40020800 	.word	0x40020800
 8009608:	40020c00 	.word	0x40020c00
 800960c:	40021000 	.word	0x40021000
 8009610:	40021400 	.word	0x40021400
 8009614:	40021800 	.word	0x40021800
 8009618:	40021c00 	.word	0x40021c00
 800961c:	40022000 	.word	0x40022000
 8009620:	40022400 	.word	0x40022400
 8009624:	40013c00 	.word	0x40013c00

08009628 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8009632:	2300      	movs	r3, #0
 8009634:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8009636:	2300      	movs	r3, #0
 8009638:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800963a:	2300      	movs	r3, #0
 800963c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800963e:	2300      	movs	r3, #0
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	e0d9      	b.n	80097f8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009644:	2201      	movs	r2, #1
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	fa02 f303 	lsl.w	r3, r2, r3
 800964c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	4013      	ands	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	429a      	cmp	r2, r3
 800965c:	f040 80c9 	bne.w	80097f2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009660:	4a6b      	ldr	r2, [pc, #428]	; (8009810 <HAL_GPIO_DeInit+0x1e8>)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	089b      	lsrs	r3, r3, #2
 8009666:	3302      	adds	r3, #2
 8009668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f003 0303 	and.w	r3, r3, #3
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	220f      	movs	r2, #15
 8009678:	fa02 f303 	lsl.w	r3, r2, r3
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	4013      	ands	r3, r2
 8009680:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a63      	ldr	r2, [pc, #396]	; (8009814 <HAL_GPIO_DeInit+0x1ec>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d037      	beq.n	80096fa <HAL_GPIO_DeInit+0xd2>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a62      	ldr	r2, [pc, #392]	; (8009818 <HAL_GPIO_DeInit+0x1f0>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d031      	beq.n	80096f6 <HAL_GPIO_DeInit+0xce>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a61      	ldr	r2, [pc, #388]	; (800981c <HAL_GPIO_DeInit+0x1f4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d02b      	beq.n	80096f2 <HAL_GPIO_DeInit+0xca>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a60      	ldr	r2, [pc, #384]	; (8009820 <HAL_GPIO_DeInit+0x1f8>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d025      	beq.n	80096ee <HAL_GPIO_DeInit+0xc6>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a5f      	ldr	r2, [pc, #380]	; (8009824 <HAL_GPIO_DeInit+0x1fc>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d01f      	beq.n	80096ea <HAL_GPIO_DeInit+0xc2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a5e      	ldr	r2, [pc, #376]	; (8009828 <HAL_GPIO_DeInit+0x200>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d019      	beq.n	80096e6 <HAL_GPIO_DeInit+0xbe>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a5d      	ldr	r2, [pc, #372]	; (800982c <HAL_GPIO_DeInit+0x204>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d013      	beq.n	80096e2 <HAL_GPIO_DeInit+0xba>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a5c      	ldr	r2, [pc, #368]	; (8009830 <HAL_GPIO_DeInit+0x208>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d00d      	beq.n	80096de <HAL_GPIO_DeInit+0xb6>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a5b      	ldr	r2, [pc, #364]	; (8009834 <HAL_GPIO_DeInit+0x20c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d007      	beq.n	80096da <HAL_GPIO_DeInit+0xb2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a5a      	ldr	r2, [pc, #360]	; (8009838 <HAL_GPIO_DeInit+0x210>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d101      	bne.n	80096d6 <HAL_GPIO_DeInit+0xae>
 80096d2:	2309      	movs	r3, #9
 80096d4:	e012      	b.n	80096fc <HAL_GPIO_DeInit+0xd4>
 80096d6:	230a      	movs	r3, #10
 80096d8:	e010      	b.n	80096fc <HAL_GPIO_DeInit+0xd4>
 80096da:	2308      	movs	r3, #8
 80096dc:	e00e      	b.n	80096fc <HAL_GPIO_DeInit+0xd4>
 80096de:	2307      	movs	r3, #7
 80096e0:	e00c      	b.n	80096fc <HAL_GPIO_DeInit+0xd4>
 80096e2:	2306      	movs	r3, #6
 80096e4:	e00a      	b.n	80096fc <HAL_GPIO_DeInit+0xd4>
 80096e6:	2305      	movs	r3, #5
 80096e8:	e008      	b.n	80096fc <HAL_GPIO_DeInit+0xd4>
 80096ea:	2304      	movs	r3, #4
 80096ec:	e006      	b.n	80096fc <HAL_GPIO_DeInit+0xd4>
 80096ee:	2303      	movs	r3, #3
 80096f0:	e004      	b.n	80096fc <HAL_GPIO_DeInit+0xd4>
 80096f2:	2302      	movs	r3, #2
 80096f4:	e002      	b.n	80096fc <HAL_GPIO_DeInit+0xd4>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e000      	b.n	80096fc <HAL_GPIO_DeInit+0xd4>
 80096fa:	2300      	movs	r3, #0
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	f002 0203 	and.w	r2, r2, #3
 8009702:	0092      	lsls	r2, r2, #2
 8009704:	4093      	lsls	r3, r2
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	429a      	cmp	r2, r3
 800970a:	d132      	bne.n	8009772 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800970c:	4b4b      	ldr	r3, [pc, #300]	; (800983c <HAL_GPIO_DeInit+0x214>)
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	43db      	mvns	r3, r3
 8009714:	4949      	ldr	r1, [pc, #292]	; (800983c <HAL_GPIO_DeInit+0x214>)
 8009716:	4013      	ands	r3, r2
 8009718:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800971a:	4b48      	ldr	r3, [pc, #288]	; (800983c <HAL_GPIO_DeInit+0x214>)
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	43db      	mvns	r3, r3
 8009722:	4946      	ldr	r1, [pc, #280]	; (800983c <HAL_GPIO_DeInit+0x214>)
 8009724:	4013      	ands	r3, r2
 8009726:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009728:	4b44      	ldr	r3, [pc, #272]	; (800983c <HAL_GPIO_DeInit+0x214>)
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	43db      	mvns	r3, r3
 8009730:	4942      	ldr	r1, [pc, #264]	; (800983c <HAL_GPIO_DeInit+0x214>)
 8009732:	4013      	ands	r3, r2
 8009734:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009736:	4b41      	ldr	r3, [pc, #260]	; (800983c <HAL_GPIO_DeInit+0x214>)
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	43db      	mvns	r3, r3
 800973e:	493f      	ldr	r1, [pc, #252]	; (800983c <HAL_GPIO_DeInit+0x214>)
 8009740:	4013      	ands	r3, r2
 8009742:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f003 0303 	and.w	r3, r3, #3
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	220f      	movs	r2, #15
 800974e:	fa02 f303 	lsl.w	r3, r2, r3
 8009752:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009754:	4a2e      	ldr	r2, [pc, #184]	; (8009810 <HAL_GPIO_DeInit+0x1e8>)
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	089b      	lsrs	r3, r3, #2
 800975a:	3302      	adds	r3, #2
 800975c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	43da      	mvns	r2, r3
 8009764:	482a      	ldr	r0, [pc, #168]	; (8009810 <HAL_GPIO_DeInit+0x1e8>)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	089b      	lsrs	r3, r3, #2
 800976a:	400a      	ands	r2, r1
 800976c:	3302      	adds	r3, #2
 800976e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	2103      	movs	r1, #3
 800977c:	fa01 f303 	lsl.w	r3, r1, r3
 8009780:	43db      	mvns	r3, r3
 8009782:	401a      	ands	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	08da      	lsrs	r2, r3, #3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3208      	adds	r2, #8
 8009790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	220f      	movs	r2, #15
 800979e:	fa02 f303 	lsl.w	r3, r2, r3
 80097a2:	43db      	mvns	r3, r3
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	08d2      	lsrs	r2, r2, #3
 80097a8:	4019      	ands	r1, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	3208      	adds	r2, #8
 80097ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	2103      	movs	r1, #3
 80097bc:	fa01 f303 	lsl.w	r3, r1, r3
 80097c0:	43db      	mvns	r3, r3
 80097c2:	401a      	ands	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	2101      	movs	r1, #1
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	fa01 f303 	lsl.w	r3, r1, r3
 80097d4:	43db      	mvns	r3, r3
 80097d6:	401a      	ands	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	2103      	movs	r1, #3
 80097e6:	fa01 f303 	lsl.w	r3, r1, r3
 80097ea:	43db      	mvns	r3, r3
 80097ec:	401a      	ands	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	3301      	adds	r3, #1
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2b0f      	cmp	r3, #15
 80097fc:	f67f af22 	bls.w	8009644 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009800:	bf00      	nop
 8009802:	bf00      	nop
 8009804:	371c      	adds	r7, #28
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	40013800 	.word	0x40013800
 8009814:	40020000 	.word	0x40020000
 8009818:	40020400 	.word	0x40020400
 800981c:	40020800 	.word	0x40020800
 8009820:	40020c00 	.word	0x40020c00
 8009824:	40021000 	.word	0x40021000
 8009828:	40021400 	.word	0x40021400
 800982c:	40021800 	.word	0x40021800
 8009830:	40021c00 	.word	0x40021c00
 8009834:	40022000 	.word	0x40022000
 8009838:	40022400 	.word	0x40022400
 800983c:	40013c00 	.word	0x40013c00

08009840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	691a      	ldr	r2, [r3, #16]
 8009850:	887b      	ldrh	r3, [r7, #2]
 8009852:	4013      	ands	r3, r2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009858:	2301      	movs	r3, #1
 800985a:	73fb      	strb	r3, [r7, #15]
 800985c:	e001      	b.n	8009862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	807b      	strh	r3, [r7, #2]
 800987c:	4613      	mov	r3, r2
 800987e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009880:	787b      	ldrb	r3, [r7, #1]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d003      	beq.n	800988e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009886:	887a      	ldrh	r2, [r7, #2]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800988c:	e003      	b.n	8009896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800988e:	887b      	ldrh	r3, [r7, #2]
 8009890:	041a      	lsls	r2, r3, #16
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	619a      	str	r2, [r3, #24]
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
	...

080098a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e07f      	b.n	80099b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d106      	bne.n	80098d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f8a9 	bl	8009a22 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2224      	movs	r2, #36	; 0x24
 80098d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f022 0201 	bic.w	r2, r2, #1
 80098e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80098f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009904:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d107      	bne.n	800991e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689a      	ldr	r2, [r3, #8]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800991a:	609a      	str	r2, [r3, #8]
 800991c:	e006      	b.n	800992c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	689a      	ldr	r2, [r3, #8]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800992a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	2b02      	cmp	r3, #2
 8009932:	d104      	bne.n	800993e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800993c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6859      	ldr	r1, [r3, #4]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	4b1d      	ldr	r3, [pc, #116]	; (80099c0 <HAL_I2C_Init+0x11c>)
 800994a:	430b      	orrs	r3, r1
 800994c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68da      	ldr	r2, [r3, #12]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800995c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	691a      	ldr	r2, [r3, #16]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	ea42 0103 	orr.w	r1, r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	021a      	lsls	r2, r3, #8
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	430a      	orrs	r2, r1
 8009976:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	69d9      	ldr	r1, [r3, #28]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a1a      	ldr	r2, [r3, #32]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0201 	orr.w	r2, r2, #1
 8009996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	02008000 	.word	0x02008000

080099c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e021      	b.n	8009a1a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2224      	movs	r2, #36	; 0x24
 80099da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f022 0201 	bic.w	r2, r2, #1
 80099ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f821 	bl	8009a36 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009a2a:	bf00      	nop
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009a3e:	bf00      	nop
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
	...

08009a4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	4608      	mov	r0, r1
 8009a56:	4611      	mov	r1, r2
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	817b      	strh	r3, [r7, #10]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	813b      	strh	r3, [r7, #8]
 8009a62:	4613      	mov	r3, r2
 8009a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	f040 80f9 	bne.w	8009c66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <HAL_I2C_Mem_Write+0x34>
 8009a7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e0ed      	b.n	8009c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d101      	bne.n	8009a9a <HAL_I2C_Mem_Write+0x4e>
 8009a96:	2302      	movs	r3, #2
 8009a98:	e0e6      	b.n	8009c68 <HAL_I2C_Mem_Write+0x21c>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009aa2:	f7fe fc73 	bl	800838c <HAL_GetTick>
 8009aa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	2319      	movs	r3, #25
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 fad1 	bl	800a05c <I2C_WaitOnFlagUntilTimeout>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e0d1      	b.n	8009c68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2221      	movs	r2, #33	; 0x21
 8009ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2240      	movs	r2, #64	; 0x40
 8009ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a3a      	ldr	r2, [r7, #32]
 8009ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009aec:	88f8      	ldrh	r0, [r7, #6]
 8009aee:	893a      	ldrh	r2, [r7, #8]
 8009af0:	8979      	ldrh	r1, [r7, #10]
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	4603      	mov	r3, r0
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 f9e1 	bl	8009ec4 <I2C_RequestMemoryWrite>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d005      	beq.n	8009b14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e0a9      	b.n	8009c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	2bff      	cmp	r3, #255	; 0xff
 8009b1c:	d90e      	bls.n	8009b3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	22ff      	movs	r2, #255	; 0xff
 8009b22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	8979      	ldrh	r1, [r7, #10]
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 fbb3 	bl	800a2a0 <I2C_TransferConfig>
 8009b3a:	e00f      	b.n	8009b5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	8979      	ldrh	r1, [r7, #10]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 fba2 	bl	800a2a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f000 fabb 	bl	800a0dc <I2C_WaitOnTXISFlagUntilTimeout>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e07b      	b.n	8009c68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	781a      	ldrb	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d034      	beq.n	8009c14 <HAL_I2C_Mem_Write+0x1c8>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d130      	bne.n	8009c14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	2200      	movs	r2, #0
 8009bba:	2180      	movs	r1, #128	; 0x80
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 fa4d 	bl	800a05c <I2C_WaitOnFlagUntilTimeout>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e04d      	b.n	8009c68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2bff      	cmp	r3, #255	; 0xff
 8009bd4:	d90e      	bls.n	8009bf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	22ff      	movs	r2, #255	; 0xff
 8009bda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	8979      	ldrh	r1, [r7, #10]
 8009be4:	2300      	movs	r3, #0
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 fb57 	bl	800a2a0 <I2C_TransferConfig>
 8009bf2:	e00f      	b.n	8009c14 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	8979      	ldrh	r1, [r7, #10]
 8009c06:	2300      	movs	r3, #0
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 fb46 	bl	800a2a0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d19e      	bne.n	8009b5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 fa9a 	bl	800a15c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e01a      	b.n	8009c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2220      	movs	r2, #32
 8009c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6859      	ldr	r1, [r3, #4]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <HAL_I2C_Mem_Write+0x224>)
 8009c46:	400b      	ands	r3, r1
 8009c48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	e000      	b.n	8009c68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009c66:	2302      	movs	r3, #2
  }
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	fe00e800 	.word	0xfe00e800

08009c74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b088      	sub	sp, #32
 8009c78:	af02      	add	r7, sp, #8
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	4611      	mov	r1, r2
 8009c80:	461a      	mov	r2, r3
 8009c82:	4603      	mov	r3, r0
 8009c84:	817b      	strh	r3, [r7, #10]
 8009c86:	460b      	mov	r3, r1
 8009c88:	813b      	strh	r3, [r7, #8]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b20      	cmp	r3, #32
 8009c98:	f040 80fd 	bne.w	8009e96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <HAL_I2C_Mem_Read+0x34>
 8009ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d105      	bne.n	8009cb4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e0f1      	b.n	8009e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d101      	bne.n	8009cc2 <HAL_I2C_Mem_Read+0x4e>
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e0ea      	b.n	8009e98 <HAL_I2C_Mem_Read+0x224>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009cca:	f7fe fb5f 	bl	800838c <HAL_GetTick>
 8009cce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	2319      	movs	r3, #25
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 f9bd 	bl	800a05c <I2C_WaitOnFlagUntilTimeout>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e0d5      	b.n	8009e98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2222      	movs	r2, #34	; 0x22
 8009cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2240      	movs	r2, #64	; 0x40
 8009cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6a3a      	ldr	r2, [r7, #32]
 8009d06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d14:	88f8      	ldrh	r0, [r7, #6]
 8009d16:	893a      	ldrh	r2, [r7, #8]
 8009d18:	8979      	ldrh	r1, [r7, #10]
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	4603      	mov	r3, r0
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 f921 	bl	8009f6c <I2C_RequestMemoryRead>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d005      	beq.n	8009d3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e0ad      	b.n	8009e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	2bff      	cmp	r3, #255	; 0xff
 8009d44:	d90e      	bls.n	8009d64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	22ff      	movs	r2, #255	; 0xff
 8009d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	8979      	ldrh	r1, [r7, #10]
 8009d54:	4b52      	ldr	r3, [pc, #328]	; (8009ea0 <HAL_I2C_Mem_Read+0x22c>)
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 fa9f 	bl	800a2a0 <I2C_TransferConfig>
 8009d62:	e00f      	b.n	8009d84 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	8979      	ldrh	r1, [r7, #10]
 8009d76:	4b4a      	ldr	r3, [pc, #296]	; (8009ea0 <HAL_I2C_Mem_Read+0x22c>)
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 fa8e 	bl	800a2a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2104      	movs	r1, #4
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 f964 	bl	800a05c <I2C_WaitOnFlagUntilTimeout>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e07c      	b.n	8009e98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d034      	beq.n	8009e44 <HAL_I2C_Mem_Read+0x1d0>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d130      	bne.n	8009e44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	2200      	movs	r2, #0
 8009dea:	2180      	movs	r1, #128	; 0x80
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 f935 	bl	800a05c <I2C_WaitOnFlagUntilTimeout>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e04d      	b.n	8009e98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	2bff      	cmp	r3, #255	; 0xff
 8009e04:	d90e      	bls.n	8009e24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	22ff      	movs	r2, #255	; 0xff
 8009e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	8979      	ldrh	r1, [r7, #10]
 8009e14:	2300      	movs	r3, #0
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fa3f 	bl	800a2a0 <I2C_TransferConfig>
 8009e22:	e00f      	b.n	8009e44 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	8979      	ldrh	r1, [r7, #10]
 8009e36:	2300      	movs	r3, #0
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 fa2e 	bl	800a2a0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d19a      	bne.n	8009d84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 f982 	bl	800a15c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e01a      	b.n	8009e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2220      	movs	r2, #32
 8009e68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6859      	ldr	r1, [r3, #4]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	4b0b      	ldr	r3, [pc, #44]	; (8009ea4 <HAL_I2C_Mem_Read+0x230>)
 8009e76:	400b      	ands	r3, r1
 8009e78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2220      	movs	r2, #32
 8009e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	e000      	b.n	8009e98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009e96:	2302      	movs	r3, #2
  }
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	80002400 	.word	0x80002400
 8009ea4:	fe00e800 	.word	0xfe00e800

08009ea8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eb6:	b2db      	uxtb	r3, r3
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af02      	add	r7, sp, #8
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	4608      	mov	r0, r1
 8009ece:	4611      	mov	r1, r2
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	817b      	strh	r3, [r7, #10]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	813b      	strh	r3, [r7, #8]
 8009eda:	4613      	mov	r3, r2
 8009edc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009ede:	88fb      	ldrh	r3, [r7, #6]
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	8979      	ldrh	r1, [r7, #10]
 8009ee4:	4b20      	ldr	r3, [pc, #128]	; (8009f68 <I2C_RequestMemoryWrite+0xa4>)
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 f9d7 	bl	800a2a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	69b9      	ldr	r1, [r7, #24]
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 f8f0 	bl	800a0dc <I2C_WaitOnTXISFlagUntilTimeout>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e02c      	b.n	8009f60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f06:	88fb      	ldrh	r3, [r7, #6]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d105      	bne.n	8009f18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f0c:	893b      	ldrh	r3, [r7, #8]
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	629a      	str	r2, [r3, #40]	; 0x28
 8009f16:	e015      	b.n	8009f44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009f18:	893b      	ldrh	r3, [r7, #8]
 8009f1a:	0a1b      	lsrs	r3, r3, #8
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f26:	69fa      	ldr	r2, [r7, #28]
 8009f28:	69b9      	ldr	r1, [r7, #24]
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 f8d6 	bl	800a0dc <I2C_WaitOnTXISFlagUntilTimeout>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e012      	b.n	8009f60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f3a:	893b      	ldrh	r3, [r7, #8]
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2180      	movs	r1, #128	; 0x80
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f000 f884 	bl	800a05c <I2C_WaitOnFlagUntilTimeout>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e000      	b.n	8009f60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	80002000 	.word	0x80002000

08009f6c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af02      	add	r7, sp, #8
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	4608      	mov	r0, r1
 8009f76:	4611      	mov	r1, r2
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	817b      	strh	r3, [r7, #10]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	813b      	strh	r3, [r7, #8]
 8009f82:	4613      	mov	r3, r2
 8009f84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009f86:	88fb      	ldrh	r3, [r7, #6]
 8009f88:	b2da      	uxtb	r2, r3
 8009f8a:	8979      	ldrh	r1, [r7, #10]
 8009f8c:	4b20      	ldr	r3, [pc, #128]	; (800a010 <I2C_RequestMemoryRead+0xa4>)
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	2300      	movs	r3, #0
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f000 f984 	bl	800a2a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	69b9      	ldr	r1, [r7, #24]
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f000 f89d 	bl	800a0dc <I2C_WaitOnTXISFlagUntilTimeout>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e02c      	b.n	800a006 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009fac:	88fb      	ldrh	r3, [r7, #6]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d105      	bne.n	8009fbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009fb2:	893b      	ldrh	r3, [r7, #8]
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	629a      	str	r2, [r3, #40]	; 0x28
 8009fbc:	e015      	b.n	8009fea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009fbe:	893b      	ldrh	r3, [r7, #8]
 8009fc0:	0a1b      	lsrs	r3, r3, #8
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fcc:	69fa      	ldr	r2, [r7, #28]
 8009fce:	69b9      	ldr	r1, [r7, #24]
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 f883 	bl	800a0dc <I2C_WaitOnTXISFlagUntilTimeout>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e012      	b.n	800a006 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009fe0:	893b      	ldrh	r3, [r7, #8]
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2140      	movs	r1, #64	; 0x40
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 f831 	bl	800a05c <I2C_WaitOnFlagUntilTimeout>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e000      	b.n	800a006 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	80002000 	.word	0x80002000

0800a014 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	f003 0302 	and.w	r3, r3, #2
 800a026:	2b02      	cmp	r3, #2
 800a028:	d103      	bne.n	800a032 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2200      	movs	r2, #0
 800a030:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d007      	beq.n	800a050 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	699a      	ldr	r2, [r3, #24]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f042 0201 	orr.w	r2, r2, #1
 800a04e:	619a      	str	r2, [r3, #24]
  }
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	4613      	mov	r3, r2
 800a06a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a06c:	e022      	b.n	800a0b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a074:	d01e      	beq.n	800a0b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a076:	f7fe f989 	bl	800838c <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	d302      	bcc.n	800a08c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d113      	bne.n	800a0b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a090:	f043 0220 	orr.w	r2, r3, #32
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2220      	movs	r2, #32
 800a09c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e00f      	b.n	800a0d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	4013      	ands	r3, r2
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	bf0c      	ite	eq
 800a0c4:	2301      	moveq	r3, #1
 800a0c6:	2300      	movne	r3, #0
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d0cd      	beq.n	800a06e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a0e8:	e02c      	b.n	800a144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 f870 	bl	800a1d4 <I2C_IsAcknowledgeFailed>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e02a      	b.n	800a154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a104:	d01e      	beq.n	800a144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a106:	f7fe f941 	bl	800838c <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	429a      	cmp	r2, r3
 800a114:	d302      	bcc.n	800a11c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d113      	bne.n	800a144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a120:	f043 0220 	orr.w	r2, r3, #32
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2220      	movs	r2, #32
 800a12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e007      	b.n	800a154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	f003 0302 	and.w	r3, r3, #2
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d1cb      	bne.n	800a0ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a168:	e028      	b.n	800a1bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 f830 	bl	800a1d4 <I2C_IsAcknowledgeFailed>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e026      	b.n	800a1cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a17e:	f7fe f905 	bl	800838c <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d302      	bcc.n	800a194 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d113      	bne.n	800a1bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a198:	f043 0220 	orr.w	r2, r3, #32
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e007      	b.n	800a1cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	f003 0320 	and.w	r3, r3, #32
 800a1c6:	2b20      	cmp	r3, #32
 800a1c8:	d1cf      	bne.n	800a16a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	f003 0310 	and.w	r3, r3, #16
 800a1ea:	2b10      	cmp	r3, #16
 800a1ec:	d151      	bne.n	800a292 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1ee:	e022      	b.n	800a236 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f6:	d01e      	beq.n	800a236 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1f8:	f7fe f8c8 	bl	800838c <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	429a      	cmp	r2, r3
 800a206:	d302      	bcc.n	800a20e <I2C_IsAcknowledgeFailed+0x3a>
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d113      	bne.n	800a236 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a212:	f043 0220 	orr.w	r2, r3, #32
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2220      	movs	r2, #32
 800a21e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e02e      	b.n	800a294 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	f003 0320 	and.w	r3, r3, #32
 800a240:	2b20      	cmp	r3, #32
 800a242:	d1d5      	bne.n	800a1f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2210      	movs	r2, #16
 800a24a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2220      	movs	r2, #32
 800a252:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff fedd 	bl	800a014 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6859      	ldr	r1, [r3, #4]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <I2C_IsAcknowledgeFailed+0xc8>)
 800a266:	400b      	ands	r3, r1
 800a268:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a26e:	f043 0204 	orr.w	r2, r3, #4
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2220      	movs	r2, #32
 800a27a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	fe00e800 	.word	0xfe00e800

0800a2a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	607b      	str	r3, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	817b      	strh	r3, [r7, #10]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	0d5b      	lsrs	r3, r3, #21
 800a2bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a2c0:	4b0d      	ldr	r3, [pc, #52]	; (800a2f8 <I2C_TransferConfig+0x58>)
 800a2c2:	430b      	orrs	r3, r1
 800a2c4:	43db      	mvns	r3, r3
 800a2c6:	ea02 0103 	and.w	r1, r2, r3
 800a2ca:	897b      	ldrh	r3, [r7, #10]
 800a2cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a2d0:	7a7b      	ldrb	r3, [r7, #9]
 800a2d2:	041b      	lsls	r3, r3, #16
 800a2d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2d8:	431a      	orrs	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a2ea:	bf00      	nop
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	03ff63ff 	.word	0x03ff63ff

0800a2fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e0bf      	b.n	800a48e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d106      	bne.n	800a328 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7fb fe7e 	bl	8006024 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2202      	movs	r2, #2
 800a32c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	699a      	ldr	r2, [r3, #24]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a33e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6999      	ldr	r1, [r3, #24]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a354:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	430a      	orrs	r2, r1
 800a362:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6899      	ldr	r1, [r3, #8]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	4b4a      	ldr	r3, [pc, #296]	; (800a498 <HAL_LTDC_Init+0x19c>)
 800a370:	400b      	ands	r3, r1
 800a372:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	041b      	lsls	r3, r3, #16
 800a37a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6899      	ldr	r1, [r3, #8]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	699a      	ldr	r2, [r3, #24]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68d9      	ldr	r1, [r3, #12]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	4b3e      	ldr	r3, [pc, #248]	; (800a498 <HAL_LTDC_Init+0x19c>)
 800a39e:	400b      	ands	r3, r1
 800a3a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	69db      	ldr	r3, [r3, #28]
 800a3a6:	041b      	lsls	r3, r3, #16
 800a3a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68d9      	ldr	r1, [r3, #12]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a1a      	ldr	r2, [r3, #32]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	430a      	orrs	r2, r1
 800a3be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6919      	ldr	r1, [r3, #16]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	4b33      	ldr	r3, [pc, #204]	; (800a498 <HAL_LTDC_Init+0x19c>)
 800a3cc:	400b      	ands	r3, r1
 800a3ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	041b      	lsls	r3, r3, #16
 800a3d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6919      	ldr	r1, [r3, #16]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6959      	ldr	r1, [r3, #20]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	4b27      	ldr	r3, [pc, #156]	; (800a498 <HAL_LTDC_Init+0x19c>)
 800a3fa:	400b      	ands	r3, r1
 800a3fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a402:	041b      	lsls	r3, r3, #16
 800a404:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6959      	ldr	r1, [r3, #20]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	431a      	orrs	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	430a      	orrs	r2, r1
 800a41a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a422:	021b      	lsls	r3, r3, #8
 800a424:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a42c:	041b      	lsls	r3, r3, #16
 800a42e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a43e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a446:	68ba      	ldr	r2, [r7, #8]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a452:	431a      	orrs	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	430a      	orrs	r2, r1
 800a45a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0206 	orr.w	r2, r2, #6
 800a46a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	699a      	ldr	r2, [r3, #24]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	f000f800 	.word	0xf000f800

0800a49c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f003 0304 	and.w	r3, r3, #4
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d023      	beq.n	800a506 <HAL_LTDC_IRQHandler+0x6a>
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	f003 0304 	and.w	r3, r3, #4
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d01e      	beq.n	800a506 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 0204 	bic.w	r2, r2, #4
 800a4d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2204      	movs	r2, #4
 800a4de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4e6:	f043 0201 	orr.w	r2, r3, #1
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2204      	movs	r2, #4
 800a4f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f86f 	bl	800a5e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d023      	beq.n	800a558 <HAL_LTDC_IRQHandler+0xbc>
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	f003 0302 	and.w	r3, r3, #2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d01e      	beq.n	800a558 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 0202 	bic.w	r2, r2, #2
 800a528:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2202      	movs	r2, #2
 800a530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a538:	f043 0202 	orr.w	r2, r3, #2
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2204      	movs	r2, #4
 800a546:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f846 	bl	800a5e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d01b      	beq.n	800a59a <HAL_LTDC_IRQHandler+0xfe>
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d016      	beq.n	800a59a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 0201 	bic.w	r2, r2, #1
 800a57a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2201      	movs	r2, #1
 800a582:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f82f 	bl	800a5f8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f003 0308 	and.w	r3, r3, #8
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d01b      	beq.n	800a5dc <HAL_LTDC_IRQHandler+0x140>
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 0308 	and.w	r3, r3, #8
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d016      	beq.n	800a5dc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f022 0208 	bic.w	r2, r2, #8
 800a5bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2208      	movs	r2, #8
 800a5c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f818 	bl	800a60c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a5dc:	bf00      	nop
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a620:	b5b0      	push	{r4, r5, r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a632:	2b01      	cmp	r3, #1
 800a634:	d101      	bne.n	800a63a <HAL_LTDC_ConfigLayer+0x1a>
 800a636:	2302      	movs	r3, #2
 800a638:	e02c      	b.n	800a694 <HAL_LTDC_ConfigLayer+0x74>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2202      	movs	r2, #2
 800a646:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2134      	movs	r1, #52	; 0x34
 800a650:	fb01 f303 	mul.w	r3, r1, r3
 800a654:	4413      	add	r3, r2
 800a656:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4614      	mov	r4, r2
 800a65e:	461d      	mov	r5, r3
 800a660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a66a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 f81f 	bl	800a6b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2201      	movs	r2, #1
 800a680:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bdb0      	pop	{r4, r5, r7, pc}

0800a69c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a6aa:	b2db      	uxtb	r3, r3
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b089      	sub	sp, #36	; 0x24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	0c1b      	lsrs	r3, r3, #16
 800a6d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6d4:	4413      	add	r3, r2
 800a6d6:	041b      	lsls	r3, r3, #16
 800a6d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	01db      	lsls	r3, r3, #7
 800a6e4:	4413      	add	r3, r2
 800a6e6:	3384      	adds	r3, #132	; 0x84
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	6812      	ldr	r2, [r2, #0]
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	01d2      	lsls	r2, r2, #7
 800a6f4:	440a      	add	r2, r1
 800a6f6:	3284      	adds	r2, #132	; 0x84
 800a6f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a6fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	0c1b      	lsrs	r3, r3, #16
 800a70a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a70e:	4413      	add	r3, r2
 800a710:	1c5a      	adds	r2, r3, #1
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4619      	mov	r1, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	01db      	lsls	r3, r3, #7
 800a71c:	440b      	add	r3, r1
 800a71e:	3384      	adds	r3, #132	; 0x84
 800a720:	4619      	mov	r1, r3
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	4313      	orrs	r3, r2
 800a726:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	68da      	ldr	r2, [r3, #12]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a736:	4413      	add	r3, r2
 800a738:	041b      	lsls	r3, r3, #16
 800a73a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	01db      	lsls	r3, r3, #7
 800a746:	4413      	add	r3, r2
 800a748:	3384      	adds	r3, #132	; 0x84
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	6812      	ldr	r2, [r2, #0]
 800a750:	4611      	mov	r1, r2
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	01d2      	lsls	r2, r2, #7
 800a756:	440a      	add	r2, r1
 800a758:	3284      	adds	r2, #132	; 0x84
 800a75a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a75e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a76e:	4413      	add	r3, r2
 800a770:	1c5a      	adds	r2, r3, #1
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4619      	mov	r1, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	01db      	lsls	r3, r3, #7
 800a77c:	440b      	add	r3, r1
 800a77e:	3384      	adds	r3, #132	; 0x84
 800a780:	4619      	mov	r1, r3
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	4313      	orrs	r3, r2
 800a786:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	461a      	mov	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	01db      	lsls	r3, r3, #7
 800a792:	4413      	add	r3, r2
 800a794:	3384      	adds	r3, #132	; 0x84
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	6812      	ldr	r2, [r2, #0]
 800a79c:	4611      	mov	r1, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	01d2      	lsls	r2, r2, #7
 800a7a2:	440a      	add	r2, r1
 800a7a4:	3284      	adds	r2, #132	; 0x84
 800a7a6:	f023 0307 	bic.w	r3, r3, #7
 800a7aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	01db      	lsls	r3, r3, #7
 800a7b6:	4413      	add	r3, r2
 800a7b8:	3384      	adds	r3, #132	; 0x84
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7c8:	021b      	lsls	r3, r3, #8
 800a7ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a7d2:	041b      	lsls	r3, r3, #16
 800a7d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	061b      	lsls	r3, r3, #24
 800a7dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	01db      	lsls	r3, r3, #7
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3384      	adds	r3, #132	; 0x84
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	01db      	lsls	r3, r3, #7
 800a7f8:	4413      	add	r3, r2
 800a7fa:	3384      	adds	r3, #132	; 0x84
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	2300      	movs	r3, #0
 800a800:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a808:	461a      	mov	r2, r3
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	431a      	orrs	r2, r3
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	431a      	orrs	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4619      	mov	r1, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	01db      	lsls	r3, r3, #7
 800a81c:	440b      	add	r3, r1
 800a81e:	3384      	adds	r3, #132	; 0x84
 800a820:	4619      	mov	r1, r3
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	4313      	orrs	r3, r2
 800a826:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	461a      	mov	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	01db      	lsls	r3, r3, #7
 800a832:	4413      	add	r3, r2
 800a834:	3384      	adds	r3, #132	; 0x84
 800a836:	695b      	ldr	r3, [r3, #20]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	6812      	ldr	r2, [r2, #0]
 800a83c:	4611      	mov	r1, r2
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	01d2      	lsls	r2, r2, #7
 800a842:	440a      	add	r2, r1
 800a844:	3284      	adds	r2, #132	; 0x84
 800a846:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a84a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	461a      	mov	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	01db      	lsls	r3, r3, #7
 800a856:	4413      	add	r3, r2
 800a858:	3384      	adds	r3, #132	; 0x84
 800a85a:	461a      	mov	r2, r3
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	695b      	ldr	r3, [r3, #20]
 800a860:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	01db      	lsls	r3, r3, #7
 800a86c:	4413      	add	r3, r2
 800a86e:	3384      	adds	r3, #132	; 0x84
 800a870:	69da      	ldr	r2, [r3, #28]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4619      	mov	r1, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	01db      	lsls	r3, r3, #7
 800a87c:	440b      	add	r3, r1
 800a87e:	3384      	adds	r3, #132	; 0x84
 800a880:	4619      	mov	r1, r3
 800a882:	4b58      	ldr	r3, [pc, #352]	; (800a9e4 <LTDC_SetConfig+0x32c>)
 800a884:	4013      	ands	r3, r2
 800a886:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	69da      	ldr	r2, [r3, #28]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	68f9      	ldr	r1, [r7, #12]
 800a892:	6809      	ldr	r1, [r1, #0]
 800a894:	4608      	mov	r0, r1
 800a896:	6879      	ldr	r1, [r7, #4]
 800a898:	01c9      	lsls	r1, r1, #7
 800a89a:	4401      	add	r1, r0
 800a89c:	3184      	adds	r1, #132	; 0x84
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	01db      	lsls	r3, r3, #7
 800a8ac:	4413      	add	r3, r2
 800a8ae:	3384      	adds	r3, #132	; 0x84
 800a8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	01db      	lsls	r3, r3, #7
 800a8bc:	4413      	add	r3, r2
 800a8be:	3384      	adds	r3, #132	; 0x84
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	01db      	lsls	r3, r3, #7
 800a8d0:	4413      	add	r3, r2
 800a8d2:	3384      	adds	r3, #132	; 0x84
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d102      	bne.n	800a8ea <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	e01b      	b.n	800a922 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d102      	bne.n	800a8f8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	61fb      	str	r3, [r7, #28]
 800a8f6:	e014      	b.n	800a922 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d00b      	beq.n	800a918 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a904:	2b02      	cmp	r3, #2
 800a906:	d007      	beq.n	800a918 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d003      	beq.n	800a918 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a914:	2b07      	cmp	r3, #7
 800a916:	d102      	bne.n	800a91e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a918:	2302      	movs	r3, #2
 800a91a:	61fb      	str	r3, [r7, #28]
 800a91c:	e001      	b.n	800a922 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a91e:	2301      	movs	r3, #1
 800a920:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	461a      	mov	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	01db      	lsls	r3, r3, #7
 800a92c:	4413      	add	r3, r2
 800a92e:	3384      	adds	r3, #132	; 0x84
 800a930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	6812      	ldr	r2, [r2, #0]
 800a936:	4611      	mov	r1, r2
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	01d2      	lsls	r2, r2, #7
 800a93c:	440a      	add	r2, r1
 800a93e:	3284      	adds	r2, #132	; 0x84
 800a940:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a944:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94a:	69fa      	ldr	r2, [r7, #28]
 800a94c:	fb02 f303 	mul.w	r3, r2, r3
 800a950:	041a      	lsls	r2, r3, #16
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	6859      	ldr	r1, [r3, #4]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	1acb      	subs	r3, r1, r3
 800a95c:	69f9      	ldr	r1, [r7, #28]
 800a95e:	fb01 f303 	mul.w	r3, r1, r3
 800a962:	3303      	adds	r3, #3
 800a964:	68f9      	ldr	r1, [r7, #12]
 800a966:	6809      	ldr	r1, [r1, #0]
 800a968:	4608      	mov	r0, r1
 800a96a:	6879      	ldr	r1, [r7, #4]
 800a96c:	01c9      	lsls	r1, r1, #7
 800a96e:	4401      	add	r1, r0
 800a970:	3184      	adds	r1, #132	; 0x84
 800a972:	4313      	orrs	r3, r2
 800a974:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	01db      	lsls	r3, r3, #7
 800a980:	4413      	add	r3, r2
 800a982:	3384      	adds	r3, #132	; 0x84
 800a984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4619      	mov	r1, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	01db      	lsls	r3, r3, #7
 800a990:	440b      	add	r3, r1
 800a992:	3384      	adds	r3, #132	; 0x84
 800a994:	4619      	mov	r1, r3
 800a996:	4b14      	ldr	r3, [pc, #80]	; (800a9e8 <LTDC_SetConfig+0x330>)
 800a998:	4013      	ands	r3, r2
 800a99a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	01db      	lsls	r3, r3, #7
 800a9a6:	4413      	add	r3, r2
 800a9a8:	3384      	adds	r3, #132	; 0x84
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	01db      	lsls	r3, r3, #7
 800a9bc:	4413      	add	r3, r2
 800a9be:	3384      	adds	r3, #132	; 0x84
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	01d2      	lsls	r2, r2, #7
 800a9cc:	440a      	add	r2, r1
 800a9ce:	3284      	adds	r2, #132	; 0x84
 800a9d0:	f043 0301 	orr.w	r3, r3, #1
 800a9d4:	6013      	str	r3, [r2, #0]
}
 800a9d6:	bf00      	nop
 800a9d8:	3724      	adds	r7, #36	; 0x24
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	fffff8f8 	.word	0xfffff8f8
 800a9e8:	fffff800 	.word	0xfffff800

0800a9ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9f0:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a04      	ldr	r2, [pc, #16]	; (800aa08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9fa:	6013      	str	r3, [r2, #0]
}
 800a9fc:	bf00      	nop
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	40007000 	.word	0x40007000

0800aa0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800aa16:	4b23      	ldr	r3, [pc, #140]	; (800aaa4 <HAL_PWREx_EnableOverDrive+0x98>)
 800aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1a:	4a22      	ldr	r2, [pc, #136]	; (800aaa4 <HAL_PWREx_EnableOverDrive+0x98>)
 800aa1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa20:	6413      	str	r3, [r2, #64]	; 0x40
 800aa22:	4b20      	ldr	r3, [pc, #128]	; (800aaa4 <HAL_PWREx_EnableOverDrive+0x98>)
 800aa24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800aa2e:	4b1e      	ldr	r3, [pc, #120]	; (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a1d      	ldr	r2, [pc, #116]	; (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa3a:	f7fd fca7 	bl	800838c <HAL_GetTick>
 800aa3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aa40:	e009      	b.n	800aa56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aa42:	f7fd fca3 	bl	800838c <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa50:	d901      	bls.n	800aa56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e022      	b.n	800aa9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aa56:	4b14      	ldr	r3, [pc, #80]	; (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa62:	d1ee      	bne.n	800aa42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800aa64:	4b10      	ldr	r3, [pc, #64]	; (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a0f      	ldr	r2, [pc, #60]	; (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa70:	f7fd fc8c 	bl	800838c <HAL_GetTick>
 800aa74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aa76:	e009      	b.n	800aa8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aa78:	f7fd fc88 	bl	800838c <HAL_GetTick>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa86:	d901      	bls.n	800aa8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e007      	b.n	800aa9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aa8c:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa98:	d1ee      	bne.n	800aa78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	40023800 	.word	0x40023800
 800aaa8:	40007000 	.word	0x40007000

0800aaac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800aab4:	2300      	movs	r3, #0
 800aab6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e291      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 8087 	beq.w	800abde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aad0:	4b96      	ldr	r3, [pc, #600]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	f003 030c 	and.w	r3, r3, #12
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d00c      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aadc:	4b93      	ldr	r3, [pc, #588]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	f003 030c 	and.w	r3, r3, #12
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	d112      	bne.n	800ab0e <HAL_RCC_OscConfig+0x62>
 800aae8:	4b90      	ldr	r3, [pc, #576]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaf4:	d10b      	bne.n	800ab0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaf6:	4b8d      	ldr	r3, [pc, #564]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d06c      	beq.n	800abdc <HAL_RCC_OscConfig+0x130>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d168      	bne.n	800abdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e26b      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab16:	d106      	bne.n	800ab26 <HAL_RCC_OscConfig+0x7a>
 800ab18:	4b84      	ldr	r3, [pc, #528]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a83      	ldr	r2, [pc, #524]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab22:	6013      	str	r3, [r2, #0]
 800ab24:	e02e      	b.n	800ab84 <HAL_RCC_OscConfig+0xd8>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10c      	bne.n	800ab48 <HAL_RCC_OscConfig+0x9c>
 800ab2e:	4b7f      	ldr	r3, [pc, #508]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a7e      	ldr	r2, [pc, #504]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab38:	6013      	str	r3, [r2, #0]
 800ab3a:	4b7c      	ldr	r3, [pc, #496]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a7b      	ldr	r2, [pc, #492]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab44:	6013      	str	r3, [r2, #0]
 800ab46:	e01d      	b.n	800ab84 <HAL_RCC_OscConfig+0xd8>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab50:	d10c      	bne.n	800ab6c <HAL_RCC_OscConfig+0xc0>
 800ab52:	4b76      	ldr	r3, [pc, #472]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a75      	ldr	r2, [pc, #468]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab5c:	6013      	str	r3, [r2, #0]
 800ab5e:	4b73      	ldr	r3, [pc, #460]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a72      	ldr	r2, [pc, #456]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	e00b      	b.n	800ab84 <HAL_RCC_OscConfig+0xd8>
 800ab6c:	4b6f      	ldr	r3, [pc, #444]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a6e      	ldr	r2, [pc, #440]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	4b6c      	ldr	r3, [pc, #432]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a6b      	ldr	r2, [pc, #428]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ab7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d013      	beq.n	800abb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab8c:	f7fd fbfe 	bl	800838c <HAL_GetTick>
 800ab90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab92:	e008      	b.n	800aba6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab94:	f7fd fbfa 	bl	800838c <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b64      	cmp	r3, #100	; 0x64
 800aba0:	d901      	bls.n	800aba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e21f      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aba6:	4b61      	ldr	r3, [pc, #388]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0f0      	beq.n	800ab94 <HAL_RCC_OscConfig+0xe8>
 800abb2:	e014      	b.n	800abde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abb4:	f7fd fbea 	bl	800838c <HAL_GetTick>
 800abb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abba:	e008      	b.n	800abce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abbc:	f7fd fbe6 	bl	800838c <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	2b64      	cmp	r3, #100	; 0x64
 800abc8:	d901      	bls.n	800abce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800abca:	2303      	movs	r3, #3
 800abcc:	e20b      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abce:	4b57      	ldr	r3, [pc, #348]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1f0      	bne.n	800abbc <HAL_RCC_OscConfig+0x110>
 800abda:	e000      	b.n	800abde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0302 	and.w	r3, r3, #2
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d069      	beq.n	800acbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800abea:	4b50      	ldr	r3, [pc, #320]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	f003 030c 	and.w	r3, r3, #12
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00b      	beq.n	800ac0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800abf6:	4b4d      	ldr	r3, [pc, #308]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	f003 030c 	and.w	r3, r3, #12
 800abfe:	2b08      	cmp	r3, #8
 800ac00:	d11c      	bne.n	800ac3c <HAL_RCC_OscConfig+0x190>
 800ac02:	4b4a      	ldr	r3, [pc, #296]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d116      	bne.n	800ac3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac0e:	4b47      	ldr	r3, [pc, #284]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d005      	beq.n	800ac26 <HAL_RCC_OscConfig+0x17a>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d001      	beq.n	800ac26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e1df      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac26:	4b41      	ldr	r3, [pc, #260]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	493d      	ldr	r1, [pc, #244]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac36:	4313      	orrs	r3, r2
 800ac38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac3a:	e040      	b.n	800acbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d023      	beq.n	800ac8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac44:	4b39      	ldr	r3, [pc, #228]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a38      	ldr	r2, [pc, #224]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac4a:	f043 0301 	orr.w	r3, r3, #1
 800ac4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac50:	f7fd fb9c 	bl	800838c <HAL_GetTick>
 800ac54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac56:	e008      	b.n	800ac6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac58:	f7fd fb98 	bl	800838c <HAL_GetTick>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d901      	bls.n	800ac6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e1bd      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac6a:	4b30      	ldr	r3, [pc, #192]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 0302 	and.w	r3, r3, #2
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0f0      	beq.n	800ac58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac76:	4b2d      	ldr	r3, [pc, #180]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	00db      	lsls	r3, r3, #3
 800ac84:	4929      	ldr	r1, [pc, #164]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	600b      	str	r3, [r1, #0]
 800ac8a:	e018      	b.n	800acbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac8c:	4b27      	ldr	r3, [pc, #156]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a26      	ldr	r2, [pc, #152]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ac92:	f023 0301 	bic.w	r3, r3, #1
 800ac96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac98:	f7fd fb78 	bl	800838c <HAL_GetTick>
 800ac9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac9e:	e008      	b.n	800acb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aca0:	f7fd fb74 	bl	800838c <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d901      	bls.n	800acb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e199      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acb2:	4b1e      	ldr	r3, [pc, #120]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 0302 	and.w	r3, r3, #2
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1f0      	bne.n	800aca0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 0308 	and.w	r3, r3, #8
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d038      	beq.n	800ad3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d019      	beq.n	800ad06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800acd2:	4b16      	ldr	r3, [pc, #88]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800acd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acd6:	4a15      	ldr	r2, [pc, #84]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800acd8:	f043 0301 	orr.w	r3, r3, #1
 800acdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acde:	f7fd fb55 	bl	800838c <HAL_GetTick>
 800ace2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ace4:	e008      	b.n	800acf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ace6:	f7fd fb51 	bl	800838c <HAL_GetTick>
 800acea:	4602      	mov	r2, r0
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d901      	bls.n	800acf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800acf4:	2303      	movs	r3, #3
 800acf6:	e176      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800acfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acfc:	f003 0302 	and.w	r3, r3, #2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d0f0      	beq.n	800ace6 <HAL_RCC_OscConfig+0x23a>
 800ad04:	e01a      	b.n	800ad3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad06:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ad08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad0a:	4a08      	ldr	r2, [pc, #32]	; (800ad2c <HAL_RCC_OscConfig+0x280>)
 800ad0c:	f023 0301 	bic.w	r3, r3, #1
 800ad10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad12:	f7fd fb3b 	bl	800838c <HAL_GetTick>
 800ad16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad18:	e00a      	b.n	800ad30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad1a:	f7fd fb37 	bl	800838c <HAL_GetTick>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d903      	bls.n	800ad30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e15c      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
 800ad2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad30:	4b91      	ldr	r3, [pc, #580]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ad32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad34:	f003 0302 	and.w	r3, r3, #2
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1ee      	bne.n	800ad1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 0304 	and.w	r3, r3, #4
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 80a4 	beq.w	800ae92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad4a:	4b8b      	ldr	r3, [pc, #556]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10d      	bne.n	800ad72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad56:	4b88      	ldr	r3, [pc, #544]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	4a87      	ldr	r2, [pc, #540]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ad5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad60:	6413      	str	r3, [r2, #64]	; 0x40
 800ad62:	4b85      	ldr	r3, [pc, #532]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ad64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad6a:	60bb      	str	r3, [r7, #8]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ad72:	4b82      	ldr	r3, [pc, #520]	; (800af7c <HAL_RCC_OscConfig+0x4d0>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d118      	bne.n	800adb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800ad7e:	4b7f      	ldr	r3, [pc, #508]	; (800af7c <HAL_RCC_OscConfig+0x4d0>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a7e      	ldr	r2, [pc, #504]	; (800af7c <HAL_RCC_OscConfig+0x4d0>)
 800ad84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad8a:	f7fd faff 	bl	800838c <HAL_GetTick>
 800ad8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ad90:	e008      	b.n	800ada4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad92:	f7fd fafb 	bl	800838c <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	2b64      	cmp	r3, #100	; 0x64
 800ad9e:	d901      	bls.n	800ada4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e120      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ada4:	4b75      	ldr	r3, [pc, #468]	; (800af7c <HAL_RCC_OscConfig+0x4d0>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adac:	2b00      	cmp	r3, #0
 800adae:	d0f0      	beq.n	800ad92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d106      	bne.n	800adc6 <HAL_RCC_OscConfig+0x31a>
 800adb8:	4b6f      	ldr	r3, [pc, #444]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800adba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adbc:	4a6e      	ldr	r2, [pc, #440]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800adbe:	f043 0301 	orr.w	r3, r3, #1
 800adc2:	6713      	str	r3, [r2, #112]	; 0x70
 800adc4:	e02d      	b.n	800ae22 <HAL_RCC_OscConfig+0x376>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10c      	bne.n	800ade8 <HAL_RCC_OscConfig+0x33c>
 800adce:	4b6a      	ldr	r3, [pc, #424]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800add0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add2:	4a69      	ldr	r2, [pc, #420]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800add4:	f023 0301 	bic.w	r3, r3, #1
 800add8:	6713      	str	r3, [r2, #112]	; 0x70
 800adda:	4b67      	ldr	r3, [pc, #412]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800addc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adde:	4a66      	ldr	r2, [pc, #408]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ade0:	f023 0304 	bic.w	r3, r3, #4
 800ade4:	6713      	str	r3, [r2, #112]	; 0x70
 800ade6:	e01c      	b.n	800ae22 <HAL_RCC_OscConfig+0x376>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	2b05      	cmp	r3, #5
 800adee:	d10c      	bne.n	800ae0a <HAL_RCC_OscConfig+0x35e>
 800adf0:	4b61      	ldr	r3, [pc, #388]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800adf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf4:	4a60      	ldr	r2, [pc, #384]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800adf6:	f043 0304 	orr.w	r3, r3, #4
 800adfa:	6713      	str	r3, [r2, #112]	; 0x70
 800adfc:	4b5e      	ldr	r3, [pc, #376]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800adfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae00:	4a5d      	ldr	r2, [pc, #372]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ae02:	f043 0301 	orr.w	r3, r3, #1
 800ae06:	6713      	str	r3, [r2, #112]	; 0x70
 800ae08:	e00b      	b.n	800ae22 <HAL_RCC_OscConfig+0x376>
 800ae0a:	4b5b      	ldr	r3, [pc, #364]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ae0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae0e:	4a5a      	ldr	r2, [pc, #360]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ae10:	f023 0301 	bic.w	r3, r3, #1
 800ae14:	6713      	str	r3, [r2, #112]	; 0x70
 800ae16:	4b58      	ldr	r3, [pc, #352]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ae18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1a:	4a57      	ldr	r2, [pc, #348]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ae1c:	f023 0304 	bic.w	r3, r3, #4
 800ae20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d015      	beq.n	800ae56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae2a:	f7fd faaf 	bl	800838c <HAL_GetTick>
 800ae2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae30:	e00a      	b.n	800ae48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae32:	f7fd faab 	bl	800838c <HAL_GetTick>
 800ae36:	4602      	mov	r2, r0
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d901      	bls.n	800ae48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e0ce      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae48:	4b4b      	ldr	r3, [pc, #300]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ae4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d0ee      	beq.n	800ae32 <HAL_RCC_OscConfig+0x386>
 800ae54:	e014      	b.n	800ae80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae56:	f7fd fa99 	bl	800838c <HAL_GetTick>
 800ae5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae5c:	e00a      	b.n	800ae74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae5e:	f7fd fa95 	bl	800838c <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d901      	bls.n	800ae74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e0b8      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae74:	4b40      	ldr	r3, [pc, #256]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ae76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae78:	f003 0302 	and.w	r3, r3, #2
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1ee      	bne.n	800ae5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d105      	bne.n	800ae92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae86:	4b3c      	ldr	r3, [pc, #240]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ae88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8a:	4a3b      	ldr	r2, [pc, #236]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ae8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f000 80a4 	beq.w	800afe4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae9c:	4b36      	ldr	r3, [pc, #216]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f003 030c 	and.w	r3, r3, #12
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d06b      	beq.n	800af80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	699b      	ldr	r3, [r3, #24]
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d149      	bne.n	800af44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aeb0:	4b31      	ldr	r3, [pc, #196]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a30      	ldr	r2, [pc, #192]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800aeb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aeba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aebc:	f7fd fa66 	bl	800838c <HAL_GetTick>
 800aec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aec2:	e008      	b.n	800aed6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aec4:	f7fd fa62 	bl	800838c <HAL_GetTick>
 800aec8:	4602      	mov	r2, r0
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d901      	bls.n	800aed6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800aed2:	2303      	movs	r3, #3
 800aed4:	e087      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aed6:	4b28      	ldr	r3, [pc, #160]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1f0      	bne.n	800aec4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	69da      	ldr	r2, [r3, #28]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	431a      	orrs	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	019b      	lsls	r3, r3, #6
 800aef2:	431a      	orrs	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef8:	085b      	lsrs	r3, r3, #1
 800aefa:	3b01      	subs	r3, #1
 800aefc:	041b      	lsls	r3, r3, #16
 800aefe:	431a      	orrs	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	061b      	lsls	r3, r3, #24
 800af06:	4313      	orrs	r3, r2
 800af08:	4a1b      	ldr	r2, [pc, #108]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800af0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af10:	4b19      	ldr	r3, [pc, #100]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a18      	ldr	r2, [pc, #96]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800af16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af1c:	f7fd fa36 	bl	800838c <HAL_GetTick>
 800af20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af22:	e008      	b.n	800af36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af24:	f7fd fa32 	bl	800838c <HAL_GetTick>
 800af28:	4602      	mov	r2, r0
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d901      	bls.n	800af36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800af32:	2303      	movs	r3, #3
 800af34:	e057      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af36:	4b10      	ldr	r3, [pc, #64]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0f0      	beq.n	800af24 <HAL_RCC_OscConfig+0x478>
 800af42:	e04f      	b.n	800afe4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af44:	4b0c      	ldr	r3, [pc, #48]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a0b      	ldr	r2, [pc, #44]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800af4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af50:	f7fd fa1c 	bl	800838c <HAL_GetTick>
 800af54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af56:	e008      	b.n	800af6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af58:	f7fd fa18 	bl	800838c <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	2b02      	cmp	r3, #2
 800af64:	d901      	bls.n	800af6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	e03d      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af6a:	4b03      	ldr	r3, [pc, #12]	; (800af78 <HAL_RCC_OscConfig+0x4cc>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1f0      	bne.n	800af58 <HAL_RCC_OscConfig+0x4ac>
 800af76:	e035      	b.n	800afe4 <HAL_RCC_OscConfig+0x538>
 800af78:	40023800 	.word	0x40023800
 800af7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800af80:	4b1b      	ldr	r3, [pc, #108]	; (800aff0 <HAL_RCC_OscConfig+0x544>)
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d028      	beq.n	800afe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af98:	429a      	cmp	r2, r3
 800af9a:	d121      	bne.n	800afe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d11a      	bne.n	800afe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800afb0:	4013      	ands	r3, r2
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800afb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800afb8:	4293      	cmp	r3, r2
 800afba:	d111      	bne.n	800afe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc6:	085b      	lsrs	r3, r3, #1
 800afc8:	3b01      	subs	r3, #1
 800afca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800afcc:	429a      	cmp	r2, r3
 800afce:	d107      	bne.n	800afe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800afdc:	429a      	cmp	r2, r3
 800afde:	d001      	beq.n	800afe4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e000      	b.n	800afe6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	40023800 	.word	0x40023800

0800aff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d101      	bne.n	800b00c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e0d0      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b00c:	4b6a      	ldr	r3, [pc, #424]	; (800b1b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 030f 	and.w	r3, r3, #15
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d910      	bls.n	800b03c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b01a:	4b67      	ldr	r3, [pc, #412]	; (800b1b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f023 020f 	bic.w	r2, r3, #15
 800b022:	4965      	ldr	r1, [pc, #404]	; (800b1b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	4313      	orrs	r3, r2
 800b028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b02a:	4b63      	ldr	r3, [pc, #396]	; (800b1b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f003 030f 	and.w	r3, r3, #15
 800b032:	683a      	ldr	r2, [r7, #0]
 800b034:	429a      	cmp	r2, r3
 800b036:	d001      	beq.n	800b03c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e0b8      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0302 	and.w	r3, r3, #2
 800b044:	2b00      	cmp	r3, #0
 800b046:	d020      	beq.n	800b08a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 0304 	and.w	r3, r3, #4
 800b050:	2b00      	cmp	r3, #0
 800b052:	d005      	beq.n	800b060 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b054:	4b59      	ldr	r3, [pc, #356]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	4a58      	ldr	r2, [pc, #352]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b05a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b05e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 0308 	and.w	r3, r3, #8
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d005      	beq.n	800b078 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b06c:	4b53      	ldr	r3, [pc, #332]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	4a52      	ldr	r2, [pc, #328]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b078:	4b50      	ldr	r3, [pc, #320]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	494d      	ldr	r1, [pc, #308]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b086:	4313      	orrs	r3, r2
 800b088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0301 	and.w	r3, r3, #1
 800b092:	2b00      	cmp	r3, #0
 800b094:	d040      	beq.n	800b118 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d107      	bne.n	800b0ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b09e:	4b47      	ldr	r3, [pc, #284]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d115      	bne.n	800b0d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e07f      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d107      	bne.n	800b0c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0b6:	4b41      	ldr	r3, [pc, #260]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d109      	bne.n	800b0d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e073      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0c6:	4b3d      	ldr	r3, [pc, #244]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0302 	and.w	r3, r3, #2
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e06b      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b0d6:	4b39      	ldr	r3, [pc, #228]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f023 0203 	bic.w	r2, r3, #3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	4936      	ldr	r1, [pc, #216]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0e8:	f7fd f950 	bl	800838c <HAL_GetTick>
 800b0ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0ee:	e00a      	b.n	800b106 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0f0:	f7fd f94c 	bl	800838c <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d901      	bls.n	800b106 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	e053      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b106:	4b2d      	ldr	r3, [pc, #180]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	f003 020c 	and.w	r2, r3, #12
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	429a      	cmp	r2, r3
 800b116:	d1eb      	bne.n	800b0f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b118:	4b27      	ldr	r3, [pc, #156]	; (800b1b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 030f 	and.w	r3, r3, #15
 800b120:	683a      	ldr	r2, [r7, #0]
 800b122:	429a      	cmp	r2, r3
 800b124:	d210      	bcs.n	800b148 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b126:	4b24      	ldr	r3, [pc, #144]	; (800b1b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f023 020f 	bic.w	r2, r3, #15
 800b12e:	4922      	ldr	r1, [pc, #136]	; (800b1b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	4313      	orrs	r3, r2
 800b134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b136:	4b20      	ldr	r3, [pc, #128]	; (800b1b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 030f 	and.w	r3, r3, #15
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	429a      	cmp	r2, r3
 800b142:	d001      	beq.n	800b148 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e032      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0304 	and.w	r3, r3, #4
 800b150:	2b00      	cmp	r3, #0
 800b152:	d008      	beq.n	800b166 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b154:	4b19      	ldr	r3, [pc, #100]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	4916      	ldr	r1, [pc, #88]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b162:	4313      	orrs	r3, r2
 800b164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d009      	beq.n	800b186 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b172:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	490e      	ldr	r1, [pc, #56]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b182:	4313      	orrs	r3, r2
 800b184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b186:	f000 f821 	bl	800b1cc <HAL_RCC_GetSysClockFreq>
 800b18a:	4602      	mov	r2, r0
 800b18c:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <HAL_RCC_ClockConfig+0x1c8>)
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	091b      	lsrs	r3, r3, #4
 800b192:	f003 030f 	and.w	r3, r3, #15
 800b196:	490a      	ldr	r1, [pc, #40]	; (800b1c0 <HAL_RCC_ClockConfig+0x1cc>)
 800b198:	5ccb      	ldrb	r3, [r1, r3]
 800b19a:	fa22 f303 	lsr.w	r3, r2, r3
 800b19e:	4a09      	ldr	r2, [pc, #36]	; (800b1c4 <HAL_RCC_ClockConfig+0x1d0>)
 800b1a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b1a2:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <HAL_RCC_ClockConfig+0x1d4>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fb fb34 	bl	8006814 <HAL_InitTick>

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	40023c00 	.word	0x40023c00
 800b1bc:	40023800 	.word	0x40023800
 800b1c0:	0801a2fc 	.word	0x0801a2fc
 800b1c4:	20000300 	.word	0x20000300
 800b1c8:	20000340 	.word	0x20000340

0800b1cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1cc:	b5b0      	push	{r4, r5, r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	6079      	str	r1, [r7, #4]
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	60f9      	str	r1, [r7, #12]
 800b1da:	2100      	movs	r1, #0
 800b1dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b1de:	2100      	movs	r1, #0
 800b1e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1e2:	4952      	ldr	r1, [pc, #328]	; (800b32c <HAL_RCC_GetSysClockFreq+0x160>)
 800b1e4:	6889      	ldr	r1, [r1, #8]
 800b1e6:	f001 010c 	and.w	r1, r1, #12
 800b1ea:	2908      	cmp	r1, #8
 800b1ec:	d00d      	beq.n	800b20a <HAL_RCC_GetSysClockFreq+0x3e>
 800b1ee:	2908      	cmp	r1, #8
 800b1f0:	f200 8094 	bhi.w	800b31c <HAL_RCC_GetSysClockFreq+0x150>
 800b1f4:	2900      	cmp	r1, #0
 800b1f6:	d002      	beq.n	800b1fe <HAL_RCC_GetSysClockFreq+0x32>
 800b1f8:	2904      	cmp	r1, #4
 800b1fa:	d003      	beq.n	800b204 <HAL_RCC_GetSysClockFreq+0x38>
 800b1fc:	e08e      	b.n	800b31c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b1fe:	4b4c      	ldr	r3, [pc, #304]	; (800b330 <HAL_RCC_GetSysClockFreq+0x164>)
 800b200:	60bb      	str	r3, [r7, #8]
      break;
 800b202:	e08e      	b.n	800b322 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b204:	4b4b      	ldr	r3, [pc, #300]	; (800b334 <HAL_RCC_GetSysClockFreq+0x168>)
 800b206:	60bb      	str	r3, [r7, #8]
      break;
 800b208:	e08b      	b.n	800b322 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b20a:	4948      	ldr	r1, [pc, #288]	; (800b32c <HAL_RCC_GetSysClockFreq+0x160>)
 800b20c:	6849      	ldr	r1, [r1, #4]
 800b20e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b212:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b214:	4945      	ldr	r1, [pc, #276]	; (800b32c <HAL_RCC_GetSysClockFreq+0x160>)
 800b216:	6849      	ldr	r1, [r1, #4]
 800b218:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b21c:	2900      	cmp	r1, #0
 800b21e:	d024      	beq.n	800b26a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b220:	4942      	ldr	r1, [pc, #264]	; (800b32c <HAL_RCC_GetSysClockFreq+0x160>)
 800b222:	6849      	ldr	r1, [r1, #4]
 800b224:	0989      	lsrs	r1, r1, #6
 800b226:	4608      	mov	r0, r1
 800b228:	f04f 0100 	mov.w	r1, #0
 800b22c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b230:	f04f 0500 	mov.w	r5, #0
 800b234:	ea00 0204 	and.w	r2, r0, r4
 800b238:	ea01 0305 	and.w	r3, r1, r5
 800b23c:	493d      	ldr	r1, [pc, #244]	; (800b334 <HAL_RCC_GetSysClockFreq+0x168>)
 800b23e:	fb01 f003 	mul.w	r0, r1, r3
 800b242:	2100      	movs	r1, #0
 800b244:	fb01 f102 	mul.w	r1, r1, r2
 800b248:	1844      	adds	r4, r0, r1
 800b24a:	493a      	ldr	r1, [pc, #232]	; (800b334 <HAL_RCC_GetSysClockFreq+0x168>)
 800b24c:	fba2 0101 	umull	r0, r1, r2, r1
 800b250:	1863      	adds	r3, r4, r1
 800b252:	4619      	mov	r1, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	461a      	mov	r2, r3
 800b258:	f04f 0300 	mov.w	r3, #0
 800b25c:	f7f5 f830 	bl	80002c0 <__aeabi_uldivmod>
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	4613      	mov	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	e04a      	b.n	800b300 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b26a:	4b30      	ldr	r3, [pc, #192]	; (800b32c <HAL_RCC_GetSysClockFreq+0x160>)
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	099b      	lsrs	r3, r3, #6
 800b270:	461a      	mov	r2, r3
 800b272:	f04f 0300 	mov.w	r3, #0
 800b276:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b27a:	f04f 0100 	mov.w	r1, #0
 800b27e:	ea02 0400 	and.w	r4, r2, r0
 800b282:	ea03 0501 	and.w	r5, r3, r1
 800b286:	4620      	mov	r0, r4
 800b288:	4629      	mov	r1, r5
 800b28a:	f04f 0200 	mov.w	r2, #0
 800b28e:	f04f 0300 	mov.w	r3, #0
 800b292:	014b      	lsls	r3, r1, #5
 800b294:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b298:	0142      	lsls	r2, r0, #5
 800b29a:	4610      	mov	r0, r2
 800b29c:	4619      	mov	r1, r3
 800b29e:	1b00      	subs	r0, r0, r4
 800b2a0:	eb61 0105 	sbc.w	r1, r1, r5
 800b2a4:	f04f 0200 	mov.w	r2, #0
 800b2a8:	f04f 0300 	mov.w	r3, #0
 800b2ac:	018b      	lsls	r3, r1, #6
 800b2ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b2b2:	0182      	lsls	r2, r0, #6
 800b2b4:	1a12      	subs	r2, r2, r0
 800b2b6:	eb63 0301 	sbc.w	r3, r3, r1
 800b2ba:	f04f 0000 	mov.w	r0, #0
 800b2be:	f04f 0100 	mov.w	r1, #0
 800b2c2:	00d9      	lsls	r1, r3, #3
 800b2c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b2c8:	00d0      	lsls	r0, r2, #3
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	1912      	adds	r2, r2, r4
 800b2d0:	eb45 0303 	adc.w	r3, r5, r3
 800b2d4:	f04f 0000 	mov.w	r0, #0
 800b2d8:	f04f 0100 	mov.w	r1, #0
 800b2dc:	0299      	lsls	r1, r3, #10
 800b2de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b2e2:	0290      	lsls	r0, r2, #10
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f04f 0300 	mov.w	r3, #0
 800b2f4:	f7f4 ffe4 	bl	80002c0 <__aeabi_uldivmod>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <HAL_RCC_GetSysClockFreq+0x160>)
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	0c1b      	lsrs	r3, r3, #16
 800b306:	f003 0303 	and.w	r3, r3, #3
 800b30a:	3301      	adds	r3, #1
 800b30c:	005b      	lsls	r3, r3, #1
 800b30e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	fbb2 f3f3 	udiv	r3, r2, r3
 800b318:	60bb      	str	r3, [r7, #8]
      break;
 800b31a:	e002      	b.n	800b322 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b31c:	4b04      	ldr	r3, [pc, #16]	; (800b330 <HAL_RCC_GetSysClockFreq+0x164>)
 800b31e:	60bb      	str	r3, [r7, #8]
      break;
 800b320:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b322:	68bb      	ldr	r3, [r7, #8]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bdb0      	pop	{r4, r5, r7, pc}
 800b32c:	40023800 	.word	0x40023800
 800b330:	00f42400 	.word	0x00f42400
 800b334:	017d7840 	.word	0x017d7840

0800b338 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b338:	b480      	push	{r7}
 800b33a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b33c:	4b03      	ldr	r3, [pc, #12]	; (800b34c <HAL_RCC_GetHCLKFreq+0x14>)
 800b33e:	681b      	ldr	r3, [r3, #0]
}
 800b340:	4618      	mov	r0, r3
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	20000300 	.word	0x20000300

0800b350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b354:	f7ff fff0 	bl	800b338 <HAL_RCC_GetHCLKFreq>
 800b358:	4602      	mov	r2, r0
 800b35a:	4b05      	ldr	r3, [pc, #20]	; (800b370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	0a9b      	lsrs	r3, r3, #10
 800b360:	f003 0307 	and.w	r3, r3, #7
 800b364:	4903      	ldr	r1, [pc, #12]	; (800b374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b366:	5ccb      	ldrb	r3, [r1, r3]
 800b368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	40023800 	.word	0x40023800
 800b374:	0801a30c 	.word	0x0801a30c

0800b378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b37c:	f7ff ffdc 	bl	800b338 <HAL_RCC_GetHCLKFreq>
 800b380:	4602      	mov	r2, r0
 800b382:	4b05      	ldr	r3, [pc, #20]	; (800b398 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	0b5b      	lsrs	r3, r3, #13
 800b388:	f003 0307 	and.w	r3, r3, #7
 800b38c:	4903      	ldr	r1, [pc, #12]	; (800b39c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b38e:	5ccb      	ldrb	r3, [r1, r3]
 800b390:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b394:	4618      	mov	r0, r3
 800b396:	bd80      	pop	{r7, pc}
 800b398:	40023800 	.word	0x40023800
 800b39c:	0801a30c 	.word	0x0801a30c

0800b3a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	220f      	movs	r2, #15
 800b3ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b3b0:	4b12      	ldr	r3, [pc, #72]	; (800b3fc <HAL_RCC_GetClockConfig+0x5c>)
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	f003 0203 	and.w	r2, r3, #3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b3bc:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <HAL_RCC_GetClockConfig+0x5c>)
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b3c8:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <HAL_RCC_GetClockConfig+0x5c>)
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b3d4:	4b09      	ldr	r3, [pc, #36]	; (800b3fc <HAL_RCC_GetClockConfig+0x5c>)
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	08db      	lsrs	r3, r3, #3
 800b3da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b3e2:	4b07      	ldr	r3, [pc, #28]	; (800b400 <HAL_RCC_GetClockConfig+0x60>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 020f 	and.w	r2, r3, #15
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	601a      	str	r2, [r3, #0]
}
 800b3ee:	bf00      	nop
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	40023800 	.word	0x40023800
 800b400:	40023c00 	.word	0x40023c00

0800b404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b088      	sub	sp, #32
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b40c:	2300      	movs	r3, #0
 800b40e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b410:	2300      	movs	r3, #0
 800b412:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b414:	2300      	movs	r3, #0
 800b416:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b418:	2300      	movs	r3, #0
 800b41a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d012      	beq.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b42c:	4b69      	ldr	r3, [pc, #420]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	4a68      	ldr	r2, [pc, #416]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b432:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b436:	6093      	str	r3, [r2, #8]
 800b438:	4b66      	ldr	r3, [pc, #408]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b440:	4964      	ldr	r1, [pc, #400]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b442:	4313      	orrs	r3, r2
 800b444:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b44e:	2301      	movs	r3, #1
 800b450:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d017      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b45e:	4b5d      	ldr	r3, [pc, #372]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46c:	4959      	ldr	r1, [pc, #356]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b47c:	d101      	bne.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b47e:	2301      	movs	r3, #1
 800b480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b48a:	2301      	movs	r3, #1
 800b48c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b496:	2b00      	cmp	r3, #0
 800b498:	d017      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b49a:	4b4e      	ldr	r3, [pc, #312]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b49c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a8:	494a      	ldr	r1, [pc, #296]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4b8:	d101      	bne.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d001      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 0320 	and.w	r3, r3, #32
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f000 808b 	beq.w	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b4e8:	4b3a      	ldr	r3, [pc, #232]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ec:	4a39      	ldr	r2, [pc, #228]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4f2:	6413      	str	r3, [r2, #64]	; 0x40
 800b4f4:	4b37      	ldr	r3, [pc, #220]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4fc:	60bb      	str	r3, [r7, #8]
 800b4fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b500:	4b35      	ldr	r3, [pc, #212]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a34      	ldr	r2, [pc, #208]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b50a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b50c:	f7fc ff3e 	bl	800838c <HAL_GetTick>
 800b510:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b512:	e008      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b514:	f7fc ff3a 	bl	800838c <HAL_GetTick>
 800b518:	4602      	mov	r2, r0
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	1ad3      	subs	r3, r2, r3
 800b51e:	2b64      	cmp	r3, #100	; 0x64
 800b520:	d901      	bls.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e357      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b526:	4b2c      	ldr	r3, [pc, #176]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0f0      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b532:	4b28      	ldr	r3, [pc, #160]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b53a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d035      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d02e      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b550:	4b20      	ldr	r3, [pc, #128]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b558:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b55a:	4b1e      	ldr	r3, [pc, #120]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b55c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55e:	4a1d      	ldr	r2, [pc, #116]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b564:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b566:	4b1b      	ldr	r3, [pc, #108]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b56a:	4a1a      	ldr	r2, [pc, #104]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b56c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b570:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b572:	4a18      	ldr	r2, [pc, #96]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b578:	4b16      	ldr	r3, [pc, #88]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b57a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b57c:	f003 0301 	and.w	r3, r3, #1
 800b580:	2b01      	cmp	r3, #1
 800b582:	d114      	bne.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b584:	f7fc ff02 	bl	800838c <HAL_GetTick>
 800b588:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b58a:	e00a      	b.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b58c:	f7fc fefe 	bl	800838c <HAL_GetTick>
 800b590:	4602      	mov	r2, r0
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	f241 3288 	movw	r2, #5000	; 0x1388
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d901      	bls.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b59e:	2303      	movs	r3, #3
 800b5a0:	e319      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5a2:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a6:	f003 0302 	and.w	r3, r3, #2
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d0ee      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ba:	d111      	bne.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b5bc:	4b05      	ldr	r3, [pc, #20]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b5c8:	4b04      	ldr	r3, [pc, #16]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b5ca:	400b      	ands	r3, r1
 800b5cc:	4901      	ldr	r1, [pc, #4]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	608b      	str	r3, [r1, #8]
 800b5d2:	e00b      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b5d4:	40023800 	.word	0x40023800
 800b5d8:	40007000 	.word	0x40007000
 800b5dc:	0ffffcff 	.word	0x0ffffcff
 800b5e0:	4bb1      	ldr	r3, [pc, #708]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	4ab0      	ldr	r2, [pc, #704]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b5e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b5ea:	6093      	str	r3, [r2, #8]
 800b5ec:	4bae      	ldr	r3, [pc, #696]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b5ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5f8:	49ab      	ldr	r1, [pc, #684]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 0310 	and.w	r3, r3, #16
 800b606:	2b00      	cmp	r3, #0
 800b608:	d010      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b60a:	4ba7      	ldr	r3, [pc, #668]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b60c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b610:	4aa5      	ldr	r2, [pc, #660]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b616:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b61a:	4ba3      	ldr	r3, [pc, #652]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b61c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b624:	49a0      	ldr	r1, [pc, #640]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b626:	4313      	orrs	r3, r2
 800b628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00a      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b638:	4b9b      	ldr	r3, [pc, #620]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b63e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b646:	4998      	ldr	r1, [pc, #608]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b648:	4313      	orrs	r3, r2
 800b64a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00a      	beq.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b65a:	4b93      	ldr	r3, [pc, #588]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b668:	498f      	ldr	r1, [pc, #572]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b66a:	4313      	orrs	r3, r2
 800b66c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00a      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b67c:	4b8a      	ldr	r3, [pc, #552]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b67e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b68a:	4987      	ldr	r1, [pc, #540]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b68c:	4313      	orrs	r3, r2
 800b68e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00a      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b69e:	4b82      	ldr	r3, [pc, #520]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ac:	497e      	ldr	r1, [pc, #504]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00a      	beq.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b6c0:	4b79      	ldr	r3, [pc, #484]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c6:	f023 0203 	bic.w	r2, r3, #3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ce:	4976      	ldr	r1, [pc, #472]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00a      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b6e2:	4b71      	ldr	r3, [pc, #452]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b6e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6e8:	f023 020c 	bic.w	r2, r3, #12
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6f0:	496d      	ldr	r1, [pc, #436]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00a      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b704:	4b68      	ldr	r3, [pc, #416]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b70a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b712:	4965      	ldr	r1, [pc, #404]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b714:	4313      	orrs	r3, r2
 800b716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00a      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b726:	4b60      	ldr	r3, [pc, #384]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b72c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b734:	495c      	ldr	r1, [pc, #368]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b736:	4313      	orrs	r3, r2
 800b738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00a      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b748:	4b57      	ldr	r3, [pc, #348]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b74a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b74e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b756:	4954      	ldr	r1, [pc, #336]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b758:	4313      	orrs	r3, r2
 800b75a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00a      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b76a:	4b4f      	ldr	r3, [pc, #316]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b770:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b778:	494b      	ldr	r1, [pc, #300]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00a      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b78c:	4b46      	ldr	r3, [pc, #280]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b792:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b79a:	4943      	ldr	r1, [pc, #268]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b79c:	4313      	orrs	r3, r2
 800b79e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00a      	beq.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b7ae:	4b3e      	ldr	r3, [pc, #248]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7bc:	493a      	ldr	r1, [pc, #232]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00a      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b7d0:	4b35      	ldr	r3, [pc, #212]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7de:	4932      	ldr	r1, [pc, #200]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d011      	beq.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b7f2:	4b2d      	ldr	r3, [pc, #180]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b800:	4929      	ldr	r1, [pc, #164]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b802:	4313      	orrs	r3, r2
 800b804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b80c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b810:	d101      	bne.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b812:	2301      	movs	r3, #1
 800b814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 0308 	and.w	r3, r3, #8
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b822:	2301      	movs	r3, #1
 800b824:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00a      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b832:	4b1d      	ldr	r3, [pc, #116]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b838:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b840:	4919      	ldr	r1, [pc, #100]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b842:	4313      	orrs	r3, r2
 800b844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00b      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b854:	4b14      	ldr	r3, [pc, #80]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b85a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b864:	4910      	ldr	r1, [pc, #64]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b866:	4313      	orrs	r3, r2
 800b868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d006      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80d9 	beq.w	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b880:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a08      	ldr	r2, [pc, #32]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b88a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b88c:	f7fc fd7e 	bl	800838c <HAL_GetTick>
 800b890:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b892:	e00b      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b894:	f7fc fd7a 	bl	800838c <HAL_GetTick>
 800b898:	4602      	mov	r2, r0
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	2b64      	cmp	r3, #100	; 0x64
 800b8a0:	d904      	bls.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e197      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b8a6:	bf00      	nop
 800b8a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b8ac:	4b6c      	ldr	r3, [pc, #432]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1ed      	bne.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 0301 	and.w	r3, r3, #1
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d021      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d11d      	bne.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b8cc:	4b64      	ldr	r3, [pc, #400]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8d2:	0c1b      	lsrs	r3, r3, #16
 800b8d4:	f003 0303 	and.w	r3, r3, #3
 800b8d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b8da:	4b61      	ldr	r3, [pc, #388]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8e0:	0e1b      	lsrs	r3, r3, #24
 800b8e2:	f003 030f 	and.w	r3, r3, #15
 800b8e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	019a      	lsls	r2, r3, #6
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	041b      	lsls	r3, r3, #16
 800b8f2:	431a      	orrs	r2, r3
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	061b      	lsls	r3, r3, #24
 800b8f8:	431a      	orrs	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	071b      	lsls	r3, r3, #28
 800b900:	4957      	ldr	r1, [pc, #348]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b902:	4313      	orrs	r3, r2
 800b904:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d004      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b91c:	d00a      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b926:	2b00      	cmp	r3, #0
 800b928:	d02e      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b932:	d129      	bne.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b934:	4b4a      	ldr	r3, [pc, #296]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b93a:	0c1b      	lsrs	r3, r3, #16
 800b93c:	f003 0303 	and.w	r3, r3, #3
 800b940:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b942:	4b47      	ldr	r3, [pc, #284]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b948:	0f1b      	lsrs	r3, r3, #28
 800b94a:	f003 0307 	and.w	r3, r3, #7
 800b94e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	019a      	lsls	r2, r3, #6
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	041b      	lsls	r3, r3, #16
 800b95a:	431a      	orrs	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	061b      	lsls	r3, r3, #24
 800b962:	431a      	orrs	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	071b      	lsls	r3, r3, #28
 800b968:	493d      	ldr	r1, [pc, #244]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b96a:	4313      	orrs	r3, r2
 800b96c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b970:	4b3b      	ldr	r3, [pc, #236]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b976:	f023 021f 	bic.w	r2, r3, #31
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97e:	3b01      	subs	r3, #1
 800b980:	4937      	ldr	r1, [pc, #220]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b982:	4313      	orrs	r3, r2
 800b984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d01d      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b994:	4b32      	ldr	r3, [pc, #200]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b99a:	0e1b      	lsrs	r3, r3, #24
 800b99c:	f003 030f 	and.w	r3, r3, #15
 800b9a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b9a2:	4b2f      	ldr	r3, [pc, #188]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9a8:	0f1b      	lsrs	r3, r3, #28
 800b9aa:	f003 0307 	and.w	r3, r3, #7
 800b9ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	019a      	lsls	r2, r3, #6
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	041b      	lsls	r3, r3, #16
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	061b      	lsls	r3, r3, #24
 800b9c2:	431a      	orrs	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	071b      	lsls	r3, r3, #28
 800b9c8:	4925      	ldr	r1, [pc, #148]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d011      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	019a      	lsls	r2, r3, #6
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	041b      	lsls	r3, r3, #16
 800b9e8:	431a      	orrs	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	061b      	lsls	r3, r3, #24
 800b9f0:	431a      	orrs	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	071b      	lsls	r3, r3, #28
 800b9f8:	4919      	ldr	r1, [pc, #100]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ba00:	4b17      	ldr	r3, [pc, #92]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a16      	ldr	r2, [pc, #88]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ba0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba0c:	f7fc fcbe 	bl	800838c <HAL_GetTick>
 800ba10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ba12:	e008      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ba14:	f7fc fcba 	bl	800838c <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	2b64      	cmp	r3, #100	; 0x64
 800ba20:	d901      	bls.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba22:	2303      	movs	r3, #3
 800ba24:	e0d7      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ba26:	4b0e      	ldr	r3, [pc, #56]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0f0      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	f040 80cd 	bne.w	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ba3a:	4b09      	ldr	r3, [pc, #36]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a08      	ldr	r2, [pc, #32]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba46:	f7fc fca1 	bl	800838c <HAL_GetTick>
 800ba4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ba4c:	e00a      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ba4e:	f7fc fc9d 	bl	800838c <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	2b64      	cmp	r3, #100	; 0x64
 800ba5a:	d903      	bls.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e0ba      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ba60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ba64:	4b5e      	ldr	r3, [pc, #376]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba70:	d0ed      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d003      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d009      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d02e      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d12a      	bne.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ba9a:	4b51      	ldr	r3, [pc, #324]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ba9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baa0:	0c1b      	lsrs	r3, r3, #16
 800baa2:	f003 0303 	and.w	r3, r3, #3
 800baa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800baa8:	4b4d      	ldr	r3, [pc, #308]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800baaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baae:	0f1b      	lsrs	r3, r3, #28
 800bab0:	f003 0307 	and.w	r3, r3, #7
 800bab4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	019a      	lsls	r2, r3, #6
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	041b      	lsls	r3, r3, #16
 800bac0:	431a      	orrs	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	061b      	lsls	r3, r3, #24
 800bac8:	431a      	orrs	r2, r3
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	071b      	lsls	r3, r3, #28
 800bace:	4944      	ldr	r1, [pc, #272]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bad0:	4313      	orrs	r3, r2
 800bad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bad6:	4b42      	ldr	r3, [pc, #264]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800badc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae4:	3b01      	subs	r3, #1
 800bae6:	021b      	lsls	r3, r3, #8
 800bae8:	493d      	ldr	r1, [pc, #244]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800baea:	4313      	orrs	r3, r2
 800baec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d022      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb04:	d11d      	bne.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bb06:	4b36      	ldr	r3, [pc, #216]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb0c:	0e1b      	lsrs	r3, r3, #24
 800bb0e:	f003 030f 	and.w	r3, r3, #15
 800bb12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bb14:	4b32      	ldr	r3, [pc, #200]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb1a:	0f1b      	lsrs	r3, r3, #28
 800bb1c:	f003 0307 	and.w	r3, r3, #7
 800bb20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	019a      	lsls	r2, r3, #6
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a1b      	ldr	r3, [r3, #32]
 800bb2c:	041b      	lsls	r3, r3, #16
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	061b      	lsls	r3, r3, #24
 800bb34:	431a      	orrs	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	071b      	lsls	r3, r3, #28
 800bb3a:	4929      	ldr	r1, [pc, #164]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f003 0308 	and.w	r3, r3, #8
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d028      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bb4e:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb54:	0e1b      	lsrs	r3, r3, #24
 800bb56:	f003 030f 	and.w	r3, r3, #15
 800bb5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bb5c:	4b20      	ldr	r3, [pc, #128]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb62:	0c1b      	lsrs	r3, r3, #16
 800bb64:	f003 0303 	and.w	r3, r3, #3
 800bb68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	695b      	ldr	r3, [r3, #20]
 800bb6e:	019a      	lsls	r2, r3, #6
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	041b      	lsls	r3, r3, #16
 800bb74:	431a      	orrs	r2, r3
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	061b      	lsls	r3, r3, #24
 800bb7a:	431a      	orrs	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	071b      	lsls	r3, r3, #28
 800bb82:	4917      	ldr	r1, [pc, #92]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb84:	4313      	orrs	r3, r2
 800bb86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bb8a:	4b15      	ldr	r3, [pc, #84]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb98:	4911      	ldr	r1, [pc, #68]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bba0:	4b0f      	ldr	r3, [pc, #60]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a0e      	ldr	r2, [pc, #56]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbac:	f7fc fbee 	bl	800838c <HAL_GetTick>
 800bbb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bbb2:	e008      	b.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bbb4:	f7fc fbea 	bl	800838c <HAL_GetTick>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	2b64      	cmp	r3, #100	; 0x64
 800bbc0:	d901      	bls.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e007      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bbc6:	4b06      	ldr	r3, [pc, #24]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbd2:	d1ef      	bne.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3720      	adds	r7, #32
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	40023800 	.word	0x40023800

0800bbe4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a80      	ldr	r2, [pc, #512]	; (800bdf4 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800bbf4:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800bbf6:	4b80      	ldr	r3, [pc, #512]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bbf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbfc:	099b      	lsrs	r3, r3, #6
 800bbfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bc06:	4b7c      	ldr	r3, [pc, #496]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bc08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc0c:	0c1b      	lsrs	r3, r3, #16
 800bc0e:	f003 0203 	and.w	r2, r3, #3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bc16:	4b78      	ldr	r3, [pc, #480]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bc18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc1c:	0e1b      	lsrs	r3, r3, #24
 800bc1e:	f003 020f 	and.w	r2, r3, #15
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bc26:	4b74      	ldr	r3, [pc, #464]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bc28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc2c:	0f1b      	lsrs	r3, r3, #28
 800bc2e:	f003 0207 	and.w	r2, r3, #7
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800bc36:	4b70      	ldr	r3, [pc, #448]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bc38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc3c:	099b      	lsrs	r3, r3, #6
 800bc3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bc46:	4b6c      	ldr	r3, [pc, #432]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bc48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc4c:	0c1b      	lsrs	r3, r3, #16
 800bc4e:	f003 0203 	and.w	r2, r3, #3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bc56:	4b68      	ldr	r3, [pc, #416]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bc58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc5c:	0e1b      	lsrs	r3, r3, #24
 800bc5e:	f003 020f 	and.w	r2, r3, #15
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bc66:	4b64      	ldr	r3, [pc, #400]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bc68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc6c:	0f1b      	lsrs	r3, r3, #28
 800bc6e:	f003 0207 	and.w	r2, r3, #7
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800bc76:	4b60      	ldr	r3, [pc, #384]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bc78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc7c:	f003 021f 	and.w	r2, r3, #31
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800bc84:	4b5c      	ldr	r3, [pc, #368]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bc86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc8a:	0a1b      	lsrs	r3, r3, #8
 800bc8c:	f003 021f 	and.w	r2, r3, #31
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800bc94:	4b58      	ldr	r3, [pc, #352]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bc96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc9a:	0c1b      	lsrs	r3, r3, #16
 800bc9c:	f003 0203 	and.w	r2, r3, #3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800bca4:	4b54      	ldr	r3, [pc, #336]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcaa:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800bcb2:	4b51      	ldr	r3, [pc, #324]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bcb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcb8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800bcc0:	4b4d      	ldr	r3, [pc, #308]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800bccc:	4b4a      	ldr	r3, [pc, #296]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800bcda:	4b47      	ldr	r3, [pc, #284]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bcdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce0:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800bce8:	4b43      	ldr	r3, [pc, #268]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bcea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcee:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800bcf6:	4b40      	ldr	r3, [pc, #256]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bcf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcfc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800bd04:	4b3c      	ldr	r3, [pc, #240]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd0a:	f003 0203 	and.w	r2, r3, #3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800bd12:	4b39      	ldr	r3, [pc, #228]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd18:	f003 020c 	and.w	r2, r3, #12
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800bd20:	4b35      	ldr	r3, [pc, #212]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd26:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800bd2e:	4b32      	ldr	r3, [pc, #200]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd34:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800bd3c:	4b2e      	ldr	r3, [pc, #184]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd42:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800bd4a:	4b2b      	ldr	r3, [pc, #172]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd50:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800bd58:	4b27      	ldr	r3, [pc, #156]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd5e:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800bd66:	4b24      	ldr	r3, [pc, #144]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd6c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800bd74:	4b20      	ldr	r3, [pc, #128]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd7a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800bd82:	4b1d      	ldr	r3, [pc, #116]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd88:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800bd90:	4b19      	ldr	r3, [pc, #100]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd96:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800bd9e:	4b16      	ldr	r3, [pc, #88]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bda0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bda4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800bdae:	4b12      	ldr	r3, [pc, #72]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bdb6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800bdb8:	4b0f      	ldr	r3, [pc, #60]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bdba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdbc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800bdc8:	4b0b      	ldr	r3, [pc, #44]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bdca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d103      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800bddc:	e003      	b.n	800bde6 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bde4:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bde6:	bf00      	nop
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	00fffff1 	.word	0x00fffff1
 800bdf8:	40023800 	.word	0x40023800

0800bdfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b087      	sub	sp, #28
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800be08:	2300      	movs	r3, #0
 800be0a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800be0c:	2300      	movs	r3, #0
 800be0e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800be10:	2300      	movs	r3, #0
 800be12:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800be1a:	f040 808c 	bne.w	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800be1e:	4b95      	ldr	r3, [pc, #596]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be24:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800be2c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be34:	d07c      	beq.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be3c:	d87d      	bhi.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d004      	beq.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be4a:	d039      	beq.n	800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800be4c:	e075      	b.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800be4e:	4b89      	ldr	r3, [pc, #548]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be56:	2b00      	cmp	r3, #0
 800be58:	d108      	bne.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800be5a:	4b86      	ldr	r3, [pc, #536]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be62:	4a85      	ldr	r2, [pc, #532]	; (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800be64:	fbb2 f3f3 	udiv	r3, r2, r3
 800be68:	613b      	str	r3, [r7, #16]
 800be6a:	e007      	b.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800be6c:	4b81      	ldr	r3, [pc, #516]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be74:	4a81      	ldr	r2, [pc, #516]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800be76:	fbb2 f3f3 	udiv	r3, r2, r3
 800be7a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800be7c:	4b7d      	ldr	r3, [pc, #500]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be82:	0e1b      	lsrs	r3, r3, #24
 800be84:	f003 030f 	and.w	r3, r3, #15
 800be88:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800be8a:	4b7a      	ldr	r3, [pc, #488]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be90:	099b      	lsrs	r3, r3, #6
 800be92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	fb02 f203 	mul.w	r2, r2, r3
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800bea4:	4b73      	ldr	r3, [pc, #460]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beaa:	0a1b      	lsrs	r3, r3, #8
 800beac:	f003 031f 	and.w	r3, r3, #31
 800beb0:	3301      	adds	r3, #1
 800beb2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800beb4:	697a      	ldr	r2, [r7, #20]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bebc:	617b      	str	r3, [r7, #20]
        break;
 800bebe:	e03d      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bec0:	4b6c      	ldr	r3, [pc, #432]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d108      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800becc:	4b69      	ldr	r3, [pc, #420]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bed4:	4a68      	ldr	r2, [pc, #416]	; (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bed6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beda:	613b      	str	r3, [r7, #16]
 800bedc:	e007      	b.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bede:	4b65      	ldr	r3, [pc, #404]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bee6:	4a65      	ldr	r2, [pc, #404]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800beec:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800beee:	4b61      	ldr	r3, [pc, #388]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bef4:	0e1b      	lsrs	r3, r3, #24
 800bef6:	f003 030f 	and.w	r3, r3, #15
 800befa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800befc:	4b5d      	ldr	r3, [pc, #372]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800befe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf02:	099b      	lsrs	r3, r3, #6
 800bf04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	fb02 f203 	mul.w	r2, r2, r3
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf14:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800bf16:	4b57      	ldr	r3, [pc, #348]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bf18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf1c:	f003 031f 	and.w	r3, r3, #31
 800bf20:	3301      	adds	r3, #1
 800bf22:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf2c:	617b      	str	r3, [r7, #20]
        break;
 800bf2e:	e005      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf30:	4b53      	ldr	r3, [pc, #332]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800bf32:	617b      	str	r3, [r7, #20]
        break;
 800bf34:	e002      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800bf36:	bf00      	nop
 800bf38:	e000      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800bf3a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf42:	f040 808c 	bne.w	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bf46:	4b4b      	ldr	r3, [pc, #300]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bf48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf4c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bf54:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf5c:	d07c      	beq.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf64:	d87d      	bhi.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d004      	beq.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf72:	d039      	beq.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bf74:	e075      	b.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bf76:	4b3f      	ldr	r3, [pc, #252]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d108      	bne.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bf82:	4b3c      	ldr	r3, [pc, #240]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf8a:	4a3b      	ldr	r2, [pc, #236]	; (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bf8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf90:	613b      	str	r3, [r7, #16]
 800bf92:	e007      	b.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bf94:	4b37      	ldr	r3, [pc, #220]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf9c:	4a37      	ldr	r2, [pc, #220]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bf9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800bfa4:	4b33      	ldr	r3, [pc, #204]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bfa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfaa:	0e1b      	lsrs	r3, r3, #24
 800bfac:	f003 030f 	and.w	r3, r3, #15
 800bfb0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800bfb2:	4b30      	ldr	r3, [pc, #192]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bfb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfb8:	099b      	lsrs	r3, r3, #6
 800bfba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	fb02 f203 	mul.w	r2, r2, r3
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800bfcc:	4b29      	ldr	r3, [pc, #164]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bfce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfd2:	0a1b      	lsrs	r3, r3, #8
 800bfd4:	f003 031f 	and.w	r3, r3, #31
 800bfd8:	3301      	adds	r3, #1
 800bfda:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfe4:	617b      	str	r3, [r7, #20]
        break;
 800bfe6:	e03d      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bfe8:	4b22      	ldr	r3, [pc, #136]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d108      	bne.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bff4:	4b1f      	ldr	r3, [pc, #124]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bffc:	4a1e      	ldr	r2, [pc, #120]	; (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bffe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c002:	613b      	str	r3, [r7, #16]
 800c004:	e007      	b.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c006:	4b1b      	ldr	r3, [pc, #108]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c00e:	4a1b      	ldr	r2, [pc, #108]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c010:	fbb2 f3f3 	udiv	r3, r2, r3
 800c014:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c016:	4b17      	ldr	r3, [pc, #92]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c01c:	0e1b      	lsrs	r3, r3, #24
 800c01e:	f003 030f 	and.w	r3, r3, #15
 800c022:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c024:	4b13      	ldr	r3, [pc, #76]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c02a:	099b      	lsrs	r3, r3, #6
 800c02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	fb02 f203 	mul.w	r2, r2, r3
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	fbb2 f3f3 	udiv	r3, r2, r3
 800c03c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c03e:	4b0d      	ldr	r3, [pc, #52]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c044:	f003 031f 	and.w	r3, r3, #31
 800c048:	3301      	adds	r3, #1
 800c04a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	fbb2 f3f3 	udiv	r3, r2, r3
 800c054:	617b      	str	r3, [r7, #20]
        break;
 800c056:	e005      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c058:	4b09      	ldr	r3, [pc, #36]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c05a:	617b      	str	r3, [r7, #20]
        break;
 800c05c:	e002      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800c05e:	bf00      	nop
 800c060:	e000      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800c062:	bf00      	nop

  return frequency;
 800c064:	697b      	ldr	r3, [r7, #20]
}
 800c066:	4618      	mov	r0, r3
 800c068:	371c      	adds	r7, #28
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	40023800 	.word	0x40023800
 800c078:	00f42400 	.word	0x00f42400
 800c07c:	017d7840 	.word	0x017d7840
 800c080:	00bb8000 	.word	0x00bb8000

0800c084 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c090:	2300      	movs	r3, #0
 800c092:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d101      	bne.n	800c0a2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e156      	b.n	800c350 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d106      	bne.n	800c0bc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7fa fa74 	bl	80065a4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2202      	movs	r2, #2
 800c0c0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fb13 	bl	800c6f0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d00c      	beq.n	800c0ec <HAL_SAI_Init+0x68>
 800c0d2:	2b02      	cmp	r3, #2
 800c0d4:	d80d      	bhi.n	800c0f2 <HAL_SAI_Init+0x6e>
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d002      	beq.n	800c0e0 <HAL_SAI_Init+0x5c>
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d003      	beq.n	800c0e6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c0de:	e008      	b.n	800c0f2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	61fb      	str	r3, [r7, #28]
      break;
 800c0e4:	e006      	b.n	800c0f4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c0e6:	2310      	movs	r3, #16
 800c0e8:	61fb      	str	r3, [r7, #28]
      break;
 800c0ea:	e003      	b.n	800c0f4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c0ec:	2320      	movs	r3, #32
 800c0ee:	61fb      	str	r3, [r7, #28]
      break;
 800c0f0:	e000      	b.n	800c0f4 <HAL_SAI_Init+0x70>
      break;
 800c0f2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	2b03      	cmp	r3, #3
 800c0fa:	d81e      	bhi.n	800c13a <HAL_SAI_Init+0xb6>
 800c0fc:	a201      	add	r2, pc, #4	; (adr r2, 800c104 <HAL_SAI_Init+0x80>)
 800c0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c102:	bf00      	nop
 800c104:	0800c115 	.word	0x0800c115
 800c108:	0800c11b 	.word	0x0800c11b
 800c10c:	0800c123 	.word	0x0800c123
 800c110:	0800c12b 	.word	0x0800c12b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	617b      	str	r3, [r7, #20]
    }
    break;
 800c118:	e010      	b.n	800c13c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c11a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c11e:	617b      	str	r3, [r7, #20]
    }
    break;
 800c120:	e00c      	b.n	800c13c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c126:	617b      	str	r3, [r7, #20]
    }
    break;
 800c128:	e008      	b.n	800c13c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c12a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c12e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	f043 0301 	orr.w	r3, r3, #1
 800c136:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c138:	e000      	b.n	800c13c <HAL_SAI_Init+0xb8>
    default:
      break;
 800c13a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a85      	ldr	r2, [pc, #532]	; (800c358 <HAL_SAI_Init+0x2d4>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d004      	beq.n	800c150 <HAL_SAI_Init+0xcc>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a84      	ldr	r2, [pc, #528]	; (800c35c <HAL_SAI_Init+0x2d8>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d103      	bne.n	800c158 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c150:	4a83      	ldr	r2, [pc, #524]	; (800c360 <HAL_SAI_Init+0x2dc>)
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	6013      	str	r3, [r2, #0]
 800c156:	e002      	b.n	800c15e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c158:	4a82      	ldr	r2, [pc, #520]	; (800c364 <HAL_SAI_Init+0x2e0>)
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d04c      	beq.n	800c200 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c166:	2300      	movs	r3, #0
 800c168:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a7a      	ldr	r2, [pc, #488]	; (800c358 <HAL_SAI_Init+0x2d4>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d004      	beq.n	800c17e <HAL_SAI_Init+0xfa>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a78      	ldr	r2, [pc, #480]	; (800c35c <HAL_SAI_Init+0x2d8>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d104      	bne.n	800c188 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c17e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c182:	f7ff fe3b 	bl	800bdfc <HAL_RCCEx_GetPeriphCLKFreq>
 800c186:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a76      	ldr	r2, [pc, #472]	; (800c368 <HAL_SAI_Init+0x2e4>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d004      	beq.n	800c19c <HAL_SAI_Init+0x118>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a75      	ldr	r2, [pc, #468]	; (800c36c <HAL_SAI_Init+0x2e8>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d104      	bne.n	800c1a6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c19c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c1a0:	f7ff fe2c 	bl	800bdfc <HAL_RCCEx_GetPeriphCLKFreq>
 800c1a4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	005b      	lsls	r3, r3, #1
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	025b      	lsls	r3, r3, #9
 800c1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1bc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	4a6b      	ldr	r2, [pc, #428]	; (800c370 <HAL_SAI_Init+0x2ec>)
 800c1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1c6:	08da      	lsrs	r2, r3, #3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c1cc:	68f9      	ldr	r1, [r7, #12]
 800c1ce:	4b68      	ldr	r3, [pc, #416]	; (800c370 <HAL_SAI_Init+0x2ec>)
 800c1d0:	fba3 2301 	umull	r2, r3, r3, r1
 800c1d4:	08da      	lsrs	r2, r3, #3
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	1aca      	subs	r2, r1, r3
 800c1e0:	2a08      	cmp	r2, #8
 800c1e2:	d904      	bls.n	800c1ee <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a1b      	ldr	r3, [r3, #32]
 800c1e8:	1c5a      	adds	r2, r3, #1
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f2:	2b04      	cmp	r3, #4
 800c1f4:	d104      	bne.n	800c200 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	085a      	lsrs	r2, r3, #1
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d003      	beq.n	800c210 <HAL_SAI_Init+0x18c>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d109      	bne.n	800c224 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c214:	2b01      	cmp	r3, #1
 800c216:	d101      	bne.n	800c21c <HAL_SAI_Init+0x198>
 800c218:	2300      	movs	r3, #0
 800c21a:	e001      	b.n	800c220 <HAL_SAI_Init+0x19c>
 800c21c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c220:	61bb      	str	r3, [r7, #24]
 800c222:	e008      	b.n	800c236 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d102      	bne.n	800c232 <HAL_SAI_Init+0x1ae>
 800c22c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c230:	e000      	b.n	800c234 <HAL_SAI_Init+0x1b0>
 800c232:	2300      	movs	r3, #0
 800c234:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	6819      	ldr	r1, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	4b4c      	ldr	r3, [pc, #304]	; (800c374 <HAL_SAI_Init+0x2f0>)
 800c242:	400b      	ands	r3, r1
 800c244:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	6819      	ldr	r1, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	685a      	ldr	r2, [r3, #4]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c254:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c25a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c260:	431a      	orrs	r2, r3
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800c26e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c27a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a1b      	ldr	r3, [r3, #32]
 800c280:	051b      	lsls	r3, r3, #20
 800c282:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	430a      	orrs	r2, r1
 800c28a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6859      	ldr	r1, [r3, #4]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	4b38      	ldr	r3, [pc, #224]	; (800c378 <HAL_SAI_Init+0x2f4>)
 800c298:	400b      	ands	r3, r1
 800c29a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6859      	ldr	r1, [r3, #4]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	699a      	ldr	r2, [r3, #24]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2aa:	431a      	orrs	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b0:	431a      	orrs	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	430a      	orrs	r2, r1
 800c2b8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	6899      	ldr	r1, [r3, #8]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	4b2d      	ldr	r3, [pc, #180]	; (800c37c <HAL_SAI_Init+0x2f8>)
 800c2c6:	400b      	ands	r3, r1
 800c2c8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6899      	ldr	r1, [r3, #8]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c2da:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800c2e0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800c2e6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c2f0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	68d9      	ldr	r1, [r3, #12]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	f24f 0320 	movw	r3, #61472	; 0xf020
 800c308:	400b      	ands	r3, r1
 800c30a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68d9      	ldr	r1, [r3, #12]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c31a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c320:	041b      	lsls	r3, r3, #16
 800c322:	431a      	orrs	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c328:	3b01      	subs	r3, #1
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	430a      	orrs	r2, r1
 800c334:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2201      	movs	r2, #1
 800c342:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	40015804 	.word	0x40015804
 800c35c:	40015824 	.word	0x40015824
 800c360:	40015800 	.word	0x40015800
 800c364:	40015c00 	.word	0x40015c00
 800c368:	40015c04 	.word	0x40015c04
 800c36c:	40015c24 	.word	0x40015c24
 800c370:	cccccccd 	.word	0xcccccccd
 800c374:	ff05c010 	.word	0xff05c010
 800c378:	ffff1ff0 	.word	0xffff1ff0
 800c37c:	fff88000 	.word	0xfff88000

0800c380 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d101      	bne.n	800c392 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	e027      	b.n	800c3e2 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2202      	movs	r2, #2
 800c396:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3aa:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f99f 	bl	800c6f0 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f042 0208 	orr.w	r2, r2, #8
 800c3c0:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7fa f9cc 	bl	8006760 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800c3fa:	f7fb ffc7 	bl	800838c <HAL_GetTick>
 800c3fe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d002      	beq.n	800c40c <HAL_SAI_Transmit_DMA+0x20>
 800c406:	88fb      	ldrh	r3, [r7, #6]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e093      	b.n	800c538 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b01      	cmp	r3, #1
 800c41a:	f040 808c 	bne.w	800c536 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c424:	2b01      	cmp	r3, #1
 800c426:	d101      	bne.n	800c42c <HAL_SAI_Transmit_DMA+0x40>
 800c428:	2302      	movs	r3, #2
 800c42a:	e085      	b.n	800c538 <HAL_SAI_Transmit_DMA+0x14c>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	68ba      	ldr	r2, [r7, #8]
 800c438:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	88fa      	ldrh	r2, [r7, #6]
 800c43e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	88fa      	ldrh	r2, [r7, #6]
 800c446:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2212      	movs	r2, #18
 800c456:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c45e:	4a38      	ldr	r2, [pc, #224]	; (800c540 <HAL_SAI_Transmit_DMA+0x154>)
 800c460:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c466:	4a37      	ldr	r2, [pc, #220]	; (800c544 <HAL_SAI_Transmit_DMA+0x158>)
 800c468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c46e:	4a36      	ldr	r2, [pc, #216]	; (800c548 <HAL_SAI_Transmit_DMA+0x15c>)
 800c470:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c476:	2200      	movs	r2, #0
 800c478:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c482:	4619      	mov	r1, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	331c      	adds	r3, #28
 800c48a:	461a      	mov	r2, r3
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c492:	f7fc f999 	bl	80087c8 <HAL_DMA_Start_IT>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d005      	beq.n	800c4a8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e047      	b.n	800c538 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f000 f8ea 	bl	800c684 <SAI_InterruptFlag>
 800c4b0:	4601      	mov	r1, r0
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	691a      	ldr	r2, [r3, #16]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	430a      	orrs	r2, r1
 800c4be:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c4ce:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c4d0:	e015      	b.n	800c4fe <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800c4d2:	f7fb ff5b 	bl	800838c <HAL_GetTick>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4e0:	d90d      	bls.n	800c4fe <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c4fa:	2303      	movs	r3, #3
 800c4fc:	e01c      	b.n	800c538 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d0e2      	beq.n	800c4d2 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c516:	2b00      	cmp	r3, #0
 800c518:	d107      	bne.n	800c52a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c528:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	e000      	b.n	800c538 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800c536:	2302      	movs	r3, #2
  }
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3718      	adds	r7, #24
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	0800c7c1 	.word	0x0800c7c1
 800c544:	0800c761 	.word	0x0800c761
 800c548:	0800c859 	.word	0x0800c859

0800c54c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4613      	mov	r3, r2
 800c558:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <HAL_SAI_Receive_DMA+0x1a>
 800c560:	88fb      	ldrh	r3, [r7, #6]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d101      	bne.n	800c56a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e074      	b.n	800c654 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b01      	cmp	r3, #1
 800c574:	d16d      	bne.n	800c652 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d101      	bne.n	800c584 <HAL_SAI_Receive_DMA+0x38>
 800c580:	2302      	movs	r3, #2
 800c582:	e067      	b.n	800c654 <HAL_SAI_Receive_DMA+0x108>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	88fa      	ldrh	r2, [r7, #6]
 800c596:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	88fa      	ldrh	r2, [r7, #6]
 800c59e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2222      	movs	r2, #34	; 0x22
 800c5ae:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b6:	4a29      	ldr	r2, [pc, #164]	; (800c65c <HAL_SAI_Receive_DMA+0x110>)
 800c5b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5be:	4a28      	ldr	r2, [pc, #160]	; (800c660 <HAL_SAI_Receive_DMA+0x114>)
 800c5c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5c6:	4a27      	ldr	r2, [pc, #156]	; (800c664 <HAL_SAI_Receive_DMA+0x118>)
 800c5c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	331c      	adds	r3, #28
 800c5dc:	4619      	mov	r1, r3
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c5ea:	f7fc f8ed 	bl	80087c8 <HAL_DMA_Start_IT>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d005      	beq.n	800c600 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e029      	b.n	800c654 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c600:	2100      	movs	r1, #0
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f000 f83e 	bl	800c684 <SAI_InterruptFlag>
 800c608:	4601      	mov	r1, r0
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	691a      	ldr	r2, [r3, #16]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	430a      	orrs	r2, r1
 800c616:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c626:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c632:	2b00      	cmp	r3, #0
 800c634:	d107      	bne.n	800c646 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c644:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2200      	movs	r2, #0
 800c64a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	e000      	b.n	800c654 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800c652:	2302      	movs	r3, #2
  }
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	0800c83d 	.word	0x0800c83d
 800c660:	0800c7dd 	.word	0x0800c7dd
 800c664:	0800c859 	.word	0x0800c859

0800c668 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c676:	b2db      	uxtb	r3, r3
}
 800c678:	4618      	mov	r0, r3
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800c68e:	2301      	movs	r3, #1
 800c690:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d103      	bne.n	800c6a0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f043 0308 	orr.w	r3, r3, #8
 800c69e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a4:	2b08      	cmp	r3, #8
 800c6a6:	d10b      	bne.n	800c6c0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d003      	beq.n	800c6b8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d103      	bne.n	800c6c0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f043 0310 	orr.w	r3, r3, #16
 800c6be:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	2b03      	cmp	r3, #3
 800c6c6:	d003      	beq.n	800c6d0 <SAI_InterruptFlag+0x4c>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d104      	bne.n	800c6da <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	e003      	b.n	800c6e2 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f043 0304 	orr.w	r3, r3, #4
 800c6e0:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3714      	adds	r7, #20
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c6f8:	4b17      	ldr	r3, [pc, #92]	; (800c758 <SAI_Disable+0x68>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a17      	ldr	r2, [pc, #92]	; (800c75c <SAI_Disable+0x6c>)
 800c6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c702:	0b1b      	lsrs	r3, r3, #12
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c71a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	1e5a      	subs	r2, r3, #1
 800c720:	60fa      	str	r2, [r7, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10a      	bne.n	800c73c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c72c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800c736:	2303      	movs	r3, #3
 800c738:	72fb      	strb	r3, [r7, #11]
      break;
 800c73a:	e006      	b.n	800c74a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1e8      	bne.n	800c71c <SAI_Disable+0x2c>

  return status;
 800c74a:	7afb      	ldrb	r3, [r7, #11]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	20000300 	.word	0x20000300
 800c75c:	95cbec1b 	.word	0x95cbec1b

0800c760 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c776:	d01c      	beq.n	800c7b2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c78e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c790:	2100      	movs	r1, #0
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f7ff ff76 	bl	800c684 <SAI_InterruptFlag>
 800c798:	4603      	mov	r3, r0
 800c79a:	43d9      	mvns	r1, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	691a      	ldr	r2, [r3, #16]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	400a      	ands	r2, r1
 800c7a8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f7f7 fad8 	bl	8003d68 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c7b8:	bf00      	nop
 800c7ba:	3710      	adds	r7, #16
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f7f7 fad4 	bl	8003d7c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c7d4:	bf00      	nop
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7f2:	d01c      	beq.n	800c82e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c802:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2200      	movs	r2, #0
 800c808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c80c:	2100      	movs	r1, #0
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f7ff ff38 	bl	800c684 <SAI_InterruptFlag>
 800c814:	4603      	mov	r3, r0
 800c816:	43d9      	mvns	r1, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	691a      	ldr	r2, [r3, #16]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	400a      	ands	r2, r1
 800c824:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2201      	movs	r2, #1
 800c82a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f7f7 fcce 	bl	80041d0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c834:	bf00      	nop
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c848:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f7f7 fcca 	bl	80041e4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c850:	bf00      	nop
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c864:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c86c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d004      	beq.n	800c88a <SAI_DMAError+0x32>
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c886:	2b01      	cmp	r3, #1
 800c888:	d112      	bne.n	800c8b0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c898:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f7ff ff28 	bl	800c6f0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f7f7 fa6d 	bl	8003d90 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b082      	sub	sp, #8
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e022      	b.n	800c916 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d105      	bne.n	800c8e8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7f9 fc66 	bl	80061b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2203      	movs	r2, #3
 800c8ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f815 	bl	800c920 <HAL_SD_InitCard>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e00a      	b.n	800c916 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
	...

0800c920 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c920:	b5b0      	push	{r4, r5, r7, lr}
 800c922:	b08e      	sub	sp, #56	; 0x38
 800c924:	af04      	add	r7, sp, #16
 800c926:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c928:	2300      	movs	r3, #0
 800c92a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c92c:	2300      	movs	r3, #0
 800c92e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c930:	2300      	movs	r3, #0
 800c932:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c934:	2300      	movs	r3, #0
 800c936:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c938:	2300      	movs	r3, #0
 800c93a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c93c:	2376      	movs	r3, #118	; 0x76
 800c93e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681d      	ldr	r5, [r3, #0]
 800c944:	466c      	mov	r4, sp
 800c946:	f107 0314 	add.w	r3, r7, #20
 800c94a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c94e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c952:	f107 0308 	add.w	r3, r7, #8
 800c956:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c958:	4628      	mov	r0, r5
 800c95a:	f002 fb63 	bl	800f024 <SDMMC_Init>
 800c95e:	4603      	mov	r3, r0
 800c960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c96c:	2301      	movs	r3, #1
 800c96e:	e056      	b.n	800ca1e <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c97e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4618      	mov	r0, r3
 800c986:	f002 fb97 	bl	800f0b8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c998:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fff2 	bl	800d984 <SD_PowerON>
 800c9a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9a2:	6a3b      	ldr	r3, [r7, #32]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00b      	beq.n	800c9c0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9b4:	6a3b      	ldr	r3, [r7, #32]
 800c9b6:	431a      	orrs	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e02e      	b.n	800ca1e <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 ff13 	bl	800d7ec <SD_InitCard>
 800c9c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9c8:	6a3b      	ldr	r3, [r7, #32]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00b      	beq.n	800c9e6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	431a      	orrs	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e01b      	b.n	800ca1e <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f002 fbf6 	bl	800f1e0 <SDMMC_CmdBlockLength>
 800c9f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00f      	beq.n	800ca1c <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a09      	ldr	r2, [pc, #36]	; (800ca28 <HAL_SD_InitCard+0x108>)
 800ca02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	431a      	orrs	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e000      	b.n	800ca1e <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3728      	adds	r7, #40	; 0x28
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bdb0      	pop	{r4, r5, r7, pc}
 800ca26:	bf00      	nop
 800ca28:	004005ff 	.word	0x004005ff

0800ca2c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08c      	sub	sp, #48	; 0x30
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
 800ca38:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d107      	bne.n	800ca54 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	e0c3      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	f040 80bc 	bne.w	800cbda <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	441a      	add	r2, r3
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d907      	bls.n	800ca86 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e0aa      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2203      	movs	r2, #3
 800ca8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2200      	movs	r2, #0
 800ca94:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800caa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caaa:	4a4e      	ldr	r2, [pc, #312]	; (800cbe4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800caac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab2:	4a4d      	ldr	r2, [pc, #308]	; (800cbe8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800cab4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caba:	2200      	movs	r2, #0
 800cabc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac2:	2200      	movs	r2, #0
 800cac4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad6:	689a      	ldr	r2, [r3, #8]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	430a      	orrs	r2, r1
 800cae0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	3380      	adds	r3, #128	; 0x80
 800caec:	4619      	mov	r1, r3
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	025b      	lsls	r3, r3, #9
 800caf4:	089b      	lsrs	r3, r3, #2
 800caf6:	f7fb fe67 	bl	80087c8 <HAL_DMA_Start_IT>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d017      	beq.n	800cb30 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cb0e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a35      	ldr	r2, [pc, #212]	; (800cbec <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cb16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e055      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f042 0208 	orr.w	r2, r2, #8
 800cb3e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d002      	beq.n	800cb4e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	025b      	lsls	r3, r3, #9
 800cb4c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb52:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	025b      	lsls	r3, r3, #9
 800cb58:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cb5a:	2390      	movs	r3, #144	; 0x90
 800cb5c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cb5e:	2302      	movs	r3, #2
 800cb60:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800cb66:	2301      	movs	r3, #1
 800cb68:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f107 0210 	add.w	r2, r7, #16
 800cb72:	4611      	mov	r1, r2
 800cb74:	4618      	mov	r0, r3
 800cb76:	f002 fb07 	bl	800f188 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d90a      	bls.n	800cb96 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2282      	movs	r2, #130	; 0x82
 800cb84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f002 fb6b 	bl	800f268 <SDMMC_CmdReadMultiBlock>
 800cb92:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb94:	e009      	b.n	800cbaa <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2281      	movs	r2, #129	; 0x81
 800cb9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cba2:	4618      	mov	r0, r3
 800cba4:	f002 fb3e 	bl	800f224 <SDMMC_CmdReadSingleBlock>
 800cba8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d012      	beq.n	800cbd6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a0d      	ldr	r2, [pc, #52]	; (800cbec <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cbb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	431a      	orrs	r2, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e002      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	e000      	b.n	800cbdc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800cbda:	2302      	movs	r3, #2
  }
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3730      	adds	r7, #48	; 0x30
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	0800d5fb 	.word	0x0800d5fb
 800cbe8:	0800d66d 	.word	0x0800d66d
 800cbec:	004005ff 	.word	0x004005ff

0800cbf0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b08c      	sub	sp, #48	; 0x30
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d107      	bne.n	800cc18 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e0c6      	b.n	800cda6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	f040 80bf 	bne.w	800cda4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cc2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	441a      	add	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d907      	bls.n	800cc4a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e0ad      	b.n	800cda6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2203      	movs	r2, #3
 800cc4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2200      	movs	r2, #0
 800cc58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f042 021a 	orr.w	r2, r2, #26
 800cc68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc6e:	4a50      	ldr	r2, [pc, #320]	; (800cdb0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800cc70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc76:	4a4f      	ldr	r2, [pc, #316]	; (800cdb4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800cc78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7e:	2200      	movs	r2, #0
 800cc80:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d002      	beq.n	800cc90 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8c:	025b      	lsls	r3, r3, #9
 800cc8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d90a      	bls.n	800ccac <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	22a0      	movs	r2, #160	; 0xa0
 800cc9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cca2:	4618      	mov	r0, r3
 800cca4:	f002 fb24 	bl	800f2f0 <SDMMC_CmdWriteMultiBlock>
 800cca8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ccaa:	e009      	b.n	800ccc0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2290      	movs	r2, #144	; 0x90
 800ccb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f002 faf7 	bl	800f2ac <SDMMC_CmdWriteSingleBlock>
 800ccbe:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d012      	beq.n	800ccec <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a3b      	ldr	r2, [pc, #236]	; (800cdb8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cccc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	431a      	orrs	r2, r3
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2200      	movs	r2, #0
 800cce6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	e05c      	b.n	800cda6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f042 0208 	orr.w	r2, r2, #8
 800ccfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd00:	2240      	movs	r2, #64	; 0x40
 800cd02:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd14:	689a      	ldr	r2, [r3, #8]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	430a      	orrs	r2, r1
 800cd1e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cd24:	68b9      	ldr	r1, [r7, #8]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	3380      	adds	r3, #128	; 0x80
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	025b      	lsls	r3, r3, #9
 800cd32:	089b      	lsrs	r3, r3, #2
 800cd34:	f7fb fd48 	bl	80087c8 <HAL_DMA_Start_IT>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d01a      	beq.n	800cd74 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f022 021a 	bic.w	r2, r2, #26
 800cd4c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a19      	ldr	r2, [pc, #100]	; (800cdb8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cd54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2201      	movs	r2, #1
 800cd66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd70:	2301      	movs	r3, #1
 800cd72:	e018      	b.n	800cda6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd74:	f04f 33ff 	mov.w	r3, #4294967295
 800cd78:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	025b      	lsls	r3, r3, #9
 800cd7e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd80:	2390      	movs	r3, #144	; 0x90
 800cd82:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cd84:	2300      	movs	r3, #0
 800cd86:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f107 0210 	add.w	r2, r7, #16
 800cd98:	4611      	mov	r1, r2
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f002 f9f4 	bl	800f188 <SDMMC_ConfigData>

      return HAL_OK;
 800cda0:	2300      	movs	r3, #0
 800cda2:	e000      	b.n	800cda6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800cda4:	2302      	movs	r3, #2
  }
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3730      	adds	r7, #48	; 0x30
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	0800d5d1 	.word	0x0800d5d1
 800cdb4:	0800d66d 	.word	0x0800d66d
 800cdb8:	004005ff 	.word	0x004005ff

0800cdbc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d008      	beq.n	800cdea <HAL_SD_IRQHandler+0x2e>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f003 0308 	and.w	r3, r3, #8
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d003      	beq.n	800cdea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 ffed 	bl	800ddc2 <SD_Read_IT>
 800cde8:	e153      	b.n	800d092 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f000 808d 	beq.w	800cf14 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce02:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	4ba3      	ldr	r3, [pc, #652]	; (800d09c <HAL_SD_IRQHandler+0x2e0>)
 800ce10:	400b      	ands	r3, r1
 800ce12:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f022 0201 	bic.w	r2, r2, #1
 800ce22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f003 0308 	and.w	r3, r3, #8
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d039      	beq.n	800cea2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f003 0302 	and.w	r3, r3, #2
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d104      	bne.n	800ce42 <HAL_SD_IRQHandler+0x86>
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f003 0320 	and.w	r3, r3, #32
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d011      	beq.n	800ce66 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f002 fa74 	bl	800f334 <SDMMC_CmdStopTransfer>
 800ce4c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d008      	beq.n	800ce66 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 f921 	bl	800d0a8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce6e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f003 0301 	and.w	r3, r3, #1
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d104      	bne.n	800ce92 <HAL_SD_IRQHandler+0xd6>
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f003 0302 	and.w	r3, r3, #2
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d003      	beq.n	800ce9a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f002 fee4 	bl	800fc60 <HAL_SD_RxCpltCallback>
 800ce98:	e0fb      	b.n	800d092 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f002 fed6 	bl	800fc4c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cea0:	e0f7      	b.n	800d092 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 80f2 	beq.w	800d092 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f003 0320 	and.w	r3, r3, #32
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d011      	beq.n	800cedc <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f002 fa39 	bl	800f334 <SDMMC_CmdStopTransfer>
 800cec2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d008      	beq.n	800cedc <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	431a      	orrs	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f8e6 	bl	800d0a8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f040 80d5 	bne.w	800d092 <HAL_SD_IRQHandler+0x2d6>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f003 0302 	and.w	r3, r3, #2
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f040 80cf 	bne.w	800d092 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f022 0208 	bic.w	r2, r2, #8
 800cf02:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f002 fe9d 	bl	800fc4c <HAL_SD_TxCpltCallback>
}
 800cf12:	e0be      	b.n	800d092 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d008      	beq.n	800cf34 <HAL_SD_IRQHandler+0x178>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f003 0308 	and.w	r3, r3, #8
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d003      	beq.n	800cf34 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 ff99 	bl	800de64 <SD_Write_IT>
 800cf32:	e0ae      	b.n	800d092 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f000 80a7 	beq.w	800d092 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf4a:	f003 0302 	and.w	r3, r3, #2
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d005      	beq.n	800cf5e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf56:	f043 0202 	orr.w	r2, r3, #2
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf64:	f003 0308 	and.w	r3, r3, #8
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d005      	beq.n	800cf78 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf70:	f043 0208 	orr.w	r2, r3, #8
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf7e:	f003 0320 	and.w	r3, r3, #32
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d005      	beq.n	800cf92 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8a:	f043 0220 	orr.w	r2, r3, #32
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf98:	f003 0310 	and.w	r3, r3, #16
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d005      	beq.n	800cfac <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa4:	f043 0210 	orr.w	r2, r3, #16
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f240 523a 	movw	r2, #1338	; 0x53a
 800cfb4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cfc4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f002 f9b2 	bl	800f334 <SDMMC_CmdStopTransfer>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd6:	431a      	orrs	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f003 0308 	and.w	r3, r3, #8
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00a      	beq.n	800cffc <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f857 	bl	800d0a8 <HAL_SD_ErrorCallback>
}
 800cffa:	e04a      	b.n	800d092 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d002:	2b00      	cmp	r3, #0
 800d004:	d045      	beq.n	800d092 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f003 0310 	and.w	r3, r3, #16
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d104      	bne.n	800d01a <HAL_SD_IRQHandler+0x25e>
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f003 0320 	and.w	r3, r3, #32
 800d016:	2b00      	cmp	r3, #0
 800d018:	d011      	beq.n	800d03e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01e:	4a20      	ldr	r2, [pc, #128]	; (800d0a0 <HAL_SD_IRQHandler+0x2e4>)
 800d020:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d026:	4618      	mov	r0, r3
 800d028:	f7fb fc2e 	bl	8008888 <HAL_DMA_Abort_IT>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d02f      	beq.n	800d092 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d036:	4618      	mov	r0, r3
 800d038:	f000 fb6a 	bl	800d710 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d03c:	e029      	b.n	800d092 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	2b00      	cmp	r3, #0
 800d046:	d104      	bne.n	800d052 <HAL_SD_IRQHandler+0x296>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f003 0302 	and.w	r3, r3, #2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d011      	beq.n	800d076 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d056:	4a13      	ldr	r2, [pc, #76]	; (800d0a4 <HAL_SD_IRQHandler+0x2e8>)
 800d058:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fb fc12 	bl	8008888 <HAL_DMA_Abort_IT>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d013      	beq.n	800d092 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d06e:	4618      	mov	r0, r3
 800d070:	f000 fb85 	bl	800d77e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d074:	e00d      	b.n	800d092 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2201      	movs	r2, #1
 800d080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f002 fdd4 	bl	800fc38 <HAL_SD_AbortCallback>
}
 800d090:	e7ff      	b.n	800d092 <HAL_SD_IRQHandler+0x2d6>
 800d092:	bf00      	nop
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	ffff3ec5 	.word	0xffff3ec5
 800d0a0:	0800d711 	.word	0x0800d711
 800d0a4:	0800d77f 	.word	0x0800d77f

0800d0a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0ca:	0f9b      	lsrs	r3, r3, #30
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0d6:	0e9b      	lsrs	r3, r3, #26
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	f003 030f 	and.w	r3, r3, #15
 800d0de:	b2da      	uxtb	r2, r3
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0e8:	0e1b      	lsrs	r3, r3, #24
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	f003 0303 	and.w	r3, r3, #3
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0fa:	0c1b      	lsrs	r3, r3, #16
 800d0fc:	b2da      	uxtb	r2, r3
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d106:	0a1b      	lsrs	r3, r3, #8
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d112:	b2da      	uxtb	r2, r3
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d11c:	0d1b      	lsrs	r3, r3, #20
 800d11e:	b29a      	uxth	r2, r3
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d128:	0c1b      	lsrs	r3, r3, #16
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	f003 030f 	and.w	r3, r3, #15
 800d130:	b2da      	uxtb	r2, r3
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d13a:	0bdb      	lsrs	r3, r3, #15
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	f003 0301 	and.w	r3, r3, #1
 800d142:	b2da      	uxtb	r2, r3
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d14c:	0b9b      	lsrs	r3, r3, #14
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	b2da      	uxtb	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d15e:	0b5b      	lsrs	r3, r3, #13
 800d160:	b2db      	uxtb	r3, r3
 800d162:	f003 0301 	and.w	r3, r3, #1
 800d166:	b2da      	uxtb	r2, r3
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d170:	0b1b      	lsrs	r3, r3, #12
 800d172:	b2db      	uxtb	r3, r3
 800d174:	f003 0301 	and.w	r3, r3, #1
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2200      	movs	r2, #0
 800d182:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d163      	bne.n	800d254 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d190:	009a      	lsls	r2, r3, #2
 800d192:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d196:	4013      	ands	r3, r2
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d19c:	0f92      	lsrs	r2, r2, #30
 800d19e:	431a      	orrs	r2, r3
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1a8:	0edb      	lsrs	r3, r3, #27
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	f003 0307 	and.w	r3, r3, #7
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1ba:	0e1b      	lsrs	r3, r3, #24
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	f003 0307 	and.w	r3, r3, #7
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1cc:	0d5b      	lsrs	r3, r3, #21
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	f003 0307 	and.w	r3, r3, #7
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1de:	0c9b      	lsrs	r3, r3, #18
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	f003 0307 	and.w	r3, r3, #7
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f0:	0bdb      	lsrs	r3, r3, #15
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	f003 0307 	and.w	r3, r3, #7
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	691b      	ldr	r3, [r3, #16]
 800d202:	1c5a      	adds	r2, r3, #1
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	7e1b      	ldrb	r3, [r3, #24]
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	f003 0307 	and.w	r3, r3, #7
 800d212:	3302      	adds	r3, #2
 800d214:	2201      	movs	r2, #1
 800d216:	fa02 f303 	lsl.w	r3, r2, r3
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d21e:	fb02 f203 	mul.w	r2, r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	7a1b      	ldrb	r3, [r3, #8]
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	f003 030f 	and.w	r3, r3, #15
 800d230:	2201      	movs	r2, #1
 800d232:	409a      	lsls	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d240:	0a52      	lsrs	r2, r2, #9
 800d242:	fb02 f203 	mul.w	r2, r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d250:	661a      	str	r2, [r3, #96]	; 0x60
 800d252:	e031      	b.n	800d2b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d11d      	bne.n	800d298 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d260:	041b      	lsls	r3, r3, #16
 800d262:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d26a:	0c1b      	lsrs	r3, r3, #16
 800d26c:	431a      	orrs	r2, r3
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	3301      	adds	r3, #1
 800d278:	029a      	lsls	r2, r3, #10
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d28c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	661a      	str	r2, [r3, #96]	; 0x60
 800d296:	e00f      	b.n	800d2b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a58      	ldr	r2, [pc, #352]	; (800d400 <HAL_SD_GetCardCSD+0x344>)
 800d29e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e09d      	b.n	800d3f4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2bc:	0b9b      	lsrs	r3, r3, #14
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2ce:	09db      	lsrs	r3, r3, #7
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2d6:	b2da      	uxtb	r2, r3
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f0:	0fdb      	lsrs	r3, r3, #31
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2fc:	0f5b      	lsrs	r3, r3, #29
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	f003 0303 	and.w	r3, r3, #3
 800d304:	b2da      	uxtb	r2, r3
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d30e:	0e9b      	lsrs	r3, r3, #26
 800d310:	b2db      	uxtb	r3, r3
 800d312:	f003 0307 	and.w	r3, r3, #7
 800d316:	b2da      	uxtb	r2, r3
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d320:	0d9b      	lsrs	r3, r3, #22
 800d322:	b2db      	uxtb	r3, r3
 800d324:	f003 030f 	and.w	r3, r3, #15
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d332:	0d5b      	lsrs	r3, r3, #21
 800d334:	b2db      	uxtb	r3, r3
 800d336:	f003 0301 	and.w	r3, r3, #1
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2200      	movs	r2, #0
 800d346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d34e:	0c1b      	lsrs	r3, r3, #16
 800d350:	b2db      	uxtb	r3, r3
 800d352:	f003 0301 	and.w	r3, r3, #1
 800d356:	b2da      	uxtb	r2, r3
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d362:	0bdb      	lsrs	r3, r3, #15
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f003 0301 	and.w	r3, r3, #1
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d376:	0b9b      	lsrs	r3, r3, #14
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d38a:	0b5b      	lsrs	r3, r3, #13
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	f003 0301 	and.w	r3, r3, #1
 800d392:	b2da      	uxtb	r2, r3
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d39e:	0b1b      	lsrs	r3, r3, #12
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b2:	0a9b      	lsrs	r3, r3, #10
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	f003 0303 	and.w	r3, r3, #3
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c6:	0a1b      	lsrs	r3, r3, #8
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	f003 0303 	and.w	r3, r3, #3
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3da:	085b      	lsrs	r3, r3, #1
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr
 800d400:	004005ff 	.word	0x004005ff

0800d404 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d45c:	b5b0      	push	{r4, r5, r7, lr}
 800d45e:	b08e      	sub	sp, #56	; 0x38
 800d460:	af04      	add	r7, sp, #16
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2203      	movs	r2, #3
 800d470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d478:	2b03      	cmp	r3, #3
 800d47a:	d02e      	beq.n	800d4da <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d482:	d106      	bne.n	800d492 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	639a      	str	r2, [r3, #56]	; 0x38
 800d490:	e029      	b.n	800d4e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d498:	d10a      	bne.n	800d4b0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 fb28 	bl	800daf0 <SD_WideBus_Enable>
 800d4a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4a6:	6a3b      	ldr	r3, [r7, #32]
 800d4a8:	431a      	orrs	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	639a      	str	r2, [r3, #56]	; 0x38
 800d4ae:	e01a      	b.n	800d4e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d10a      	bne.n	800d4cc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fb65 	bl	800db86 <SD_WideBus_Disable>
 800d4bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4c2:	6a3b      	ldr	r3, [r7, #32]
 800d4c4:	431a      	orrs	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	639a      	str	r2, [r3, #56]	; 0x38
 800d4ca:	e00c      	b.n	800d4e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	639a      	str	r2, [r3, #56]	; 0x38
 800d4d8:	e005      	b.n	800d4e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00b      	beq.n	800d506 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a26      	ldr	r2, [pc, #152]	; (800d58c <HAL_SD_ConfigWideBusOperation+0x130>)
 800d4f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d504:	e01f      	b.n	800d546 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	695b      	ldr	r3, [r3, #20]
 800d520:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	699b      	ldr	r3, [r3, #24]
 800d526:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681d      	ldr	r5, [r3, #0]
 800d52c:	466c      	mov	r4, sp
 800d52e:	f107 0314 	add.w	r3, r7, #20
 800d532:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d53a:	f107 0308 	add.w	r3, r7, #8
 800d53e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d540:	4628      	mov	r0, r5
 800d542:	f001 fd6f 	bl	800f024 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d54e:	4618      	mov	r0, r3
 800d550:	f001 fe46 	bl	800f1e0 <SDMMC_CmdBlockLength>
 800d554:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d556:	6a3b      	ldr	r3, [r7, #32]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00c      	beq.n	800d576 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a0a      	ldr	r2, [pc, #40]	; (800d58c <HAL_SD_ConfigWideBusOperation+0x130>)
 800d562:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	431a      	orrs	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d582:	4618      	mov	r0, r3
 800d584:	3728      	adds	r7, #40	; 0x28
 800d586:	46bd      	mov	sp, r7
 800d588:	bdb0      	pop	{r4, r5, r7, pc}
 800d58a:	bf00      	nop
 800d58c:	004005ff 	.word	0x004005ff

0800d590 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d598:	2300      	movs	r3, #0
 800d59a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d59c:	f107 030c 	add.w	r3, r7, #12
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fa7c 	bl	800daa0 <SD_SendStatus>
 800d5a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d005      	beq.n	800d5bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	431a      	orrs	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	0a5b      	lsrs	r3, r3, #9
 800d5c0:	f003 030f 	and.w	r3, r3, #15
 800d5c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d5c6:	693b      	ldr	r3, [r7, #16]
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3718      	adds	r7, #24
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5dc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d5ee:	bf00      	nop
 800d5f0:	3714      	adds	r7, #20
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b084      	sub	sp, #16
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d606:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d60c:	2b82      	cmp	r3, #130	; 0x82
 800d60e:	d111      	bne.n	800d634 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4618      	mov	r0, r3
 800d616:	f001 fe8d 	bl	800f334 <SDMMC_CmdStopTransfer>
 800d61a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d008      	beq.n	800d634 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	431a      	orrs	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7ff fd3a 	bl	800d0a8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f022 0208 	bic.w	r2, r2, #8
 800d642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f240 523a 	movw	r2, #1338	; 0x53a
 800d64c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2201      	movs	r2, #1
 800d652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2200      	movs	r2, #0
 800d65a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f002 faff 	bl	800fc60 <HAL_SD_RxCpltCallback>
#endif
}
 800d662:	bf00      	nop
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b086      	sub	sp, #24
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d678:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7fb fab0 	bl	8008be0 <HAL_DMA_GetError>
 800d680:	4603      	mov	r3, r0
 800d682:	2b02      	cmp	r3, #2
 800d684:	d03e      	beq.n	800d704 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d68c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d694:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d002      	beq.n	800d6a2 <SD_DMAError+0x36>
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d12d      	bne.n	800d6fe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a19      	ldr	r2, [pc, #100]	; (800d70c <SD_DMAError+0xa0>)
 800d6a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d6b8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d6c6:	6978      	ldr	r0, [r7, #20]
 800d6c8:	f7ff ff62 	bl	800d590 <HAL_SD_GetCardState>
 800d6cc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	2b06      	cmp	r3, #6
 800d6d2:	d002      	beq.n	800d6da <SD_DMAError+0x6e>
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	2b05      	cmp	r3, #5
 800d6d8:	d10a      	bne.n	800d6f0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f001 fe28 	bl	800f334 <SDMMC_CmdStopTransfer>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ea:	431a      	orrs	r2, r3
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d6fe:	6978      	ldr	r0, [r7, #20]
 800d700:	f7ff fcd2 	bl	800d0a8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d704:	bf00      	nop
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	004005ff 	.word	0x004005ff

0800d710 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d71c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f240 523a 	movw	r2, #1338	; 0x53a
 800d726:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f7ff ff31 	bl	800d590 <HAL_SD_GetCardState>
 800d72e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2201      	movs	r2, #1
 800d734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2200      	movs	r2, #0
 800d73c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b06      	cmp	r3, #6
 800d742:	d002      	beq.n	800d74a <SD_DMATxAbort+0x3a>
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	2b05      	cmp	r3, #5
 800d748:	d10a      	bne.n	800d760 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4618      	mov	r0, r3
 800d750:	f001 fdf0 	bl	800f334 <SDMMC_CmdStopTransfer>
 800d754:	4602      	mov	r2, r0
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75a:	431a      	orrs	r2, r3
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d764:	2b00      	cmp	r3, #0
 800d766:	d103      	bne.n	800d770 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f002 fa65 	bl	800fc38 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d76e:	e002      	b.n	800d776 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f7ff fc99 	bl	800d0a8 <HAL_SD_ErrorCallback>
}
 800d776:	bf00      	nop
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b084      	sub	sp, #16
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f240 523a 	movw	r2, #1338	; 0x53a
 800d794:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f7ff fefa 	bl	800d590 <HAL_SD_GetCardState>
 800d79c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	2b06      	cmp	r3, #6
 800d7b0:	d002      	beq.n	800d7b8 <SD_DMARxAbort+0x3a>
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	2b05      	cmp	r3, #5
 800d7b6:	d10a      	bne.n	800d7ce <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f001 fdb9 	bl	800f334 <SDMMC_CmdStopTransfer>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c8:	431a      	orrs	r2, r3
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d103      	bne.n	800d7de <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f002 fa2e 	bl	800fc38 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d7dc:	e002      	b.n	800d7e4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f7ff fc62 	bl	800d0a8 <HAL_SD_ErrorCallback>
}
 800d7e4:	bf00      	nop
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d7ec:	b5b0      	push	{r4, r5, r7, lr}
 800d7ee:	b094      	sub	sp, #80	; 0x50
 800d7f0:	af04      	add	r7, sp, #16
 800d7f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f001 fc6a 	bl	800f0d6 <SDMMC_GetPowerState>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d102      	bne.n	800d80e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d808:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d80c:	e0b6      	b.n	800d97c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d812:	2b03      	cmp	r3, #3
 800d814:	d02f      	beq.n	800d876 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f001 fe95 	bl	800f54a <SDMMC_CmdSendCID>
 800d820:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d824:	2b00      	cmp	r3, #0
 800d826:	d001      	beq.n	800d82c <SD_InitCard+0x40>
    {
      return errorstate;
 800d828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82a:	e0a7      	b.n	800d97c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2100      	movs	r1, #0
 800d832:	4618      	mov	r0, r3
 800d834:	f001 fc95 	bl	800f162 <SDMMC_GetResponse>
 800d838:	4602      	mov	r2, r0
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2104      	movs	r1, #4
 800d844:	4618      	mov	r0, r3
 800d846:	f001 fc8c 	bl	800f162 <SDMMC_GetResponse>
 800d84a:	4602      	mov	r2, r0
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2108      	movs	r1, #8
 800d856:	4618      	mov	r0, r3
 800d858:	f001 fc83 	bl	800f162 <SDMMC_GetResponse>
 800d85c:	4602      	mov	r2, r0
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	210c      	movs	r1, #12
 800d868:	4618      	mov	r0, r3
 800d86a:	f001 fc7a 	bl	800f162 <SDMMC_GetResponse>
 800d86e:	4602      	mov	r2, r0
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d87a:	2b03      	cmp	r3, #3
 800d87c:	d00d      	beq.n	800d89a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f107 020e 	add.w	r2, r7, #14
 800d886:	4611      	mov	r1, r2
 800d888:	4618      	mov	r0, r3
 800d88a:	f001 fe9b 	bl	800f5c4 <SDMMC_CmdSetRelAdd>
 800d88e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d892:	2b00      	cmp	r3, #0
 800d894:	d001      	beq.n	800d89a <SD_InitCard+0xae>
    {
      return errorstate;
 800d896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d898:	e070      	b.n	800d97c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d036      	beq.n	800d910 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d8a2:	89fb      	ldrh	r3, [r7, #14]
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8b2:	041b      	lsls	r3, r3, #16
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	4610      	mov	r0, r2
 800d8b8:	f001 fe65 	bl	800f586 <SDMMC_CmdSendCSD>
 800d8bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c6:	e059      	b.n	800d97c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 fc47 	bl	800f162 <SDMMC_GetResponse>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2104      	movs	r1, #4
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f001 fc3e 	bl	800f162 <SDMMC_GetResponse>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2108      	movs	r1, #8
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f001 fc35 	bl	800f162 <SDMMC_GetResponse>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	210c      	movs	r1, #12
 800d904:	4618      	mov	r0, r3
 800d906:	f001 fc2c 	bl	800f162 <SDMMC_GetResponse>
 800d90a:	4602      	mov	r2, r0
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2104      	movs	r1, #4
 800d916:	4618      	mov	r0, r3
 800d918:	f001 fc23 	bl	800f162 <SDMMC_GetResponse>
 800d91c:	4603      	mov	r3, r0
 800d91e:	0d1a      	lsrs	r2, r3, #20
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d924:	f107 0310 	add.w	r3, r7, #16
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7ff fbc6 	bl	800d0bc <HAL_SD_GetCardCSD>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d002      	beq.n	800d93c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d936:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d93a:	e01f      	b.n	800d97c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6819      	ldr	r1, [r3, #0]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d944:	041b      	lsls	r3, r3, #16
 800d946:	461a      	mov	r2, r3
 800d948:	f04f 0300 	mov.w	r3, #0
 800d94c:	4608      	mov	r0, r1
 800d94e:	f001 fd13 	bl	800f378 <SDMMC_CmdSelDesel>
 800d952:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <SD_InitCard+0x172>
  {
    return errorstate;
 800d95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d95c:	e00e      	b.n	800d97c <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681d      	ldr	r5, [r3, #0]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	466c      	mov	r4, sp
 800d966:	f103 0210 	add.w	r2, r3, #16
 800d96a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d96c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d970:	3304      	adds	r3, #4
 800d972:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d974:	4628      	mov	r0, r5
 800d976:	f001 fb55 	bl	800f024 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3740      	adds	r7, #64	; 0x40
 800d980:	46bd      	mov	sp, r7
 800d982:	bdb0      	pop	{r4, r5, r7, pc}

0800d984 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d98c:	2300      	movs	r3, #0
 800d98e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d990:	2300      	movs	r3, #0
 800d992:	617b      	str	r3, [r7, #20]
 800d994:	2300      	movs	r3, #0
 800d996:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f001 fd0e 	bl	800f3be <SDMMC_CmdGoIdleState>
 800d9a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <SD_PowerON+0x2a>
  {
    return errorstate;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	e072      	b.n	800da94 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f001 fd21 	bl	800f3fa <SDMMC_CmdOperCond>
 800d9b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00d      	beq.n	800d9dc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f001 fcf7 	bl	800f3be <SDMMC_CmdGoIdleState>
 800d9d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d004      	beq.n	800d9e2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	e05b      	b.n	800da94 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d137      	bne.n	800da5a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f001 fd21 	bl	800f438 <SDMMC_CmdAppCommand>
 800d9f6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d02d      	beq.n	800da5a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da02:	e047      	b.n	800da94 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2100      	movs	r1, #0
 800da0a:	4618      	mov	r0, r3
 800da0c:	f001 fd14 	bl	800f438 <SDMMC_CmdAppCommand>
 800da10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d001      	beq.n	800da1c <SD_PowerON+0x98>
    {
      return errorstate;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	e03b      	b.n	800da94 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	491e      	ldr	r1, [pc, #120]	; (800da9c <SD_PowerON+0x118>)
 800da22:	4618      	mov	r0, r3
 800da24:	f001 fd2a 	bl	800f47c <SDMMC_CmdAppOperCommand>
 800da28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da34:	e02e      	b.n	800da94 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2100      	movs	r1, #0
 800da3c:	4618      	mov	r0, r3
 800da3e:	f001 fb90 	bl	800f162 <SDMMC_GetResponse>
 800da42:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	0fdb      	lsrs	r3, r3, #31
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d101      	bne.n	800da50 <SD_PowerON+0xcc>
 800da4c:	2301      	movs	r3, #1
 800da4e:	e000      	b.n	800da52 <SD_PowerON+0xce>
 800da50:	2300      	movs	r3, #0
 800da52:	613b      	str	r3, [r7, #16]

    count++;
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	3301      	adds	r3, #1
 800da58:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da60:	4293      	cmp	r3, r2
 800da62:	d802      	bhi.n	800da6a <SD_PowerON+0xe6>
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d0cc      	beq.n	800da04 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da70:	4293      	cmp	r3, r2
 800da72:	d902      	bls.n	800da7a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800da74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800da78:	e00c      	b.n	800da94 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da80:	2b00      	cmp	r3, #0
 800da82:	d003      	beq.n	800da8c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	645a      	str	r2, [r3, #68]	; 0x44
 800da8a:	e002      	b.n	800da92 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	c1100000 	.word	0xc1100000

0800daa0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d102      	bne.n	800dab6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dab0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dab4:	e018      	b.n	800dae8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dabe:	041b      	lsls	r3, r3, #16
 800dac0:	4619      	mov	r1, r3
 800dac2:	4610      	mov	r0, r2
 800dac4:	f001 fd9f 	bl	800f606 <SDMMC_CmdSendStatus>
 800dac8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	e009      	b.n	800dae8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2100      	movs	r1, #0
 800dada:	4618      	mov	r0, r3
 800dadc:	f001 fb41 	bl	800f162 <SDMMC_GetResponse>
 800dae0:	4602      	mov	r2, r0
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800daf8:	2300      	movs	r3, #0
 800dafa:	60fb      	str	r3, [r7, #12]
 800dafc:	2300      	movs	r3, #0
 800dafe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2100      	movs	r1, #0
 800db06:	4618      	mov	r0, r3
 800db08:	f001 fb2b 	bl	800f162 <SDMMC_GetResponse>
 800db0c:	4603      	mov	r3, r0
 800db0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db16:	d102      	bne.n	800db1e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db1c:	e02f      	b.n	800db7e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db1e:	f107 030c 	add.w	r3, r7, #12
 800db22:	4619      	mov	r1, r3
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 f879 	bl	800dc1c <SD_FindSCR>
 800db2a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	e023      	b.n	800db7e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d01c      	beq.n	800db7a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db48:	041b      	lsls	r3, r3, #16
 800db4a:	4619      	mov	r1, r3
 800db4c:	4610      	mov	r0, r2
 800db4e:	f001 fc73 	bl	800f438 <SDMMC_CmdAppCommand>
 800db52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d001      	beq.n	800db5e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	e00f      	b.n	800db7e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2102      	movs	r1, #2
 800db64:	4618      	mov	r0, r3
 800db66:	f001 fcad 	bl	800f4c4 <SDMMC_CmdBusWidth>
 800db6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	e003      	b.n	800db7e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db76:	2300      	movs	r3, #0
 800db78:	e001      	b.n	800db7e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b086      	sub	sp, #24
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db8e:	2300      	movs	r3, #0
 800db90:	60fb      	str	r3, [r7, #12]
 800db92:	2300      	movs	r3, #0
 800db94:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2100      	movs	r1, #0
 800db9c:	4618      	mov	r0, r3
 800db9e:	f001 fae0 	bl	800f162 <SDMMC_GetResponse>
 800dba2:	4603      	mov	r3, r0
 800dba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dbac:	d102      	bne.n	800dbb4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dbae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbb2:	e02f      	b.n	800dc14 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dbb4:	f107 030c 	add.w	r3, r7, #12
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 f82e 	bl	800dc1c <SD_FindSCR>
 800dbc0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	e023      	b.n	800dc14 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d01c      	beq.n	800dc10 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbde:	041b      	lsls	r3, r3, #16
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	f001 fc28 	bl	800f438 <SDMMC_CmdAppCommand>
 800dbe8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d001      	beq.n	800dbf4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	e00f      	b.n	800dc14 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f001 fc62 	bl	800f4c4 <SDMMC_CmdBusWidth>
 800dc00:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	e003      	b.n	800dc14 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	e001      	b.n	800dc14 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dc1c:	b590      	push	{r4, r7, lr}
 800dc1e:	b08f      	sub	sp, #60	; 0x3c
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc26:	f7fa fbb1 	bl	800838c <HAL_GetTick>
 800dc2a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dc30:	2300      	movs	r3, #0
 800dc32:	60bb      	str	r3, [r7, #8]
 800dc34:	2300      	movs	r3, #0
 800dc36:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2108      	movs	r1, #8
 800dc42:	4618      	mov	r0, r3
 800dc44:	f001 facc 	bl	800f1e0 <SDMMC_CmdBlockLength>
 800dc48:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d001      	beq.n	800dc54 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc52:	e0b2      	b.n	800ddba <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc5c:	041b      	lsls	r3, r3, #16
 800dc5e:	4619      	mov	r1, r3
 800dc60:	4610      	mov	r0, r2
 800dc62:	f001 fbe9 	bl	800f438 <SDMMC_CmdAppCommand>
 800dc66:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d001      	beq.n	800dc72 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc70:	e0a3      	b.n	800ddba <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc72:	f04f 33ff 	mov.w	r3, #4294967295
 800dc76:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dc78:	2308      	movs	r3, #8
 800dc7a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dc7c:	2330      	movs	r3, #48	; 0x30
 800dc7e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dc80:	2302      	movs	r3, #2
 800dc82:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dc84:	2300      	movs	r3, #0
 800dc86:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f107 0210 	add.w	r2, r7, #16
 800dc94:	4611      	mov	r1, r2
 800dc96:	4618      	mov	r0, r3
 800dc98:	f001 fa76 	bl	800f188 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f001 fc31 	bl	800f508 <SDMMC_CmdSendSCR>
 800dca6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d02a      	beq.n	800dd04 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb0:	e083      	b.n	800ddba <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00f      	beq.n	800dce0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6819      	ldr	r1, [r3, #0]
 800dcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	f107 0208 	add.w	r2, r7, #8
 800dccc:	18d4      	adds	r4, r2, r3
 800dcce:	4608      	mov	r0, r1
 800dcd0:	f001 f9d4 	bl	800f07c <SDMMC_ReadFIFO>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	6023      	str	r3, [r4, #0]
      index++;
 800dcd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcda:	3301      	adds	r3, #1
 800dcdc:	637b      	str	r3, [r7, #52]	; 0x34
 800dcde:	e006      	b.n	800dcee <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d012      	beq.n	800dd14 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dcee:	f7fa fb4d 	bl	800838c <HAL_GetTick>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf6:	1ad3      	subs	r3, r2, r3
 800dcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfc:	d102      	bne.n	800dd04 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dcfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd02:	e05a      	b.n	800ddba <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd0a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d0cf      	beq.n	800dcb2 <SD_FindSCR+0x96>
 800dd12:	e000      	b.n	800dd16 <SD_FindSCR+0xfa>
      break;
 800dd14:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1c:	f003 0308 	and.w	r3, r3, #8
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d005      	beq.n	800dd30 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2208      	movs	r2, #8
 800dd2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dd2c:	2308      	movs	r3, #8
 800dd2e:	e044      	b.n	800ddba <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd36:	f003 0302 	and.w	r3, r3, #2
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d005      	beq.n	800dd4a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2202      	movs	r2, #2
 800dd44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd46:	2302      	movs	r3, #2
 800dd48:	e037      	b.n	800ddba <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd50:	f003 0320 	and.w	r3, r3, #32
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d005      	beq.n	800dd64 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2220      	movs	r2, #32
 800dd5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd60:	2320      	movs	r3, #32
 800dd62:	e02a      	b.n	800ddba <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd6c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	061a      	lsls	r2, r3, #24
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	021b      	lsls	r3, r3, #8
 800dd76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd7a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	0a1b      	lsrs	r3, r3, #8
 800dd80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd84:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	0e1b      	lsrs	r3, r3, #24
 800dd8a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8e:	601a      	str	r2, [r3, #0]
    scr++;
 800dd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd92:	3304      	adds	r3, #4
 800dd94:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	061a      	lsls	r2, r3, #24
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	021b      	lsls	r3, r3, #8
 800dd9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dda2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	0a1b      	lsrs	r3, r3, #8
 800dda8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	0e1b      	lsrs	r3, r3, #24
 800ddb2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	373c      	adds	r7, #60	; 0x3c
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd90      	pop	{r4, r7, pc}

0800ddc2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b086      	sub	sp, #24
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddce:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d03f      	beq.n	800de5c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dddc:	2300      	movs	r3, #0
 800ddde:	617b      	str	r3, [r7, #20]
 800dde0:	e033      	b.n	800de4a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4618      	mov	r0, r3
 800dde8:	f001 f948 	bl	800f07c <SDMMC_ReadFIFO>
 800ddec:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	3b01      	subs	r3, #1
 800de00:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	0a1b      	lsrs	r3, r3, #8
 800de06:	b2da      	uxtb	r2, r3
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	3301      	adds	r3, #1
 800de10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	3b01      	subs	r3, #1
 800de16:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	0c1b      	lsrs	r3, r3, #16
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	3301      	adds	r3, #1
 800de26:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	3b01      	subs	r3, #1
 800de2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	0e1b      	lsrs	r3, r3, #24
 800de32:	b2da      	uxtb	r2, r3
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	3301      	adds	r3, #1
 800de3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	3b01      	subs	r3, #1
 800de42:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	3301      	adds	r3, #1
 800de48:	617b      	str	r3, [r7, #20]
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	2b07      	cmp	r3, #7
 800de4e:	d9c8      	bls.n	800dde2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800de5c:	bf00      	nop
 800de5e:	3718      	adds	r7, #24
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b086      	sub	sp, #24
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6a1b      	ldr	r3, [r3, #32]
 800de70:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de76:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d043      	beq.n	800df06 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800de7e:	2300      	movs	r3, #0
 800de80:	617b      	str	r3, [r7, #20]
 800de82:	e037      	b.n	800def4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3301      	adds	r3, #1
 800de8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	3b01      	subs	r3, #1
 800de94:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	021a      	lsls	r2, r3, #8
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	4313      	orrs	r3, r2
 800dea0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	3301      	adds	r3, #1
 800dea6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	3b01      	subs	r3, #1
 800deac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	041a      	lsls	r2, r3, #16
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	4313      	orrs	r3, r2
 800deb8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	3301      	adds	r3, #1
 800debe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	3b01      	subs	r3, #1
 800dec4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	061a      	lsls	r2, r3, #24
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	4313      	orrs	r3, r2
 800ded0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	3301      	adds	r3, #1
 800ded6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	3b01      	subs	r3, #1
 800dedc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f107 0208 	add.w	r2, r7, #8
 800dee6:	4611      	mov	r1, r2
 800dee8:	4618      	mov	r0, r3
 800deea:	f001 f8d4 	bl	800f096 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	3301      	adds	r3, #1
 800def2:	617b      	str	r3, [r7, #20]
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	2b07      	cmp	r3, #7
 800def8:	d9c4      	bls.n	800de84 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	693a      	ldr	r2, [r7, #16]
 800df04:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800df06:	bf00      	nop
 800df08:	3718      	adds	r7, #24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
 800df16:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d101      	bne.n	800df22 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	e025      	b.n	800df6e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d106      	bne.n	800df3c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2200      	movs	r2, #0
 800df32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7f8 fb2a 	bl	8006590 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2202      	movs	r2, #2
 800df40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	3304      	adds	r3, #4
 800df4c:	4619      	mov	r1, r3
 800df4e:	4610      	mov	r0, r2
 800df50:	f000 ff3e 	bl	800edd0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6818      	ldr	r0, [r3, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	461a      	mov	r2, r3
 800df5e:	6839      	ldr	r1, [r7, #0]
 800df60:	f000 ffa8 	bl	800eeb4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2201      	movs	r2, #1
 800df68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3708      	adds	r7, #8
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b084      	sub	sp, #16
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	60f8      	str	r0, [r7, #12]
 800df7e:	60b9      	str	r1, [r7, #8]
 800df80:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b02      	cmp	r3, #2
 800df8c:	d101      	bne.n	800df92 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800df8e:	2302      	movs	r3, #2
 800df90:	e018      	b.n	800dfc4 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2202      	movs	r2, #2
 800df96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	68b9      	ldr	r1, [r7, #8]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f001 f806 	bl	800efb4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b02      	cmp	r3, #2
 800dfae:	d104      	bne.n	800dfba <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2205      	movs	r2, #5
 800dfb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800dfb8:	e003      	b.n	800dfc2 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800dfc2:	2300      	movs	r3, #0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	2b02      	cmp	r3, #2
 800dfe0:	d101      	bne.n	800dfe6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800dfe2:	2302      	movs	r3, #2
 800dfe4:	e00e      	b.n	800e004 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2202      	movs	r2, #2
 800dfea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	6839      	ldr	r1, [r7, #0]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f001 f801 	bl	800effc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d101      	bne.n	800e01e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e01a:	2301      	movs	r3, #1
 800e01c:	e049      	b.n	800e0b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e024:	b2db      	uxtb	r3, r3
 800e026:	2b00      	cmp	r3, #0
 800e028:	d106      	bne.n	800e038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f841 	bl	800e0ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2202      	movs	r2, #2
 800e03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	3304      	adds	r3, #4
 800e048:	4619      	mov	r1, r3
 800e04a:	4610      	mov	r0, r2
 800e04c:	f000 fa00 	bl	800e450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2201      	movs	r2, #1
 800e06c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2201      	movs	r2, #1
 800e08c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0b0:	2300      	movs	r3, #0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e0ba:	b480      	push	{r7}
 800e0bc:	b083      	sub	sp, #12
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e0c2:	bf00      	nop
 800e0c4:	370c      	adds	r7, #12
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
	...

0800e0d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b085      	sub	sp, #20
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d001      	beq.n	800e0e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e054      	b.n	800e192 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2202      	movs	r2, #2
 800e0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	68da      	ldr	r2, [r3, #12]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f042 0201 	orr.w	r2, r2, #1
 800e0fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4a26      	ldr	r2, [pc, #152]	; (800e1a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d022      	beq.n	800e150 <HAL_TIM_Base_Start_IT+0x80>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e112:	d01d      	beq.n	800e150 <HAL_TIM_Base_Start_IT+0x80>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4a22      	ldr	r2, [pc, #136]	; (800e1a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d018      	beq.n	800e150 <HAL_TIM_Base_Start_IT+0x80>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	4a21      	ldr	r2, [pc, #132]	; (800e1a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d013      	beq.n	800e150 <HAL_TIM_Base_Start_IT+0x80>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a1f      	ldr	r2, [pc, #124]	; (800e1ac <HAL_TIM_Base_Start_IT+0xdc>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d00e      	beq.n	800e150 <HAL_TIM_Base_Start_IT+0x80>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4a1e      	ldr	r2, [pc, #120]	; (800e1b0 <HAL_TIM_Base_Start_IT+0xe0>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d009      	beq.n	800e150 <HAL_TIM_Base_Start_IT+0x80>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4a1c      	ldr	r2, [pc, #112]	; (800e1b4 <HAL_TIM_Base_Start_IT+0xe4>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d004      	beq.n	800e150 <HAL_TIM_Base_Start_IT+0x80>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a1b      	ldr	r2, [pc, #108]	; (800e1b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d115      	bne.n	800e17c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	689a      	ldr	r2, [r3, #8]
 800e156:	4b19      	ldr	r3, [pc, #100]	; (800e1bc <HAL_TIM_Base_Start_IT+0xec>)
 800e158:	4013      	ands	r3, r2
 800e15a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2b06      	cmp	r3, #6
 800e160:	d015      	beq.n	800e18e <HAL_TIM_Base_Start_IT+0xbe>
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e168:	d011      	beq.n	800e18e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f042 0201 	orr.w	r2, r2, #1
 800e178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e17a:	e008      	b.n	800e18e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f042 0201 	orr.w	r2, r2, #1
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	e000      	b.n	800e190 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e18e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e190:	2300      	movs	r3, #0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3714      	adds	r7, #20
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	40010000 	.word	0x40010000
 800e1a4:	40000400 	.word	0x40000400
 800e1a8:	40000800 	.word	0x40000800
 800e1ac:	40000c00 	.word	0x40000c00
 800e1b0:	40010400 	.word	0x40010400
 800e1b4:	40014000 	.word	0x40014000
 800e1b8:	40001800 	.word	0x40001800
 800e1bc:	00010007 	.word	0x00010007

0800e1c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	691b      	ldr	r3, [r3, #16]
 800e1ce:	f003 0302 	and.w	r3, r3, #2
 800e1d2:	2b02      	cmp	r3, #2
 800e1d4:	d122      	bne.n	800e21c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	f003 0302 	and.w	r3, r3, #2
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d11b      	bne.n	800e21c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f06f 0202 	mvn.w	r2, #2
 800e1ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	f003 0303 	and.w	r3, r3, #3
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d003      	beq.n	800e20a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 f905 	bl	800e412 <HAL_TIM_IC_CaptureCallback>
 800e208:	e005      	b.n	800e216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f8f7 	bl	800e3fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 f908 	bl	800e426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	691b      	ldr	r3, [r3, #16]
 800e222:	f003 0304 	and.w	r3, r3, #4
 800e226:	2b04      	cmp	r3, #4
 800e228:	d122      	bne.n	800e270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	f003 0304 	and.w	r3, r3, #4
 800e234:	2b04      	cmp	r3, #4
 800e236:	d11b      	bne.n	800e270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f06f 0204 	mvn.w	r2, #4
 800e240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2202      	movs	r2, #2
 800e246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	699b      	ldr	r3, [r3, #24]
 800e24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e252:	2b00      	cmp	r3, #0
 800e254:	d003      	beq.n	800e25e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 f8db 	bl	800e412 <HAL_TIM_IC_CaptureCallback>
 800e25c:	e005      	b.n	800e26a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 f8cd 	bl	800e3fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 f8de 	bl	800e426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	691b      	ldr	r3, [r3, #16]
 800e276:	f003 0308 	and.w	r3, r3, #8
 800e27a:	2b08      	cmp	r3, #8
 800e27c:	d122      	bne.n	800e2c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	f003 0308 	and.w	r3, r3, #8
 800e288:	2b08      	cmp	r3, #8
 800e28a:	d11b      	bne.n	800e2c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f06f 0208 	mvn.w	r2, #8
 800e294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2204      	movs	r2, #4
 800e29a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	69db      	ldr	r3, [r3, #28]
 800e2a2:	f003 0303 	and.w	r3, r3, #3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d003      	beq.n	800e2b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 f8b1 	bl	800e412 <HAL_TIM_IC_CaptureCallback>
 800e2b0:	e005      	b.n	800e2be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 f8a3 	bl	800e3fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f8b4 	bl	800e426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	691b      	ldr	r3, [r3, #16]
 800e2ca:	f003 0310 	and.w	r3, r3, #16
 800e2ce:	2b10      	cmp	r3, #16
 800e2d0:	d122      	bne.n	800e318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	f003 0310 	and.w	r3, r3, #16
 800e2dc:	2b10      	cmp	r3, #16
 800e2de:	d11b      	bne.n	800e318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f06f 0210 	mvn.w	r2, #16
 800e2e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2208      	movs	r2, #8
 800e2ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	69db      	ldr	r3, [r3, #28]
 800e2f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d003      	beq.n	800e306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 f887 	bl	800e412 <HAL_TIM_IC_CaptureCallback>
 800e304:	e005      	b.n	800e312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 f879 	bl	800e3fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 f88a 	bl	800e426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	691b      	ldr	r3, [r3, #16]
 800e31e:	f003 0301 	and.w	r3, r3, #1
 800e322:	2b01      	cmp	r3, #1
 800e324:	d10e      	bne.n	800e344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	f003 0301 	and.w	r3, r3, #1
 800e330:	2b01      	cmp	r3, #1
 800e332:	d107      	bne.n	800e344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f06f 0201 	mvn.w	r2, #1
 800e33c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7f5 fa80 	bl	8003844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e34e:	2b80      	cmp	r3, #128	; 0x80
 800e350:	d10e      	bne.n	800e370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e35c:	2b80      	cmp	r3, #128	; 0x80
 800e35e:	d107      	bne.n	800e370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 f91a 	bl	800e5a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	691b      	ldr	r3, [r3, #16]
 800e376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e37e:	d10e      	bne.n	800e39e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e38a:	2b80      	cmp	r3, #128	; 0x80
 800e38c:	d107      	bne.n	800e39e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 f90d 	bl	800e5b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	691b      	ldr	r3, [r3, #16]
 800e3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3a8:	2b40      	cmp	r3, #64	; 0x40
 800e3aa:	d10e      	bne.n	800e3ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3b6:	2b40      	cmp	r3, #64	; 0x40
 800e3b8:	d107      	bne.n	800e3ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e3c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 f838 	bl	800e43a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	691b      	ldr	r3, [r3, #16]
 800e3d0:	f003 0320 	and.w	r3, r3, #32
 800e3d4:	2b20      	cmp	r3, #32
 800e3d6:	d10e      	bne.n	800e3f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	f003 0320 	and.w	r3, r3, #32
 800e3e2:	2b20      	cmp	r3, #32
 800e3e4:	d107      	bne.n	800e3f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f06f 0220 	mvn.w	r2, #32
 800e3ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 f8cd 	bl	800e590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e3f6:	bf00      	nop
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e3fe:	b480      	push	{r7}
 800e400:	b083      	sub	sp, #12
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e406:	bf00      	nop
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e412:	b480      	push	{r7}
 800e414:	b083      	sub	sp, #12
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e41a:	bf00      	nop
 800e41c:	370c      	adds	r7, #12
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr

0800e426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e426:	b480      	push	{r7}
 800e428:	b083      	sub	sp, #12
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e42e:	bf00      	nop
 800e430:	370c      	adds	r7, #12
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr

0800e43a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e43a:	b480      	push	{r7}
 800e43c:	b083      	sub	sp, #12
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e442:	bf00      	nop
 800e444:	370c      	adds	r7, #12
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr
	...

0800e450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e450:	b480      	push	{r7}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4a40      	ldr	r2, [pc, #256]	; (800e564 <TIM_Base_SetConfig+0x114>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d013      	beq.n	800e490 <TIM_Base_SetConfig+0x40>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e46e:	d00f      	beq.n	800e490 <TIM_Base_SetConfig+0x40>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a3d      	ldr	r2, [pc, #244]	; (800e568 <TIM_Base_SetConfig+0x118>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d00b      	beq.n	800e490 <TIM_Base_SetConfig+0x40>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4a3c      	ldr	r2, [pc, #240]	; (800e56c <TIM_Base_SetConfig+0x11c>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d007      	beq.n	800e490 <TIM_Base_SetConfig+0x40>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4a3b      	ldr	r2, [pc, #236]	; (800e570 <TIM_Base_SetConfig+0x120>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d003      	beq.n	800e490 <TIM_Base_SetConfig+0x40>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4a3a      	ldr	r2, [pc, #232]	; (800e574 <TIM_Base_SetConfig+0x124>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d108      	bne.n	800e4a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	4a2f      	ldr	r2, [pc, #188]	; (800e564 <TIM_Base_SetConfig+0x114>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d02b      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4b0:	d027      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4a2c      	ldr	r2, [pc, #176]	; (800e568 <TIM_Base_SetConfig+0x118>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d023      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4a2b      	ldr	r2, [pc, #172]	; (800e56c <TIM_Base_SetConfig+0x11c>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d01f      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4a2a      	ldr	r2, [pc, #168]	; (800e570 <TIM_Base_SetConfig+0x120>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d01b      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4a29      	ldr	r2, [pc, #164]	; (800e574 <TIM_Base_SetConfig+0x124>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d017      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4a28      	ldr	r2, [pc, #160]	; (800e578 <TIM_Base_SetConfig+0x128>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d013      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4a27      	ldr	r2, [pc, #156]	; (800e57c <TIM_Base_SetConfig+0x12c>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d00f      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4a26      	ldr	r2, [pc, #152]	; (800e580 <TIM_Base_SetConfig+0x130>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d00b      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4a25      	ldr	r2, [pc, #148]	; (800e584 <TIM_Base_SetConfig+0x134>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d007      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4a24      	ldr	r2, [pc, #144]	; (800e588 <TIM_Base_SetConfig+0x138>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d003      	beq.n	800e502 <TIM_Base_SetConfig+0xb2>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4a23      	ldr	r2, [pc, #140]	; (800e58c <TIM_Base_SetConfig+0x13c>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d108      	bne.n	800e514 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	4313      	orrs	r3, r2
 800e512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	4313      	orrs	r3, r2
 800e520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	689a      	ldr	r2, [r3, #8]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4a0a      	ldr	r2, [pc, #40]	; (800e564 <TIM_Base_SetConfig+0x114>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d003      	beq.n	800e548 <TIM_Base_SetConfig+0xf8>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	4a0c      	ldr	r2, [pc, #48]	; (800e574 <TIM_Base_SetConfig+0x124>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d103      	bne.n	800e550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	691a      	ldr	r2, [r3, #16]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	615a      	str	r2, [r3, #20]
}
 800e556:	bf00      	nop
 800e558:	3714      	adds	r7, #20
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	40010000 	.word	0x40010000
 800e568:	40000400 	.word	0x40000400
 800e56c:	40000800 	.word	0x40000800
 800e570:	40000c00 	.word	0x40000c00
 800e574:	40010400 	.word	0x40010400
 800e578:	40014000 	.word	0x40014000
 800e57c:	40014400 	.word	0x40014400
 800e580:	40014800 	.word	0x40014800
 800e584:	40001800 	.word	0x40001800
 800e588:	40001c00 	.word	0x40001c00
 800e58c:	40002000 	.word	0x40002000

0800e590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e598:	bf00      	nop
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e5ac:	bf00      	nop
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr

0800e5b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d101      	bne.n	800e5de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e040      	b.n	800e660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d106      	bne.n	800e5f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7f7 feca 	bl	8006388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2224      	movs	r2, #36	; 0x24
 800e5f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f022 0201 	bic.w	r2, r2, #1
 800e608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f82c 	bl	800e668 <UART_SetConfig>
 800e610:	4603      	mov	r3, r0
 800e612:	2b01      	cmp	r3, #1
 800e614:	d101      	bne.n	800e61a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e616:	2301      	movs	r3, #1
 800e618:	e022      	b.n	800e660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d002      	beq.n	800e628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 fa82 	bl	800eb2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	685a      	ldr	r2, [r3, #4]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	689a      	ldr	r2, [r3, #8]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f042 0201 	orr.w	r2, r2, #1
 800e656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 fb09 	bl	800ec70 <UART_CheckIdleState>
 800e65e:	4603      	mov	r3, r0
}
 800e660:	4618      	mov	r0, r3
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b088      	sub	sp, #32
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	689a      	ldr	r2, [r3, #8]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	691b      	ldr	r3, [r3, #16]
 800e67c:	431a      	orrs	r2, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	695b      	ldr	r3, [r3, #20]
 800e682:	431a      	orrs	r2, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	69db      	ldr	r3, [r3, #28]
 800e688:	4313      	orrs	r3, r2
 800e68a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	4ba7      	ldr	r3, [pc, #668]	; (800e930 <UART_SetConfig+0x2c8>)
 800e694:	4013      	ands	r3, r2
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	6812      	ldr	r2, [r2, #0]
 800e69a:	6979      	ldr	r1, [r7, #20]
 800e69c:	430b      	orrs	r3, r1
 800e69e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	68da      	ldr	r2, [r3, #12]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	430a      	orrs	r2, r1
 800e6b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	699b      	ldr	r3, [r3, #24]
 800e6ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6a1b      	ldr	r3, [r3, #32]
 800e6c0:	697a      	ldr	r2, [r7, #20]
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	697a      	ldr	r2, [r7, #20]
 800e6d6:	430a      	orrs	r2, r1
 800e6d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	4a95      	ldr	r2, [pc, #596]	; (800e934 <UART_SetConfig+0x2cc>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d120      	bne.n	800e726 <UART_SetConfig+0xbe>
 800e6e4:	4b94      	ldr	r3, [pc, #592]	; (800e938 <UART_SetConfig+0x2d0>)
 800e6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6ea:	f003 0303 	and.w	r3, r3, #3
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d816      	bhi.n	800e720 <UART_SetConfig+0xb8>
 800e6f2:	a201      	add	r2, pc, #4	; (adr r2, 800e6f8 <UART_SetConfig+0x90>)
 800e6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f8:	0800e709 	.word	0x0800e709
 800e6fc:	0800e715 	.word	0x0800e715
 800e700:	0800e70f 	.word	0x0800e70f
 800e704:	0800e71b 	.word	0x0800e71b
 800e708:	2301      	movs	r3, #1
 800e70a:	77fb      	strb	r3, [r7, #31]
 800e70c:	e14f      	b.n	800e9ae <UART_SetConfig+0x346>
 800e70e:	2302      	movs	r3, #2
 800e710:	77fb      	strb	r3, [r7, #31]
 800e712:	e14c      	b.n	800e9ae <UART_SetConfig+0x346>
 800e714:	2304      	movs	r3, #4
 800e716:	77fb      	strb	r3, [r7, #31]
 800e718:	e149      	b.n	800e9ae <UART_SetConfig+0x346>
 800e71a:	2308      	movs	r3, #8
 800e71c:	77fb      	strb	r3, [r7, #31]
 800e71e:	e146      	b.n	800e9ae <UART_SetConfig+0x346>
 800e720:	2310      	movs	r3, #16
 800e722:	77fb      	strb	r3, [r7, #31]
 800e724:	e143      	b.n	800e9ae <UART_SetConfig+0x346>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a84      	ldr	r2, [pc, #528]	; (800e93c <UART_SetConfig+0x2d4>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d132      	bne.n	800e796 <UART_SetConfig+0x12e>
 800e730:	4b81      	ldr	r3, [pc, #516]	; (800e938 <UART_SetConfig+0x2d0>)
 800e732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e736:	f003 030c 	and.w	r3, r3, #12
 800e73a:	2b0c      	cmp	r3, #12
 800e73c:	d828      	bhi.n	800e790 <UART_SetConfig+0x128>
 800e73e:	a201      	add	r2, pc, #4	; (adr r2, 800e744 <UART_SetConfig+0xdc>)
 800e740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e744:	0800e779 	.word	0x0800e779
 800e748:	0800e791 	.word	0x0800e791
 800e74c:	0800e791 	.word	0x0800e791
 800e750:	0800e791 	.word	0x0800e791
 800e754:	0800e785 	.word	0x0800e785
 800e758:	0800e791 	.word	0x0800e791
 800e75c:	0800e791 	.word	0x0800e791
 800e760:	0800e791 	.word	0x0800e791
 800e764:	0800e77f 	.word	0x0800e77f
 800e768:	0800e791 	.word	0x0800e791
 800e76c:	0800e791 	.word	0x0800e791
 800e770:	0800e791 	.word	0x0800e791
 800e774:	0800e78b 	.word	0x0800e78b
 800e778:	2300      	movs	r3, #0
 800e77a:	77fb      	strb	r3, [r7, #31]
 800e77c:	e117      	b.n	800e9ae <UART_SetConfig+0x346>
 800e77e:	2302      	movs	r3, #2
 800e780:	77fb      	strb	r3, [r7, #31]
 800e782:	e114      	b.n	800e9ae <UART_SetConfig+0x346>
 800e784:	2304      	movs	r3, #4
 800e786:	77fb      	strb	r3, [r7, #31]
 800e788:	e111      	b.n	800e9ae <UART_SetConfig+0x346>
 800e78a:	2308      	movs	r3, #8
 800e78c:	77fb      	strb	r3, [r7, #31]
 800e78e:	e10e      	b.n	800e9ae <UART_SetConfig+0x346>
 800e790:	2310      	movs	r3, #16
 800e792:	77fb      	strb	r3, [r7, #31]
 800e794:	e10b      	b.n	800e9ae <UART_SetConfig+0x346>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a69      	ldr	r2, [pc, #420]	; (800e940 <UART_SetConfig+0x2d8>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d120      	bne.n	800e7e2 <UART_SetConfig+0x17a>
 800e7a0:	4b65      	ldr	r3, [pc, #404]	; (800e938 <UART_SetConfig+0x2d0>)
 800e7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e7aa:	2b30      	cmp	r3, #48	; 0x30
 800e7ac:	d013      	beq.n	800e7d6 <UART_SetConfig+0x16e>
 800e7ae:	2b30      	cmp	r3, #48	; 0x30
 800e7b0:	d814      	bhi.n	800e7dc <UART_SetConfig+0x174>
 800e7b2:	2b20      	cmp	r3, #32
 800e7b4:	d009      	beq.n	800e7ca <UART_SetConfig+0x162>
 800e7b6:	2b20      	cmp	r3, #32
 800e7b8:	d810      	bhi.n	800e7dc <UART_SetConfig+0x174>
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d002      	beq.n	800e7c4 <UART_SetConfig+0x15c>
 800e7be:	2b10      	cmp	r3, #16
 800e7c0:	d006      	beq.n	800e7d0 <UART_SetConfig+0x168>
 800e7c2:	e00b      	b.n	800e7dc <UART_SetConfig+0x174>
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	77fb      	strb	r3, [r7, #31]
 800e7c8:	e0f1      	b.n	800e9ae <UART_SetConfig+0x346>
 800e7ca:	2302      	movs	r3, #2
 800e7cc:	77fb      	strb	r3, [r7, #31]
 800e7ce:	e0ee      	b.n	800e9ae <UART_SetConfig+0x346>
 800e7d0:	2304      	movs	r3, #4
 800e7d2:	77fb      	strb	r3, [r7, #31]
 800e7d4:	e0eb      	b.n	800e9ae <UART_SetConfig+0x346>
 800e7d6:	2308      	movs	r3, #8
 800e7d8:	77fb      	strb	r3, [r7, #31]
 800e7da:	e0e8      	b.n	800e9ae <UART_SetConfig+0x346>
 800e7dc:	2310      	movs	r3, #16
 800e7de:	77fb      	strb	r3, [r7, #31]
 800e7e0:	e0e5      	b.n	800e9ae <UART_SetConfig+0x346>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a57      	ldr	r2, [pc, #348]	; (800e944 <UART_SetConfig+0x2dc>)
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d120      	bne.n	800e82e <UART_SetConfig+0x1c6>
 800e7ec:	4b52      	ldr	r3, [pc, #328]	; (800e938 <UART_SetConfig+0x2d0>)
 800e7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e7f6:	2bc0      	cmp	r3, #192	; 0xc0
 800e7f8:	d013      	beq.n	800e822 <UART_SetConfig+0x1ba>
 800e7fa:	2bc0      	cmp	r3, #192	; 0xc0
 800e7fc:	d814      	bhi.n	800e828 <UART_SetConfig+0x1c0>
 800e7fe:	2b80      	cmp	r3, #128	; 0x80
 800e800:	d009      	beq.n	800e816 <UART_SetConfig+0x1ae>
 800e802:	2b80      	cmp	r3, #128	; 0x80
 800e804:	d810      	bhi.n	800e828 <UART_SetConfig+0x1c0>
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <UART_SetConfig+0x1a8>
 800e80a:	2b40      	cmp	r3, #64	; 0x40
 800e80c:	d006      	beq.n	800e81c <UART_SetConfig+0x1b4>
 800e80e:	e00b      	b.n	800e828 <UART_SetConfig+0x1c0>
 800e810:	2300      	movs	r3, #0
 800e812:	77fb      	strb	r3, [r7, #31]
 800e814:	e0cb      	b.n	800e9ae <UART_SetConfig+0x346>
 800e816:	2302      	movs	r3, #2
 800e818:	77fb      	strb	r3, [r7, #31]
 800e81a:	e0c8      	b.n	800e9ae <UART_SetConfig+0x346>
 800e81c:	2304      	movs	r3, #4
 800e81e:	77fb      	strb	r3, [r7, #31]
 800e820:	e0c5      	b.n	800e9ae <UART_SetConfig+0x346>
 800e822:	2308      	movs	r3, #8
 800e824:	77fb      	strb	r3, [r7, #31]
 800e826:	e0c2      	b.n	800e9ae <UART_SetConfig+0x346>
 800e828:	2310      	movs	r3, #16
 800e82a:	77fb      	strb	r3, [r7, #31]
 800e82c:	e0bf      	b.n	800e9ae <UART_SetConfig+0x346>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a45      	ldr	r2, [pc, #276]	; (800e948 <UART_SetConfig+0x2e0>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d125      	bne.n	800e884 <UART_SetConfig+0x21c>
 800e838:	4b3f      	ldr	r3, [pc, #252]	; (800e938 <UART_SetConfig+0x2d0>)
 800e83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e83e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e846:	d017      	beq.n	800e878 <UART_SetConfig+0x210>
 800e848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e84c:	d817      	bhi.n	800e87e <UART_SetConfig+0x216>
 800e84e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e852:	d00b      	beq.n	800e86c <UART_SetConfig+0x204>
 800e854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e858:	d811      	bhi.n	800e87e <UART_SetConfig+0x216>
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d003      	beq.n	800e866 <UART_SetConfig+0x1fe>
 800e85e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e862:	d006      	beq.n	800e872 <UART_SetConfig+0x20a>
 800e864:	e00b      	b.n	800e87e <UART_SetConfig+0x216>
 800e866:	2300      	movs	r3, #0
 800e868:	77fb      	strb	r3, [r7, #31]
 800e86a:	e0a0      	b.n	800e9ae <UART_SetConfig+0x346>
 800e86c:	2302      	movs	r3, #2
 800e86e:	77fb      	strb	r3, [r7, #31]
 800e870:	e09d      	b.n	800e9ae <UART_SetConfig+0x346>
 800e872:	2304      	movs	r3, #4
 800e874:	77fb      	strb	r3, [r7, #31]
 800e876:	e09a      	b.n	800e9ae <UART_SetConfig+0x346>
 800e878:	2308      	movs	r3, #8
 800e87a:	77fb      	strb	r3, [r7, #31]
 800e87c:	e097      	b.n	800e9ae <UART_SetConfig+0x346>
 800e87e:	2310      	movs	r3, #16
 800e880:	77fb      	strb	r3, [r7, #31]
 800e882:	e094      	b.n	800e9ae <UART_SetConfig+0x346>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a30      	ldr	r2, [pc, #192]	; (800e94c <UART_SetConfig+0x2e4>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d125      	bne.n	800e8da <UART_SetConfig+0x272>
 800e88e:	4b2a      	ldr	r3, [pc, #168]	; (800e938 <UART_SetConfig+0x2d0>)
 800e890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e894:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e898:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e89c:	d017      	beq.n	800e8ce <UART_SetConfig+0x266>
 800e89e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e8a2:	d817      	bhi.n	800e8d4 <UART_SetConfig+0x26c>
 800e8a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8a8:	d00b      	beq.n	800e8c2 <UART_SetConfig+0x25a>
 800e8aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8ae:	d811      	bhi.n	800e8d4 <UART_SetConfig+0x26c>
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d003      	beq.n	800e8bc <UART_SetConfig+0x254>
 800e8b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8b8:	d006      	beq.n	800e8c8 <UART_SetConfig+0x260>
 800e8ba:	e00b      	b.n	800e8d4 <UART_SetConfig+0x26c>
 800e8bc:	2301      	movs	r3, #1
 800e8be:	77fb      	strb	r3, [r7, #31]
 800e8c0:	e075      	b.n	800e9ae <UART_SetConfig+0x346>
 800e8c2:	2302      	movs	r3, #2
 800e8c4:	77fb      	strb	r3, [r7, #31]
 800e8c6:	e072      	b.n	800e9ae <UART_SetConfig+0x346>
 800e8c8:	2304      	movs	r3, #4
 800e8ca:	77fb      	strb	r3, [r7, #31]
 800e8cc:	e06f      	b.n	800e9ae <UART_SetConfig+0x346>
 800e8ce:	2308      	movs	r3, #8
 800e8d0:	77fb      	strb	r3, [r7, #31]
 800e8d2:	e06c      	b.n	800e9ae <UART_SetConfig+0x346>
 800e8d4:	2310      	movs	r3, #16
 800e8d6:	77fb      	strb	r3, [r7, #31]
 800e8d8:	e069      	b.n	800e9ae <UART_SetConfig+0x346>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a1c      	ldr	r2, [pc, #112]	; (800e950 <UART_SetConfig+0x2e8>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d137      	bne.n	800e954 <UART_SetConfig+0x2ec>
 800e8e4:	4b14      	ldr	r3, [pc, #80]	; (800e938 <UART_SetConfig+0x2d0>)
 800e8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e8ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e8f2:	d017      	beq.n	800e924 <UART_SetConfig+0x2bc>
 800e8f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e8f8:	d817      	bhi.n	800e92a <UART_SetConfig+0x2c2>
 800e8fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8fe:	d00b      	beq.n	800e918 <UART_SetConfig+0x2b0>
 800e900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e904:	d811      	bhi.n	800e92a <UART_SetConfig+0x2c2>
 800e906:	2b00      	cmp	r3, #0
 800e908:	d003      	beq.n	800e912 <UART_SetConfig+0x2aa>
 800e90a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e90e:	d006      	beq.n	800e91e <UART_SetConfig+0x2b6>
 800e910:	e00b      	b.n	800e92a <UART_SetConfig+0x2c2>
 800e912:	2300      	movs	r3, #0
 800e914:	77fb      	strb	r3, [r7, #31]
 800e916:	e04a      	b.n	800e9ae <UART_SetConfig+0x346>
 800e918:	2302      	movs	r3, #2
 800e91a:	77fb      	strb	r3, [r7, #31]
 800e91c:	e047      	b.n	800e9ae <UART_SetConfig+0x346>
 800e91e:	2304      	movs	r3, #4
 800e920:	77fb      	strb	r3, [r7, #31]
 800e922:	e044      	b.n	800e9ae <UART_SetConfig+0x346>
 800e924:	2308      	movs	r3, #8
 800e926:	77fb      	strb	r3, [r7, #31]
 800e928:	e041      	b.n	800e9ae <UART_SetConfig+0x346>
 800e92a:	2310      	movs	r3, #16
 800e92c:	77fb      	strb	r3, [r7, #31]
 800e92e:	e03e      	b.n	800e9ae <UART_SetConfig+0x346>
 800e930:	efff69f3 	.word	0xefff69f3
 800e934:	40011000 	.word	0x40011000
 800e938:	40023800 	.word	0x40023800
 800e93c:	40004400 	.word	0x40004400
 800e940:	40004800 	.word	0x40004800
 800e944:	40004c00 	.word	0x40004c00
 800e948:	40005000 	.word	0x40005000
 800e94c:	40011400 	.word	0x40011400
 800e950:	40007800 	.word	0x40007800
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a71      	ldr	r2, [pc, #452]	; (800eb20 <UART_SetConfig+0x4b8>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d125      	bne.n	800e9aa <UART_SetConfig+0x342>
 800e95e:	4b71      	ldr	r3, [pc, #452]	; (800eb24 <UART_SetConfig+0x4bc>)
 800e960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e968:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e96c:	d017      	beq.n	800e99e <UART_SetConfig+0x336>
 800e96e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e972:	d817      	bhi.n	800e9a4 <UART_SetConfig+0x33c>
 800e974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e978:	d00b      	beq.n	800e992 <UART_SetConfig+0x32a>
 800e97a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e97e:	d811      	bhi.n	800e9a4 <UART_SetConfig+0x33c>
 800e980:	2b00      	cmp	r3, #0
 800e982:	d003      	beq.n	800e98c <UART_SetConfig+0x324>
 800e984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e988:	d006      	beq.n	800e998 <UART_SetConfig+0x330>
 800e98a:	e00b      	b.n	800e9a4 <UART_SetConfig+0x33c>
 800e98c:	2300      	movs	r3, #0
 800e98e:	77fb      	strb	r3, [r7, #31]
 800e990:	e00d      	b.n	800e9ae <UART_SetConfig+0x346>
 800e992:	2302      	movs	r3, #2
 800e994:	77fb      	strb	r3, [r7, #31]
 800e996:	e00a      	b.n	800e9ae <UART_SetConfig+0x346>
 800e998:	2304      	movs	r3, #4
 800e99a:	77fb      	strb	r3, [r7, #31]
 800e99c:	e007      	b.n	800e9ae <UART_SetConfig+0x346>
 800e99e:	2308      	movs	r3, #8
 800e9a0:	77fb      	strb	r3, [r7, #31]
 800e9a2:	e004      	b.n	800e9ae <UART_SetConfig+0x346>
 800e9a4:	2310      	movs	r3, #16
 800e9a6:	77fb      	strb	r3, [r7, #31]
 800e9a8:	e001      	b.n	800e9ae <UART_SetConfig+0x346>
 800e9aa:	2310      	movs	r3, #16
 800e9ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	69db      	ldr	r3, [r3, #28]
 800e9b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9b6:	d15b      	bne.n	800ea70 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800e9b8:	7ffb      	ldrb	r3, [r7, #31]
 800e9ba:	2b08      	cmp	r3, #8
 800e9bc:	d827      	bhi.n	800ea0e <UART_SetConfig+0x3a6>
 800e9be:	a201      	add	r2, pc, #4	; (adr r2, 800e9c4 <UART_SetConfig+0x35c>)
 800e9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c4:	0800e9e9 	.word	0x0800e9e9
 800e9c8:	0800e9f1 	.word	0x0800e9f1
 800e9cc:	0800e9f9 	.word	0x0800e9f9
 800e9d0:	0800ea0f 	.word	0x0800ea0f
 800e9d4:	0800e9ff 	.word	0x0800e9ff
 800e9d8:	0800ea0f 	.word	0x0800ea0f
 800e9dc:	0800ea0f 	.word	0x0800ea0f
 800e9e0:	0800ea0f 	.word	0x0800ea0f
 800e9e4:	0800ea07 	.word	0x0800ea07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9e8:	f7fc fcb2 	bl	800b350 <HAL_RCC_GetPCLK1Freq>
 800e9ec:	61b8      	str	r0, [r7, #24]
        break;
 800e9ee:	e013      	b.n	800ea18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9f0:	f7fc fcc2 	bl	800b378 <HAL_RCC_GetPCLK2Freq>
 800e9f4:	61b8      	str	r0, [r7, #24]
        break;
 800e9f6:	e00f      	b.n	800ea18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e9f8:	4b4b      	ldr	r3, [pc, #300]	; (800eb28 <UART_SetConfig+0x4c0>)
 800e9fa:	61bb      	str	r3, [r7, #24]
        break;
 800e9fc:	e00c      	b.n	800ea18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e9fe:	f7fc fbe5 	bl	800b1cc <HAL_RCC_GetSysClockFreq>
 800ea02:	61b8      	str	r0, [r7, #24]
        break;
 800ea04:	e008      	b.n	800ea18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea0a:	61bb      	str	r3, [r7, #24]
        break;
 800ea0c:	e004      	b.n	800ea18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	77bb      	strb	r3, [r7, #30]
        break;
 800ea16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d074      	beq.n	800eb08 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	005a      	lsls	r2, r3, #1
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	085b      	lsrs	r3, r3, #1
 800ea28:	441a      	add	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	2b0f      	cmp	r3, #15
 800ea3a:	d916      	bls.n	800ea6a <UART_SetConfig+0x402>
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea42:	d212      	bcs.n	800ea6a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	f023 030f 	bic.w	r3, r3, #15
 800ea4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	085b      	lsrs	r3, r3, #1
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	f003 0307 	and.w	r3, r3, #7
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	89fb      	ldrh	r3, [r7, #14]
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	89fa      	ldrh	r2, [r7, #14]
 800ea66:	60da      	str	r2, [r3, #12]
 800ea68:	e04e      	b.n	800eb08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	77bb      	strb	r3, [r7, #30]
 800ea6e:	e04b      	b.n	800eb08 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ea70:	7ffb      	ldrb	r3, [r7, #31]
 800ea72:	2b08      	cmp	r3, #8
 800ea74:	d827      	bhi.n	800eac6 <UART_SetConfig+0x45e>
 800ea76:	a201      	add	r2, pc, #4	; (adr r2, 800ea7c <UART_SetConfig+0x414>)
 800ea78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea7c:	0800eaa1 	.word	0x0800eaa1
 800ea80:	0800eaa9 	.word	0x0800eaa9
 800ea84:	0800eab1 	.word	0x0800eab1
 800ea88:	0800eac7 	.word	0x0800eac7
 800ea8c:	0800eab7 	.word	0x0800eab7
 800ea90:	0800eac7 	.word	0x0800eac7
 800ea94:	0800eac7 	.word	0x0800eac7
 800ea98:	0800eac7 	.word	0x0800eac7
 800ea9c:	0800eabf 	.word	0x0800eabf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eaa0:	f7fc fc56 	bl	800b350 <HAL_RCC_GetPCLK1Freq>
 800eaa4:	61b8      	str	r0, [r7, #24]
        break;
 800eaa6:	e013      	b.n	800ead0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eaa8:	f7fc fc66 	bl	800b378 <HAL_RCC_GetPCLK2Freq>
 800eaac:	61b8      	str	r0, [r7, #24]
        break;
 800eaae:	e00f      	b.n	800ead0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eab0:	4b1d      	ldr	r3, [pc, #116]	; (800eb28 <UART_SetConfig+0x4c0>)
 800eab2:	61bb      	str	r3, [r7, #24]
        break;
 800eab4:	e00c      	b.n	800ead0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eab6:	f7fc fb89 	bl	800b1cc <HAL_RCC_GetSysClockFreq>
 800eaba:	61b8      	str	r0, [r7, #24]
        break;
 800eabc:	e008      	b.n	800ead0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eabe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eac2:	61bb      	str	r3, [r7, #24]
        break;
 800eac4:	e004      	b.n	800ead0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800eac6:	2300      	movs	r3, #0
 800eac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800eaca:	2301      	movs	r3, #1
 800eacc:	77bb      	strb	r3, [r7, #30]
        break;
 800eace:	bf00      	nop
    }

    if (pclk != 0U)
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d018      	beq.n	800eb08 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	085a      	lsrs	r2, r3, #1
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	441a      	add	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	2b0f      	cmp	r3, #15
 800eaf0:	d908      	bls.n	800eb04 <UART_SetConfig+0x49c>
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaf8:	d204      	bcs.n	800eb04 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	693a      	ldr	r2, [r7, #16]
 800eb00:	60da      	str	r2, [r3, #12]
 800eb02:	e001      	b.n	800eb08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800eb14:	7fbb      	ldrb	r3, [r7, #30]
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3720      	adds	r7, #32
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	40007c00 	.word	0x40007c00
 800eb24:	40023800 	.word	0x40023800
 800eb28:	00f42400 	.word	0x00f42400

0800eb2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00a      	beq.n	800eb56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	430a      	orrs	r2, r1
 800eb54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5a:	f003 0302 	and.w	r3, r3, #2
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00a      	beq.n	800eb78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	430a      	orrs	r2, r1
 800eb76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7c:	f003 0304 	and.w	r3, r3, #4
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00a      	beq.n	800eb9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	430a      	orrs	r2, r1
 800eb98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9e:	f003 0308 	and.w	r3, r3, #8
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00a      	beq.n	800ebbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	430a      	orrs	r2, r1
 800ebba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc0:	f003 0310 	and.w	r3, r3, #16
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d00a      	beq.n	800ebde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	430a      	orrs	r2, r1
 800ebdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe2:	f003 0320 	and.w	r3, r3, #32
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00a      	beq.n	800ec00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	430a      	orrs	r2, r1
 800ebfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d01a      	beq.n	800ec42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	430a      	orrs	r2, r1
 800ec20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec2a:	d10a      	bne.n	800ec42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	430a      	orrs	r2, r1
 800ec40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00a      	beq.n	800ec64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	430a      	orrs	r2, r1
 800ec62:	605a      	str	r2, [r3, #4]
  }
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af02      	add	r7, sp, #8
 800ec76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ec80:	f7f9 fb84 	bl	800838c <HAL_GetTick>
 800ec84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f003 0308 	and.w	r3, r3, #8
 800ec90:	2b08      	cmp	r3, #8
 800ec92:	d10e      	bne.n	800ecb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 f817 	bl	800ecd6 <UART_WaitOnFlagUntilTimeout>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d001      	beq.n	800ecb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	e00d      	b.n	800ecce <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2220      	movs	r2, #32
 800ecb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2220      	movs	r2, #32
 800ecbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b084      	sub	sp, #16
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	60f8      	str	r0, [r7, #12]
 800ecde:	60b9      	str	r1, [r7, #8]
 800ece0:	603b      	str	r3, [r7, #0]
 800ece2:	4613      	mov	r3, r2
 800ece4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ece6:	e05e      	b.n	800eda6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecee:	d05a      	beq.n	800eda6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecf0:	f7f9 fb4c 	bl	800838c <HAL_GetTick>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	1ad3      	subs	r3, r2, r3
 800ecfa:	69ba      	ldr	r2, [r7, #24]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d302      	bcc.n	800ed06 <UART_WaitOnFlagUntilTimeout+0x30>
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d11b      	bne.n	800ed3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ed14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	689a      	ldr	r2, [r3, #8]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f022 0201 	bic.w	r2, r2, #1
 800ed24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2220      	movs	r2, #32
 800ed2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2220      	movs	r2, #32
 800ed30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ed3a:	2303      	movs	r3, #3
 800ed3c:	e043      	b.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f003 0304 	and.w	r3, r3, #4
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d02c      	beq.n	800eda6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	69db      	ldr	r3, [r3, #28]
 800ed52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed5a:	d124      	bne.n	800eda6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ed74:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	689a      	ldr	r2, [r3, #8]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f022 0201 	bic.w	r2, r2, #1
 800ed84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2220      	movs	r2, #32
 800ed8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2220      	movs	r2, #32
 800ed90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2220      	movs	r2, #32
 800ed96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800eda2:	2303      	movs	r3, #3
 800eda4:	e00f      	b.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	69da      	ldr	r2, [r3, #28]
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	4013      	ands	r3, r2
 800edb0:	68ba      	ldr	r2, [r7, #8]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	bf0c      	ite	eq
 800edb6:	2301      	moveq	r3, #1
 800edb8:	2300      	movne	r3, #0
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	461a      	mov	r2, r3
 800edbe:	79fb      	ldrb	r3, [r7, #7]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d091      	beq.n	800ece8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
	...

0800edd0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b085      	sub	sp, #20
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800edda:	2300      	movs	r3, #0
 800eddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800edde:	2300      	movs	r3, #0
 800ede0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d027      	beq.n	800ee3a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800edf0:	68fa      	ldr	r2, [r7, #12]
 800edf2:	4b2f      	ldr	r3, [pc, #188]	; (800eeb0 <FMC_SDRAM_Init+0xe0>)
 800edf4:	4013      	ands	r3, r2
 800edf6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ee00:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ee06:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ee0c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ee12:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ee18:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ee1e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ee24:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ee2a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	4313      	orrs	r3, r2
 800ee30:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	601a      	str	r2, [r3, #0]
 800ee38:	e032      	b.n	800eea0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ee46:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ee50:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ee56:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ee64:	68ba      	ldr	r2, [r7, #8]
 800ee66:	4b12      	ldr	r3, [pc, #72]	; (800eeb0 <FMC_SDRAM_Init+0xe0>)
 800ee68:	4013      	ands	r3, r2
 800ee6a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ee74:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ee7a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ee80:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ee86:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ee8c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ee8e:	68ba      	ldr	r2, [r7, #8]
 800ee90:	4313      	orrs	r3, r2
 800ee92:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68fa      	ldr	r2, [r7, #12]
 800ee98:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop
 800eeb0:	ffff8000 	.word	0xffff8000

0800eeb4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b087      	sub	sp, #28
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800eec0:	2300      	movs	r3, #0
 800eec2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800eec4:	2300      	movs	r3, #0
 800eec6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d02e      	beq.n	800ef2c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800eeda:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	3b01      	subs	r3, #1
 800eee8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800eeea:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	3b01      	subs	r3, #1
 800eef2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800eef4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	3b01      	subs	r3, #1
 800eefc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800eefe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	3b01      	subs	r3, #1
 800ef06:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ef08:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	695b      	ldr	r3, [r3, #20]
 800ef0e:	3b01      	subs	r3, #1
 800ef10:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ef12:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	699b      	ldr	r3, [r3, #24]
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	697a      	ldr	r2, [r7, #20]
 800ef20:	4313      	orrs	r3, r2
 800ef22:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	697a      	ldr	r2, [r7, #20]
 800ef28:	609a      	str	r2, [r3, #8]
 800ef2a:	e039      	b.n	800efa0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	4b1e      	ldr	r3, [pc, #120]	; (800efb0 <FMC_SDRAM_Timing_Init+0xfc>)
 800ef36:	4013      	ands	r3, r2
 800ef38:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	695b      	ldr	r3, [r3, #20]
 800ef46:	3b01      	subs	r3, #1
 800ef48:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	697a      	ldr	r2, [r7, #20]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ef5e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ef6e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	3b01      	subs	r3, #1
 800ef76:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ef78:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ef82:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	699b      	ldr	r3, [r3, #24]
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	693a      	ldr	r2, [r7, #16]
 800ef90:	4313      	orrs	r3, r2
 800ef92:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	697a      	ldr	r2, [r7, #20]
 800ef98:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	693a      	ldr	r2, [r7, #16]
 800ef9e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	371c      	adds	r7, #28
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr
 800efae:	bf00      	nop
 800efb0:	ff0f0fff 	.word	0xff0f0fff

0800efb4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800efb4:	b480      	push	{r7}
 800efb6:	b085      	sub	sp, #20
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	691a      	ldr	r2, [r3, #16]
 800efc4:	4b0c      	ldr	r3, [pc, #48]	; (800eff8 <FMC_SDRAM_SendCommand+0x44>)
 800efc6:	4013      	ands	r3, r2
 800efc8:	68ba      	ldr	r2, [r7, #8]
 800efca:	6811      	ldr	r1, [r2, #0]
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	6852      	ldr	r2, [r2, #4]
 800efd0:	4311      	orrs	r1, r2
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	6892      	ldr	r2, [r2, #8]
 800efd6:	3a01      	subs	r2, #1
 800efd8:	0152      	lsls	r2, r2, #5
 800efda:	4311      	orrs	r1, r2
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	68d2      	ldr	r2, [r2, #12]
 800efe0:	0252      	lsls	r2, r2, #9
 800efe2:	430a      	orrs	r2, r1
 800efe4:	431a      	orrs	r2, r3
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800efea:	2300      	movs	r3, #0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3714      	adds	r7, #20
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr
 800eff8:	ffc00000 	.word	0xffc00000

0800effc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	695a      	ldr	r2, [r3, #20]
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	005b      	lsls	r3, r3, #1
 800f00e:	431a      	orrs	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800f014:	2300      	movs	r3, #0
}
 800f016:	4618      	mov	r0, r3
 800f018:	370c      	adds	r7, #12
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
	...

0800f024 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f024:	b084      	sub	sp, #16
 800f026:	b480      	push	{r7}
 800f028:	b085      	sub	sp, #20
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
 800f02e:	f107 001c 	add.w	r0, r7, #28
 800f032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f036:	2300      	movs	r3, #0
 800f038:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f03a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f03c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f03e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f042:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f044:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f046:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f04a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f04e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	4313      	orrs	r3, r2
 800f054:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	685a      	ldr	r2, [r3, #4]
 800f05a:	4b07      	ldr	r3, [pc, #28]	; (800f078 <SDMMC_Init+0x54>)
 800f05c:	4013      	ands	r3, r2
 800f05e:	68fa      	ldr	r2, [r7, #12]
 800f060:	431a      	orrs	r2, r3
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f066:	2300      	movs	r3, #0
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3714      	adds	r7, #20
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	b004      	add	sp, #16
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop
 800f078:	ffff8100 	.word	0xffff8100

0800f07c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	370c      	adds	r7, #12
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr

0800f096 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800f096:	b480      	push	{r7}
 800f098:	b083      	sub	sp, #12
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	370c      	adds	r7, #12
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2203      	movs	r2, #3
 800f0c4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f0c6:	2002      	movs	r0, #2
 800f0c8:	f7f9 f96c 	bl	80083a4 <HAL_Delay>
  
  return HAL_OK;
 800f0cc:	2300      	movs	r3, #0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f0d6:	b480      	push	{r7}
 800f0d8:	b083      	sub	sp, #12
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f003 0303 	and.w	r3, r3, #3
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	370c      	adds	r7, #12
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr
	...

0800f0f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f0fe:	2300      	movs	r3, #0
 800f100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f112:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f118:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f11e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	4313      	orrs	r3, r2
 800f124:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	68da      	ldr	r2, [r3, #12]
 800f12a:	4b06      	ldr	r3, [pc, #24]	; (800f144 <SDMMC_SendCommand+0x50>)
 800f12c:	4013      	ands	r3, r2
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	431a      	orrs	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f136:	2300      	movs	r3, #0
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3714      	adds	r7, #20
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr
 800f144:	fffff000 	.word	0xfffff000

0800f148 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	691b      	ldr	r3, [r3, #16]
 800f154:	b2db      	uxtb	r3, r3
}
 800f156:	4618      	mov	r0, r3
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f162:	b480      	push	{r7}
 800f164:	b085      	sub	sp, #20
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
 800f16a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	3314      	adds	r3, #20
 800f170:	461a      	mov	r2, r3
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	4413      	add	r3, r2
 800f176:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
}  
 800f17c:	4618      	mov	r0, r3
 800f17e:	3714      	adds	r7, #20
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr

0800f188 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f192:	2300      	movs	r3, #0
 800f194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	685a      	ldr	r2, [r3, #4]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f1ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f1b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f1ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f1bc:	68fa      	ldr	r2, [r7, #12]
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	431a      	orrs	r2, r3
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f1d2:	2300      	movs	r3, #0

}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3714      	adds	r7, #20
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr

0800f1e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b088      	sub	sp, #32
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f1ee:	2310      	movs	r3, #16
 800f1f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1f2:	2340      	movs	r3, #64	; 0x40
 800f1f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f200:	f107 0308 	add.w	r3, r7, #8
 800f204:	4619      	mov	r1, r3
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f7ff ff74 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f20c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f210:	2110      	movs	r1, #16
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fa46 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f21a:	69fb      	ldr	r3, [r7, #28]
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3720      	adds	r7, #32
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b088      	sub	sp, #32
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f232:	2311      	movs	r3, #17
 800f234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f236:	2340      	movs	r3, #64	; 0x40
 800f238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f23a:	2300      	movs	r3, #0
 800f23c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f23e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f242:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f244:	f107 0308 	add.w	r3, r7, #8
 800f248:	4619      	mov	r1, r3
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff ff52 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f250:	f241 3288 	movw	r2, #5000	; 0x1388
 800f254:	2111      	movs	r1, #17
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 fa24 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f25c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f25e:	69fb      	ldr	r3, [r7, #28]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3720      	adds	r7, #32
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b088      	sub	sp, #32
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f276:	2312      	movs	r3, #18
 800f278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f27a:	2340      	movs	r3, #64	; 0x40
 800f27c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f27e:	2300      	movs	r3, #0
 800f280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f286:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f288:	f107 0308 	add.w	r3, r7, #8
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f7ff ff30 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f294:	f241 3288 	movw	r2, #5000	; 0x1388
 800f298:	2112      	movs	r1, #18
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 fa02 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f2a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2a2:	69fb      	ldr	r3, [r7, #28]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3720      	adds	r7, #32
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b088      	sub	sp, #32
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f2ba:	2318      	movs	r3, #24
 800f2bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2be:	2340      	movs	r3, #64	; 0x40
 800f2c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2cc:	f107 0308 	add.w	r3, r7, #8
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f7ff ff0e 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f2d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2dc:	2118      	movs	r1, #24
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 f9e0 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f2e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2e6:	69fb      	ldr	r3, [r7, #28]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3720      	adds	r7, #32
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b088      	sub	sp, #32
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f2fe:	2319      	movs	r3, #25
 800f300:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f302:	2340      	movs	r3, #64	; 0x40
 800f304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f306:	2300      	movs	r3, #0
 800f308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f30e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f310:	f107 0308 	add.w	r3, r7, #8
 800f314:	4619      	mov	r1, r3
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff feec 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f320:	2119      	movs	r1, #25
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f9be 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f32a:	69fb      	ldr	r3, [r7, #28]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3720      	adds	r7, #32
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b088      	sub	sp, #32
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f33c:	2300      	movs	r3, #0
 800f33e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f340:	230c      	movs	r3, #12
 800f342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f344:	2340      	movs	r3, #64	; 0x40
 800f346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f348:	2300      	movs	r3, #0
 800f34a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f34c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f350:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f352:	f107 0308 	add.w	r3, r7, #8
 800f356:	4619      	mov	r1, r3
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f7ff fecb 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f35e:	4a05      	ldr	r2, [pc, #20]	; (800f374 <SDMMC_CmdStopTransfer+0x40>)
 800f360:	210c      	movs	r1, #12
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f000 f99e 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f36a:	69fb      	ldr	r3, [r7, #28]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3720      	adds	r7, #32
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	05f5e100 	.word	0x05f5e100

0800f378 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08a      	sub	sp, #40	; 0x28
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f388:	2307      	movs	r3, #7
 800f38a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f38c:	2340      	movs	r3, #64	; 0x40
 800f38e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f390:	2300      	movs	r3, #0
 800f392:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f398:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f39a:	f107 0310 	add.w	r3, r7, #16
 800f39e:	4619      	mov	r1, r3
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f7ff fea7 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f3a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3aa:	2107      	movs	r1, #7
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f000 f979 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f3b2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3728      	adds	r7, #40	; 0x28
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b088      	sub	sp, #32
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3dc:	f107 0308 	add.w	r3, r7, #8
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f7ff fe86 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 f92f 	bl	800f64c <SDMMC_GetCmdError>
 800f3ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3f0:	69fb      	ldr	r3, [r7, #28]
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3720      	adds	r7, #32
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b088      	sub	sp, #32
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f402:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f406:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f408:	2308      	movs	r3, #8
 800f40a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f40c:	2340      	movs	r3, #64	; 0x40
 800f40e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f410:	2300      	movs	r3, #0
 800f412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f418:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f41a:	f107 0308 	add.w	r3, r7, #8
 800f41e:	4619      	mov	r1, r3
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7ff fe67 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f000 fb26 	bl	800fa78 <SDMMC_GetCmdResp7>
 800f42c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f42e:	69fb      	ldr	r3, [r7, #28]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3720      	adds	r7, #32
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b088      	sub	sp, #32
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f446:	2337      	movs	r3, #55	; 0x37
 800f448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f44a:	2340      	movs	r3, #64	; 0x40
 800f44c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f44e:	2300      	movs	r3, #0
 800f450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f456:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f458:	f107 0308 	add.w	r3, r7, #8
 800f45c:	4619      	mov	r1, r3
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7ff fe48 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f464:	f241 3288 	movw	r2, #5000	; 0x1388
 800f468:	2137      	movs	r1, #55	; 0x37
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f000 f91a 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f472:	69fb      	ldr	r3, [r7, #28]
}
 800f474:	4618      	mov	r0, r3
 800f476:	3720      	adds	r7, #32
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b088      	sub	sp, #32
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f486:	683a      	ldr	r2, [r7, #0]
 800f488:	4b0d      	ldr	r3, [pc, #52]	; (800f4c0 <SDMMC_CmdAppOperCommand+0x44>)
 800f48a:	4313      	orrs	r3, r2
 800f48c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f48e:	2329      	movs	r3, #41	; 0x29
 800f490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f492:	2340      	movs	r3, #64	; 0x40
 800f494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f496:	2300      	movs	r3, #0
 800f498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f49e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4a0:	f107 0308 	add.w	r3, r7, #8
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f7ff fe24 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 fa2f 	bl	800f910 <SDMMC_GetCmdResp3>
 800f4b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4b4:	69fb      	ldr	r3, [r7, #28]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3720      	adds	r7, #32
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	80100000 	.word	0x80100000

0800f4c4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b088      	sub	sp, #32
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f4d2:	2306      	movs	r3, #6
 800f4d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4d6:	2340      	movs	r3, #64	; 0x40
 800f4d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4e4:	f107 0308 	add.w	r3, r7, #8
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7ff fe02 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f4f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4f4:	2106      	movs	r1, #6
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 f8d4 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f4fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4fe:	69fb      	ldr	r3, [r7, #28]
}
 800f500:	4618      	mov	r0, r3
 800f502:	3720      	adds	r7, #32
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b088      	sub	sp, #32
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f510:	2300      	movs	r3, #0
 800f512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f514:	2333      	movs	r3, #51	; 0x33
 800f516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f518:	2340      	movs	r3, #64	; 0x40
 800f51a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f51c:	2300      	movs	r3, #0
 800f51e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f524:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f526:	f107 0308 	add.w	r3, r7, #8
 800f52a:	4619      	mov	r1, r3
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f7ff fde1 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f532:	f241 3288 	movw	r2, #5000	; 0x1388
 800f536:	2133      	movs	r1, #51	; 0x33
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 f8b3 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f53e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f540:	69fb      	ldr	r3, [r7, #28]
}
 800f542:	4618      	mov	r0, r3
 800f544:	3720      	adds	r7, #32
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b088      	sub	sp, #32
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f552:	2300      	movs	r3, #0
 800f554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f556:	2302      	movs	r3, #2
 800f558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f55a:	23c0      	movs	r3, #192	; 0xc0
 800f55c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f55e:	2300      	movs	r3, #0
 800f560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f568:	f107 0308 	add.w	r3, r7, #8
 800f56c:	4619      	mov	r1, r3
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f7ff fdc0 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 f983 	bl	800f880 <SDMMC_GetCmdResp2>
 800f57a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f57c:	69fb      	ldr	r3, [r7, #28]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3720      	adds	r7, #32
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f586:	b580      	push	{r7, lr}
 800f588:	b088      	sub	sp, #32
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
 800f58e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f594:	2309      	movs	r3, #9
 800f596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f598:	23c0      	movs	r3, #192	; 0xc0
 800f59a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f59c:	2300      	movs	r3, #0
 800f59e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5a6:	f107 0308 	add.w	r3, r7, #8
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f7ff fda1 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 f964 	bl	800f880 <SDMMC_GetCmdResp2>
 800f5b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5ba:	69fb      	ldr	r3, [r7, #28]
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3720      	adds	r7, #32
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b088      	sub	sp, #32
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f5d2:	2303      	movs	r3, #3
 800f5d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f5d6:	2340      	movs	r3, #64	; 0x40
 800f5d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5e4:	f107 0308 	add.w	r3, r7, #8
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7ff fd82 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f5f0:	683a      	ldr	r2, [r7, #0]
 800f5f2:	2103      	movs	r1, #3
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 f9c9 	bl	800f98c <SDMMC_GetCmdResp6>
 800f5fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5fc:	69fb      	ldr	r3, [r7, #28]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3720      	adds	r7, #32
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b088      	sub	sp, #32
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f614:	230d      	movs	r3, #13
 800f616:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f618:	2340      	movs	r3, #64	; 0x40
 800f61a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f61c:	2300      	movs	r3, #0
 800f61e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f626:	f107 0308 	add.w	r3, r7, #8
 800f62a:	4619      	mov	r1, r3
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f7ff fd61 	bl	800f0f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f632:	f241 3288 	movw	r2, #5000	; 0x1388
 800f636:	210d      	movs	r1, #13
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 f833 	bl	800f6a4 <SDMMC_GetCmdResp1>
 800f63e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f640:	69fb      	ldr	r3, [r7, #28]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3720      	adds	r7, #32
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
	...

0800f64c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f654:	4b11      	ldr	r3, [pc, #68]	; (800f69c <SDMMC_GetCmdError+0x50>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a11      	ldr	r2, [pc, #68]	; (800f6a0 <SDMMC_GetCmdError+0x54>)
 800f65a:	fba2 2303 	umull	r2, r3, r2, r3
 800f65e:	0a5b      	lsrs	r3, r3, #9
 800f660:	f241 3288 	movw	r2, #5000	; 0x1388
 800f664:	fb02 f303 	mul.w	r3, r2, r3
 800f668:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	1e5a      	subs	r2, r3, #1
 800f66e:	60fa      	str	r2, [r7, #12]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d102      	bne.n	800f67a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f678:	e009      	b.n	800f68e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f682:	2b00      	cmp	r3, #0
 800f684:	d0f1      	beq.n	800f66a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	22c5      	movs	r2, #197	; 0xc5
 800f68a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f68c:	2300      	movs	r3, #0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3714      	adds	r7, #20
 800f692:	46bd      	mov	sp, r7
 800f694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f698:	4770      	bx	lr
 800f69a:	bf00      	nop
 800f69c:	20000300 	.word	0x20000300
 800f6a0:	10624dd3 	.word	0x10624dd3

0800f6a4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b088      	sub	sp, #32
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	607a      	str	r2, [r7, #4]
 800f6b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f6b2:	4b70      	ldr	r3, [pc, #448]	; (800f874 <SDMMC_GetCmdResp1+0x1d0>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a70      	ldr	r2, [pc, #448]	; (800f878 <SDMMC_GetCmdResp1+0x1d4>)
 800f6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800f6bc:	0a5a      	lsrs	r2, r3, #9
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	fb02 f303 	mul.w	r3, r2, r3
 800f6c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	1e5a      	subs	r2, r3, #1
 800f6ca:	61fa      	str	r2, [r7, #28]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d102      	bne.n	800f6d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f6d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f6d4:	e0c9      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d0ef      	beq.n	800f6c6 <SDMMC_GetCmdResp1+0x22>
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d1ea      	bne.n	800f6c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6f4:	f003 0304 	and.w	r3, r3, #4
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d004      	beq.n	800f706 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2204      	movs	r2, #4
 800f700:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f702:	2304      	movs	r3, #4
 800f704:	e0b1      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f70a:	f003 0301 	and.w	r3, r3, #1
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d004      	beq.n	800f71c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2201      	movs	r2, #1
 800f716:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f718:	2301      	movs	r3, #1
 800f71a:	e0a6      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	22c5      	movs	r2, #197	; 0xc5
 800f720:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f722:	68f8      	ldr	r0, [r7, #12]
 800f724:	f7ff fd10 	bl	800f148 <SDMMC_GetCommandResponse>
 800f728:	4603      	mov	r3, r0
 800f72a:	461a      	mov	r2, r3
 800f72c:	7afb      	ldrb	r3, [r7, #11]
 800f72e:	4293      	cmp	r3, r2
 800f730:	d001      	beq.n	800f736 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f732:	2301      	movs	r3, #1
 800f734:	e099      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f736:	2100      	movs	r1, #0
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f7ff fd12 	bl	800f162 <SDMMC_GetResponse>
 800f73e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f740:	697a      	ldr	r2, [r7, #20]
 800f742:	4b4e      	ldr	r3, [pc, #312]	; (800f87c <SDMMC_GetCmdResp1+0x1d8>)
 800f744:	4013      	ands	r3, r2
 800f746:	2b00      	cmp	r3, #0
 800f748:	d101      	bne.n	800f74e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f74a:	2300      	movs	r3, #0
 800f74c:	e08d      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	2b00      	cmp	r3, #0
 800f752:	da02      	bge.n	800f75a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f758:	e087      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f760:	2b00      	cmp	r3, #0
 800f762:	d001      	beq.n	800f768 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f764:	2340      	movs	r3, #64	; 0x40
 800f766:	e080      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d001      	beq.n	800f776 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f772:	2380      	movs	r3, #128	; 0x80
 800f774:	e079      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d002      	beq.n	800f786 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f780:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f784:	e071      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d002      	beq.n	800f796 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f790:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f794:	e069      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f7a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7a4:	e061      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d002      	beq.n	800f7b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f7b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f7b4:	e059      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d002      	beq.n	800f7c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f7c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7c4:	e051      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d002      	beq.n	800f7d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f7d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f7d4:	e049      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d002      	beq.n	800f7e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f7e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f7e4:	e041      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d002      	beq.n	800f7f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f7f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7f4:	e039      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d002      	beq.n	800f806 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f804:	e031      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d002      	beq.n	800f816 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f810:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f814:	e029      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d002      	beq.n	800f826 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f820:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f824:	e021      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f830:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f834:	e019      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d002      	beq.n	800f846 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f840:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f844:	e011      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d002      	beq.n	800f856 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f850:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f854:	e009      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	f003 0308 	and.w	r3, r3, #8
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d002      	beq.n	800f866 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f860:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f864:	e001      	b.n	800f86a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3720      	adds	r7, #32
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	20000300 	.word	0x20000300
 800f878:	10624dd3 	.word	0x10624dd3
 800f87c:	fdffe008 	.word	0xfdffe008

0800f880 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f888:	4b1f      	ldr	r3, [pc, #124]	; (800f908 <SDMMC_GetCmdResp2+0x88>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4a1f      	ldr	r2, [pc, #124]	; (800f90c <SDMMC_GetCmdResp2+0x8c>)
 800f88e:	fba2 2303 	umull	r2, r3, r2, r3
 800f892:	0a5b      	lsrs	r3, r3, #9
 800f894:	f241 3288 	movw	r2, #5000	; 0x1388
 800f898:	fb02 f303 	mul.w	r3, r2, r3
 800f89c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	1e5a      	subs	r2, r3, #1
 800f8a2:	60fa      	str	r2, [r7, #12]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d102      	bne.n	800f8ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f8a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f8ac:	e026      	b.n	800f8fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d0ef      	beq.n	800f89e <SDMMC_GetCmdResp2+0x1e>
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d1ea      	bne.n	800f89e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8cc:	f003 0304 	and.w	r3, r3, #4
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d004      	beq.n	800f8de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2204      	movs	r2, #4
 800f8d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f8da:	2304      	movs	r3, #4
 800f8dc:	e00e      	b.n	800f8fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8e2:	f003 0301 	and.w	r3, r3, #1
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d004      	beq.n	800f8f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	e003      	b.n	800f8fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	22c5      	movs	r2, #197	; 0xc5
 800f8f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3714      	adds	r7, #20
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr
 800f908:	20000300 	.word	0x20000300
 800f90c:	10624dd3 	.word	0x10624dd3

0800f910 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f910:	b480      	push	{r7}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f918:	4b1a      	ldr	r3, [pc, #104]	; (800f984 <SDMMC_GetCmdResp3+0x74>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a1a      	ldr	r2, [pc, #104]	; (800f988 <SDMMC_GetCmdResp3+0x78>)
 800f91e:	fba2 2303 	umull	r2, r3, r2, r3
 800f922:	0a5b      	lsrs	r3, r3, #9
 800f924:	f241 3288 	movw	r2, #5000	; 0x1388
 800f928:	fb02 f303 	mul.w	r3, r2, r3
 800f92c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	1e5a      	subs	r2, r3, #1
 800f932:	60fa      	str	r2, [r7, #12]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d102      	bne.n	800f93e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f938:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f93c:	e01b      	b.n	800f976 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f942:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d0ef      	beq.n	800f92e <SDMMC_GetCmdResp3+0x1e>
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f954:	2b00      	cmp	r3, #0
 800f956:	d1ea      	bne.n	800f92e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f95c:	f003 0304 	and.w	r3, r3, #4
 800f960:	2b00      	cmp	r3, #0
 800f962:	d004      	beq.n	800f96e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2204      	movs	r2, #4
 800f968:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f96a:	2304      	movs	r3, #4
 800f96c:	e003      	b.n	800f976 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	22c5      	movs	r2, #197	; 0xc5
 800f972:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3714      	adds	r7, #20
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr
 800f982:	bf00      	nop
 800f984:	20000300 	.word	0x20000300
 800f988:	10624dd3 	.word	0x10624dd3

0800f98c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b088      	sub	sp, #32
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	460b      	mov	r3, r1
 800f996:	607a      	str	r2, [r7, #4]
 800f998:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f99a:	4b35      	ldr	r3, [pc, #212]	; (800fa70 <SDMMC_GetCmdResp6+0xe4>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4a35      	ldr	r2, [pc, #212]	; (800fa74 <SDMMC_GetCmdResp6+0xe8>)
 800f9a0:	fba2 2303 	umull	r2, r3, r2, r3
 800f9a4:	0a5b      	lsrs	r3, r3, #9
 800f9a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9aa:	fb02 f303 	mul.w	r3, r2, r3
 800f9ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	1e5a      	subs	r2, r3, #1
 800f9b4:	61fa      	str	r2, [r7, #28]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d102      	bne.n	800f9c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f9ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f9be:	e052      	b.n	800fa66 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f9c6:	69bb      	ldr	r3, [r7, #24]
 800f9c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d0ef      	beq.n	800f9b0 <SDMMC_GetCmdResp6+0x24>
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d1ea      	bne.n	800f9b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9de:	f003 0304 	and.w	r3, r3, #4
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d004      	beq.n	800f9f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2204      	movs	r2, #4
 800f9ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f9ec:	2304      	movs	r3, #4
 800f9ee:	e03a      	b.n	800fa66 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9f4:	f003 0301 	and.w	r3, r3, #1
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d004      	beq.n	800fa06 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2201      	movs	r2, #1
 800fa00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa02:	2301      	movs	r3, #1
 800fa04:	e02f      	b.n	800fa66 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f7ff fb9e 	bl	800f148 <SDMMC_GetCommandResponse>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	461a      	mov	r2, r3
 800fa10:	7afb      	ldrb	r3, [r7, #11]
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d001      	beq.n	800fa1a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa16:	2301      	movs	r3, #1
 800fa18:	e025      	b.n	800fa66 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	22c5      	movs	r2, #197	; 0xc5
 800fa1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fa20:	2100      	movs	r1, #0
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7ff fb9d 	bl	800f162 <SDMMC_GetResponse>
 800fa28:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d106      	bne.n	800fa42 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	0c1b      	lsrs	r3, r3, #16
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	e011      	b.n	800fa66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d002      	beq.n	800fa52 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fa4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa50:	e009      	b.n	800fa66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d002      	beq.n	800fa62 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fa5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa60:	e001      	b.n	800fa66 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fa62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3720      	adds	r7, #32
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	20000300 	.word	0x20000300
 800fa74:	10624dd3 	.word	0x10624dd3

0800fa78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fa80:	4b22      	ldr	r3, [pc, #136]	; (800fb0c <SDMMC_GetCmdResp7+0x94>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4a22      	ldr	r2, [pc, #136]	; (800fb10 <SDMMC_GetCmdResp7+0x98>)
 800fa86:	fba2 2303 	umull	r2, r3, r2, r3
 800fa8a:	0a5b      	lsrs	r3, r3, #9
 800fa8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa90:	fb02 f303 	mul.w	r3, r2, r3
 800fa94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	1e5a      	subs	r2, r3, #1
 800fa9a:	60fa      	str	r2, [r7, #12]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d102      	bne.n	800faa6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800faa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800faa4:	e02c      	b.n	800fb00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d0ef      	beq.n	800fa96 <SDMMC_GetCmdResp7+0x1e>
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d1ea      	bne.n	800fa96 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fac4:	f003 0304 	and.w	r3, r3, #4
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d004      	beq.n	800fad6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2204      	movs	r2, #4
 800fad0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fad2:	2304      	movs	r3, #4
 800fad4:	e014      	b.n	800fb00 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fada:	f003 0301 	and.w	r3, r3, #1
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d004      	beq.n	800faec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2201      	movs	r2, #1
 800fae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fae8:	2301      	movs	r3, #1
 800faea:	e009      	b.n	800fb00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2240      	movs	r2, #64	; 0x40
 800fafc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fafe:	2300      	movs	r3, #0
  
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr
 800fb0c:	20000300 	.word	0x20000300
 800fb10:	10624dd3 	.word	0x10624dd3

0800fb14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fb18:	4904      	ldr	r1, [pc, #16]	; (800fb2c <MX_FATFS_Init+0x18>)
 800fb1a:	4805      	ldr	r0, [pc, #20]	; (800fb30 <MX_FATFS_Init+0x1c>)
 800fb1c:	f003 ff2c 	bl	8013978 <FATFS_LinkDriver>
 800fb20:	4603      	mov	r3, r0
 800fb22:	461a      	mov	r2, r3
 800fb24:	4b03      	ldr	r3, [pc, #12]	; (800fb34 <MX_FATFS_Init+0x20>)
 800fb26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fb28:	bf00      	nop
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	2000fce8 	.word	0x2000fce8
 800fb30:	0801a31c 	.word	0x0801a31c
 800fb34:	2000fce4 	.word	0x2000fce4

0800fb38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fb3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fb52:	f000 f896 	bl	800fc82 <BSP_SD_IsDetected>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d001      	beq.n	800fb60 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fb5c:	2302      	movs	r3, #2
 800fb5e:	e012      	b.n	800fb86 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fb60:	480b      	ldr	r0, [pc, #44]	; (800fb90 <BSP_SD_Init+0x48>)
 800fb62:	f7fc feac 	bl	800c8be <HAL_SD_Init>
 800fb66:	4603      	mov	r3, r0
 800fb68:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fb6a:	79fb      	ldrb	r3, [r7, #7]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d109      	bne.n	800fb84 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fb70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fb74:	4806      	ldr	r0, [pc, #24]	; (800fb90 <BSP_SD_Init+0x48>)
 800fb76:	f7fd fc71 	bl	800d45c <HAL_SD_ConfigWideBusOperation>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d001      	beq.n	800fb84 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fb80:	2301      	movs	r3, #1
 800fb82:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fb84:	79fb      	ldrb	r3, [r7, #7]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	2000f78c 	.word	0x2000f78c

0800fb94 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b086      	sub	sp, #24
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	68ba      	ldr	r2, [r7, #8]
 800fba8:	68f9      	ldr	r1, [r7, #12]
 800fbaa:	4806      	ldr	r0, [pc, #24]	; (800fbc4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fbac:	f7fc ff3e 	bl	800ca2c <HAL_SD_ReadBlocks_DMA>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d001      	beq.n	800fbba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fbba:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3718      	adds	r7, #24
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	2000f78c 	.word	0x2000f78c

0800fbc8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b086      	sub	sp, #24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	68f9      	ldr	r1, [r7, #12]
 800fbde:	4806      	ldr	r0, [pc, #24]	; (800fbf8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fbe0:	f7fd f806 	bl	800cbf0 <HAL_SD_WriteBlocks_DMA>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d001      	beq.n	800fbee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fbea:	2301      	movs	r3, #1
 800fbec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fbee:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3718      	adds	r7, #24
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	2000f78c 	.word	0x2000f78c

0800fbfc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fc00:	4805      	ldr	r0, [pc, #20]	; (800fc18 <BSP_SD_GetCardState+0x1c>)
 800fc02:	f7fd fcc5 	bl	800d590 <HAL_SD_GetCardState>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b04      	cmp	r3, #4
 800fc0a:	bf14      	ite	ne
 800fc0c:	2301      	movne	r3, #1
 800fc0e:	2300      	moveq	r3, #0
 800fc10:	b2db      	uxtb	r3, r3
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	2000f78c 	.word	0x2000f78c

0800fc1c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fc24:	6879      	ldr	r1, [r7, #4]
 800fc26:	4803      	ldr	r0, [pc, #12]	; (800fc34 <BSP_SD_GetCardInfo+0x18>)
 800fc28:	f7fd fbec 	bl	800d404 <HAL_SD_GetCardInfo>
}
 800fc2c:	bf00      	nop
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	2000f78c 	.word	0x2000f78c

0800fc38 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800fc40:	f000 f818 	bl	800fc74 <BSP_SD_AbortCallback>
}
 800fc44:	bf00      	nop
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fc54:	f000 f9c4 	bl	800ffe0 <BSP_SD_WriteCpltCallback>
}
 800fc58:	bf00      	nop
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fc68:	f000 f9c8 	bl	800fffc <BSP_SD_ReadCpltCallback>
}
 800fc6c:	bf00      	nop
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800fc74:	b480      	push	{r7}
 800fc76:	af00      	add	r7, sp, #0

}
 800fc78:	bf00      	nop
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr

0800fc82 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b082      	sub	sp, #8
 800fc86:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fc88:	2301      	movs	r3, #1
 800fc8a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fc8c:	f000 f80c 	bl	800fca8 <BSP_PlatformIsDetected>
 800fc90:	4603      	mov	r3, r0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d101      	bne.n	800fc9a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fc96:	2300      	movs	r3, #0
 800fc98:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fc9a:	79fb      	ldrb	r3, [r7, #7]
 800fc9c:	b2db      	uxtb	r3, r3
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
	...

0800fca8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fcb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fcb6:	4806      	ldr	r0, [pc, #24]	; (800fcd0 <BSP_PlatformIsDetected+0x28>)
 800fcb8:	f7f9 fdc2 	bl	8009840 <HAL_GPIO_ReadPin>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d001      	beq.n	800fcc6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fcc6:	79fb      	ldrb	r3, [r7, #7]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	40020800 	.word	0x40020800

0800fcd4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800fcdc:	f003 fee4 	bl	8013aa8 <osKernelSysTick>
 800fce0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800fce2:	e006      	b.n	800fcf2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fce4:	f7ff ff8a 	bl	800fbfc <BSP_SD_GetCardState>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d101      	bne.n	800fcf2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e009      	b.n	800fd06 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800fcf2:	f003 fed9 	bl	8013aa8 <osKernelSysTick>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	1ad3      	subs	r3, r2, r3
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d8f0      	bhi.n	800fce4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fd02:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
	...

0800fd10 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	4603      	mov	r3, r0
 800fd18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fd1a:	4b0b      	ldr	r3, [pc, #44]	; (800fd48 <SD_CheckStatus+0x38>)
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd20:	f7ff ff6c 	bl	800fbfc <BSP_SD_GetCardState>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d107      	bne.n	800fd3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fd2a:	4b07      	ldr	r3, [pc, #28]	; (800fd48 <SD_CheckStatus+0x38>)
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	f023 0301 	bic.w	r3, r3, #1
 800fd34:	b2da      	uxtb	r2, r3
 800fd36:	4b04      	ldr	r3, [pc, #16]	; (800fd48 <SD_CheckStatus+0x38>)
 800fd38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fd3a:	4b03      	ldr	r3, [pc, #12]	; (800fd48 <SD_CheckStatus+0x38>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	b2db      	uxtb	r3, r3
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	20000345 	.word	0x20000345

0800fd4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fd4c:	b590      	push	{r4, r7, lr}
 800fd4e:	b087      	sub	sp, #28
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	4603      	mov	r3, r0
 800fd54:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800fd56:	4b20      	ldr	r3, [pc, #128]	; (800fdd8 <SD_initialize+0x8c>)
 800fd58:	2201      	movs	r2, #1
 800fd5a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800fd5c:	f003 fe98 	bl	8013a90 <osKernelRunning>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d030      	beq.n	800fdc8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800fd66:	f7ff feef 	bl	800fb48 <BSP_SD_Init>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d107      	bne.n	800fd80 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800fd70:	79fb      	ldrb	r3, [r7, #7]
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7ff ffcc 	bl	800fd10 <SD_CheckStatus>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	4b16      	ldr	r3, [pc, #88]	; (800fdd8 <SD_initialize+0x8c>)
 800fd7e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800fd80:	4b15      	ldr	r3, [pc, #84]	; (800fdd8 <SD_initialize+0x8c>)
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d01e      	beq.n	800fdc8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800fd8a:	4b14      	ldr	r3, [pc, #80]	; (800fddc <SD_initialize+0x90>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d10e      	bne.n	800fdb0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800fd92:	4b13      	ldr	r3, [pc, #76]	; (800fde0 <SD_initialize+0x94>)
 800fd94:	f107 0408 	add.w	r4, r7, #8
 800fd98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800fd9e:	f107 0308 	add.w	r3, r7, #8
 800fda2:	2100      	movs	r1, #0
 800fda4:	4618      	mov	r0, r3
 800fda6:	f003 ffd0 	bl	8013d4a <osMessageCreate>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	4a0b      	ldr	r2, [pc, #44]	; (800fddc <SD_initialize+0x90>)
 800fdae:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800fdb0:	4b0a      	ldr	r3, [pc, #40]	; (800fddc <SD_initialize+0x90>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d107      	bne.n	800fdc8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800fdb8:	4b07      	ldr	r3, [pc, #28]	; (800fdd8 <SD_initialize+0x8c>)
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	f043 0301 	orr.w	r3, r3, #1
 800fdc2:	b2da      	uxtb	r2, r3
 800fdc4:	4b04      	ldr	r3, [pc, #16]	; (800fdd8 <SD_initialize+0x8c>)
 800fdc6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800fdc8:	4b03      	ldr	r3, [pc, #12]	; (800fdd8 <SD_initialize+0x8c>)
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	b2db      	uxtb	r3, r3
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	371c      	adds	r7, #28
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd90      	pop	{r4, r7, pc}
 800fdd6:	bf00      	nop
 800fdd8:	20000345 	.word	0x20000345
 800fddc:	200009fc 	.word	0x200009fc
 800fde0:	08017794 	.word	0x08017794

0800fde4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	4603      	mov	r3, r0
 800fdec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fdee:	79fb      	ldrb	r3, [r7, #7]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7ff ff8d 	bl	800fd10 <SD_CheckStatus>
 800fdf6:	4603      	mov	r3, r0
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b08a      	sub	sp, #40	; 0x28
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	60b9      	str	r1, [r7, #8]
 800fe08:	607a      	str	r2, [r7, #4]
 800fe0a:	603b      	str	r3, [r7, #0]
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fe10:	2301      	movs	r3, #1
 800fe12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fe16:	f247 5030 	movw	r0, #30000	; 0x7530
 800fe1a:	f7ff ff5b 	bl	800fcd4 <SD_CheckStatusWithTimeout>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	da02      	bge.n	800fe2a <SD_read+0x2a>
  {
    return res;
 800fe24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe28:	e032      	b.n	800fe90 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800fe2a:	683a      	ldr	r2, [r7, #0]
 800fe2c:	6879      	ldr	r1, [r7, #4]
 800fe2e:	68b8      	ldr	r0, [r7, #8]
 800fe30:	f7ff feb0 	bl	800fb94 <BSP_SD_ReadBlocks_DMA>
 800fe34:	4603      	mov	r3, r0
 800fe36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800fe3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d124      	bne.n	800fe8c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800fe42:	4b15      	ldr	r3, [pc, #84]	; (800fe98 <SD_read+0x98>)
 800fe44:	6819      	ldr	r1, [r3, #0]
 800fe46:	f107 0314 	add.w	r3, r7, #20
 800fe4a:	f247 5230 	movw	r2, #30000	; 0x7530
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f003 ffe4 	bl	8013e1c <osMessageGet>

    if (event.status == osEventMessage)
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	2b10      	cmp	r3, #16
 800fe58:	d118      	bne.n	800fe8c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d115      	bne.n	800fe8c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800fe60:	f003 fe22 	bl	8013aa8 <osKernelSysTick>
 800fe64:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800fe66:	e008      	b.n	800fe7a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fe68:	f7ff fec8 	bl	800fbfc <BSP_SD_GetCardState>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d103      	bne.n	800fe7a <SD_read+0x7a>
              {
                res = RES_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800fe78:	e008      	b.n	800fe8c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800fe7a:	f003 fe15 	bl	8013aa8 <osKernelSysTick>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	6a3b      	ldr	r3, [r7, #32]
 800fe82:	1ad3      	subs	r3, r2, r3
 800fe84:	f247 522f 	movw	r2, #29999	; 0x752f
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d9ed      	bls.n	800fe68 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800fe8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3728      	adds	r7, #40	; 0x28
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	200009fc 	.word	0x200009fc

0800fe9c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b08a      	sub	sp, #40	; 0x28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60b9      	str	r1, [r7, #8]
 800fea4:	607a      	str	r2, [r7, #4]
 800fea6:	603b      	str	r3, [r7, #0]
 800fea8:	4603      	mov	r3, r0
 800feaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800feac:	2301      	movs	r3, #1
 800feae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800feb2:	f247 5030 	movw	r0, #30000	; 0x7530
 800feb6:	f7ff ff0d 	bl	800fcd4 <SD_CheckStatusWithTimeout>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	da02      	bge.n	800fec6 <SD_write+0x2a>
  {
    return res;
 800fec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fec4:	e02e      	b.n	800ff24 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fec6:	683a      	ldr	r2, [r7, #0]
 800fec8:	6879      	ldr	r1, [r7, #4]
 800feca:	68b8      	ldr	r0, [r7, #8]
 800fecc:	f7ff fe7c 	bl	800fbc8 <BSP_SD_WriteBlocks_DMA>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d124      	bne.n	800ff20 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800fed6:	4b15      	ldr	r3, [pc, #84]	; (800ff2c <SD_write+0x90>)
 800fed8:	6819      	ldr	r1, [r3, #0]
 800feda:	f107 0314 	add.w	r3, r7, #20
 800fede:	f247 5230 	movw	r2, #30000	; 0x7530
 800fee2:	4618      	mov	r0, r3
 800fee4:	f003 ff9a 	bl	8013e1c <osMessageGet>

    if (event.status == osEventMessage)
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	2b10      	cmp	r3, #16
 800feec:	d118      	bne.n	800ff20 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	2b02      	cmp	r3, #2
 800fef2:	d115      	bne.n	800ff20 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800fef4:	f003 fdd8 	bl	8013aa8 <osKernelSysTick>
 800fef8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800fefa:	e008      	b.n	800ff0e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fefc:	f7ff fe7e 	bl	800fbfc <BSP_SD_GetCardState>
 800ff00:	4603      	mov	r3, r0
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d103      	bne.n	800ff0e <SD_write+0x72>
          {
            res = RES_OK;
 800ff06:	2300      	movs	r3, #0
 800ff08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ff0c:	e008      	b.n	800ff20 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ff0e:	f003 fdcb 	bl	8013aa8 <osKernelSysTick>
 800ff12:	4602      	mov	r2, r0
 800ff14:	6a3b      	ldr	r3, [r7, #32]
 800ff16:	1ad3      	subs	r3, r2, r3
 800ff18:	f247 522f 	movw	r2, #29999	; 0x752f
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d9ed      	bls.n	800fefc <SD_write+0x60>
    }

  }
#endif

  return res;
 800ff20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	3728      	adds	r7, #40	; 0x28
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	200009fc 	.word	0x200009fc

0800ff30 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b08c      	sub	sp, #48	; 0x30
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	4603      	mov	r3, r0
 800ff38:	603a      	str	r2, [r7, #0]
 800ff3a:	71fb      	strb	r3, [r7, #7]
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ff40:	2301      	movs	r3, #1
 800ff42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ff46:	4b25      	ldr	r3, [pc, #148]	; (800ffdc <SD_ioctl+0xac>)
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	f003 0301 	and.w	r3, r3, #1
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d001      	beq.n	800ff58 <SD_ioctl+0x28>
 800ff54:	2303      	movs	r3, #3
 800ff56:	e03c      	b.n	800ffd2 <SD_ioctl+0xa2>

  switch (cmd)
 800ff58:	79bb      	ldrb	r3, [r7, #6]
 800ff5a:	2b03      	cmp	r3, #3
 800ff5c:	d834      	bhi.n	800ffc8 <SD_ioctl+0x98>
 800ff5e:	a201      	add	r2, pc, #4	; (adr r2, 800ff64 <SD_ioctl+0x34>)
 800ff60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff64:	0800ff75 	.word	0x0800ff75
 800ff68:	0800ff7d 	.word	0x0800ff7d
 800ff6c:	0800ff95 	.word	0x0800ff95
 800ff70:	0800ffaf 	.word	0x0800ffaf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ff74:	2300      	movs	r3, #0
 800ff76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff7a:	e028      	b.n	800ffce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff7c:	f107 030c 	add.w	r3, r7, #12
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7ff fe4b 	bl	800fc1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ff86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff92:	e01c      	b.n	800ffce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff94:	f107 030c 	add.w	r3, r7, #12
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7ff fe3f 	bl	800fc1c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ff9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa0:	b29a      	uxth	r2, r3
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ffac:	e00f      	b.n	800ffce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ffae:	f107 030c 	add.w	r3, r7, #12
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7ff fe32 	bl	800fc1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ffb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffba:	0a5a      	lsrs	r2, r3, #9
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ffc6:	e002      	b.n	800ffce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ffc8:	2304      	movs	r3, #4
 800ffca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ffce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3730      	adds	r7, #48	; 0x30
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	20000345 	.word	0x20000345

0800ffe0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800ffe4:	4b04      	ldr	r3, [pc, #16]	; (800fff8 <BSP_SD_WriteCpltCallback+0x18>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	2102      	movs	r1, #2
 800ffec:	4618      	mov	r0, r3
 800ffee:	f003 fed5 	bl	8013d9c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800fff2:	bf00      	nop
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	200009fc 	.word	0x200009fc

0800fffc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8010000:	4b04      	ldr	r3, [pc, #16]	; (8010014 <BSP_SD_ReadCpltCallback+0x18>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2200      	movs	r2, #0
 8010006:	2101      	movs	r1, #1
 8010008:	4618      	mov	r0, r3
 801000a:	f003 fec7 	bl	8013d9c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 801000e:	bf00      	nop
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	200009fc 	.word	0x200009fc

08010018 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	4603      	mov	r3, r0
 8010020:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010022:	79fb      	ldrb	r3, [r7, #7]
 8010024:	4a08      	ldr	r2, [pc, #32]	; (8010048 <disk_status+0x30>)
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	4413      	add	r3, r2
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	79fa      	ldrb	r2, [r7, #7]
 8010030:	4905      	ldr	r1, [pc, #20]	; (8010048 <disk_status+0x30>)
 8010032:	440a      	add	r2, r1
 8010034:	7a12      	ldrb	r2, [r2, #8]
 8010036:	4610      	mov	r0, r2
 8010038:	4798      	blx	r3
 801003a:	4603      	mov	r3, r0
 801003c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801003e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010040:	4618      	mov	r0, r3
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	20000a28 	.word	0x20000a28

0801004c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	4603      	mov	r3, r0
 8010054:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010056:	2300      	movs	r3, #0
 8010058:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801005a:	79fb      	ldrb	r3, [r7, #7]
 801005c:	4a0d      	ldr	r2, [pc, #52]	; (8010094 <disk_initialize+0x48>)
 801005e:	5cd3      	ldrb	r3, [r2, r3]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d111      	bne.n	8010088 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010064:	79fb      	ldrb	r3, [r7, #7]
 8010066:	4a0b      	ldr	r2, [pc, #44]	; (8010094 <disk_initialize+0x48>)
 8010068:	2101      	movs	r1, #1
 801006a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801006c:	79fb      	ldrb	r3, [r7, #7]
 801006e:	4a09      	ldr	r2, [pc, #36]	; (8010094 <disk_initialize+0x48>)
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	4413      	add	r3, r2
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	79fa      	ldrb	r2, [r7, #7]
 801007a:	4906      	ldr	r1, [pc, #24]	; (8010094 <disk_initialize+0x48>)
 801007c:	440a      	add	r2, r1
 801007e:	7a12      	ldrb	r2, [r2, #8]
 8010080:	4610      	mov	r0, r2
 8010082:	4798      	blx	r3
 8010084:	4603      	mov	r3, r0
 8010086:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010088:	7bfb      	ldrb	r3, [r7, #15]
}
 801008a:	4618      	mov	r0, r3
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	20000a28 	.word	0x20000a28

08010098 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010098:	b590      	push	{r4, r7, lr}
 801009a:	b087      	sub	sp, #28
 801009c:	af00      	add	r7, sp, #0
 801009e:	60b9      	str	r1, [r7, #8]
 80100a0:	607a      	str	r2, [r7, #4]
 80100a2:	603b      	str	r3, [r7, #0]
 80100a4:	4603      	mov	r3, r0
 80100a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80100a8:	7bfb      	ldrb	r3, [r7, #15]
 80100aa:	4a0a      	ldr	r2, [pc, #40]	; (80100d4 <disk_read+0x3c>)
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	4413      	add	r3, r2
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	689c      	ldr	r4, [r3, #8]
 80100b4:	7bfb      	ldrb	r3, [r7, #15]
 80100b6:	4a07      	ldr	r2, [pc, #28]	; (80100d4 <disk_read+0x3c>)
 80100b8:	4413      	add	r3, r2
 80100ba:	7a18      	ldrb	r0, [r3, #8]
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	68b9      	ldr	r1, [r7, #8]
 80100c2:	47a0      	blx	r4
 80100c4:	4603      	mov	r3, r0
 80100c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80100c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	371c      	adds	r7, #28
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd90      	pop	{r4, r7, pc}
 80100d2:	bf00      	nop
 80100d4:	20000a28 	.word	0x20000a28

080100d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80100d8:	b590      	push	{r4, r7, lr}
 80100da:	b087      	sub	sp, #28
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60b9      	str	r1, [r7, #8]
 80100e0:	607a      	str	r2, [r7, #4]
 80100e2:	603b      	str	r3, [r7, #0]
 80100e4:	4603      	mov	r3, r0
 80100e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80100e8:	7bfb      	ldrb	r3, [r7, #15]
 80100ea:	4a0a      	ldr	r2, [pc, #40]	; (8010114 <disk_write+0x3c>)
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	4413      	add	r3, r2
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	68dc      	ldr	r4, [r3, #12]
 80100f4:	7bfb      	ldrb	r3, [r7, #15]
 80100f6:	4a07      	ldr	r2, [pc, #28]	; (8010114 <disk_write+0x3c>)
 80100f8:	4413      	add	r3, r2
 80100fa:	7a18      	ldrb	r0, [r3, #8]
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	687a      	ldr	r2, [r7, #4]
 8010100:	68b9      	ldr	r1, [r7, #8]
 8010102:	47a0      	blx	r4
 8010104:	4603      	mov	r3, r0
 8010106:	75fb      	strb	r3, [r7, #23]
  return res;
 8010108:	7dfb      	ldrb	r3, [r7, #23]
}
 801010a:	4618      	mov	r0, r3
 801010c:	371c      	adds	r7, #28
 801010e:	46bd      	mov	sp, r7
 8010110:	bd90      	pop	{r4, r7, pc}
 8010112:	bf00      	nop
 8010114:	20000a28 	.word	0x20000a28

08010118 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	4603      	mov	r3, r0
 8010120:	603a      	str	r2, [r7, #0]
 8010122:	71fb      	strb	r3, [r7, #7]
 8010124:	460b      	mov	r3, r1
 8010126:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010128:	79fb      	ldrb	r3, [r7, #7]
 801012a:	4a09      	ldr	r2, [pc, #36]	; (8010150 <disk_ioctl+0x38>)
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	4413      	add	r3, r2
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	79fa      	ldrb	r2, [r7, #7]
 8010136:	4906      	ldr	r1, [pc, #24]	; (8010150 <disk_ioctl+0x38>)
 8010138:	440a      	add	r2, r1
 801013a:	7a10      	ldrb	r0, [r2, #8]
 801013c:	79b9      	ldrb	r1, [r7, #6]
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	4798      	blx	r3
 8010142:	4603      	mov	r3, r0
 8010144:	73fb      	strb	r3, [r7, #15]
  return res;
 8010146:	7bfb      	ldrb	r3, [r7, #15]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	20000a28 	.word	0x20000a28

08010154 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	3301      	adds	r3, #1
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010164:	89fb      	ldrh	r3, [r7, #14]
 8010166:	021b      	lsls	r3, r3, #8
 8010168:	b21a      	sxth	r2, r3
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	b21b      	sxth	r3, r3
 8010170:	4313      	orrs	r3, r2
 8010172:	b21b      	sxth	r3, r3
 8010174:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010176:	89fb      	ldrh	r3, [r7, #14]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010184:	b480      	push	{r7}
 8010186:	b085      	sub	sp, #20
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	3303      	adds	r3, #3
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	021b      	lsls	r3, r3, #8
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	3202      	adds	r2, #2
 801019c:	7812      	ldrb	r2, [r2, #0]
 801019e:	4313      	orrs	r3, r2
 80101a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	021b      	lsls	r3, r3, #8
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	3201      	adds	r2, #1
 80101aa:	7812      	ldrb	r2, [r2, #0]
 80101ac:	4313      	orrs	r3, r2
 80101ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	021b      	lsls	r3, r3, #8
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	7812      	ldrb	r2, [r2, #0]
 80101b8:	4313      	orrs	r3, r2
 80101ba:	60fb      	str	r3, [r7, #12]
	return rv;
 80101bc:	68fb      	ldr	r3, [r7, #12]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3714      	adds	r7, #20
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80101ca:	b480      	push	{r7}
 80101cc:	b083      	sub	sp, #12
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
 80101d2:	460b      	mov	r3, r1
 80101d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	1c5a      	adds	r2, r3, #1
 80101da:	607a      	str	r2, [r7, #4]
 80101dc:	887a      	ldrh	r2, [r7, #2]
 80101de:	b2d2      	uxtb	r2, r2
 80101e0:	701a      	strb	r2, [r3, #0]
 80101e2:	887b      	ldrh	r3, [r7, #2]
 80101e4:	0a1b      	lsrs	r3, r3, #8
 80101e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	1c5a      	adds	r2, r3, #1
 80101ec:	607a      	str	r2, [r7, #4]
 80101ee:	887a      	ldrh	r2, [r7, #2]
 80101f0:	b2d2      	uxtb	r2, r2
 80101f2:	701a      	strb	r2, [r3, #0]
}
 80101f4:	bf00      	nop
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	1c5a      	adds	r2, r3, #1
 801020e:	607a      	str	r2, [r7, #4]
 8010210:	683a      	ldr	r2, [r7, #0]
 8010212:	b2d2      	uxtb	r2, r2
 8010214:	701a      	strb	r2, [r3, #0]
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	0a1b      	lsrs	r3, r3, #8
 801021a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	1c5a      	adds	r2, r3, #1
 8010220:	607a      	str	r2, [r7, #4]
 8010222:	683a      	ldr	r2, [r7, #0]
 8010224:	b2d2      	uxtb	r2, r2
 8010226:	701a      	strb	r2, [r3, #0]
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	0a1b      	lsrs	r3, r3, #8
 801022c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	1c5a      	adds	r2, r3, #1
 8010232:	607a      	str	r2, [r7, #4]
 8010234:	683a      	ldr	r2, [r7, #0]
 8010236:	b2d2      	uxtb	r2, r2
 8010238:	701a      	strb	r2, [r3, #0]
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	0a1b      	lsrs	r3, r3, #8
 801023e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	1c5a      	adds	r2, r3, #1
 8010244:	607a      	str	r2, [r7, #4]
 8010246:	683a      	ldr	r2, [r7, #0]
 8010248:	b2d2      	uxtb	r2, r2
 801024a:	701a      	strb	r2, [r3, #0]
}
 801024c:	bf00      	nop
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010258:	b480      	push	{r7}
 801025a:	b087      	sub	sp, #28
 801025c:	af00      	add	r7, sp, #0
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d00d      	beq.n	801028e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010272:	693a      	ldr	r2, [r7, #16]
 8010274:	1c53      	adds	r3, r2, #1
 8010276:	613b      	str	r3, [r7, #16]
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	1c59      	adds	r1, r3, #1
 801027c:	6179      	str	r1, [r7, #20]
 801027e:	7812      	ldrb	r2, [r2, #0]
 8010280:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	3b01      	subs	r3, #1
 8010286:	607b      	str	r3, [r7, #4]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d1f1      	bne.n	8010272 <mem_cpy+0x1a>
	}
}
 801028e:	bf00      	nop
 8010290:	371c      	adds	r7, #28
 8010292:	46bd      	mov	sp, r7
 8010294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010298:	4770      	bx	lr

0801029a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801029a:	b480      	push	{r7}
 801029c:	b087      	sub	sp, #28
 801029e:	af00      	add	r7, sp, #0
 80102a0:	60f8      	str	r0, [r7, #12]
 80102a2:	60b9      	str	r1, [r7, #8]
 80102a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	1c5a      	adds	r2, r3, #1
 80102ae:	617a      	str	r2, [r7, #20]
 80102b0:	68ba      	ldr	r2, [r7, #8]
 80102b2:	b2d2      	uxtb	r2, r2
 80102b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	3b01      	subs	r3, #1
 80102ba:	607b      	str	r3, [r7, #4]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1f3      	bne.n	80102aa <mem_set+0x10>
}
 80102c2:	bf00      	nop
 80102c4:	bf00      	nop
 80102c6:	371c      	adds	r7, #28
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80102d0:	b480      	push	{r7}
 80102d2:	b089      	sub	sp, #36	; 0x24
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	61fb      	str	r3, [r7, #28]
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80102e4:	2300      	movs	r3, #0
 80102e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	1c5a      	adds	r2, r3, #1
 80102ec:	61fa      	str	r2, [r7, #28]
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	4619      	mov	r1, r3
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	1c5a      	adds	r2, r3, #1
 80102f6:	61ba      	str	r2, [r7, #24]
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	1acb      	subs	r3, r1, r3
 80102fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	3b01      	subs	r3, #1
 8010302:	607b      	str	r3, [r7, #4]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d002      	beq.n	8010310 <mem_cmp+0x40>
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d0eb      	beq.n	80102e8 <mem_cmp+0x18>

	return r;
 8010310:	697b      	ldr	r3, [r7, #20]
}
 8010312:	4618      	mov	r0, r3
 8010314:	3724      	adds	r7, #36	; 0x24
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801031e:	b480      	push	{r7}
 8010320:	b083      	sub	sp, #12
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
 8010326:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010328:	e002      	b.n	8010330 <chk_chr+0x12>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	3301      	adds	r3, #1
 801032e:	607b      	str	r3, [r7, #4]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d005      	beq.n	8010344 <chk_chr+0x26>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	461a      	mov	r2, r3
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	4293      	cmp	r3, r2
 8010342:	d1f2      	bne.n	801032a <chk_chr+0xc>
	return *str;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	781b      	ldrb	r3, [r3, #0]
}
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d009      	beq.n	8010376 <lock_fs+0x22>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	4618      	mov	r0, r3
 8010368:	f003 fb41 	bl	80139ee <ff_req_grant>
 801036c:	4603      	mov	r3, r0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d001      	beq.n	8010376 <lock_fs+0x22>
 8010372:	2301      	movs	r3, #1
 8010374:	e000      	b.n	8010378 <lock_fs+0x24>
 8010376:	2300      	movs	r3, #0
}
 8010378:	4618      	mov	r0, r3
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	460b      	mov	r3, r1
 801038a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d00d      	beq.n	80103ae <unlock_fs+0x2e>
 8010392:	78fb      	ldrb	r3, [r7, #3]
 8010394:	2b0c      	cmp	r3, #12
 8010396:	d00a      	beq.n	80103ae <unlock_fs+0x2e>
 8010398:	78fb      	ldrb	r3, [r7, #3]
 801039a:	2b0b      	cmp	r3, #11
 801039c:	d007      	beq.n	80103ae <unlock_fs+0x2e>
 801039e:	78fb      	ldrb	r3, [r7, #3]
 80103a0:	2b0f      	cmp	r3, #15
 80103a2:	d004      	beq.n	80103ae <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	4618      	mov	r0, r3
 80103aa:	f003 fb35 	bl	8013a18 <ff_rel_grant>
	}
}
 80103ae:	bf00      	nop
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
	...

080103b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b085      	sub	sp, #20
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80103c2:	2300      	movs	r3, #0
 80103c4:	60bb      	str	r3, [r7, #8]
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	60fb      	str	r3, [r7, #12]
 80103ca:	e029      	b.n	8010420 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80103cc:	4a27      	ldr	r2, [pc, #156]	; (801046c <chk_lock+0xb4>)
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	011b      	lsls	r3, r3, #4
 80103d2:	4413      	add	r3, r2
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d01d      	beq.n	8010416 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80103da:	4a24      	ldr	r2, [pc, #144]	; (801046c <chk_lock+0xb4>)
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	011b      	lsls	r3, r3, #4
 80103e0:	4413      	add	r3, r2
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d116      	bne.n	801041a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80103ec:	4a1f      	ldr	r2, [pc, #124]	; (801046c <chk_lock+0xb4>)
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	011b      	lsls	r3, r3, #4
 80103f2:	4413      	add	r3, r2
 80103f4:	3304      	adds	r3, #4
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d10c      	bne.n	801041a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010400:	4a1a      	ldr	r2, [pc, #104]	; (801046c <chk_lock+0xb4>)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	011b      	lsls	r3, r3, #4
 8010406:	4413      	add	r3, r2
 8010408:	3308      	adds	r3, #8
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010410:	429a      	cmp	r2, r3
 8010412:	d102      	bne.n	801041a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010414:	e007      	b.n	8010426 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010416:	2301      	movs	r3, #1
 8010418:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	3301      	adds	r3, #1
 801041e:	60fb      	str	r3, [r7, #12]
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2b01      	cmp	r3, #1
 8010424:	d9d2      	bls.n	80103cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2b02      	cmp	r3, #2
 801042a:	d109      	bne.n	8010440 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d102      	bne.n	8010438 <chk_lock+0x80>
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	2b02      	cmp	r3, #2
 8010436:	d101      	bne.n	801043c <chk_lock+0x84>
 8010438:	2300      	movs	r3, #0
 801043a:	e010      	b.n	801045e <chk_lock+0xa6>
 801043c:	2312      	movs	r3, #18
 801043e:	e00e      	b.n	801045e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d108      	bne.n	8010458 <chk_lock+0xa0>
 8010446:	4a09      	ldr	r2, [pc, #36]	; (801046c <chk_lock+0xb4>)
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	011b      	lsls	r3, r3, #4
 801044c:	4413      	add	r3, r2
 801044e:	330c      	adds	r3, #12
 8010450:	881b      	ldrh	r3, [r3, #0]
 8010452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010456:	d101      	bne.n	801045c <chk_lock+0xa4>
 8010458:	2310      	movs	r3, #16
 801045a:	e000      	b.n	801045e <chk_lock+0xa6>
 801045c:	2300      	movs	r3, #0
}
 801045e:	4618      	mov	r0, r3
 8010460:	3714      	adds	r7, #20
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	20000a08 	.word	0x20000a08

08010470 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010476:	2300      	movs	r3, #0
 8010478:	607b      	str	r3, [r7, #4]
 801047a:	e002      	b.n	8010482 <enq_lock+0x12>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	3301      	adds	r3, #1
 8010480:	607b      	str	r3, [r7, #4]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2b01      	cmp	r3, #1
 8010486:	d806      	bhi.n	8010496 <enq_lock+0x26>
 8010488:	4a09      	ldr	r2, [pc, #36]	; (80104b0 <enq_lock+0x40>)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	011b      	lsls	r3, r3, #4
 801048e:	4413      	add	r3, r2
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d1f2      	bne.n	801047c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2b02      	cmp	r3, #2
 801049a:	bf14      	ite	ne
 801049c:	2301      	movne	r3, #1
 801049e:	2300      	moveq	r3, #0
 80104a0:	b2db      	uxtb	r3, r3
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	370c      	adds	r7, #12
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop
 80104b0:	20000a08 	.word	0x20000a08

080104b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80104b4:	b480      	push	{r7}
 80104b6:	b085      	sub	sp, #20
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80104be:	2300      	movs	r3, #0
 80104c0:	60fb      	str	r3, [r7, #12]
 80104c2:	e01f      	b.n	8010504 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80104c4:	4a41      	ldr	r2, [pc, #260]	; (80105cc <inc_lock+0x118>)
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	011b      	lsls	r3, r3, #4
 80104ca:	4413      	add	r3, r2
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d113      	bne.n	80104fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80104d6:	4a3d      	ldr	r2, [pc, #244]	; (80105cc <inc_lock+0x118>)
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	011b      	lsls	r3, r3, #4
 80104dc:	4413      	add	r3, r2
 80104de:	3304      	adds	r3, #4
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d109      	bne.n	80104fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80104ea:	4a38      	ldr	r2, [pc, #224]	; (80105cc <inc_lock+0x118>)
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	011b      	lsls	r3, r3, #4
 80104f0:	4413      	add	r3, r2
 80104f2:	3308      	adds	r3, #8
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d006      	beq.n	801050c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	3301      	adds	r3, #1
 8010502:	60fb      	str	r3, [r7, #12]
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2b01      	cmp	r3, #1
 8010508:	d9dc      	bls.n	80104c4 <inc_lock+0x10>
 801050a:	e000      	b.n	801050e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801050c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2b02      	cmp	r3, #2
 8010512:	d132      	bne.n	801057a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010514:	2300      	movs	r3, #0
 8010516:	60fb      	str	r3, [r7, #12]
 8010518:	e002      	b.n	8010520 <inc_lock+0x6c>
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	3301      	adds	r3, #1
 801051e:	60fb      	str	r3, [r7, #12]
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2b01      	cmp	r3, #1
 8010524:	d806      	bhi.n	8010534 <inc_lock+0x80>
 8010526:	4a29      	ldr	r2, [pc, #164]	; (80105cc <inc_lock+0x118>)
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	011b      	lsls	r3, r3, #4
 801052c:	4413      	add	r3, r2
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1f2      	bne.n	801051a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2b02      	cmp	r3, #2
 8010538:	d101      	bne.n	801053e <inc_lock+0x8a>
 801053a:	2300      	movs	r3, #0
 801053c:	e040      	b.n	80105c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	4922      	ldr	r1, [pc, #136]	; (80105cc <inc_lock+0x118>)
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	011b      	lsls	r3, r3, #4
 8010548:	440b      	add	r3, r1
 801054a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	689a      	ldr	r2, [r3, #8]
 8010550:	491e      	ldr	r1, [pc, #120]	; (80105cc <inc_lock+0x118>)
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	011b      	lsls	r3, r3, #4
 8010556:	440b      	add	r3, r1
 8010558:	3304      	adds	r3, #4
 801055a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	695a      	ldr	r2, [r3, #20]
 8010560:	491a      	ldr	r1, [pc, #104]	; (80105cc <inc_lock+0x118>)
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	011b      	lsls	r3, r3, #4
 8010566:	440b      	add	r3, r1
 8010568:	3308      	adds	r3, #8
 801056a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801056c:	4a17      	ldr	r2, [pc, #92]	; (80105cc <inc_lock+0x118>)
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	011b      	lsls	r3, r3, #4
 8010572:	4413      	add	r3, r2
 8010574:	330c      	adds	r3, #12
 8010576:	2200      	movs	r2, #0
 8010578:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d009      	beq.n	8010594 <inc_lock+0xe0>
 8010580:	4a12      	ldr	r2, [pc, #72]	; (80105cc <inc_lock+0x118>)
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	011b      	lsls	r3, r3, #4
 8010586:	4413      	add	r3, r2
 8010588:	330c      	adds	r3, #12
 801058a:	881b      	ldrh	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d001      	beq.n	8010594 <inc_lock+0xe0>
 8010590:	2300      	movs	r3, #0
 8010592:	e015      	b.n	80105c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d108      	bne.n	80105ac <inc_lock+0xf8>
 801059a:	4a0c      	ldr	r2, [pc, #48]	; (80105cc <inc_lock+0x118>)
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	011b      	lsls	r3, r3, #4
 80105a0:	4413      	add	r3, r2
 80105a2:	330c      	adds	r3, #12
 80105a4:	881b      	ldrh	r3, [r3, #0]
 80105a6:	3301      	adds	r3, #1
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	e001      	b.n	80105b0 <inc_lock+0xfc>
 80105ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80105b0:	4906      	ldr	r1, [pc, #24]	; (80105cc <inc_lock+0x118>)
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	011b      	lsls	r3, r3, #4
 80105b6:	440b      	add	r3, r1
 80105b8:	330c      	adds	r3, #12
 80105ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	3301      	adds	r3, #1
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3714      	adds	r7, #20
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr
 80105cc:	20000a08 	.word	0x20000a08

080105d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b085      	sub	sp, #20
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	3b01      	subs	r3, #1
 80105dc:	607b      	str	r3, [r7, #4]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2b01      	cmp	r3, #1
 80105e2:	d825      	bhi.n	8010630 <dec_lock+0x60>
		n = Files[i].ctr;
 80105e4:	4a17      	ldr	r2, [pc, #92]	; (8010644 <dec_lock+0x74>)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	011b      	lsls	r3, r3, #4
 80105ea:	4413      	add	r3, r2
 80105ec:	330c      	adds	r3, #12
 80105ee:	881b      	ldrh	r3, [r3, #0]
 80105f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80105f2:	89fb      	ldrh	r3, [r7, #14]
 80105f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105f8:	d101      	bne.n	80105fe <dec_lock+0x2e>
 80105fa:	2300      	movs	r3, #0
 80105fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80105fe:	89fb      	ldrh	r3, [r7, #14]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d002      	beq.n	801060a <dec_lock+0x3a>
 8010604:	89fb      	ldrh	r3, [r7, #14]
 8010606:	3b01      	subs	r3, #1
 8010608:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801060a:	4a0e      	ldr	r2, [pc, #56]	; (8010644 <dec_lock+0x74>)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	011b      	lsls	r3, r3, #4
 8010610:	4413      	add	r3, r2
 8010612:	330c      	adds	r3, #12
 8010614:	89fa      	ldrh	r2, [r7, #14]
 8010616:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010618:	89fb      	ldrh	r3, [r7, #14]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d105      	bne.n	801062a <dec_lock+0x5a>
 801061e:	4a09      	ldr	r2, [pc, #36]	; (8010644 <dec_lock+0x74>)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	011b      	lsls	r3, r3, #4
 8010624:	4413      	add	r3, r2
 8010626:	2200      	movs	r2, #0
 8010628:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801062a:	2300      	movs	r3, #0
 801062c:	737b      	strb	r3, [r7, #13]
 801062e:	e001      	b.n	8010634 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010630:	2302      	movs	r3, #2
 8010632:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010634:	7b7b      	ldrb	r3, [r7, #13]
}
 8010636:	4618      	mov	r0, r3
 8010638:	3714      	adds	r7, #20
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr
 8010642:	bf00      	nop
 8010644:	20000a08 	.word	0x20000a08

08010648 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010648:	b480      	push	{r7}
 801064a:	b085      	sub	sp, #20
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010650:	2300      	movs	r3, #0
 8010652:	60fb      	str	r3, [r7, #12]
 8010654:	e010      	b.n	8010678 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010656:	4a0d      	ldr	r2, [pc, #52]	; (801068c <clear_lock+0x44>)
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	011b      	lsls	r3, r3, #4
 801065c:	4413      	add	r3, r2
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	687a      	ldr	r2, [r7, #4]
 8010662:	429a      	cmp	r2, r3
 8010664:	d105      	bne.n	8010672 <clear_lock+0x2a>
 8010666:	4a09      	ldr	r2, [pc, #36]	; (801068c <clear_lock+0x44>)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	011b      	lsls	r3, r3, #4
 801066c:	4413      	add	r3, r2
 801066e:	2200      	movs	r2, #0
 8010670:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	3301      	adds	r3, #1
 8010676:	60fb      	str	r3, [r7, #12]
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2b01      	cmp	r3, #1
 801067c:	d9eb      	bls.n	8010656 <clear_lock+0xe>
	}
}
 801067e:	bf00      	nop
 8010680:	bf00      	nop
 8010682:	3714      	adds	r7, #20
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr
 801068c:	20000a08 	.word	0x20000a08

08010690 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b086      	sub	sp, #24
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	78db      	ldrb	r3, [r3, #3]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d034      	beq.n	801070e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	7858      	ldrb	r0, [r3, #1]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80106b4:	2301      	movs	r3, #1
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	f7ff fd0e 	bl	80100d8 <disk_write>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d002      	beq.n	80106c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80106c2:	2301      	movs	r3, #1
 80106c4:	73fb      	strb	r3, [r7, #15]
 80106c6:	e022      	b.n	801070e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106d2:	697a      	ldr	r2, [r7, #20]
 80106d4:	1ad2      	subs	r2, r2, r3
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6a1b      	ldr	r3, [r3, #32]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d217      	bcs.n	801070e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	789b      	ldrb	r3, [r3, #2]
 80106e2:	613b      	str	r3, [r7, #16]
 80106e4:	e010      	b.n	8010708 <sync_window+0x78>
					wsect += fs->fsize;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6a1b      	ldr	r3, [r3, #32]
 80106ea:	697a      	ldr	r2, [r7, #20]
 80106ec:	4413      	add	r3, r2
 80106ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	7858      	ldrb	r0, [r3, #1]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80106fa:	2301      	movs	r3, #1
 80106fc:	697a      	ldr	r2, [r7, #20]
 80106fe:	f7ff fceb 	bl	80100d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	3b01      	subs	r3, #1
 8010706:	613b      	str	r3, [r7, #16]
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	2b01      	cmp	r3, #1
 801070c:	d8eb      	bhi.n	80106e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010710:	4618      	mov	r0, r3
 8010712:	3718      	adds	r7, #24
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010722:	2300      	movs	r3, #0
 8010724:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801072a:	683a      	ldr	r2, [r7, #0]
 801072c:	429a      	cmp	r2, r3
 801072e:	d01b      	beq.n	8010768 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f7ff ffad 	bl	8010690 <sync_window>
 8010736:	4603      	mov	r3, r0
 8010738:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801073a:	7bfb      	ldrb	r3, [r7, #15]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d113      	bne.n	8010768 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	7858      	ldrb	r0, [r3, #1]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801074a:	2301      	movs	r3, #1
 801074c:	683a      	ldr	r2, [r7, #0]
 801074e:	f7ff fca3 	bl	8010098 <disk_read>
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	d004      	beq.n	8010762 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010758:	f04f 33ff 	mov.w	r3, #4294967295
 801075c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801075e:	2301      	movs	r3, #1
 8010760:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	683a      	ldr	r2, [r7, #0]
 8010766:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010768:	7bfb      	ldrb	r3, [r7, #15]
}
 801076a:	4618      	mov	r0, r3
 801076c:	3710      	adds	r7, #16
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
	...

08010774 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7ff ff87 	bl	8010690 <sync_window>
 8010782:	4603      	mov	r3, r0
 8010784:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010786:	7bfb      	ldrb	r3, [r7, #15]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d158      	bne.n	801083e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	2b03      	cmp	r3, #3
 8010792:	d148      	bne.n	8010826 <sync_fs+0xb2>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	791b      	ldrb	r3, [r3, #4]
 8010798:	2b01      	cmp	r3, #1
 801079a:	d144      	bne.n	8010826 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	3338      	adds	r3, #56	; 0x38
 80107a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107a4:	2100      	movs	r1, #0
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ff fd77 	bl	801029a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	3338      	adds	r3, #56	; 0x38
 80107b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80107b4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7ff fd06 	bl	80101ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	3338      	adds	r3, #56	; 0x38
 80107c2:	4921      	ldr	r1, [pc, #132]	; (8010848 <sync_fs+0xd4>)
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7ff fd1b 	bl	8010200 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	3338      	adds	r3, #56	; 0x38
 80107ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80107d2:	491e      	ldr	r1, [pc, #120]	; (801084c <sync_fs+0xd8>)
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7ff fd13 	bl	8010200 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	3338      	adds	r3, #56	; 0x38
 80107de:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	695b      	ldr	r3, [r3, #20]
 80107e6:	4619      	mov	r1, r3
 80107e8:	4610      	mov	r0, r2
 80107ea:	f7ff fd09 	bl	8010200 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	3338      	adds	r3, #56	; 0x38
 80107f2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	691b      	ldr	r3, [r3, #16]
 80107fa:	4619      	mov	r1, r3
 80107fc:	4610      	mov	r0, r2
 80107fe:	f7ff fcff 	bl	8010200 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010806:	1c5a      	adds	r2, r3, #1
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	7858      	ldrb	r0, [r3, #1]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801081a:	2301      	movs	r3, #1
 801081c:	f7ff fc5c 	bl	80100d8 <disk_write>
			fs->fsi_flag = 0;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	785b      	ldrb	r3, [r3, #1]
 801082a:	2200      	movs	r2, #0
 801082c:	2100      	movs	r1, #0
 801082e:	4618      	mov	r0, r3
 8010830:	f7ff fc72 	bl	8010118 <disk_ioctl>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d001      	beq.n	801083e <sync_fs+0xca>
 801083a:	2301      	movs	r3, #1
 801083c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801083e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010840:	4618      	mov	r0, r3
 8010842:	3710      	adds	r7, #16
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	41615252 	.word	0x41615252
 801084c:	61417272 	.word	0x61417272

08010850 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	3b02      	subs	r3, #2
 801085e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	69db      	ldr	r3, [r3, #28]
 8010864:	3b02      	subs	r3, #2
 8010866:	683a      	ldr	r2, [r7, #0]
 8010868:	429a      	cmp	r2, r3
 801086a:	d301      	bcc.n	8010870 <clust2sect+0x20>
 801086c:	2300      	movs	r3, #0
 801086e:	e008      	b.n	8010882 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	895b      	ldrh	r3, [r3, #10]
 8010874:	461a      	mov	r2, r3
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	fb03 f202 	mul.w	r2, r3, r2
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010880:	4413      	add	r3, r2
}
 8010882:	4618      	mov	r0, r3
 8010884:	370c      	adds	r7, #12
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr

0801088e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b086      	sub	sp, #24
 8010892:	af00      	add	r7, sp, #0
 8010894:	6078      	str	r0, [r7, #4]
 8010896:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d904      	bls.n	80108ae <get_fat+0x20>
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	69db      	ldr	r3, [r3, #28]
 80108a8:	683a      	ldr	r2, [r7, #0]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d302      	bcc.n	80108b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80108ae:	2301      	movs	r3, #1
 80108b0:	617b      	str	r3, [r7, #20]
 80108b2:	e08f      	b.n	80109d4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80108b4:	f04f 33ff 	mov.w	r3, #4294967295
 80108b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	2b03      	cmp	r3, #3
 80108c0:	d062      	beq.n	8010988 <get_fat+0xfa>
 80108c2:	2b03      	cmp	r3, #3
 80108c4:	dc7c      	bgt.n	80109c0 <get_fat+0x132>
 80108c6:	2b01      	cmp	r3, #1
 80108c8:	d002      	beq.n	80108d0 <get_fat+0x42>
 80108ca:	2b02      	cmp	r3, #2
 80108cc:	d042      	beq.n	8010954 <get_fat+0xc6>
 80108ce:	e077      	b.n	80109c0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	60fb      	str	r3, [r7, #12]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	085b      	lsrs	r3, r3, #1
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	4413      	add	r3, r2
 80108dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	0a5b      	lsrs	r3, r3, #9
 80108e6:	4413      	add	r3, r2
 80108e8:	4619      	mov	r1, r3
 80108ea:	6938      	ldr	r0, [r7, #16]
 80108ec:	f7ff ff14 	bl	8010718 <move_window>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d167      	bne.n	80109c6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	1c5a      	adds	r2, r3, #1
 80108fa:	60fa      	str	r2, [r7, #12]
 80108fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010900:	693a      	ldr	r2, [r7, #16]
 8010902:	4413      	add	r3, r2
 8010904:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010908:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	0a5b      	lsrs	r3, r3, #9
 8010912:	4413      	add	r3, r2
 8010914:	4619      	mov	r1, r3
 8010916:	6938      	ldr	r0, [r7, #16]
 8010918:	f7ff fefe 	bl	8010718 <move_window>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d153      	bne.n	80109ca <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010928:	693a      	ldr	r2, [r7, #16]
 801092a:	4413      	add	r3, r2
 801092c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010930:	021b      	lsls	r3, r3, #8
 8010932:	461a      	mov	r2, r3
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	4313      	orrs	r3, r2
 8010938:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	f003 0301 	and.w	r3, r3, #1
 8010940:	2b00      	cmp	r3, #0
 8010942:	d002      	beq.n	801094a <get_fat+0xbc>
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	091b      	lsrs	r3, r3, #4
 8010948:	e002      	b.n	8010950 <get_fat+0xc2>
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010950:	617b      	str	r3, [r7, #20]
			break;
 8010952:	e03f      	b.n	80109d4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	0a1b      	lsrs	r3, r3, #8
 801095c:	4413      	add	r3, r2
 801095e:	4619      	mov	r1, r3
 8010960:	6938      	ldr	r0, [r7, #16]
 8010962:	f7ff fed9 	bl	8010718 <move_window>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d130      	bne.n	80109ce <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	005b      	lsls	r3, r3, #1
 8010976:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801097a:	4413      	add	r3, r2
 801097c:	4618      	mov	r0, r3
 801097e:	f7ff fbe9 	bl	8010154 <ld_word>
 8010982:	4603      	mov	r3, r0
 8010984:	617b      	str	r3, [r7, #20]
			break;
 8010986:	e025      	b.n	80109d4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	09db      	lsrs	r3, r3, #7
 8010990:	4413      	add	r3, r2
 8010992:	4619      	mov	r1, r3
 8010994:	6938      	ldr	r0, [r7, #16]
 8010996:	f7ff febf 	bl	8010718 <move_window>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d118      	bne.n	80109d2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80109ae:	4413      	add	r3, r2
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7ff fbe7 	bl	8010184 <ld_dword>
 80109b6:	4603      	mov	r3, r0
 80109b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80109bc:	617b      	str	r3, [r7, #20]
			break;
 80109be:	e009      	b.n	80109d4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80109c0:	2301      	movs	r3, #1
 80109c2:	617b      	str	r3, [r7, #20]
 80109c4:	e006      	b.n	80109d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80109c6:	bf00      	nop
 80109c8:	e004      	b.n	80109d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80109ca:	bf00      	nop
 80109cc:	e002      	b.n	80109d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80109ce:	bf00      	nop
 80109d0:	e000      	b.n	80109d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80109d2:	bf00      	nop
		}
	}

	return val;
 80109d4:	697b      	ldr	r3, [r7, #20]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3718      	adds	r7, #24
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}

080109de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80109de:	b590      	push	{r4, r7, lr}
 80109e0:	b089      	sub	sp, #36	; 0x24
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	60f8      	str	r0, [r7, #12]
 80109e6:	60b9      	str	r1, [r7, #8]
 80109e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80109ea:	2302      	movs	r3, #2
 80109ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	f240 80d2 	bls.w	8010b9a <put_fat+0x1bc>
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	69db      	ldr	r3, [r3, #28]
 80109fa:	68ba      	ldr	r2, [r7, #8]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	f080 80cc 	bcs.w	8010b9a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	2b03      	cmp	r3, #3
 8010a08:	f000 8096 	beq.w	8010b38 <put_fat+0x15a>
 8010a0c:	2b03      	cmp	r3, #3
 8010a0e:	f300 80cd 	bgt.w	8010bac <put_fat+0x1ce>
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d002      	beq.n	8010a1c <put_fat+0x3e>
 8010a16:	2b02      	cmp	r3, #2
 8010a18:	d06e      	beq.n	8010af8 <put_fat+0x11a>
 8010a1a:	e0c7      	b.n	8010bac <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	61bb      	str	r3, [r7, #24]
 8010a20:	69bb      	ldr	r3, [r7, #24]
 8010a22:	085b      	lsrs	r3, r3, #1
 8010a24:	69ba      	ldr	r2, [r7, #24]
 8010a26:	4413      	add	r3, r2
 8010a28:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a2e:	69bb      	ldr	r3, [r7, #24]
 8010a30:	0a5b      	lsrs	r3, r3, #9
 8010a32:	4413      	add	r3, r2
 8010a34:	4619      	mov	r1, r3
 8010a36:	68f8      	ldr	r0, [r7, #12]
 8010a38:	f7ff fe6e 	bl	8010718 <move_window>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a40:	7ffb      	ldrb	r3, [r7, #31]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f040 80ab 	bne.w	8010b9e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	1c59      	adds	r1, r3, #1
 8010a52:	61b9      	str	r1, [r7, #24]
 8010a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a58:	4413      	add	r3, r2
 8010a5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	f003 0301 	and.w	r3, r3, #1
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00d      	beq.n	8010a82 <put_fat+0xa4>
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	781b      	ldrb	r3, [r3, #0]
 8010a6a:	b25b      	sxtb	r3, r3
 8010a6c:	f003 030f 	and.w	r3, r3, #15
 8010a70:	b25a      	sxtb	r2, r3
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	b2db      	uxtb	r3, r3
 8010a76:	011b      	lsls	r3, r3, #4
 8010a78:	b25b      	sxtb	r3, r3
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	b25b      	sxtb	r3, r3
 8010a7e:	b2db      	uxtb	r3, r3
 8010a80:	e001      	b.n	8010a86 <put_fat+0xa8>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	697a      	ldr	r2, [r7, #20]
 8010a88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a94:	69bb      	ldr	r3, [r7, #24]
 8010a96:	0a5b      	lsrs	r3, r3, #9
 8010a98:	4413      	add	r3, r2
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	68f8      	ldr	r0, [r7, #12]
 8010a9e:	f7ff fe3b 	bl	8010718 <move_window>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010aa6:	7ffb      	ldrb	r3, [r7, #31]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d17a      	bne.n	8010ba2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ab8:	4413      	add	r3, r2
 8010aba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	f003 0301 	and.w	r3, r3, #1
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d003      	beq.n	8010ace <put_fat+0xf0>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	091b      	lsrs	r3, r3, #4
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	e00e      	b.n	8010aec <put_fat+0x10e>
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	b25b      	sxtb	r3, r3
 8010ad4:	f023 030f 	bic.w	r3, r3, #15
 8010ad8:	b25a      	sxtb	r2, r3
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	0a1b      	lsrs	r3, r3, #8
 8010ade:	b25b      	sxtb	r3, r3
 8010ae0:	f003 030f 	and.w	r3, r3, #15
 8010ae4:	b25b      	sxtb	r3, r3
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	b25b      	sxtb	r3, r3
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	697a      	ldr	r2, [r7, #20]
 8010aee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2201      	movs	r2, #1
 8010af4:	70da      	strb	r2, [r3, #3]
			break;
 8010af6:	e059      	b.n	8010bac <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	0a1b      	lsrs	r3, r3, #8
 8010b00:	4413      	add	r3, r2
 8010b02:	4619      	mov	r1, r3
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f7ff fe07 	bl	8010718 <move_window>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b0e:	7ffb      	ldrb	r3, [r7, #31]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d148      	bne.n	8010ba6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	005b      	lsls	r3, r3, #1
 8010b1e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010b22:	4413      	add	r3, r2
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	b292      	uxth	r2, r2
 8010b28:	4611      	mov	r1, r2
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7ff fb4d 	bl	80101ca <st_word>
			fs->wflag = 1;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	2201      	movs	r2, #1
 8010b34:	70da      	strb	r2, [r3, #3]
			break;
 8010b36:	e039      	b.n	8010bac <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	09db      	lsrs	r3, r3, #7
 8010b40:	4413      	add	r3, r2
 8010b42:	4619      	mov	r1, r3
 8010b44:	68f8      	ldr	r0, [r7, #12]
 8010b46:	f7ff fde7 	bl	8010718 <move_window>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b4e:	7ffb      	ldrb	r3, [r7, #31]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d12a      	bne.n	8010baa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	009b      	lsls	r3, r3, #2
 8010b64:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010b68:	4413      	add	r3, r2
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7ff fb0a 	bl	8010184 <ld_dword>
 8010b70:	4603      	mov	r3, r0
 8010b72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010b76:	4323      	orrs	r3, r4
 8010b78:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	009b      	lsls	r3, r3, #2
 8010b84:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010b88:	4413      	add	r3, r2
 8010b8a:	6879      	ldr	r1, [r7, #4]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7ff fb37 	bl	8010200 <st_dword>
			fs->wflag = 1;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	2201      	movs	r2, #1
 8010b96:	70da      	strb	r2, [r3, #3]
			break;
 8010b98:	e008      	b.n	8010bac <put_fat+0x1ce>
		}
	}
 8010b9a:	bf00      	nop
 8010b9c:	e006      	b.n	8010bac <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010b9e:	bf00      	nop
 8010ba0:	e004      	b.n	8010bac <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010ba2:	bf00      	nop
 8010ba4:	e002      	b.n	8010bac <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010ba6:	bf00      	nop
 8010ba8:	e000      	b.n	8010bac <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010baa:	bf00      	nop
	return res;
 8010bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3724      	adds	r7, #36	; 0x24
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd90      	pop	{r4, r7, pc}

08010bb6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b088      	sub	sp, #32
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	60f8      	str	r0, [r7, #12]
 8010bbe:	60b9      	str	r1, [r7, #8]
 8010bc0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d904      	bls.n	8010bdc <remove_chain+0x26>
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	69db      	ldr	r3, [r3, #28]
 8010bd6:	68ba      	ldr	r2, [r7, #8]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d301      	bcc.n	8010be0 <remove_chain+0x2a>
 8010bdc:	2302      	movs	r3, #2
 8010bde:	e04b      	b.n	8010c78 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00c      	beq.n	8010c00 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010be6:	f04f 32ff 	mov.w	r2, #4294967295
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	69b8      	ldr	r0, [r7, #24]
 8010bee:	f7ff fef6 	bl	80109de <put_fat>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010bf6:	7ffb      	ldrb	r3, [r7, #31]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d001      	beq.n	8010c00 <remove_chain+0x4a>
 8010bfc:	7ffb      	ldrb	r3, [r7, #31]
 8010bfe:	e03b      	b.n	8010c78 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010c00:	68b9      	ldr	r1, [r7, #8]
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f7ff fe43 	bl	801088e <get_fat>
 8010c08:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d031      	beq.n	8010c74 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	d101      	bne.n	8010c1a <remove_chain+0x64>
 8010c16:	2302      	movs	r3, #2
 8010c18:	e02e      	b.n	8010c78 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c20:	d101      	bne.n	8010c26 <remove_chain+0x70>
 8010c22:	2301      	movs	r3, #1
 8010c24:	e028      	b.n	8010c78 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010c26:	2200      	movs	r2, #0
 8010c28:	68b9      	ldr	r1, [r7, #8]
 8010c2a:	69b8      	ldr	r0, [r7, #24]
 8010c2c:	f7ff fed7 	bl	80109de <put_fat>
 8010c30:	4603      	mov	r3, r0
 8010c32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010c34:	7ffb      	ldrb	r3, [r7, #31]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d001      	beq.n	8010c3e <remove_chain+0x88>
 8010c3a:	7ffb      	ldrb	r3, [r7, #31]
 8010c3c:	e01c      	b.n	8010c78 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010c3e:	69bb      	ldr	r3, [r7, #24]
 8010c40:	695a      	ldr	r2, [r3, #20]
 8010c42:	69bb      	ldr	r3, [r7, #24]
 8010c44:	69db      	ldr	r3, [r3, #28]
 8010c46:	3b02      	subs	r3, #2
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	d20b      	bcs.n	8010c64 <remove_chain+0xae>
			fs->free_clst++;
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	695b      	ldr	r3, [r3, #20]
 8010c50:	1c5a      	adds	r2, r3, #1
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010c56:	69bb      	ldr	r3, [r7, #24]
 8010c58:	791b      	ldrb	r3, [r3, #4]
 8010c5a:	f043 0301 	orr.w	r3, r3, #1
 8010c5e:	b2da      	uxtb	r2, r3
 8010c60:	69bb      	ldr	r3, [r7, #24]
 8010c62:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	69db      	ldr	r3, [r3, #28]
 8010c6c:	68ba      	ldr	r2, [r7, #8]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d3c6      	bcc.n	8010c00 <remove_chain+0x4a>
 8010c72:	e000      	b.n	8010c76 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010c74:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010c76:	2300      	movs	r3, #0
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3720      	adds	r7, #32
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b088      	sub	sp, #32
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d10d      	bne.n	8010cb2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	691b      	ldr	r3, [r3, #16]
 8010c9a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010c9c:	69bb      	ldr	r3, [r7, #24]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d004      	beq.n	8010cac <create_chain+0x2c>
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	69db      	ldr	r3, [r3, #28]
 8010ca6:	69ba      	ldr	r2, [r7, #24]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d31b      	bcc.n	8010ce4 <create_chain+0x64>
 8010cac:	2301      	movs	r3, #1
 8010cae:	61bb      	str	r3, [r7, #24]
 8010cb0:	e018      	b.n	8010ce4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010cb2:	6839      	ldr	r1, [r7, #0]
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f7ff fdea 	bl	801088e <get_fat>
 8010cba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	d801      	bhi.n	8010cc6 <create_chain+0x46>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e070      	b.n	8010da8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ccc:	d101      	bne.n	8010cd2 <create_chain+0x52>
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	e06a      	b.n	8010da8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	69db      	ldr	r3, [r3, #28]
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d201      	bcs.n	8010ce0 <create_chain+0x60>
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	e063      	b.n	8010da8 <create_chain+0x128>
		scl = clst;
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	3301      	adds	r3, #1
 8010cec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	69db      	ldr	r3, [r3, #28]
 8010cf2:	69fa      	ldr	r2, [r7, #28]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d307      	bcc.n	8010d08 <create_chain+0x88>
				ncl = 2;
 8010cf8:	2302      	movs	r3, #2
 8010cfa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010cfc:	69fa      	ldr	r2, [r7, #28]
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d901      	bls.n	8010d08 <create_chain+0x88>
 8010d04:	2300      	movs	r3, #0
 8010d06:	e04f      	b.n	8010da8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010d08:	69f9      	ldr	r1, [r7, #28]
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f7ff fdbf 	bl	801088e <get_fat>
 8010d10:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d00e      	beq.n	8010d36 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2b01      	cmp	r3, #1
 8010d1c:	d003      	beq.n	8010d26 <create_chain+0xa6>
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d24:	d101      	bne.n	8010d2a <create_chain+0xaa>
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	e03e      	b.n	8010da8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010d2a:	69fa      	ldr	r2, [r7, #28]
 8010d2c:	69bb      	ldr	r3, [r7, #24]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d1da      	bne.n	8010ce8 <create_chain+0x68>
 8010d32:	2300      	movs	r3, #0
 8010d34:	e038      	b.n	8010da8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010d36:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010d38:	f04f 32ff 	mov.w	r2, #4294967295
 8010d3c:	69f9      	ldr	r1, [r7, #28]
 8010d3e:	6938      	ldr	r0, [r7, #16]
 8010d40:	f7ff fe4d 	bl	80109de <put_fat>
 8010d44:	4603      	mov	r3, r0
 8010d46:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010d48:	7dfb      	ldrb	r3, [r7, #23]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d109      	bne.n	8010d62 <create_chain+0xe2>
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d006      	beq.n	8010d62 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010d54:	69fa      	ldr	r2, [r7, #28]
 8010d56:	6839      	ldr	r1, [r7, #0]
 8010d58:	6938      	ldr	r0, [r7, #16]
 8010d5a:	f7ff fe40 	bl	80109de <put_fat>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010d62:	7dfb      	ldrb	r3, [r7, #23]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d116      	bne.n	8010d96 <create_chain+0x116>
		fs->last_clst = ncl;
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	69fa      	ldr	r2, [r7, #28]
 8010d6c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	695a      	ldr	r2, [r3, #20]
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	69db      	ldr	r3, [r3, #28]
 8010d76:	3b02      	subs	r3, #2
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d804      	bhi.n	8010d86 <create_chain+0x106>
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	695b      	ldr	r3, [r3, #20]
 8010d80:	1e5a      	subs	r2, r3, #1
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010d86:	693b      	ldr	r3, [r7, #16]
 8010d88:	791b      	ldrb	r3, [r3, #4]
 8010d8a:	f043 0301 	orr.w	r3, r3, #1
 8010d8e:	b2da      	uxtb	r2, r3
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	711a      	strb	r2, [r3, #4]
 8010d94:	e007      	b.n	8010da6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010d96:	7dfb      	ldrb	r3, [r7, #23]
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d102      	bne.n	8010da2 <create_chain+0x122>
 8010d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010da0:	e000      	b.n	8010da4 <create_chain+0x124>
 8010da2:	2301      	movs	r3, #1
 8010da4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010da6:	69fb      	ldr	r3, [r7, #28]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3720      	adds	r7, #32
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b087      	sub	sp, #28
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dc4:	3304      	adds	r3, #4
 8010dc6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	0a5b      	lsrs	r3, r3, #9
 8010dcc:	68fa      	ldr	r2, [r7, #12]
 8010dce:	8952      	ldrh	r2, [r2, #10]
 8010dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010dd4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	1d1a      	adds	r2, r3, #4
 8010dda:	613a      	str	r2, [r7, #16]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d101      	bne.n	8010dea <clmt_clust+0x3a>
 8010de6:	2300      	movs	r3, #0
 8010de8:	e010      	b.n	8010e0c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010dea:	697a      	ldr	r2, [r7, #20]
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d307      	bcc.n	8010e02 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010df2:	697a      	ldr	r2, [r7, #20]
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	1ad3      	subs	r3, r2, r3
 8010df8:	617b      	str	r3, [r7, #20]
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	3304      	adds	r3, #4
 8010dfe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010e00:	e7e9      	b.n	8010dd6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010e02:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	4413      	add	r3, r2
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	371c      	adds	r7, #28
 8010e10:	46bd      	mov	sp, r7
 8010e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e16:	4770      	bx	lr

08010e18 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b086      	sub	sp, #24
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010e2e:	d204      	bcs.n	8010e3a <dir_sdi+0x22>
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	f003 031f 	and.w	r3, r3, #31
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d001      	beq.n	8010e3e <dir_sdi+0x26>
		return FR_INT_ERR;
 8010e3a:	2302      	movs	r3, #2
 8010e3c:	e063      	b.n	8010f06 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	683a      	ldr	r2, [r7, #0]
 8010e42:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	689b      	ldr	r3, [r3, #8]
 8010e48:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d106      	bne.n	8010e5e <dir_sdi+0x46>
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	2b02      	cmp	r3, #2
 8010e56:	d902      	bls.n	8010e5e <dir_sdi+0x46>
		clst = fs->dirbase;
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e5c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d10c      	bne.n	8010e7e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	095b      	lsrs	r3, r3, #5
 8010e68:	693a      	ldr	r2, [r7, #16]
 8010e6a:	8912      	ldrh	r2, [r2, #8]
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d301      	bcc.n	8010e74 <dir_sdi+0x5c>
 8010e70:	2302      	movs	r3, #2
 8010e72:	e048      	b.n	8010f06 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	61da      	str	r2, [r3, #28]
 8010e7c:	e029      	b.n	8010ed2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	895b      	ldrh	r3, [r3, #10]
 8010e82:	025b      	lsls	r3, r3, #9
 8010e84:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010e86:	e019      	b.n	8010ebc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6979      	ldr	r1, [r7, #20]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7ff fcfe 	bl	801088e <get_fat>
 8010e92:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e9a:	d101      	bne.n	8010ea0 <dir_sdi+0x88>
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	e032      	b.n	8010f06 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	2b01      	cmp	r3, #1
 8010ea4:	d904      	bls.n	8010eb0 <dir_sdi+0x98>
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	69db      	ldr	r3, [r3, #28]
 8010eaa:	697a      	ldr	r2, [r7, #20]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d301      	bcc.n	8010eb4 <dir_sdi+0x9c>
 8010eb0:	2302      	movs	r3, #2
 8010eb2:	e028      	b.n	8010f06 <dir_sdi+0xee>
			ofs -= csz;
 8010eb4:	683a      	ldr	r2, [r7, #0]
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	1ad3      	subs	r3, r2, r3
 8010eba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010ebc:	683a      	ldr	r2, [r7, #0]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d2e1      	bcs.n	8010e88 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010ec4:	6979      	ldr	r1, [r7, #20]
 8010ec6:	6938      	ldr	r0, [r7, #16]
 8010ec8:	f7ff fcc2 	bl	8010850 <clust2sect>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	697a      	ldr	r2, [r7, #20]
 8010ed6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	69db      	ldr	r3, [r3, #28]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d101      	bne.n	8010ee4 <dir_sdi+0xcc>
 8010ee0:	2302      	movs	r3, #2
 8010ee2:	e010      	b.n	8010f06 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	69da      	ldr	r2, [r3, #28]
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	0a5b      	lsrs	r3, r3, #9
 8010eec:	441a      	add	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010efe:	441a      	add	r2, r3
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010f04:	2300      	movs	r3, #0
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3718      	adds	r7, #24
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b086      	sub	sp, #24
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
 8010f16:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	695b      	ldr	r3, [r3, #20]
 8010f22:	3320      	adds	r3, #32
 8010f24:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	69db      	ldr	r3, [r3, #28]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d003      	beq.n	8010f36 <dir_next+0x28>
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f34:	d301      	bcc.n	8010f3a <dir_next+0x2c>
 8010f36:	2304      	movs	r3, #4
 8010f38:	e0aa      	b.n	8011090 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	f040 8098 	bne.w	8011076 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	69db      	ldr	r3, [r3, #28]
 8010f4a:	1c5a      	adds	r2, r3, #1
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	699b      	ldr	r3, [r3, #24]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d10b      	bne.n	8010f70 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	095b      	lsrs	r3, r3, #5
 8010f5c:	68fa      	ldr	r2, [r7, #12]
 8010f5e:	8912      	ldrh	r2, [r2, #8]
 8010f60:	4293      	cmp	r3, r2
 8010f62:	f0c0 8088 	bcc.w	8011076 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	61da      	str	r2, [r3, #28]
 8010f6c:	2304      	movs	r3, #4
 8010f6e:	e08f      	b.n	8011090 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	0a5b      	lsrs	r3, r3, #9
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	8952      	ldrh	r2, [r2, #10]
 8010f78:	3a01      	subs	r2, #1
 8010f7a:	4013      	ands	r3, r2
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d17a      	bne.n	8011076 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	699b      	ldr	r3, [r3, #24]
 8010f86:	4619      	mov	r1, r3
 8010f88:	4610      	mov	r0, r2
 8010f8a:	f7ff fc80 	bl	801088e <get_fat>
 8010f8e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	d801      	bhi.n	8010f9a <dir_next+0x8c>
 8010f96:	2302      	movs	r3, #2
 8010f98:	e07a      	b.n	8011090 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fa0:	d101      	bne.n	8010fa6 <dir_next+0x98>
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	e074      	b.n	8011090 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	69db      	ldr	r3, [r3, #28]
 8010faa:	697a      	ldr	r2, [r7, #20]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d358      	bcc.n	8011062 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d104      	bne.n	8010fc0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	61da      	str	r2, [r3, #28]
 8010fbc:	2304      	movs	r3, #4
 8010fbe:	e067      	b.n	8011090 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	699b      	ldr	r3, [r3, #24]
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	4610      	mov	r0, r2
 8010fca:	f7ff fe59 	bl	8010c80 <create_chain>
 8010fce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d101      	bne.n	8010fda <dir_next+0xcc>
 8010fd6:	2307      	movs	r3, #7
 8010fd8:	e05a      	b.n	8011090 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d101      	bne.n	8010fe4 <dir_next+0xd6>
 8010fe0:	2302      	movs	r3, #2
 8010fe2:	e055      	b.n	8011090 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fea:	d101      	bne.n	8010ff0 <dir_next+0xe2>
 8010fec:	2301      	movs	r3, #1
 8010fee:	e04f      	b.n	8011090 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010ff0:	68f8      	ldr	r0, [r7, #12]
 8010ff2:	f7ff fb4d 	bl	8010690 <sync_window>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d001      	beq.n	8011000 <dir_next+0xf2>
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	e047      	b.n	8011090 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	3338      	adds	r3, #56	; 0x38
 8011004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011008:	2100      	movs	r1, #0
 801100a:	4618      	mov	r0, r3
 801100c:	f7ff f945 	bl	801029a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011010:	2300      	movs	r3, #0
 8011012:	613b      	str	r3, [r7, #16]
 8011014:	6979      	ldr	r1, [r7, #20]
 8011016:	68f8      	ldr	r0, [r7, #12]
 8011018:	f7ff fc1a 	bl	8010850 <clust2sect>
 801101c:	4602      	mov	r2, r0
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	635a      	str	r2, [r3, #52]	; 0x34
 8011022:	e012      	b.n	801104a <dir_next+0x13c>
						fs->wflag = 1;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2201      	movs	r2, #1
 8011028:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801102a:	68f8      	ldr	r0, [r7, #12]
 801102c:	f7ff fb30 	bl	8010690 <sync_window>
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d001      	beq.n	801103a <dir_next+0x12c>
 8011036:	2301      	movs	r3, #1
 8011038:	e02a      	b.n	8011090 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	3301      	adds	r3, #1
 801103e:	613b      	str	r3, [r7, #16]
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011044:	1c5a      	adds	r2, r3, #1
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	635a      	str	r2, [r3, #52]	; 0x34
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	895b      	ldrh	r3, [r3, #10]
 801104e:	461a      	mov	r2, r3
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	4293      	cmp	r3, r2
 8011054:	d3e6      	bcc.n	8011024 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	1ad2      	subs	r2, r2, r3
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	697a      	ldr	r2, [r7, #20]
 8011066:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011068:	6979      	ldr	r1, [r7, #20]
 801106a:	68f8      	ldr	r0, [r7, #12]
 801106c:	f7ff fbf0 	bl	8010850 <clust2sect>
 8011070:	4602      	mov	r2, r0
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	68ba      	ldr	r2, [r7, #8]
 801107a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011088:	441a      	add	r2, r3
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801108e:	2300      	movs	r3, #0
}
 8011090:	4618      	mov	r0, r3
 8011092:	3718      	adds	r7, #24
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b086      	sub	sp, #24
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80110a8:	2100      	movs	r1, #0
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f7ff feb4 	bl	8010e18 <dir_sdi>
 80110b0:	4603      	mov	r3, r0
 80110b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80110b4:	7dfb      	ldrb	r3, [r7, #23]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d12b      	bne.n	8011112 <dir_alloc+0x7a>
		n = 0;
 80110ba:	2300      	movs	r3, #0
 80110bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	69db      	ldr	r3, [r3, #28]
 80110c2:	4619      	mov	r1, r3
 80110c4:	68f8      	ldr	r0, [r7, #12]
 80110c6:	f7ff fb27 	bl	8010718 <move_window>
 80110ca:	4603      	mov	r3, r0
 80110cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80110ce:	7dfb      	ldrb	r3, [r7, #23]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d11d      	bne.n	8011110 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6a1b      	ldr	r3, [r3, #32]
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	2be5      	cmp	r3, #229	; 0xe5
 80110dc:	d004      	beq.n	80110e8 <dir_alloc+0x50>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6a1b      	ldr	r3, [r3, #32]
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d107      	bne.n	80110f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	3301      	adds	r3, #1
 80110ec:	613b      	str	r3, [r7, #16]
 80110ee:	693a      	ldr	r2, [r7, #16]
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d102      	bne.n	80110fc <dir_alloc+0x64>
 80110f6:	e00c      	b.n	8011112 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80110f8:	2300      	movs	r3, #0
 80110fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80110fc:	2101      	movs	r1, #1
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f7ff ff05 	bl	8010f0e <dir_next>
 8011104:	4603      	mov	r3, r0
 8011106:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011108:	7dfb      	ldrb	r3, [r7, #23]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d0d7      	beq.n	80110be <dir_alloc+0x26>
 801110e:	e000      	b.n	8011112 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011110:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011112:	7dfb      	ldrb	r3, [r7, #23]
 8011114:	2b04      	cmp	r3, #4
 8011116:	d101      	bne.n	801111c <dir_alloc+0x84>
 8011118:	2307      	movs	r3, #7
 801111a:	75fb      	strb	r3, [r7, #23]
	return res;
 801111c:	7dfb      	ldrb	r3, [r7, #23]
}
 801111e:	4618      	mov	r0, r3
 8011120:	3718      	adds	r7, #24
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}

08011126 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011126:	b580      	push	{r7, lr}
 8011128:	b084      	sub	sp, #16
 801112a:	af00      	add	r7, sp, #0
 801112c:	6078      	str	r0, [r7, #4]
 801112e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	331a      	adds	r3, #26
 8011134:	4618      	mov	r0, r3
 8011136:	f7ff f80d 	bl	8010154 <ld_word>
 801113a:	4603      	mov	r3, r0
 801113c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	2b03      	cmp	r3, #3
 8011144:	d109      	bne.n	801115a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	3314      	adds	r3, #20
 801114a:	4618      	mov	r0, r3
 801114c:	f7ff f802 	bl	8010154 <ld_word>
 8011150:	4603      	mov	r3, r0
 8011152:	041b      	lsls	r3, r3, #16
 8011154:	68fa      	ldr	r2, [r7, #12]
 8011156:	4313      	orrs	r3, r2
 8011158:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801115a:	68fb      	ldr	r3, [r7, #12]
}
 801115c:	4618      	mov	r0, r3
 801115e:	3710      	adds	r7, #16
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b084      	sub	sp, #16
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	331a      	adds	r3, #26
 8011174:	687a      	ldr	r2, [r7, #4]
 8011176:	b292      	uxth	r2, r2
 8011178:	4611      	mov	r1, r2
 801117a:	4618      	mov	r0, r3
 801117c:	f7ff f825 	bl	80101ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	781b      	ldrb	r3, [r3, #0]
 8011184:	2b03      	cmp	r3, #3
 8011186:	d109      	bne.n	801119c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	f103 0214 	add.w	r2, r3, #20
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	0c1b      	lsrs	r3, r3, #16
 8011192:	b29b      	uxth	r3, r3
 8011194:	4619      	mov	r1, r3
 8011196:	4610      	mov	r0, r2
 8011198:	f7ff f817 	bl	80101ca <st_word>
	}
}
 801119c:	bf00      	nop
 801119e:	3710      	adds	r7, #16
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b086      	sub	sp, #24
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80111b2:	2100      	movs	r1, #0
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f7ff fe2f 	bl	8010e18 <dir_sdi>
 80111ba:	4603      	mov	r3, r0
 80111bc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80111be:	7dfb      	ldrb	r3, [r7, #23]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d001      	beq.n	80111c8 <dir_find+0x24>
 80111c4:	7dfb      	ldrb	r3, [r7, #23]
 80111c6:	e03e      	b.n	8011246 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	69db      	ldr	r3, [r3, #28]
 80111cc:	4619      	mov	r1, r3
 80111ce:	6938      	ldr	r0, [r7, #16]
 80111d0:	f7ff faa2 	bl	8010718 <move_window>
 80111d4:	4603      	mov	r3, r0
 80111d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80111d8:	7dfb      	ldrb	r3, [r7, #23]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d12f      	bne.n	801123e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6a1b      	ldr	r3, [r3, #32]
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80111e6:	7bfb      	ldrb	r3, [r7, #15]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d102      	bne.n	80111f2 <dir_find+0x4e>
 80111ec:	2304      	movs	r3, #4
 80111ee:	75fb      	strb	r3, [r7, #23]
 80111f0:	e028      	b.n	8011244 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6a1b      	ldr	r3, [r3, #32]
 80111f6:	330b      	adds	r3, #11
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80111fe:	b2da      	uxtb	r2, r3
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6a1b      	ldr	r3, [r3, #32]
 8011208:	330b      	adds	r3, #11
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	f003 0308 	and.w	r3, r3, #8
 8011210:	2b00      	cmp	r3, #0
 8011212:	d10a      	bne.n	801122a <dir_find+0x86>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6a18      	ldr	r0, [r3, #32]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	3324      	adds	r3, #36	; 0x24
 801121c:	220b      	movs	r2, #11
 801121e:	4619      	mov	r1, r3
 8011220:	f7ff f856 	bl	80102d0 <mem_cmp>
 8011224:	4603      	mov	r3, r0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d00b      	beq.n	8011242 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801122a:	2100      	movs	r1, #0
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f7ff fe6e 	bl	8010f0e <dir_next>
 8011232:	4603      	mov	r3, r0
 8011234:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011236:	7dfb      	ldrb	r3, [r7, #23]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d0c5      	beq.n	80111c8 <dir_find+0x24>
 801123c:	e002      	b.n	8011244 <dir_find+0xa0>
		if (res != FR_OK) break;
 801123e:	bf00      	nop
 8011240:	e000      	b.n	8011244 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011242:	bf00      	nop

	return res;
 8011244:	7dfb      	ldrb	r3, [r7, #23]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3718      	adds	r7, #24
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}

0801124e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801124e:	b580      	push	{r7, lr}
 8011250:	b084      	sub	sp, #16
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801125c:	2101      	movs	r1, #1
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f7ff ff1a 	bl	8011098 <dir_alloc>
 8011264:	4603      	mov	r3, r0
 8011266:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011268:	7bfb      	ldrb	r3, [r7, #15]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d11c      	bne.n	80112a8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	69db      	ldr	r3, [r3, #28]
 8011272:	4619      	mov	r1, r3
 8011274:	68b8      	ldr	r0, [r7, #8]
 8011276:	f7ff fa4f 	bl	8010718 <move_window>
 801127a:	4603      	mov	r3, r0
 801127c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801127e:	7bfb      	ldrb	r3, [r7, #15]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d111      	bne.n	80112a8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6a1b      	ldr	r3, [r3, #32]
 8011288:	2220      	movs	r2, #32
 801128a:	2100      	movs	r1, #0
 801128c:	4618      	mov	r0, r3
 801128e:	f7ff f804 	bl	801029a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6a18      	ldr	r0, [r3, #32]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	3324      	adds	r3, #36	; 0x24
 801129a:	220b      	movs	r2, #11
 801129c:	4619      	mov	r1, r3
 801129e:	f7fe ffdb 	bl	8010258 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	2201      	movs	r2, #1
 80112a6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80112a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
	...

080112b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b088      	sub	sp, #32
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	60fb      	str	r3, [r7, #12]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	3324      	adds	r3, #36	; 0x24
 80112c8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80112ca:	220b      	movs	r2, #11
 80112cc:	2120      	movs	r1, #32
 80112ce:	68b8      	ldr	r0, [r7, #8]
 80112d0:	f7fe ffe3 	bl	801029a <mem_set>
	si = i = 0; ni = 8;
 80112d4:	2300      	movs	r3, #0
 80112d6:	613b      	str	r3, [r7, #16]
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	61fb      	str	r3, [r7, #28]
 80112dc:	2308      	movs	r3, #8
 80112de:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80112e0:	68fa      	ldr	r2, [r7, #12]
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	4413      	add	r3, r2
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	2b2e      	cmp	r3, #46	; 0x2e
 80112ea:	d12f      	bne.n	801134c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	1c5a      	adds	r2, r3, #1
 80112f0:	61fa      	str	r2, [r7, #28]
 80112f2:	68fa      	ldr	r2, [r7, #12]
 80112f4:	4413      	add	r3, r2
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 80112fa:	7efb      	ldrb	r3, [r7, #27]
 80112fc:	2b2e      	cmp	r3, #46	; 0x2e
 80112fe:	d10a      	bne.n	8011316 <create_name+0x62>
 8011300:	69fb      	ldr	r3, [r7, #28]
 8011302:	2b02      	cmp	r3, #2
 8011304:	d807      	bhi.n	8011316 <create_name+0x62>
			sfn[i++] = c;
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	1c5a      	adds	r2, r3, #1
 801130a:	613a      	str	r2, [r7, #16]
 801130c:	68ba      	ldr	r2, [r7, #8]
 801130e:	4413      	add	r3, r2
 8011310:	7efa      	ldrb	r2, [r7, #27]
 8011312:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8011314:	e7ea      	b.n	80112ec <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8011316:	7efb      	ldrb	r3, [r7, #27]
 8011318:	2b2f      	cmp	r3, #47	; 0x2f
 801131a:	d007      	beq.n	801132c <create_name+0x78>
 801131c:	7efb      	ldrb	r3, [r7, #27]
 801131e:	2b5c      	cmp	r3, #92	; 0x5c
 8011320:	d004      	beq.n	801132c <create_name+0x78>
 8011322:	7efb      	ldrb	r3, [r7, #27]
 8011324:	2b20      	cmp	r3, #32
 8011326:	d901      	bls.n	801132c <create_name+0x78>
 8011328:	2306      	movs	r3, #6
 801132a:	e084      	b.n	8011436 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 801132c:	68fa      	ldr	r2, [r7, #12]
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	441a      	add	r2, r3
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8011336:	7efb      	ldrb	r3, [r7, #27]
 8011338:	2b20      	cmp	r3, #32
 801133a:	d801      	bhi.n	8011340 <create_name+0x8c>
 801133c:	2224      	movs	r2, #36	; 0x24
 801133e:	e000      	b.n	8011342 <create_name+0x8e>
 8011340:	2220      	movs	r2, #32
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	330b      	adds	r3, #11
 8011346:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8011348:	2300      	movs	r3, #0
 801134a:	e074      	b.n	8011436 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801134c:	69fb      	ldr	r3, [r7, #28]
 801134e:	1c5a      	adds	r2, r3, #1
 8011350:	61fa      	str	r2, [r7, #28]
 8011352:	68fa      	ldr	r2, [r7, #12]
 8011354:	4413      	add	r3, r2
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801135a:	7efb      	ldrb	r3, [r7, #27]
 801135c:	2b20      	cmp	r3, #32
 801135e:	d94e      	bls.n	80113fe <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011360:	7efb      	ldrb	r3, [r7, #27]
 8011362:	2b2f      	cmp	r3, #47	; 0x2f
 8011364:	d006      	beq.n	8011374 <create_name+0xc0>
 8011366:	7efb      	ldrb	r3, [r7, #27]
 8011368:	2b5c      	cmp	r3, #92	; 0x5c
 801136a:	d110      	bne.n	801138e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801136c:	e002      	b.n	8011374 <create_name+0xc0>
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	3301      	adds	r3, #1
 8011372:	61fb      	str	r3, [r7, #28]
 8011374:	68fa      	ldr	r2, [r7, #12]
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	4413      	add	r3, r2
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	2b2f      	cmp	r3, #47	; 0x2f
 801137e:	d0f6      	beq.n	801136e <create_name+0xba>
 8011380:	68fa      	ldr	r2, [r7, #12]
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	4413      	add	r3, r2
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	2b5c      	cmp	r3, #92	; 0x5c
 801138a:	d0f0      	beq.n	801136e <create_name+0xba>
			break;
 801138c:	e038      	b.n	8011400 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801138e:	7efb      	ldrb	r3, [r7, #27]
 8011390:	2b2e      	cmp	r3, #46	; 0x2e
 8011392:	d003      	beq.n	801139c <create_name+0xe8>
 8011394:	693a      	ldr	r2, [r7, #16]
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	429a      	cmp	r2, r3
 801139a:	d30c      	bcc.n	80113b6 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	2b0b      	cmp	r3, #11
 80113a0:	d002      	beq.n	80113a8 <create_name+0xf4>
 80113a2:	7efb      	ldrb	r3, [r7, #27]
 80113a4:	2b2e      	cmp	r3, #46	; 0x2e
 80113a6:	d001      	beq.n	80113ac <create_name+0xf8>
 80113a8:	2306      	movs	r3, #6
 80113aa:	e044      	b.n	8011436 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80113ac:	2308      	movs	r3, #8
 80113ae:	613b      	str	r3, [r7, #16]
 80113b0:	230b      	movs	r3, #11
 80113b2:	617b      	str	r3, [r7, #20]
			continue;
 80113b4:	e022      	b.n	80113fc <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80113b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	da04      	bge.n	80113c8 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80113be:	7efb      	ldrb	r3, [r7, #27]
 80113c0:	3b80      	subs	r3, #128	; 0x80
 80113c2:	4a1f      	ldr	r2, [pc, #124]	; (8011440 <create_name+0x18c>)
 80113c4:	5cd3      	ldrb	r3, [r2, r3]
 80113c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80113c8:	7efb      	ldrb	r3, [r7, #27]
 80113ca:	4619      	mov	r1, r3
 80113cc:	481d      	ldr	r0, [pc, #116]	; (8011444 <create_name+0x190>)
 80113ce:	f7fe ffa6 	bl	801031e <chk_chr>
 80113d2:	4603      	mov	r3, r0
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d001      	beq.n	80113dc <create_name+0x128>
 80113d8:	2306      	movs	r3, #6
 80113da:	e02c      	b.n	8011436 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80113dc:	7efb      	ldrb	r3, [r7, #27]
 80113de:	2b60      	cmp	r3, #96	; 0x60
 80113e0:	d905      	bls.n	80113ee <create_name+0x13a>
 80113e2:	7efb      	ldrb	r3, [r7, #27]
 80113e4:	2b7a      	cmp	r3, #122	; 0x7a
 80113e6:	d802      	bhi.n	80113ee <create_name+0x13a>
 80113e8:	7efb      	ldrb	r3, [r7, #27]
 80113ea:	3b20      	subs	r3, #32
 80113ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	1c5a      	adds	r2, r3, #1
 80113f2:	613a      	str	r2, [r7, #16]
 80113f4:	68ba      	ldr	r2, [r7, #8]
 80113f6:	4413      	add	r3, r2
 80113f8:	7efa      	ldrb	r2, [r7, #27]
 80113fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80113fc:	e7a6      	b.n	801134c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80113fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011400:	68fa      	ldr	r2, [r7, #12]
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	441a      	add	r2, r3
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d101      	bne.n	8011414 <create_name+0x160>
 8011410:	2306      	movs	r3, #6
 8011412:	e010      	b.n	8011436 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	781b      	ldrb	r3, [r3, #0]
 8011418:	2be5      	cmp	r3, #229	; 0xe5
 801141a:	d102      	bne.n	8011422 <create_name+0x16e>
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	2205      	movs	r2, #5
 8011420:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011422:	7efb      	ldrb	r3, [r7, #27]
 8011424:	2b20      	cmp	r3, #32
 8011426:	d801      	bhi.n	801142c <create_name+0x178>
 8011428:	2204      	movs	r2, #4
 801142a:	e000      	b.n	801142e <create_name+0x17a>
 801142c:	2200      	movs	r2, #0
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	330b      	adds	r3, #11
 8011432:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011434:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011436:	4618      	mov	r0, r3
 8011438:	3720      	adds	r7, #32
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
 801143e:	bf00      	nop
 8011440:	0801a330 	.word	0x0801a330
 8011444:	080177a4 	.word	0x080177a4

08011448 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b086      	sub	sp, #24
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	2b2f      	cmp	r3, #47	; 0x2f
 8011462:	d00b      	beq.n	801147c <follow_path+0x34>
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	2b5c      	cmp	r3, #92	; 0x5c
 801146a:	d007      	beq.n	801147c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	699a      	ldr	r2, [r3, #24]
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	609a      	str	r2, [r3, #8]
 8011474:	e00d      	b.n	8011492 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	3301      	adds	r3, #1
 801147a:	603b      	str	r3, [r7, #0]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b2f      	cmp	r3, #47	; 0x2f
 8011482:	d0f8      	beq.n	8011476 <follow_path+0x2e>
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	2b5c      	cmp	r3, #92	; 0x5c
 801148a:	d0f4      	beq.n	8011476 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	2200      	movs	r2, #0
 8011490:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	2b1f      	cmp	r3, #31
 8011498:	d80a      	bhi.n	80114b0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2280      	movs	r2, #128	; 0x80
 801149e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80114a2:	2100      	movs	r1, #0
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f7ff fcb7 	bl	8010e18 <dir_sdi>
 80114aa:	4603      	mov	r3, r0
 80114ac:	75fb      	strb	r3, [r7, #23]
 80114ae:	e056      	b.n	801155e <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80114b0:	463b      	mov	r3, r7
 80114b2:	4619      	mov	r1, r3
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f7ff fefd 	bl	80112b4 <create_name>
 80114ba:	4603      	mov	r3, r0
 80114bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80114be:	7dfb      	ldrb	r3, [r7, #23]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d147      	bne.n	8011554 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f7ff fe6d 	bl	80111a4 <dir_find>
 80114ca:	4603      	mov	r3, r0
 80114cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80114d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80114d6:	7dfb      	ldrb	r3, [r7, #23]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d01b      	beq.n	8011514 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80114dc:	7dfb      	ldrb	r3, [r7, #23]
 80114de:	2b04      	cmp	r3, #4
 80114e0:	d13a      	bne.n	8011558 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80114e2:	7afb      	ldrb	r3, [r7, #11]
 80114e4:	f003 0320 	and.w	r3, r3, #32
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00b      	beq.n	8011504 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80114ec:	7afb      	ldrb	r3, [r7, #11]
 80114ee:	f003 0304 	and.w	r3, r3, #4
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d02c      	beq.n	8011550 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2280      	movs	r2, #128	; 0x80
 80114fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80114fe:	2300      	movs	r3, #0
 8011500:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8011502:	e029      	b.n	8011558 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011504:	7afb      	ldrb	r3, [r7, #11]
 8011506:	f003 0304 	and.w	r3, r3, #4
 801150a:	2b00      	cmp	r3, #0
 801150c:	d124      	bne.n	8011558 <follow_path+0x110>
 801150e:	2305      	movs	r3, #5
 8011510:	75fb      	strb	r3, [r7, #23]
				break;
 8011512:	e021      	b.n	8011558 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011514:	7afb      	ldrb	r3, [r7, #11]
 8011516:	f003 0304 	and.w	r3, r3, #4
 801151a:	2b00      	cmp	r3, #0
 801151c:	d11e      	bne.n	801155c <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	799b      	ldrb	r3, [r3, #6]
 8011522:	f003 0310 	and.w	r3, r3, #16
 8011526:	2b00      	cmp	r3, #0
 8011528:	d102      	bne.n	8011530 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801152a:	2305      	movs	r3, #5
 801152c:	75fb      	strb	r3, [r7, #23]
 801152e:	e016      	b.n	801155e <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	695b      	ldr	r3, [r3, #20]
 801153a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801153e:	4413      	add	r3, r2
 8011540:	4619      	mov	r1, r3
 8011542:	68f8      	ldr	r0, [r7, #12]
 8011544:	f7ff fdef 	bl	8011126 <ld_clust>
 8011548:	4602      	mov	r2, r0
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	609a      	str	r2, [r3, #8]
 801154e:	e7af      	b.n	80114b0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011550:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011552:	e7ad      	b.n	80114b0 <follow_path+0x68>
			if (res != FR_OK) break;
 8011554:	bf00      	nop
 8011556:	e002      	b.n	801155e <follow_path+0x116>
				break;
 8011558:	bf00      	nop
 801155a:	e000      	b.n	801155e <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801155c:	bf00      	nop
			}
		}
	}

	return res;
 801155e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011560:	4618      	mov	r0, r3
 8011562:	3718      	adds	r7, #24
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}

08011568 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011568:	b480      	push	{r7}
 801156a:	b087      	sub	sp, #28
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011570:	f04f 33ff 	mov.w	r3, #4294967295
 8011574:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d031      	beq.n	80115e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	617b      	str	r3, [r7, #20]
 8011584:	e002      	b.n	801158c <get_ldnumber+0x24>
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	3301      	adds	r3, #1
 801158a:	617b      	str	r3, [r7, #20]
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	2b20      	cmp	r3, #32
 8011592:	d903      	bls.n	801159c <get_ldnumber+0x34>
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	2b3a      	cmp	r3, #58	; 0x3a
 801159a:	d1f4      	bne.n	8011586 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	2b3a      	cmp	r3, #58	; 0x3a
 80115a2:	d11c      	bne.n	80115de <get_ldnumber+0x76>
			tp = *path;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	1c5a      	adds	r2, r3, #1
 80115ae:	60fa      	str	r2, [r7, #12]
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	3b30      	subs	r3, #48	; 0x30
 80115b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	2b09      	cmp	r3, #9
 80115ba:	d80e      	bhi.n	80115da <get_ldnumber+0x72>
 80115bc:	68fa      	ldr	r2, [r7, #12]
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d10a      	bne.n	80115da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d107      	bne.n	80115da <get_ldnumber+0x72>
					vol = (int)i;
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	3301      	adds	r3, #1
 80115d2:	617b      	str	r3, [r7, #20]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	697a      	ldr	r2, [r7, #20]
 80115d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	e002      	b.n	80115e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80115de:	2300      	movs	r3, #0
 80115e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80115e2:	693b      	ldr	r3, [r7, #16]
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	371c      	adds	r7, #28
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr

080115f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2200      	movs	r2, #0
 80115fe:	70da      	strb	r2, [r3, #3]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f04f 32ff 	mov.w	r2, #4294967295
 8011606:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011608:	6839      	ldr	r1, [r7, #0]
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f7ff f884 	bl	8010718 <move_window>
 8011610:	4603      	mov	r3, r0
 8011612:	2b00      	cmp	r3, #0
 8011614:	d001      	beq.n	801161a <check_fs+0x2a>
 8011616:	2304      	movs	r3, #4
 8011618:	e038      	b.n	801168c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	3338      	adds	r3, #56	; 0x38
 801161e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011622:	4618      	mov	r0, r3
 8011624:	f7fe fd96 	bl	8010154 <ld_word>
 8011628:	4603      	mov	r3, r0
 801162a:	461a      	mov	r2, r3
 801162c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011630:	429a      	cmp	r2, r3
 8011632:	d001      	beq.n	8011638 <check_fs+0x48>
 8011634:	2303      	movs	r3, #3
 8011636:	e029      	b.n	801168c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801163e:	2be9      	cmp	r3, #233	; 0xe9
 8011640:	d009      	beq.n	8011656 <check_fs+0x66>
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011648:	2beb      	cmp	r3, #235	; 0xeb
 801164a:	d11e      	bne.n	801168a <check_fs+0x9a>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011652:	2b90      	cmp	r3, #144	; 0x90
 8011654:	d119      	bne.n	801168a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	3338      	adds	r3, #56	; 0x38
 801165a:	3336      	adds	r3, #54	; 0x36
 801165c:	4618      	mov	r0, r3
 801165e:	f7fe fd91 	bl	8010184 <ld_dword>
 8011662:	4603      	mov	r3, r0
 8011664:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011668:	4a0a      	ldr	r2, [pc, #40]	; (8011694 <check_fs+0xa4>)
 801166a:	4293      	cmp	r3, r2
 801166c:	d101      	bne.n	8011672 <check_fs+0x82>
 801166e:	2300      	movs	r3, #0
 8011670:	e00c      	b.n	801168c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	3338      	adds	r3, #56	; 0x38
 8011676:	3352      	adds	r3, #82	; 0x52
 8011678:	4618      	mov	r0, r3
 801167a:	f7fe fd83 	bl	8010184 <ld_dword>
 801167e:	4603      	mov	r3, r0
 8011680:	4a05      	ldr	r2, [pc, #20]	; (8011698 <check_fs+0xa8>)
 8011682:	4293      	cmp	r3, r2
 8011684:	d101      	bne.n	801168a <check_fs+0x9a>
 8011686:	2300      	movs	r3, #0
 8011688:	e000      	b.n	801168c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801168a:	2302      	movs	r3, #2
}
 801168c:	4618      	mov	r0, r3
 801168e:	3708      	adds	r7, #8
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	00544146 	.word	0x00544146
 8011698:	33544146 	.word	0x33544146

0801169c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b096      	sub	sp, #88	; 0x58
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	4613      	mov	r3, r2
 80116a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	2200      	movs	r2, #0
 80116ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80116b0:	68f8      	ldr	r0, [r7, #12]
 80116b2:	f7ff ff59 	bl	8011568 <get_ldnumber>
 80116b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80116b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	da01      	bge.n	80116c2 <find_volume+0x26>
 80116be:	230b      	movs	r3, #11
 80116c0:	e239      	b.n	8011b36 <find_volume+0x49a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80116c2:	4aac      	ldr	r2, [pc, #688]	; (8011974 <find_volume+0x2d8>)
 80116c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80116cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d101      	bne.n	80116d6 <find_volume+0x3a>
 80116d2:	230c      	movs	r3, #12
 80116d4:	e22f      	b.n	8011b36 <find_volume+0x49a>

	ENTER_FF(fs);						/* Lock the volume */
 80116d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80116d8:	f7fe fe3c 	bl	8010354 <lock_fs>
 80116dc:	4603      	mov	r3, r0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d101      	bne.n	80116e6 <find_volume+0x4a>
 80116e2:	230f      	movs	r3, #15
 80116e4:	e227      	b.n	8011b36 <find_volume+0x49a>
	*rfs = fs;							/* Return pointer to the file system object */
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80116ec:	79fb      	ldrb	r3, [r7, #7]
 80116ee:	f023 0301 	bic.w	r3, r3, #1
 80116f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80116f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d01a      	beq.n	8011732 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80116fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fe:	785b      	ldrb	r3, [r3, #1]
 8011700:	4618      	mov	r0, r3
 8011702:	f7fe fc89 	bl	8010018 <disk_status>
 8011706:	4603      	mov	r3, r0
 8011708:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801170c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011710:	f003 0301 	and.w	r3, r3, #1
 8011714:	2b00      	cmp	r3, #0
 8011716:	d10c      	bne.n	8011732 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011718:	79fb      	ldrb	r3, [r7, #7]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d007      	beq.n	801172e <find_volume+0x92>
 801171e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011722:	f003 0304 	and.w	r3, r3, #4
 8011726:	2b00      	cmp	r3, #0
 8011728:	d001      	beq.n	801172e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801172a:	230a      	movs	r3, #10
 801172c:	e203      	b.n	8011b36 <find_volume+0x49a>
			}
			return FR_OK;				/* The file system object is valid */
 801172e:	2300      	movs	r3, #0
 8011730:	e201      	b.n	8011b36 <find_volume+0x49a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011734:	2200      	movs	r2, #0
 8011736:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801173a:	b2da      	uxtb	r2, r3
 801173c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011742:	785b      	ldrb	r3, [r3, #1]
 8011744:	4618      	mov	r0, r3
 8011746:	f7fe fc81 	bl	801004c <disk_initialize>
 801174a:	4603      	mov	r3, r0
 801174c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011754:	f003 0301 	and.w	r3, r3, #1
 8011758:	2b00      	cmp	r3, #0
 801175a:	d001      	beq.n	8011760 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801175c:	2303      	movs	r3, #3
 801175e:	e1ea      	b.n	8011b36 <find_volume+0x49a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011760:	79fb      	ldrb	r3, [r7, #7]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d007      	beq.n	8011776 <find_volume+0xda>
 8011766:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801176a:	f003 0304 	and.w	r3, r3, #4
 801176e:	2b00      	cmp	r3, #0
 8011770:	d001      	beq.n	8011776 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8011772:	230a      	movs	r3, #10
 8011774:	e1df      	b.n	8011b36 <find_volume+0x49a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011776:	2300      	movs	r3, #0
 8011778:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801177a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801177c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801177e:	f7ff ff37 	bl	80115f0 <check_fs>
 8011782:	4603      	mov	r3, r0
 8011784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801178c:	2b02      	cmp	r3, #2
 801178e:	d14b      	bne.n	8011828 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011790:	2300      	movs	r3, #0
 8011792:	643b      	str	r3, [r7, #64]	; 0x40
 8011794:	e01f      	b.n	80117d6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011798:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801179c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801179e:	011b      	lsls	r3, r3, #4
 80117a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80117a4:	4413      	add	r3, r2
 80117a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80117a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117aa:	3304      	adds	r3, #4
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d006      	beq.n	80117c0 <find_volume+0x124>
 80117b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b4:	3308      	adds	r3, #8
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7fe fce4 	bl	8010184 <ld_dword>
 80117bc:	4602      	mov	r2, r0
 80117be:	e000      	b.n	80117c2 <find_volume+0x126>
 80117c0:	2200      	movs	r2, #0
 80117c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117c4:	009b      	lsls	r3, r3, #2
 80117c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80117ca:	440b      	add	r3, r1
 80117cc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80117d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117d2:	3301      	adds	r3, #1
 80117d4:	643b      	str	r3, [r7, #64]	; 0x40
 80117d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117d8:	2b03      	cmp	r3, #3
 80117da:	d9dc      	bls.n	8011796 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80117dc:	2300      	movs	r3, #0
 80117de:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80117e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d002      	beq.n	80117ec <find_volume+0x150>
 80117e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117e8:	3b01      	subs	r3, #1
 80117ea:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80117ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80117f4:	4413      	add	r3, r2
 80117f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80117fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80117fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d005      	beq.n	801180e <find_volume+0x172>
 8011802:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011804:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011806:	f7ff fef3 	bl	80115f0 <check_fs>
 801180a:	4603      	mov	r3, r0
 801180c:	e000      	b.n	8011810 <find_volume+0x174>
 801180e:	2303      	movs	r3, #3
 8011810:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011818:	2b01      	cmp	r3, #1
 801181a:	d905      	bls.n	8011828 <find_volume+0x18c>
 801181c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801181e:	3301      	adds	r3, #1
 8011820:	643b      	str	r3, [r7, #64]	; 0x40
 8011822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011824:	2b03      	cmp	r3, #3
 8011826:	d9e1      	bls.n	80117ec <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801182c:	2b04      	cmp	r3, #4
 801182e:	d101      	bne.n	8011834 <find_volume+0x198>
 8011830:	2301      	movs	r3, #1
 8011832:	e180      	b.n	8011b36 <find_volume+0x49a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011834:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011838:	2b01      	cmp	r3, #1
 801183a:	d901      	bls.n	8011840 <find_volume+0x1a4>
 801183c:	230d      	movs	r3, #13
 801183e:	e17a      	b.n	8011b36 <find_volume+0x49a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011842:	3338      	adds	r3, #56	; 0x38
 8011844:	330b      	adds	r3, #11
 8011846:	4618      	mov	r0, r3
 8011848:	f7fe fc84 	bl	8010154 <ld_word>
 801184c:	4603      	mov	r3, r0
 801184e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011852:	d001      	beq.n	8011858 <find_volume+0x1bc>
 8011854:	230d      	movs	r3, #13
 8011856:	e16e      	b.n	8011b36 <find_volume+0x49a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185a:	3338      	adds	r3, #56	; 0x38
 801185c:	3316      	adds	r3, #22
 801185e:	4618      	mov	r0, r3
 8011860:	f7fe fc78 	bl	8010154 <ld_word>
 8011864:	4603      	mov	r3, r0
 8011866:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801186a:	2b00      	cmp	r3, #0
 801186c:	d106      	bne.n	801187c <find_volume+0x1e0>
 801186e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011870:	3338      	adds	r3, #56	; 0x38
 8011872:	3324      	adds	r3, #36	; 0x24
 8011874:	4618      	mov	r0, r3
 8011876:	f7fe fc85 	bl	8010184 <ld_dword>
 801187a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801187c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801187e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011880:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011884:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	789b      	ldrb	r3, [r3, #2]
 8011890:	2b01      	cmp	r3, #1
 8011892:	d005      	beq.n	80118a0 <find_volume+0x204>
 8011894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011896:	789b      	ldrb	r3, [r3, #2]
 8011898:	2b02      	cmp	r3, #2
 801189a:	d001      	beq.n	80118a0 <find_volume+0x204>
 801189c:	230d      	movs	r3, #13
 801189e:	e14a      	b.n	8011b36 <find_volume+0x49a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80118a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a2:	789b      	ldrb	r3, [r3, #2]
 80118a4:	461a      	mov	r2, r3
 80118a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118a8:	fb02 f303 	mul.w	r3, r2, r3
 80118ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80118ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118b4:	b29a      	uxth	r2, r3
 80118b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80118ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118bc:	895b      	ldrh	r3, [r3, #10]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d008      	beq.n	80118d4 <find_volume+0x238>
 80118c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c4:	895b      	ldrh	r3, [r3, #10]
 80118c6:	461a      	mov	r2, r3
 80118c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ca:	895b      	ldrh	r3, [r3, #10]
 80118cc:	3b01      	subs	r3, #1
 80118ce:	4013      	ands	r3, r2
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d001      	beq.n	80118d8 <find_volume+0x23c>
 80118d4:	230d      	movs	r3, #13
 80118d6:	e12e      	b.n	8011b36 <find_volume+0x49a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80118d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118da:	3338      	adds	r3, #56	; 0x38
 80118dc:	3311      	adds	r3, #17
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fe fc38 	bl	8010154 <ld_word>
 80118e4:	4603      	mov	r3, r0
 80118e6:	461a      	mov	r2, r3
 80118e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80118ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ee:	891b      	ldrh	r3, [r3, #8]
 80118f0:	f003 030f 	and.w	r3, r3, #15
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d001      	beq.n	80118fe <find_volume+0x262>
 80118fa:	230d      	movs	r3, #13
 80118fc:	e11b      	b.n	8011b36 <find_volume+0x49a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80118fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011900:	3338      	adds	r3, #56	; 0x38
 8011902:	3313      	adds	r3, #19
 8011904:	4618      	mov	r0, r3
 8011906:	f7fe fc25 	bl	8010154 <ld_word>
 801190a:	4603      	mov	r3, r0
 801190c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801190e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011910:	2b00      	cmp	r3, #0
 8011912:	d106      	bne.n	8011922 <find_volume+0x286>
 8011914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011916:	3338      	adds	r3, #56	; 0x38
 8011918:	3320      	adds	r3, #32
 801191a:	4618      	mov	r0, r3
 801191c:	f7fe fc32 	bl	8010184 <ld_dword>
 8011920:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011924:	3338      	adds	r3, #56	; 0x38
 8011926:	330e      	adds	r3, #14
 8011928:	4618      	mov	r0, r3
 801192a:	f7fe fc13 	bl	8010154 <ld_word>
 801192e:	4603      	mov	r3, r0
 8011930:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011932:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011934:	2b00      	cmp	r3, #0
 8011936:	d101      	bne.n	801193c <find_volume+0x2a0>
 8011938:	230d      	movs	r3, #13
 801193a:	e0fc      	b.n	8011b36 <find_volume+0x49a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801193c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801193e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011940:	4413      	add	r3, r2
 8011942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011944:	8912      	ldrh	r2, [r2, #8]
 8011946:	0912      	lsrs	r2, r2, #4
 8011948:	b292      	uxth	r2, r2
 801194a:	4413      	add	r3, r2
 801194c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801194e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011952:	429a      	cmp	r2, r3
 8011954:	d201      	bcs.n	801195a <find_volume+0x2be>
 8011956:	230d      	movs	r3, #13
 8011958:	e0ed      	b.n	8011b36 <find_volume+0x49a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801195a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195e:	1ad3      	subs	r3, r2, r3
 8011960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011962:	8952      	ldrh	r2, [r2, #10]
 8011964:	fbb3 f3f2 	udiv	r3, r3, r2
 8011968:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196c:	2b00      	cmp	r3, #0
 801196e:	d103      	bne.n	8011978 <find_volume+0x2dc>
 8011970:	230d      	movs	r3, #13
 8011972:	e0e0      	b.n	8011b36 <find_volume+0x49a>
 8011974:	20000a00 	.word	0x20000a00
		fmt = FS_FAT32;
 8011978:	2303      	movs	r3, #3
 801197a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011980:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011984:	4293      	cmp	r3, r2
 8011986:	d802      	bhi.n	801198e <find_volume+0x2f2>
 8011988:	2302      	movs	r3, #2
 801198a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011990:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011994:	4293      	cmp	r3, r2
 8011996:	d802      	bhi.n	801199e <find_volume+0x302>
 8011998:	2301      	movs	r3, #1
 801199a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a0:	1c9a      	adds	r2, r3, #2
 80119a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80119a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80119aa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80119ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80119ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119b0:	441a      	add	r2, r3
 80119b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119b4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80119b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80119b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ba:	441a      	add	r2, r3
 80119bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119be:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80119c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80119c4:	2b03      	cmp	r3, #3
 80119c6:	d11e      	bne.n	8011a06 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80119c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ca:	3338      	adds	r3, #56	; 0x38
 80119cc:	332a      	adds	r3, #42	; 0x2a
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fe fbc0 	bl	8010154 <ld_word>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d001      	beq.n	80119de <find_volume+0x342>
 80119da:	230d      	movs	r3, #13
 80119dc:	e0ab      	b.n	8011b36 <find_volume+0x49a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80119de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e0:	891b      	ldrh	r3, [r3, #8]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d001      	beq.n	80119ea <find_volume+0x34e>
 80119e6:	230d      	movs	r3, #13
 80119e8:	e0a5      	b.n	8011b36 <find_volume+0x49a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80119ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ec:	3338      	adds	r3, #56	; 0x38
 80119ee:	332c      	adds	r3, #44	; 0x2c
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7fe fbc7 	bl	8010184 <ld_dword>
 80119f6:	4602      	mov	r2, r0
 80119f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119fa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80119fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119fe:	69db      	ldr	r3, [r3, #28]
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	647b      	str	r3, [r7, #68]	; 0x44
 8011a04:	e01f      	b.n	8011a46 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a08:	891b      	ldrh	r3, [r3, #8]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d101      	bne.n	8011a12 <find_volume+0x376>
 8011a0e:	230d      	movs	r3, #13
 8011a10:	e091      	b.n	8011b36 <find_volume+0x49a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a18:	441a      	add	r2, r3
 8011a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a1c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011a1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	d103      	bne.n	8011a2e <find_volume+0x392>
 8011a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a28:	69db      	ldr	r3, [r3, #28]
 8011a2a:	005b      	lsls	r3, r3, #1
 8011a2c:	e00a      	b.n	8011a44 <find_volume+0x3a8>
 8011a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a30:	69da      	ldr	r2, [r3, #28]
 8011a32:	4613      	mov	r3, r2
 8011a34:	005b      	lsls	r3, r3, #1
 8011a36:	4413      	add	r3, r2
 8011a38:	085a      	lsrs	r2, r3, #1
 8011a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3c:	69db      	ldr	r3, [r3, #28]
 8011a3e:	f003 0301 	and.w	r3, r3, #1
 8011a42:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011a44:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a48:	6a1a      	ldr	r2, [r3, #32]
 8011a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011a50:	0a5b      	lsrs	r3, r3, #9
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d201      	bcs.n	8011a5a <find_volume+0x3be>
 8011a56:	230d      	movs	r3, #13
 8011a58:	e06d      	b.n	8011b36 <find_volume+0x49a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a60:	615a      	str	r2, [r3, #20]
 8011a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a64:	695a      	ldr	r2, [r3, #20]
 8011a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a68:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a6c:	2280      	movs	r2, #128	; 0x80
 8011a6e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011a70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a74:	2b03      	cmp	r3, #3
 8011a76:	d149      	bne.n	8011b0c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7a:	3338      	adds	r3, #56	; 0x38
 8011a7c:	3330      	adds	r3, #48	; 0x30
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fe fb68 	bl	8010154 <ld_word>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d140      	bne.n	8011b0c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	4619      	mov	r1, r3
 8011a90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a92:	f7fe fe41 	bl	8010718 <move_window>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d137      	bne.n	8011b0c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8011a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa4:	3338      	adds	r3, #56	; 0x38
 8011aa6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fe fb52 	bl	8010154 <ld_word>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	461a      	mov	r2, r3
 8011ab4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d127      	bne.n	8011b0c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011abe:	3338      	adds	r3, #56	; 0x38
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fe fb5f 	bl	8010184 <ld_dword>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	4a1d      	ldr	r2, [pc, #116]	; (8011b40 <find_volume+0x4a4>)
 8011aca:	4293      	cmp	r3, r2
 8011acc:	d11e      	bne.n	8011b0c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad0:	3338      	adds	r3, #56	; 0x38
 8011ad2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7fe fb54 	bl	8010184 <ld_dword>
 8011adc:	4603      	mov	r3, r0
 8011ade:	4a19      	ldr	r2, [pc, #100]	; (8011b44 <find_volume+0x4a8>)
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d113      	bne.n	8011b0c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae6:	3338      	adds	r3, #56	; 0x38
 8011ae8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fe fb49 	bl	8010184 <ld_dword>
 8011af2:	4602      	mov	r2, r0
 8011af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afa:	3338      	adds	r3, #56	; 0x38
 8011afc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7fe fb3f 	bl	8010184 <ld_dword>
 8011b06:	4602      	mov	r2, r0
 8011b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011b12:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011b14:	4b0c      	ldr	r3, [pc, #48]	; (8011b48 <find_volume+0x4ac>)
 8011b16:	881b      	ldrh	r3, [r3, #0]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	b29a      	uxth	r2, r3
 8011b1c:	4b0a      	ldr	r3, [pc, #40]	; (8011b48 <find_volume+0x4ac>)
 8011b1e:	801a      	strh	r2, [r3, #0]
 8011b20:	4b09      	ldr	r3, [pc, #36]	; (8011b48 <find_volume+0x4ac>)
 8011b22:	881a      	ldrh	r2, [r3, #0]
 8011b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b26:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8011b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011b2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b30:	f7fe fd8a 	bl	8010648 <clear_lock>
#endif
	return FR_OK;
 8011b34:	2300      	movs	r3, #0
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3758      	adds	r7, #88	; 0x58
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	41615252 	.word	0x41615252
 8011b44:	61417272 	.word	0x61417272
 8011b48:	20000a04 	.word	0x20000a04

08011b4c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011b56:	2309      	movs	r3, #9
 8011b58:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d02e      	beq.n	8011bbe <validate+0x72>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d02a      	beq.n	8011bbe <validate+0x72>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d025      	beq.n	8011bbe <validate+0x72>
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	889a      	ldrh	r2, [r3, #4]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	88db      	ldrh	r3, [r3, #6]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d11e      	bne.n	8011bbe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7fe fbe5 	bl	8010354 <lock_fs>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d014      	beq.n	8011bba <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	785b      	ldrb	r3, [r3, #1]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fe fa3e 	bl	8010018 <disk_status>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	f003 0301 	and.w	r3, r3, #1
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d102      	bne.n	8011bac <validate+0x60>
				res = FR_OK;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	73fb      	strb	r3, [r7, #15]
 8011baa:	e008      	b.n	8011bbe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	2100      	movs	r1, #0
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fe fbe4 	bl	8010380 <unlock_fs>
 8011bb8:	e001      	b.n	8011bbe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8011bba:	230f      	movs	r3, #15
 8011bbc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011bbe:	7bfb      	ldrb	r3, [r7, #15]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d102      	bne.n	8011bca <validate+0x7e>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	e000      	b.n	8011bcc <validate+0x80>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	683a      	ldr	r2, [r7, #0]
 8011bce:	6013      	str	r3, [r2, #0]
	return res;
 8011bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
	...

08011bdc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b088      	sub	sp, #32
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	4613      	mov	r3, r2
 8011be8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011bee:	f107 0310 	add.w	r3, r7, #16
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7ff fcb8 	bl	8011568 <get_ldnumber>
 8011bf8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011bfa:	69fb      	ldr	r3, [r7, #28]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	da01      	bge.n	8011c04 <f_mount+0x28>
 8011c00:	230b      	movs	r3, #11
 8011c02:	e048      	b.n	8011c96 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011c04:	4a26      	ldr	r2, [pc, #152]	; (8011ca0 <f_mount+0xc4>)
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c0c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00f      	beq.n	8011c34 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011c14:	69b8      	ldr	r0, [r7, #24]
 8011c16:	f7fe fd17 	bl	8010648 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011c1a:	69bb      	ldr	r3, [r7, #24]
 8011c1c:	68db      	ldr	r3, [r3, #12]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f001 fed9 	bl	80139d6 <ff_del_syncobj>
 8011c24:	4603      	mov	r3, r0
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d101      	bne.n	8011c2e <f_mount+0x52>
 8011c2a:	2302      	movs	r3, #2
 8011c2c:	e033      	b.n	8011c96 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	2200      	movs	r2, #0
 8011c32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00f      	beq.n	8011c5a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011c40:	69fb      	ldr	r3, [r7, #28]
 8011c42:	b2da      	uxtb	r2, r3
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	330c      	adds	r3, #12
 8011c48:	4619      	mov	r1, r3
 8011c4a:	4610      	mov	r0, r2
 8011c4c:	f001 fea3 	bl	8013996 <ff_cre_syncobj>
 8011c50:	4603      	mov	r3, r0
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d101      	bne.n	8011c5a <f_mount+0x7e>
 8011c56:	2302      	movs	r3, #2
 8011c58:	e01d      	b.n	8011c96 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011c5a:	68fa      	ldr	r2, [r7, #12]
 8011c5c:	4910      	ldr	r1, [pc, #64]	; (8011ca0 <f_mount+0xc4>)
 8011c5e:	69fb      	ldr	r3, [r7, #28]
 8011c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d002      	beq.n	8011c70 <f_mount+0x94>
 8011c6a:	79fb      	ldrb	r3, [r7, #7]
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d001      	beq.n	8011c74 <f_mount+0x98>
 8011c70:	2300      	movs	r3, #0
 8011c72:	e010      	b.n	8011c96 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011c74:	f107 010c 	add.w	r1, r7, #12
 8011c78:	f107 0308 	add.w	r3, r7, #8
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7ff fd0c 	bl	801169c <find_volume>
 8011c84:	4603      	mov	r3, r0
 8011c86:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	7dfa      	ldrb	r2, [r7, #23]
 8011c8c:	4611      	mov	r1, r2
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fe fb76 	bl	8010380 <unlock_fs>
 8011c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3720      	adds	r7, #32
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}
 8011c9e:	bf00      	nop
 8011ca0:	20000a00 	.word	0x20000a00

08011ca4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b098      	sub	sp, #96	; 0x60
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	60f8      	str	r0, [r7, #12]
 8011cac:	60b9      	str	r1, [r7, #8]
 8011cae:	4613      	mov	r3, r2
 8011cb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d101      	bne.n	8011cbc <f_open+0x18>
 8011cb8:	2309      	movs	r3, #9
 8011cba:	e1b4      	b.n	8012026 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011cbc:	79fb      	ldrb	r3, [r7, #7]
 8011cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011cc2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011cc4:	79fa      	ldrb	r2, [r7, #7]
 8011cc6:	f107 0110 	add.w	r1, r7, #16
 8011cca:	f107 0308 	add.w	r3, r7, #8
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7ff fce4 	bl	801169c <find_volume>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8011cda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	f040 8191 	bne.w	8012006 <f_open+0x362>
		dj.obj.fs = fs;
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011ce8:	68ba      	ldr	r2, [r7, #8]
 8011cea:	f107 0314 	add.w	r3, r7, #20
 8011cee:	4611      	mov	r1, r2
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7ff fba9 	bl	8011448 <follow_path>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d11a      	bne.n	8011d3a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011d04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011d08:	b25b      	sxtb	r3, r3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	da03      	bge.n	8011d16 <f_open+0x72>
				res = FR_INVALID_NAME;
 8011d0e:	2306      	movs	r3, #6
 8011d10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011d14:	e011      	b.n	8011d3a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011d16:	79fb      	ldrb	r3, [r7, #7]
 8011d18:	f023 0301 	bic.w	r3, r3, #1
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	bf14      	ite	ne
 8011d20:	2301      	movne	r3, #1
 8011d22:	2300      	moveq	r3, #0
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	461a      	mov	r2, r3
 8011d28:	f107 0314 	add.w	r3, r7, #20
 8011d2c:	4611      	mov	r1, r2
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7fe fb42 	bl	80103b8 <chk_lock>
 8011d34:	4603      	mov	r3, r0
 8011d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011d3a:	79fb      	ldrb	r3, [r7, #7]
 8011d3c:	f003 031c 	and.w	r3, r3, #28
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d07f      	beq.n	8011e44 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d017      	beq.n	8011d7c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011d50:	2b04      	cmp	r3, #4
 8011d52:	d10e      	bne.n	8011d72 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011d54:	f7fe fb8c 	bl	8010470 <enq_lock>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d006      	beq.n	8011d6c <f_open+0xc8>
 8011d5e:	f107 0314 	add.w	r3, r7, #20
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7ff fa73 	bl	801124e <dir_register>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	e000      	b.n	8011d6e <f_open+0xca>
 8011d6c:	2312      	movs	r3, #18
 8011d6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011d72:	79fb      	ldrb	r3, [r7, #7]
 8011d74:	f043 0308 	orr.w	r3, r3, #8
 8011d78:	71fb      	strb	r3, [r7, #7]
 8011d7a:	e010      	b.n	8011d9e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011d7c:	7ebb      	ldrb	r3, [r7, #26]
 8011d7e:	f003 0311 	and.w	r3, r3, #17
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d003      	beq.n	8011d8e <f_open+0xea>
					res = FR_DENIED;
 8011d86:	2307      	movs	r3, #7
 8011d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011d8c:	e007      	b.n	8011d9e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011d8e:	79fb      	ldrb	r3, [r7, #7]
 8011d90:	f003 0304 	and.w	r3, r3, #4
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d002      	beq.n	8011d9e <f_open+0xfa>
 8011d98:	2308      	movs	r3, #8
 8011d9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d168      	bne.n	8011e78 <f_open+0x1d4>
 8011da6:	79fb      	ldrb	r3, [r7, #7]
 8011da8:	f003 0308 	and.w	r3, r3, #8
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d063      	beq.n	8011e78 <f_open+0x1d4>
				dw = GET_FATTIME();
 8011db0:	f7fd fec2 	bl	800fb38 <get_fattime>
 8011db4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011db8:	330e      	adds	r3, #14
 8011dba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7fe fa1f 	bl	8010200 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dc4:	3316      	adds	r3, #22
 8011dc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7fe fa19 	bl	8010200 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dd0:	330b      	adds	r3, #11
 8011dd2:	2220      	movs	r2, #32
 8011dd4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011dda:	4611      	mov	r1, r2
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7ff f9a2 	bl	8011126 <ld_clust>
 8011de2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011de8:	2200      	movs	r2, #0
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7ff f9ba 	bl	8011164 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df2:	331c      	adds	r3, #28
 8011df4:	2100      	movs	r1, #0
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fe fa02 	bl	8010200 <st_dword>
					fs->wflag = 1;
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d037      	beq.n	8011e78 <f_open+0x1d4>
						dw = fs->winsect;
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e0c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011e0e:	f107 0314 	add.w	r3, r7, #20
 8011e12:	2200      	movs	r2, #0
 8011e14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7fe fecd 	bl	8010bb6 <remove_chain>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d126      	bne.n	8011e78 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7fe fc72 	bl	8010718 <move_window>
 8011e34:	4603      	mov	r3, r0
 8011e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e3e:	3a01      	subs	r2, #1
 8011e40:	611a      	str	r2, [r3, #16]
 8011e42:	e019      	b.n	8011e78 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011e44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d115      	bne.n	8011e78 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011e4c:	7ebb      	ldrb	r3, [r7, #26]
 8011e4e:	f003 0310 	and.w	r3, r3, #16
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d003      	beq.n	8011e5e <f_open+0x1ba>
					res = FR_NO_FILE;
 8011e56:	2304      	movs	r3, #4
 8011e58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011e5c:	e00c      	b.n	8011e78 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011e5e:	79fb      	ldrb	r3, [r7, #7]
 8011e60:	f003 0302 	and.w	r3, r3, #2
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d007      	beq.n	8011e78 <f_open+0x1d4>
 8011e68:	7ebb      	ldrb	r3, [r7, #26]
 8011e6a:	f003 0301 	and.w	r3, r3, #1
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d002      	beq.n	8011e78 <f_open+0x1d4>
						res = FR_DENIED;
 8011e72:	2307      	movs	r3, #7
 8011e74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011e78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d128      	bne.n	8011ed2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011e80:	79fb      	ldrb	r3, [r7, #7]
 8011e82:	f003 0308 	and.w	r3, r3, #8
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d003      	beq.n	8011e92 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011e8a:	79fb      	ldrb	r3, [r7, #7]
 8011e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011ea0:	79fb      	ldrb	r3, [r7, #7]
 8011ea2:	f023 0301 	bic.w	r3, r3, #1
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	bf14      	ite	ne
 8011eaa:	2301      	movne	r3, #1
 8011eac:	2300      	moveq	r3, #0
 8011eae:	b2db      	uxtb	r3, r3
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	f107 0314 	add.w	r3, r7, #20
 8011eb6:	4611      	mov	r1, r2
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7fe fafb 	bl	80104b4 <inc_lock>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	691b      	ldr	r3, [r3, #16]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d102      	bne.n	8011ed2 <f_open+0x22e>
 8011ecc:	2302      	movs	r3, #2
 8011ece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	f040 8095 	bne.w	8012006 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7ff f91f 	bl	8011126 <ld_clust>
 8011ee8:	4602      	mov	r2, r0
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ef0:	331c      	adds	r3, #28
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7fe f946 	bl	8010184 <ld_dword>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2200      	movs	r2, #0
 8011f02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011f04:	693a      	ldr	r2, [r7, #16]
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	88da      	ldrh	r2, [r3, #6]
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	79fa      	ldrb	r2, [r7, #7]
 8011f16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2200      	movs	r2, #0
 8011f22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	2200      	movs	r2, #0
 8011f28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	3330      	adds	r3, #48	; 0x30
 8011f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f32:	2100      	movs	r1, #0
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fe f9b0 	bl	801029a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011f3a:	79fb      	ldrb	r3, [r7, #7]
 8011f3c:	f003 0320 	and.w	r3, r3, #32
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d060      	beq.n	8012006 <f_open+0x362>
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d05c      	beq.n	8012006 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	68da      	ldr	r2, [r3, #12]
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	895b      	ldrh	r3, [r3, #10]
 8011f58:	025b      	lsls	r3, r3, #9
 8011f5a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	689b      	ldr	r3, [r3, #8]
 8011f60:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	68db      	ldr	r3, [r3, #12]
 8011f66:	657b      	str	r3, [r7, #84]	; 0x54
 8011f68:	e016      	b.n	8011f98 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7fe fc8d 	bl	801088e <get_fat>
 8011f74:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d802      	bhi.n	8011f82 <f_open+0x2de>
 8011f7c:	2302      	movs	r3, #2
 8011f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f88:	d102      	bne.n	8011f90 <f_open+0x2ec>
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011f90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f94:	1ad3      	subs	r3, r2, r3
 8011f96:	657b      	str	r3, [r7, #84]	; 0x54
 8011f98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d103      	bne.n	8011fa8 <f_open+0x304>
 8011fa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d8e0      	bhi.n	8011f6a <f_open+0x2c6>
				}
				fp->clust = clst;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011fac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011fae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d127      	bne.n	8012006 <f_open+0x362>
 8011fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d022      	beq.n	8012006 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7fe fc43 	bl	8010850 <clust2sect>
 8011fca:	6478      	str	r0, [r7, #68]	; 0x44
 8011fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d103      	bne.n	8011fda <f_open+0x336>
						res = FR_INT_ERR;
 8011fd2:	2302      	movs	r3, #2
 8011fd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011fd8:	e015      	b.n	8012006 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fdc:	0a5a      	lsrs	r2, r3, #9
 8011fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fe0:	441a      	add	r2, r3
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	7858      	ldrb	r0, [r3, #1]
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6a1a      	ldr	r2, [r3, #32]
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	f7fe f84f 	bl	8010098 <disk_read>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d002      	beq.n	8012006 <f_open+0x362>
 8012000:	2301      	movs	r3, #1
 8012002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801200a:	2b00      	cmp	r3, #0
 801200c:	d002      	beq.n	8012014 <f_open+0x370>
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	2200      	movs	r2, #0
 8012012:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801201a:	4611      	mov	r1, r2
 801201c:	4618      	mov	r0, r3
 801201e:	f7fe f9af 	bl	8010380 <unlock_fs>
 8012022:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012026:	4618      	mov	r0, r3
 8012028:	3760      	adds	r7, #96	; 0x60
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}

0801202e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801202e:	b580      	push	{r7, lr}
 8012030:	b08e      	sub	sp, #56	; 0x38
 8012032:	af00      	add	r7, sp, #0
 8012034:	60f8      	str	r0, [r7, #12]
 8012036:	60b9      	str	r1, [r7, #8]
 8012038:	607a      	str	r2, [r7, #4]
 801203a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	2200      	movs	r2, #0
 8012044:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	f107 0214 	add.w	r2, r7, #20
 801204c:	4611      	mov	r1, r2
 801204e:	4618      	mov	r0, r3
 8012050:	f7ff fd7c 	bl	8011b4c <validate>
 8012054:	4603      	mov	r3, r0
 8012056:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801205a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801205e:	2b00      	cmp	r3, #0
 8012060:	d107      	bne.n	8012072 <f_read+0x44>
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	7d5b      	ldrb	r3, [r3, #21]
 8012066:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801206a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801206e:	2b00      	cmp	r3, #0
 8012070:	d009      	beq.n	8012086 <f_read+0x58>
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012078:	4611      	mov	r1, r2
 801207a:	4618      	mov	r0, r3
 801207c:	f7fe f980 	bl	8010380 <unlock_fs>
 8012080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012084:	e13d      	b.n	8012302 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	7d1b      	ldrb	r3, [r3, #20]
 801208a:	f003 0301 	and.w	r3, r3, #1
 801208e:	2b00      	cmp	r3, #0
 8012090:	d106      	bne.n	80120a0 <f_read+0x72>
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	2107      	movs	r1, #7
 8012096:	4618      	mov	r0, r3
 8012098:	f7fe f972 	bl	8010380 <unlock_fs>
 801209c:	2307      	movs	r3, #7
 801209e:	e130      	b.n	8012302 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	68da      	ldr	r2, [r3, #12]
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	699b      	ldr	r3, [r3, #24]
 80120a8:	1ad3      	subs	r3, r2, r3
 80120aa:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	6a3b      	ldr	r3, [r7, #32]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	f240 811c 	bls.w	80122ee <f_read+0x2c0>
 80120b6:	6a3b      	ldr	r3, [r7, #32]
 80120b8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80120ba:	e118      	b.n	80122ee <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	699b      	ldr	r3, [r3, #24]
 80120c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	f040 80e4 	bne.w	8012292 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	699b      	ldr	r3, [r3, #24]
 80120ce:	0a5b      	lsrs	r3, r3, #9
 80120d0:	697a      	ldr	r2, [r7, #20]
 80120d2:	8952      	ldrh	r2, [r2, #10]
 80120d4:	3a01      	subs	r2, #1
 80120d6:	4013      	ands	r3, r2
 80120d8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d139      	bne.n	8012154 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	699b      	ldr	r3, [r3, #24]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d103      	bne.n	80120f0 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	689b      	ldr	r3, [r3, #8]
 80120ec:	633b      	str	r3, [r7, #48]	; 0x30
 80120ee:	e013      	b.n	8012118 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d007      	beq.n	8012108 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	699b      	ldr	r3, [r3, #24]
 80120fc:	4619      	mov	r1, r3
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f7fe fe56 	bl	8010db0 <clmt_clust>
 8012104:	6338      	str	r0, [r7, #48]	; 0x30
 8012106:	e007      	b.n	8012118 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012108:	68fa      	ldr	r2, [r7, #12]
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	69db      	ldr	r3, [r3, #28]
 801210e:	4619      	mov	r1, r3
 8012110:	4610      	mov	r0, r2
 8012112:	f7fe fbbc 	bl	801088e <get_fat>
 8012116:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801211a:	2b01      	cmp	r3, #1
 801211c:	d809      	bhi.n	8012132 <f_read+0x104>
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2202      	movs	r2, #2
 8012122:	755a      	strb	r2, [r3, #21]
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	2102      	movs	r1, #2
 8012128:	4618      	mov	r0, r3
 801212a:	f7fe f929 	bl	8010380 <unlock_fs>
 801212e:	2302      	movs	r3, #2
 8012130:	e0e7      	b.n	8012302 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012138:	d109      	bne.n	801214e <f_read+0x120>
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2201      	movs	r2, #1
 801213e:	755a      	strb	r2, [r3, #21]
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	2101      	movs	r1, #1
 8012144:	4618      	mov	r0, r3
 8012146:	f7fe f91b 	bl	8010380 <unlock_fs>
 801214a:	2301      	movs	r3, #1
 801214c:	e0d9      	b.n	8012302 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012152:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012154:	697a      	ldr	r2, [r7, #20]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	69db      	ldr	r3, [r3, #28]
 801215a:	4619      	mov	r1, r3
 801215c:	4610      	mov	r0, r2
 801215e:	f7fe fb77 	bl	8010850 <clust2sect>
 8012162:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d109      	bne.n	801217e <f_read+0x150>
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2202      	movs	r2, #2
 801216e:	755a      	strb	r2, [r3, #21]
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	2102      	movs	r1, #2
 8012174:	4618      	mov	r0, r3
 8012176:	f7fe f903 	bl	8010380 <unlock_fs>
 801217a:	2302      	movs	r3, #2
 801217c:	e0c1      	b.n	8012302 <f_read+0x2d4>
			sect += csect;
 801217e:	69ba      	ldr	r2, [r7, #24]
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	4413      	add	r3, r2
 8012184:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	0a5b      	lsrs	r3, r3, #9
 801218a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218e:	2b00      	cmp	r3, #0
 8012190:	d03e      	beq.n	8012210 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012192:	69fa      	ldr	r2, [r7, #28]
 8012194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012196:	4413      	add	r3, r2
 8012198:	697a      	ldr	r2, [r7, #20]
 801219a:	8952      	ldrh	r2, [r2, #10]
 801219c:	4293      	cmp	r3, r2
 801219e:	d905      	bls.n	80121ac <f_read+0x17e>
					cc = fs->csize - csect;
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	895b      	ldrh	r3, [r3, #10]
 80121a4:	461a      	mov	r2, r3
 80121a6:	69fb      	ldr	r3, [r7, #28]
 80121a8:	1ad3      	subs	r3, r2, r3
 80121aa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	7858      	ldrb	r0, [r3, #1]
 80121b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b2:	69ba      	ldr	r2, [r7, #24]
 80121b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80121b6:	f7fd ff6f 	bl	8010098 <disk_read>
 80121ba:	4603      	mov	r3, r0
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d009      	beq.n	80121d4 <f_read+0x1a6>
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	2201      	movs	r2, #1
 80121c4:	755a      	strb	r2, [r3, #21]
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	2101      	movs	r1, #1
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fe f8d8 	bl	8010380 <unlock_fs>
 80121d0:	2301      	movs	r3, #1
 80121d2:	e096      	b.n	8012302 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	7d1b      	ldrb	r3, [r3, #20]
 80121d8:	b25b      	sxtb	r3, r3
 80121da:	2b00      	cmp	r3, #0
 80121dc:	da14      	bge.n	8012208 <f_read+0x1da>
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	6a1a      	ldr	r2, [r3, #32]
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	1ad3      	subs	r3, r2, r3
 80121e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d90d      	bls.n	8012208 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	6a1a      	ldr	r2, [r3, #32]
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	1ad3      	subs	r3, r2, r3
 80121f4:	025b      	lsls	r3, r3, #9
 80121f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121f8:	18d0      	adds	r0, r2, r3
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	3330      	adds	r3, #48	; 0x30
 80121fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012202:	4619      	mov	r1, r3
 8012204:	f7fe f828 	bl	8010258 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801220a:	025b      	lsls	r3, r3, #9
 801220c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801220e:	e05a      	b.n	80122c6 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	6a1b      	ldr	r3, [r3, #32]
 8012214:	69ba      	ldr	r2, [r7, #24]
 8012216:	429a      	cmp	r2, r3
 8012218:	d038      	beq.n	801228c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	7d1b      	ldrb	r3, [r3, #20]
 801221e:	b25b      	sxtb	r3, r3
 8012220:	2b00      	cmp	r3, #0
 8012222:	da1d      	bge.n	8012260 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	7858      	ldrb	r0, [r3, #1]
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6a1a      	ldr	r2, [r3, #32]
 8012232:	2301      	movs	r3, #1
 8012234:	f7fd ff50 	bl	80100d8 <disk_write>
 8012238:	4603      	mov	r3, r0
 801223a:	2b00      	cmp	r3, #0
 801223c:	d009      	beq.n	8012252 <f_read+0x224>
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	2201      	movs	r2, #1
 8012242:	755a      	strb	r2, [r3, #21]
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	2101      	movs	r1, #1
 8012248:	4618      	mov	r0, r3
 801224a:	f7fe f899 	bl	8010380 <unlock_fs>
 801224e:	2301      	movs	r3, #1
 8012250:	e057      	b.n	8012302 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	7d1b      	ldrb	r3, [r3, #20]
 8012256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801225a:	b2da      	uxtb	r2, r3
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	7858      	ldrb	r0, [r3, #1]
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801226a:	2301      	movs	r3, #1
 801226c:	69ba      	ldr	r2, [r7, #24]
 801226e:	f7fd ff13 	bl	8010098 <disk_read>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d009      	beq.n	801228c <f_read+0x25e>
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	2201      	movs	r2, #1
 801227c:	755a      	strb	r2, [r3, #21]
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	2101      	movs	r1, #1
 8012282:	4618      	mov	r0, r3
 8012284:	f7fe f87c 	bl	8010380 <unlock_fs>
 8012288:	2301      	movs	r3, #1
 801228a:	e03a      	b.n	8012302 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	699b      	ldr	r3, [r3, #24]
 8012296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801229a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801229e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80122a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d901      	bls.n	80122ac <f_read+0x27e>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	699b      	ldr	r3, [r3, #24]
 80122b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122ba:	4413      	add	r3, r2
 80122bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122be:	4619      	mov	r1, r3
 80122c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122c2:	f7fd ffc9 	bl	8010258 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80122c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ca:	4413      	add	r3, r2
 80122cc:	627b      	str	r3, [r7, #36]	; 0x24
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	699a      	ldr	r2, [r3, #24]
 80122d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d4:	441a      	add	r2, r3
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	619a      	str	r2, [r3, #24]
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e0:	441a      	add	r2, r3
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	601a      	str	r2, [r3, #0]
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ea:	1ad3      	subs	r3, r2, r3
 80122ec:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	f47f aee3 	bne.w	80120bc <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	2100      	movs	r1, #0
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7fe f840 	bl	8010380 <unlock_fs>
 8012300:	2300      	movs	r3, #0
}
 8012302:	4618      	mov	r0, r3
 8012304:	3738      	adds	r7, #56	; 0x38
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b08c      	sub	sp, #48	; 0x30
 801230e:	af00      	add	r7, sp, #0
 8012310:	60f8      	str	r0, [r7, #12]
 8012312:	60b9      	str	r1, [r7, #8]
 8012314:	607a      	str	r2, [r7, #4]
 8012316:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	2200      	movs	r2, #0
 8012320:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	f107 0210 	add.w	r2, r7, #16
 8012328:	4611      	mov	r1, r2
 801232a:	4618      	mov	r0, r3
 801232c:	f7ff fc0e 	bl	8011b4c <validate>
 8012330:	4603      	mov	r3, r0
 8012332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801233a:	2b00      	cmp	r3, #0
 801233c:	d107      	bne.n	801234e <f_write+0x44>
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	7d5b      	ldrb	r3, [r3, #21]
 8012342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801234a:	2b00      	cmp	r3, #0
 801234c:	d009      	beq.n	8012362 <f_write+0x58>
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012354:	4611      	mov	r1, r2
 8012356:	4618      	mov	r0, r3
 8012358:	f7fe f812 	bl	8010380 <unlock_fs>
 801235c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012360:	e173      	b.n	801264a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	7d1b      	ldrb	r3, [r3, #20]
 8012366:	f003 0302 	and.w	r3, r3, #2
 801236a:	2b00      	cmp	r3, #0
 801236c:	d106      	bne.n	801237c <f_write+0x72>
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	2107      	movs	r1, #7
 8012372:	4618      	mov	r0, r3
 8012374:	f7fe f804 	bl	8010380 <unlock_fs>
 8012378:	2307      	movs	r3, #7
 801237a:	e166      	b.n	801264a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	699a      	ldr	r2, [r3, #24]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	441a      	add	r2, r3
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	699b      	ldr	r3, [r3, #24]
 8012388:	429a      	cmp	r2, r3
 801238a:	f080 814b 	bcs.w	8012624 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	699b      	ldr	r3, [r3, #24]
 8012392:	43db      	mvns	r3, r3
 8012394:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012396:	e145      	b.n	8012624 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	699b      	ldr	r3, [r3, #24]
 801239c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	f040 8101 	bne.w	80125a8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	699b      	ldr	r3, [r3, #24]
 80123aa:	0a5b      	lsrs	r3, r3, #9
 80123ac:	693a      	ldr	r2, [r7, #16]
 80123ae:	8952      	ldrh	r2, [r2, #10]
 80123b0:	3a01      	subs	r2, #1
 80123b2:	4013      	ands	r3, r2
 80123b4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d14d      	bne.n	8012458 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	699b      	ldr	r3, [r3, #24]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d10c      	bne.n	80123de <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	689b      	ldr	r3, [r3, #8]
 80123c8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80123ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d11a      	bne.n	8012406 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	2100      	movs	r1, #0
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7fe fc53 	bl	8010c80 <create_chain>
 80123da:	62b8      	str	r0, [r7, #40]	; 0x28
 80123dc:	e013      	b.n	8012406 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d007      	beq.n	80123f6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	699b      	ldr	r3, [r3, #24]
 80123ea:	4619      	mov	r1, r3
 80123ec:	68f8      	ldr	r0, [r7, #12]
 80123ee:	f7fe fcdf 	bl	8010db0 <clmt_clust>
 80123f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80123f4:	e007      	b.n	8012406 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80123f6:	68fa      	ldr	r2, [r7, #12]
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	69db      	ldr	r3, [r3, #28]
 80123fc:	4619      	mov	r1, r3
 80123fe:	4610      	mov	r0, r2
 8012400:	f7fe fc3e 	bl	8010c80 <create_chain>
 8012404:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 8110 	beq.w	801262e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012410:	2b01      	cmp	r3, #1
 8012412:	d109      	bne.n	8012428 <f_write+0x11e>
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2202      	movs	r2, #2
 8012418:	755a      	strb	r2, [r3, #21]
 801241a:	693b      	ldr	r3, [r7, #16]
 801241c:	2102      	movs	r1, #2
 801241e:	4618      	mov	r0, r3
 8012420:	f7fd ffae 	bl	8010380 <unlock_fs>
 8012424:	2302      	movs	r3, #2
 8012426:	e110      	b.n	801264a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801242e:	d109      	bne.n	8012444 <f_write+0x13a>
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	2201      	movs	r2, #1
 8012434:	755a      	strb	r2, [r3, #21]
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	2101      	movs	r1, #1
 801243a:	4618      	mov	r0, r3
 801243c:	f7fd ffa0 	bl	8010380 <unlock_fs>
 8012440:	2301      	movs	r3, #1
 8012442:	e102      	b.n	801264a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012448:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	689b      	ldr	r3, [r3, #8]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d102      	bne.n	8012458 <f_write+0x14e>
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012456:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	7d1b      	ldrb	r3, [r3, #20]
 801245c:	b25b      	sxtb	r3, r3
 801245e:	2b00      	cmp	r3, #0
 8012460:	da1d      	bge.n	801249e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	7858      	ldrb	r0, [r3, #1]
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	6a1a      	ldr	r2, [r3, #32]
 8012470:	2301      	movs	r3, #1
 8012472:	f7fd fe31 	bl	80100d8 <disk_write>
 8012476:	4603      	mov	r3, r0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d009      	beq.n	8012490 <f_write+0x186>
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2201      	movs	r2, #1
 8012480:	755a      	strb	r2, [r3, #21]
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	2101      	movs	r1, #1
 8012486:	4618      	mov	r0, r3
 8012488:	f7fd ff7a 	bl	8010380 <unlock_fs>
 801248c:	2301      	movs	r3, #1
 801248e:	e0dc      	b.n	801264a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	7d1b      	ldrb	r3, [r3, #20]
 8012494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012498:	b2da      	uxtb	r2, r3
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801249e:	693a      	ldr	r2, [r7, #16]
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	69db      	ldr	r3, [r3, #28]
 80124a4:	4619      	mov	r1, r3
 80124a6:	4610      	mov	r0, r2
 80124a8:	f7fe f9d2 	bl	8010850 <clust2sect>
 80124ac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d109      	bne.n	80124c8 <f_write+0x1be>
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2202      	movs	r2, #2
 80124b8:	755a      	strb	r2, [r3, #21]
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	2102      	movs	r1, #2
 80124be:	4618      	mov	r0, r3
 80124c0:	f7fd ff5e 	bl	8010380 <unlock_fs>
 80124c4:	2302      	movs	r3, #2
 80124c6:	e0c0      	b.n	801264a <f_write+0x340>
			sect += csect;
 80124c8:	697a      	ldr	r2, [r7, #20]
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	4413      	add	r3, r2
 80124ce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	0a5b      	lsrs	r3, r3, #9
 80124d4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80124d6:	6a3b      	ldr	r3, [r7, #32]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d041      	beq.n	8012560 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80124dc:	69ba      	ldr	r2, [r7, #24]
 80124de:	6a3b      	ldr	r3, [r7, #32]
 80124e0:	4413      	add	r3, r2
 80124e2:	693a      	ldr	r2, [r7, #16]
 80124e4:	8952      	ldrh	r2, [r2, #10]
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d905      	bls.n	80124f6 <f_write+0x1ec>
					cc = fs->csize - csect;
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	895b      	ldrh	r3, [r3, #10]
 80124ee:	461a      	mov	r2, r3
 80124f0:	69bb      	ldr	r3, [r7, #24]
 80124f2:	1ad3      	subs	r3, r2, r3
 80124f4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	7858      	ldrb	r0, [r3, #1]
 80124fa:	6a3b      	ldr	r3, [r7, #32]
 80124fc:	697a      	ldr	r2, [r7, #20]
 80124fe:	69f9      	ldr	r1, [r7, #28]
 8012500:	f7fd fdea 	bl	80100d8 <disk_write>
 8012504:	4603      	mov	r3, r0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d009      	beq.n	801251e <f_write+0x214>
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	2201      	movs	r2, #1
 801250e:	755a      	strb	r2, [r3, #21]
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	2101      	movs	r1, #1
 8012514:	4618      	mov	r0, r3
 8012516:	f7fd ff33 	bl	8010380 <unlock_fs>
 801251a:	2301      	movs	r3, #1
 801251c:	e095      	b.n	801264a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	6a1a      	ldr	r2, [r3, #32]
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	1ad3      	subs	r3, r2, r3
 8012526:	6a3a      	ldr	r2, [r7, #32]
 8012528:	429a      	cmp	r2, r3
 801252a:	d915      	bls.n	8012558 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	6a1a      	ldr	r2, [r3, #32]
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	1ad3      	subs	r3, r2, r3
 801253a:	025b      	lsls	r3, r3, #9
 801253c:	69fa      	ldr	r2, [r7, #28]
 801253e:	4413      	add	r3, r2
 8012540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012544:	4619      	mov	r1, r3
 8012546:	f7fd fe87 	bl	8010258 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	7d1b      	ldrb	r3, [r3, #20]
 801254e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012552:	b2da      	uxtb	r2, r3
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012558:	6a3b      	ldr	r3, [r7, #32]
 801255a:	025b      	lsls	r3, r3, #9
 801255c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801255e:	e044      	b.n	80125ea <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	6a1b      	ldr	r3, [r3, #32]
 8012564:	697a      	ldr	r2, [r7, #20]
 8012566:	429a      	cmp	r2, r3
 8012568:	d01b      	beq.n	80125a2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	699a      	ldr	r2, [r3, #24]
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012572:	429a      	cmp	r2, r3
 8012574:	d215      	bcs.n	80125a2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	7858      	ldrb	r0, [r3, #1]
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012580:	2301      	movs	r3, #1
 8012582:	697a      	ldr	r2, [r7, #20]
 8012584:	f7fd fd88 	bl	8010098 <disk_read>
 8012588:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801258a:	2b00      	cmp	r3, #0
 801258c:	d009      	beq.n	80125a2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2201      	movs	r2, #1
 8012592:	755a      	strb	r2, [r3, #21]
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	2101      	movs	r1, #1
 8012598:	4618      	mov	r0, r3
 801259a:	f7fd fef1 	bl	8010380 <unlock_fs>
 801259e:	2301      	movs	r3, #1
 80125a0:	e053      	b.n	801264a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	697a      	ldr	r2, [r7, #20]
 80125a6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	699b      	ldr	r3, [r3, #24]
 80125ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80125b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80125b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d901      	bls.n	80125c2 <f_write+0x2b8>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	699b      	ldr	r3, [r3, #24]
 80125cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125d0:	4413      	add	r3, r2
 80125d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125d4:	69f9      	ldr	r1, [r7, #28]
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fd fe3e 	bl	8010258 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	7d1b      	ldrb	r3, [r3, #20]
 80125e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80125e4:	b2da      	uxtb	r2, r3
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80125ea:	69fa      	ldr	r2, [r7, #28]
 80125ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ee:	4413      	add	r3, r2
 80125f0:	61fb      	str	r3, [r7, #28]
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	699a      	ldr	r2, [r3, #24]
 80125f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f8:	441a      	add	r2, r3
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	619a      	str	r2, [r3, #24]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	68da      	ldr	r2, [r3, #12]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	699b      	ldr	r3, [r3, #24]
 8012606:	429a      	cmp	r2, r3
 8012608:	bf38      	it	cc
 801260a:	461a      	movcc	r2, r3
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	60da      	str	r2, [r3, #12]
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012616:	441a      	add	r2, r3
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	601a      	str	r2, [r3, #0]
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012620:	1ad3      	subs	r3, r2, r3
 8012622:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	f47f aeb6 	bne.w	8012398 <f_write+0x8e>
 801262c:	e000      	b.n	8012630 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801262e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	7d1b      	ldrb	r3, [r3, #20]
 8012634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012638:	b2da      	uxtb	r2, r3
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	2100      	movs	r1, #0
 8012642:	4618      	mov	r0, r3
 8012644:	f7fd fe9c 	bl	8010380 <unlock_fs>
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3730      	adds	r7, #48	; 0x30
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012652:	b580      	push	{r7, lr}
 8012654:	b086      	sub	sp, #24
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f107 0208 	add.w	r2, r7, #8
 8012660:	4611      	mov	r1, r2
 8012662:	4618      	mov	r0, r3
 8012664:	f7ff fa72 	bl	8011b4c <validate>
 8012668:	4603      	mov	r3, r0
 801266a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801266c:	7dfb      	ldrb	r3, [r7, #23]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d16d      	bne.n	801274e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	7d1b      	ldrb	r3, [r3, #20]
 8012676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801267a:	2b00      	cmp	r3, #0
 801267c:	d067      	beq.n	801274e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	7d1b      	ldrb	r3, [r3, #20]
 8012682:	b25b      	sxtb	r3, r3
 8012684:	2b00      	cmp	r3, #0
 8012686:	da1a      	bge.n	80126be <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	7858      	ldrb	r0, [r3, #1]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6a1a      	ldr	r2, [r3, #32]
 8012696:	2301      	movs	r3, #1
 8012698:	f7fd fd1e 	bl	80100d8 <disk_write>
 801269c:	4603      	mov	r3, r0
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d006      	beq.n	80126b0 <f_sync+0x5e>
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	2101      	movs	r1, #1
 80126a6:	4618      	mov	r0, r3
 80126a8:	f7fd fe6a 	bl	8010380 <unlock_fs>
 80126ac:	2301      	movs	r3, #1
 80126ae:	e055      	b.n	801275c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	7d1b      	ldrb	r3, [r3, #20]
 80126b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126b8:	b2da      	uxtb	r2, r3
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80126be:	f7fd fa3b 	bl	800fb38 <get_fattime>
 80126c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80126c4:	68ba      	ldr	r2, [r7, #8]
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ca:	4619      	mov	r1, r3
 80126cc:	4610      	mov	r0, r2
 80126ce:	f7fe f823 	bl	8010718 <move_window>
 80126d2:	4603      	mov	r3, r0
 80126d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80126d6:	7dfb      	ldrb	r3, [r7, #23]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d138      	bne.n	801274e <f_sync+0xfc>
					dir = fp->dir_ptr;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	330b      	adds	r3, #11
 80126e6:	781a      	ldrb	r2, [r3, #0]
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	330b      	adds	r3, #11
 80126ec:	f042 0220 	orr.w	r2, r2, #32
 80126f0:	b2d2      	uxtb	r2, r2
 80126f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6818      	ldr	r0, [r3, #0]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	689b      	ldr	r3, [r3, #8]
 80126fc:	461a      	mov	r2, r3
 80126fe:	68f9      	ldr	r1, [r7, #12]
 8012700:	f7fe fd30 	bl	8011164 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f103 021c 	add.w	r2, r3, #28
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	68db      	ldr	r3, [r3, #12]
 801270e:	4619      	mov	r1, r3
 8012710:	4610      	mov	r0, r2
 8012712:	f7fd fd75 	bl	8010200 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	3316      	adds	r3, #22
 801271a:	6939      	ldr	r1, [r7, #16]
 801271c:	4618      	mov	r0, r3
 801271e:	f7fd fd6f 	bl	8010200 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	3312      	adds	r3, #18
 8012726:	2100      	movs	r1, #0
 8012728:	4618      	mov	r0, r3
 801272a:	f7fd fd4e 	bl	80101ca <st_word>
					fs->wflag = 1;
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	2201      	movs	r2, #1
 8012732:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	4618      	mov	r0, r3
 8012738:	f7fe f81c 	bl	8010774 <sync_fs>
 801273c:	4603      	mov	r3, r0
 801273e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	7d1b      	ldrb	r3, [r3, #20]
 8012744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012748:	b2da      	uxtb	r2, r3
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	7dfa      	ldrb	r2, [r7, #23]
 8012752:	4611      	mov	r1, r2
 8012754:	4618      	mov	r0, r3
 8012756:	f7fd fe13 	bl	8010380 <unlock_fs>
 801275a:	7dfb      	ldrb	r3, [r7, #23]
}
 801275c:	4618      	mov	r0, r3
 801275e:	3718      	adds	r7, #24
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b084      	sub	sp, #16
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f7ff ff70 	bl	8012652 <f_sync>
 8012772:	4603      	mov	r3, r0
 8012774:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012776:	7bfb      	ldrb	r3, [r7, #15]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d11d      	bne.n	80127b8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f107 0208 	add.w	r2, r7, #8
 8012782:	4611      	mov	r1, r2
 8012784:	4618      	mov	r0, r3
 8012786:	f7ff f9e1 	bl	8011b4c <validate>
 801278a:	4603      	mov	r3, r0
 801278c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801278e:	7bfb      	ldrb	r3, [r7, #15]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d111      	bne.n	80127b8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	691b      	ldr	r3, [r3, #16]
 8012798:	4618      	mov	r0, r3
 801279a:	f7fd ff19 	bl	80105d0 <dec_lock>
 801279e:	4603      	mov	r3, r0
 80127a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80127a2:	7bfb      	ldrb	r3, [r7, #15]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d102      	bne.n	80127ae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2200      	movs	r2, #0
 80127ac:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	2100      	movs	r1, #0
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7fd fde4 	bl	8010380 <unlock_fs>
#endif
		}
	}
	return res;
 80127b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	3710      	adds	r7, #16
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}

080127c2 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80127c2:	b590      	push	{r4, r7, lr}
 80127c4:	b091      	sub	sp, #68	; 0x44
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80127ca:	f107 0108 	add.w	r1, r7, #8
 80127ce:	1d3b      	adds	r3, r7, #4
 80127d0:	2200      	movs	r2, #0
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fe ff62 	bl	801169c <find_volume>
 80127d8:	4603      	mov	r3, r0
 80127da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80127de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d131      	bne.n	801284a <f_chdir+0x88>
		dj.obj.fs = fs;
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80127ea:	687a      	ldr	r2, [r7, #4]
 80127ec:	f107 030c 	add.w	r3, r7, #12
 80127f0:	4611      	mov	r1, r2
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7fe fe28 	bl	8011448 <follow_path>
 80127f8:	4603      	mov	r3, r0
 80127fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80127fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012802:	2b00      	cmp	r3, #0
 8012804:	d11a      	bne.n	801283c <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012806:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801280a:	b25b      	sxtb	r3, r3
 801280c:	2b00      	cmp	r3, #0
 801280e:	da03      	bge.n	8012818 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	697a      	ldr	r2, [r7, #20]
 8012814:	619a      	str	r2, [r3, #24]
 8012816:	e011      	b.n	801283c <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8012818:	7cbb      	ldrb	r3, [r7, #18]
 801281a:	f003 0310 	and.w	r3, r3, #16
 801281e:	2b00      	cmp	r3, #0
 8012820:	d009      	beq.n	8012836 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012826:	68bc      	ldr	r4, [r7, #8]
 8012828:	4611      	mov	r1, r2
 801282a:	4618      	mov	r0, r3
 801282c:	f7fe fc7b 	bl	8011126 <ld_clust>
 8012830:	4603      	mov	r3, r0
 8012832:	61a3      	str	r3, [r4, #24]
 8012834:	e002      	b.n	801283c <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012836:	2305      	movs	r3, #5
 8012838:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801283c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012840:	2b04      	cmp	r3, #4
 8012842:	d102      	bne.n	801284a <f_chdir+0x88>
 8012844:	2305      	movs	r3, #5
 8012846:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012850:	4611      	mov	r1, r2
 8012852:	4618      	mov	r0, r3
 8012854:	f7fd fd94 	bl	8010380 <unlock_fs>
 8012858:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801285c:	4618      	mov	r0, r3
 801285e:	3744      	adds	r7, #68	; 0x44
 8012860:	46bd      	mov	sp, r7
 8012862:	bd90      	pop	{r4, r7, pc}

08012864 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b090      	sub	sp, #64	; 0x40
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f107 0208 	add.w	r2, r7, #8
 8012874:	4611      	mov	r1, r2
 8012876:	4618      	mov	r0, r3
 8012878:	f7ff f968 	bl	8011b4c <validate>
 801287c:	4603      	mov	r3, r0
 801287e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012882:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012886:	2b00      	cmp	r3, #0
 8012888:	d103      	bne.n	8012892 <f_lseek+0x2e>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	7d5b      	ldrb	r3, [r3, #21]
 801288e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012896:	2b00      	cmp	r3, #0
 8012898:	d009      	beq.n	80128ae <f_lseek+0x4a>
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80128a0:	4611      	mov	r1, r2
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7fd fd6c 	bl	8010380 <unlock_fs>
 80128a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80128ac:	e229      	b.n	8012d02 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f000 80ea 	beq.w	8012a8c <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128be:	d164      	bne.n	801298a <f_lseek+0x126>
			tbl = fp->cltbl;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128c4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80128c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c8:	1d1a      	adds	r2, r3, #4
 80128ca:	627a      	str	r2, [r7, #36]	; 0x24
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	617b      	str	r3, [r7, #20]
 80128d0:	2302      	movs	r3, #2
 80128d2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	689b      	ldr	r3, [r3, #8]
 80128d8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80128da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d044      	beq.n	801296a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80128e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e2:	613b      	str	r3, [r7, #16]
 80128e4:	2300      	movs	r3, #0
 80128e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ea:	3302      	adds	r3, #2
 80128ec:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80128ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f0:	60fb      	str	r3, [r7, #12]
 80128f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f4:	3301      	adds	r3, #1
 80128f6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7fd ffc6 	bl	801088e <get_fat>
 8012902:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012906:	2b01      	cmp	r3, #1
 8012908:	d809      	bhi.n	801291e <f_lseek+0xba>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2202      	movs	r2, #2
 801290e:	755a      	strb	r2, [r3, #21]
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	2102      	movs	r1, #2
 8012914:	4618      	mov	r0, r3
 8012916:	f7fd fd33 	bl	8010380 <unlock_fs>
 801291a:	2302      	movs	r3, #2
 801291c:	e1f1      	b.n	8012d02 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012924:	d109      	bne.n	801293a <f_lseek+0xd6>
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2201      	movs	r2, #1
 801292a:	755a      	strb	r2, [r3, #21]
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	2101      	movs	r1, #1
 8012930:	4618      	mov	r0, r3
 8012932:	f7fd fd25 	bl	8010380 <unlock_fs>
 8012936:	2301      	movs	r3, #1
 8012938:	e1e3      	b.n	8012d02 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	3301      	adds	r3, #1
 801293e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012940:	429a      	cmp	r2, r3
 8012942:	d0d4      	beq.n	80128ee <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	429a      	cmp	r2, r3
 801294a:	d809      	bhi.n	8012960 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294e:	1d1a      	adds	r2, r3, #4
 8012950:	627a      	str	r2, [r7, #36]	; 0x24
 8012952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012954:	601a      	str	r2, [r3, #0]
 8012956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012958:	1d1a      	adds	r2, r3, #4
 801295a:	627a      	str	r2, [r7, #36]	; 0x24
 801295c:	693a      	ldr	r2, [r7, #16]
 801295e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	69db      	ldr	r3, [r3, #28]
 8012964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012966:	429a      	cmp	r2, r3
 8012968:	d3ba      	bcc.n	80128e0 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801296e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012970:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	429a      	cmp	r2, r3
 8012978:	d803      	bhi.n	8012982 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 801297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297c:	2200      	movs	r2, #0
 801297e:	601a      	str	r2, [r3, #0]
 8012980:	e1b6      	b.n	8012cf0 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012982:	2311      	movs	r3, #17
 8012984:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012988:	e1b2      	b.n	8012cf0 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	68db      	ldr	r3, [r3, #12]
 801298e:	683a      	ldr	r2, [r7, #0]
 8012990:	429a      	cmp	r2, r3
 8012992:	d902      	bls.n	801299a <f_lseek+0x136>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	683a      	ldr	r2, [r7, #0]
 801299e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	f000 81a4 	beq.w	8012cf0 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	3b01      	subs	r3, #1
 80129ac:	4619      	mov	r1, r3
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f7fe f9fe 	bl	8010db0 <clmt_clust>
 80129b4:	4602      	mov	r2, r0
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80129ba:	68ba      	ldr	r2, [r7, #8]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	69db      	ldr	r3, [r3, #28]
 80129c0:	4619      	mov	r1, r3
 80129c2:	4610      	mov	r0, r2
 80129c4:	f7fd ff44 	bl	8010850 <clust2sect>
 80129c8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80129ca:	69bb      	ldr	r3, [r7, #24]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d109      	bne.n	80129e4 <f_lseek+0x180>
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2202      	movs	r2, #2
 80129d4:	755a      	strb	r2, [r3, #21]
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	2102      	movs	r1, #2
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fd fcd0 	bl	8010380 <unlock_fs>
 80129e0:	2302      	movs	r3, #2
 80129e2:	e18e      	b.n	8012d02 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	3b01      	subs	r3, #1
 80129e8:	0a5b      	lsrs	r3, r3, #9
 80129ea:	68ba      	ldr	r2, [r7, #8]
 80129ec:	8952      	ldrh	r2, [r2, #10]
 80129ee:	3a01      	subs	r2, #1
 80129f0:	4013      	ands	r3, r2
 80129f2:	69ba      	ldr	r2, [r7, #24]
 80129f4:	4413      	add	r3, r2
 80129f6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	699b      	ldr	r3, [r3, #24]
 80129fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f000 8175 	beq.w	8012cf0 <f_lseek+0x48c>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6a1b      	ldr	r3, [r3, #32]
 8012a0a:	69ba      	ldr	r2, [r7, #24]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	f000 816f 	beq.w	8012cf0 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	7d1b      	ldrb	r3, [r3, #20]
 8012a16:	b25b      	sxtb	r3, r3
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	da1d      	bge.n	8012a58 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	7858      	ldrb	r0, [r3, #1]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6a1a      	ldr	r2, [r3, #32]
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	f7fd fb54 	bl	80100d8 <disk_write>
 8012a30:	4603      	mov	r3, r0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d009      	beq.n	8012a4a <f_lseek+0x1e6>
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2201      	movs	r2, #1
 8012a3a:	755a      	strb	r2, [r3, #21]
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	2101      	movs	r1, #1
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7fd fc9d 	bl	8010380 <unlock_fs>
 8012a46:	2301      	movs	r3, #1
 8012a48:	e15b      	b.n	8012d02 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	7d1b      	ldrb	r3, [r3, #20]
 8012a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a52:	b2da      	uxtb	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	7858      	ldrb	r0, [r3, #1]
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a62:	2301      	movs	r3, #1
 8012a64:	69ba      	ldr	r2, [r7, #24]
 8012a66:	f7fd fb17 	bl	8010098 <disk_read>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d009      	beq.n	8012a84 <f_lseek+0x220>
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2201      	movs	r2, #1
 8012a74:	755a      	strb	r2, [r3, #21]
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	2101      	movs	r1, #1
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7fd fc80 	bl	8010380 <unlock_fs>
 8012a80:	2301      	movs	r3, #1
 8012a82:	e13e      	b.n	8012d02 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	69ba      	ldr	r2, [r7, #24]
 8012a88:	621a      	str	r2, [r3, #32]
 8012a8a:	e131      	b.n	8012cf0 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	683a      	ldr	r2, [r7, #0]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d908      	bls.n	8012aa8 <f_lseek+0x244>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	7d1b      	ldrb	r3, [r3, #20]
 8012a9a:	f003 0302 	and.w	r3, r3, #2
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d102      	bne.n	8012aa8 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	68db      	ldr	r3, [r3, #12]
 8012aa6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	699b      	ldr	r3, [r3, #24]
 8012aac:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ab6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	f000 80c0 	beq.w	8012c40 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	895b      	ldrh	r3, [r3, #10]
 8012ac4:	025b      	lsls	r3, r3, #9
 8012ac6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012ac8:	6a3b      	ldr	r3, [r7, #32]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d01b      	beq.n	8012b06 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	1e5a      	subs	r2, r3, #1
 8012ad2:	69fb      	ldr	r3, [r7, #28]
 8012ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8012ad8:	6a3b      	ldr	r3, [r7, #32]
 8012ada:	1e59      	subs	r1, r3, #1
 8012adc:	69fb      	ldr	r3, [r7, #28]
 8012ade:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d30f      	bcc.n	8012b06 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012ae6:	6a3b      	ldr	r3, [r7, #32]
 8012ae8:	1e5a      	subs	r2, r3, #1
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	425b      	negs	r3, r3
 8012aee:	401a      	ands	r2, r3
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	699b      	ldr	r3, [r3, #24]
 8012af8:	683a      	ldr	r2, [r7, #0]
 8012afa:	1ad3      	subs	r3, r2, r3
 8012afc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	69db      	ldr	r3, [r3, #28]
 8012b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b04:	e02c      	b.n	8012b60 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	689b      	ldr	r3, [r3, #8]
 8012b0a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d123      	bne.n	8012b5a <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2100      	movs	r1, #0
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7fe f8b2 	bl	8010c80 <create_chain>
 8012b1c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d109      	bne.n	8012b38 <f_lseek+0x2d4>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2202      	movs	r2, #2
 8012b28:	755a      	strb	r2, [r3, #21]
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	2102      	movs	r1, #2
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7fd fc26 	bl	8010380 <unlock_fs>
 8012b34:	2302      	movs	r3, #2
 8012b36:	e0e4      	b.n	8012d02 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b3e:	d109      	bne.n	8012b54 <f_lseek+0x2f0>
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2201      	movs	r2, #1
 8012b44:	755a      	strb	r2, [r3, #21]
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	2101      	movs	r1, #1
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7fd fc18 	bl	8010380 <unlock_fs>
 8012b50:	2301      	movs	r3, #1
 8012b52:	e0d6      	b.n	8012d02 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b58:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b5e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d06c      	beq.n	8012c40 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8012b66:	e044      	b.n	8012bf2 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8012b68:	683a      	ldr	r2, [r7, #0]
 8012b6a:	69fb      	ldr	r3, [r7, #28]
 8012b6c:	1ad3      	subs	r3, r2, r3
 8012b6e:	603b      	str	r3, [r7, #0]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	699a      	ldr	r2, [r3, #24]
 8012b74:	69fb      	ldr	r3, [r7, #28]
 8012b76:	441a      	add	r2, r3
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	7d1b      	ldrb	r3, [r3, #20]
 8012b80:	f003 0302 	and.w	r3, r3, #2
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d00b      	beq.n	8012ba0 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7fe f877 	bl	8010c80 <create_chain>
 8012b92:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d108      	bne.n	8012bac <f_lseek+0x348>
							ofs = 0; break;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	603b      	str	r3, [r7, #0]
 8012b9e:	e02c      	b.n	8012bfa <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7fd fe72 	bl	801088e <get_fat>
 8012baa:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bb2:	d109      	bne.n	8012bc8 <f_lseek+0x364>
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	755a      	strb	r2, [r3, #21]
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	2101      	movs	r1, #1
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7fd fbde 	bl	8010380 <unlock_fs>
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	e09c      	b.n	8012d02 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d904      	bls.n	8012bd8 <f_lseek+0x374>
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	69db      	ldr	r3, [r3, #28]
 8012bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d309      	bcc.n	8012bec <f_lseek+0x388>
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2202      	movs	r2, #2
 8012bdc:	755a      	strb	r2, [r3, #21]
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	2102      	movs	r1, #2
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fd fbcc 	bl	8010380 <unlock_fs>
 8012be8:	2302      	movs	r3, #2
 8012bea:	e08a      	b.n	8012d02 <f_lseek+0x49e>
					fp->clust = clst;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bf0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012bf2:	683a      	ldr	r2, [r7, #0]
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d8b6      	bhi.n	8012b68 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	699a      	ldr	r2, [r3, #24]
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	441a      	add	r2, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d017      	beq.n	8012c40 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7fd fe1b 	bl	8010850 <clust2sect>
 8012c1a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d109      	bne.n	8012c36 <f_lseek+0x3d2>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2202      	movs	r2, #2
 8012c26:	755a      	strb	r2, [r3, #21]
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	2102      	movs	r1, #2
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7fd fba7 	bl	8010380 <unlock_fs>
 8012c32:	2302      	movs	r3, #2
 8012c34:	e065      	b.n	8012d02 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	0a5b      	lsrs	r3, r3, #9
 8012c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c3c:	4413      	add	r3, r2
 8012c3e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	699a      	ldr	r2, [r3, #24]
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	68db      	ldr	r3, [r3, #12]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d90a      	bls.n	8012c62 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	699a      	ldr	r2, [r3, #24]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	7d1b      	ldrb	r3, [r3, #20]
 8012c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c5c:	b2da      	uxtb	r2, r3
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	699b      	ldr	r3, [r3, #24]
 8012c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d040      	beq.n	8012cf0 <f_lseek+0x48c>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6a1b      	ldr	r3, [r3, #32]
 8012c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d03b      	beq.n	8012cf0 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	7d1b      	ldrb	r3, [r3, #20]
 8012c7c:	b25b      	sxtb	r3, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	da1d      	bge.n	8012cbe <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	7858      	ldrb	r0, [r3, #1]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6a1a      	ldr	r2, [r3, #32]
 8012c90:	2301      	movs	r3, #1
 8012c92:	f7fd fa21 	bl	80100d8 <disk_write>
 8012c96:	4603      	mov	r3, r0
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d009      	beq.n	8012cb0 <f_lseek+0x44c>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	755a      	strb	r2, [r3, #21]
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7fd fb6a 	bl	8010380 <unlock_fs>
 8012cac:	2301      	movs	r3, #1
 8012cae:	e028      	b.n	8012d02 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	7d1b      	ldrb	r3, [r3, #20]
 8012cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cb8:	b2da      	uxtb	r2, r3
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	7858      	ldrb	r0, [r3, #1]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012cc8:	2301      	movs	r3, #1
 8012cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ccc:	f7fd f9e4 	bl	8010098 <disk_read>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d009      	beq.n	8012cea <f_lseek+0x486>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2201      	movs	r2, #1
 8012cda:	755a      	strb	r2, [r3, #21]
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	2101      	movs	r1, #1
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fd fb4d 	bl	8010380 <unlock_fs>
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	e00b      	b.n	8012d02 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cee:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012cf6:	4611      	mov	r1, r2
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f7fd fb41 	bl	8010380 <unlock_fs>
 8012cfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3740      	adds	r7, #64	; 0x40
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b086      	sub	sp, #24
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
 8012d12:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d101      	bne.n	8012d1e <f_opendir+0x14>
 8012d1a:	2309      	movs	r3, #9
 8012d1c:	e06a      	b.n	8012df4 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8012d22:	f107 010c 	add.w	r1, r7, #12
 8012d26:	463b      	mov	r3, r7
 8012d28:	2200      	movs	r2, #0
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7fe fcb6 	bl	801169c <find_volume>
 8012d30:	4603      	mov	r3, r0
 8012d32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012d34:	7dfb      	ldrb	r3, [r7, #23]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d14f      	bne.n	8012dda <f_opendir+0xd0>
		obj->fs = fs;
 8012d3a:	68fa      	ldr	r2, [r7, #12]
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	4619      	mov	r1, r3
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f7fe fb7f 	bl	8011448 <follow_path>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8012d4e:	7dfb      	ldrb	r3, [r7, #23]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d13d      	bne.n	8012dd0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012d5a:	b25b      	sxtb	r3, r3
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	db12      	blt.n	8012d86 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	799b      	ldrb	r3, [r3, #6]
 8012d64:	f003 0310 	and.w	r3, r3, #16
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d00a      	beq.n	8012d82 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012d6c:	68fa      	ldr	r2, [r7, #12]
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6a1b      	ldr	r3, [r3, #32]
 8012d72:	4619      	mov	r1, r3
 8012d74:	4610      	mov	r0, r2
 8012d76:	f7fe f9d6 	bl	8011126 <ld_clust>
 8012d7a:	4602      	mov	r2, r0
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	609a      	str	r2, [r3, #8]
 8012d80:	e001      	b.n	8012d86 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012d82:	2305      	movs	r3, #5
 8012d84:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012d86:	7dfb      	ldrb	r3, [r7, #23]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d121      	bne.n	8012dd0 <f_opendir+0xc6>
				obj->id = fs->id;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	88da      	ldrh	r2, [r3, #6]
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012d94:	2100      	movs	r1, #0
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	f7fe f83e 	bl	8010e18 <dir_sdi>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8012da0:	7dfb      	ldrb	r3, [r7, #23]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d114      	bne.n	8012dd0 <f_opendir+0xc6>
					if (obj->sclust) {
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	689b      	ldr	r3, [r3, #8]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d00d      	beq.n	8012dca <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012dae:	2100      	movs	r1, #0
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f7fd fb7f 	bl	80104b4 <inc_lock>
 8012db6:	4602      	mov	r2, r0
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	691b      	ldr	r3, [r3, #16]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d105      	bne.n	8012dd0 <f_opendir+0xc6>
 8012dc4:	2312      	movs	r3, #18
 8012dc6:	75fb      	strb	r3, [r7, #23]
 8012dc8:	e002      	b.n	8012dd0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012dd0:	7dfb      	ldrb	r3, [r7, #23]
 8012dd2:	2b04      	cmp	r3, #4
 8012dd4:	d101      	bne.n	8012dda <f_opendir+0xd0>
 8012dd6:	2305      	movs	r3, #5
 8012dd8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012dda:	7dfb      	ldrb	r3, [r7, #23]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d002      	beq.n	8012de6 <f_opendir+0xdc>
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	2200      	movs	r2, #0
 8012de4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	7dfa      	ldrb	r2, [r7, #23]
 8012dea:	4611      	mov	r1, r2
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7fd fac7 	bl	8010380 <unlock_fs>
 8012df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	3718      	adds	r7, #24
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	f107 0208 	add.w	r2, r7, #8
 8012e0a:	4611      	mov	r1, r2
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7fe fe9d 	bl	8011b4c <validate>
 8012e12:	4603      	mov	r3, r0
 8012e14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012e16:	7bfb      	ldrb	r3, [r7, #15]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d115      	bne.n	8012e48 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	691b      	ldr	r3, [r3, #16]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d006      	beq.n	8012e32 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	691b      	ldr	r3, [r3, #16]
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7fd fbd1 	bl	80105d0 <dec_lock>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012e32:	7bfb      	ldrb	r3, [r7, #15]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d102      	bne.n	8012e3e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	2100      	movs	r1, #0
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7fd fa9c 	bl	8010380 <unlock_fs>
#endif
	}
	return res;
 8012e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3710      	adds	r7, #16
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}

08012e52 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8012e52:	b580      	push	{r7, lr}
 8012e54:	b096      	sub	sp, #88	; 0x58
 8012e56:	af00      	add	r7, sp, #0
 8012e58:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012e5a:	f107 0108 	add.w	r1, r7, #8
 8012e5e:	1d3b      	adds	r3, r7, #4
 8012e60:	2202      	movs	r2, #2
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fe fc1a 	bl	801169c <find_volume>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8012e72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	f040 80f9 	bne.w	801306e <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012e7c:	687a      	ldr	r2, [r7, #4]
 8012e7e:	f107 030c 	add.w	r3, r7, #12
 8012e82:	4611      	mov	r1, r2
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7fe fadf 	bl	8011448 <follow_path>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012e90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d102      	bne.n	8012e9e <f_mkdir+0x4c>
 8012e98:	2308      	movs	r3, #8
 8012e9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8012e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ea2:	2b04      	cmp	r3, #4
 8012ea4:	d108      	bne.n	8012eb8 <f_mkdir+0x66>
 8012ea6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012eaa:	f003 0320 	and.w	r3, r3, #32
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d002      	beq.n	8012eb8 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8012eb2:	2306      	movs	r3, #6
 8012eb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012eb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ebc:	2b04      	cmp	r3, #4
 8012ebe:	f040 80d6 	bne.w	801306e <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012ec2:	f107 030c 	add.w	r3, r7, #12
 8012ec6:	2100      	movs	r1, #0
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7fd fed9 	bl	8010c80 <create_chain>
 8012ece:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	895b      	ldrh	r3, [r3, #10]
 8012ed4:	025b      	lsls	r3, r3, #9
 8012ed6:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d102      	bne.n	8012eea <f_mkdir+0x98>
 8012ee4:	2307      	movs	r3, #7
 8012ee6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d102      	bne.n	8012ef6 <f_mkdir+0xa4>
 8012ef0:	2302      	movs	r3, #2
 8012ef2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012efc:	d102      	bne.n	8012f04 <f_mkdir+0xb2>
 8012efe:	2301      	movs	r3, #1
 8012f00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012f04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d106      	bne.n	8012f1a <f_mkdir+0xc8>
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7fd fbbe 	bl	8010690 <sync_window>
 8012f14:	4603      	mov	r3, r0
 8012f16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8012f1a:	f7fc fe0d 	bl	800fb38 <get_fattime>
 8012f1e:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d16a      	bne.n	8012ffe <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7fd fc8f 	bl	8010850 <clust2sect>
 8012f32:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	3338      	adds	r3, #56	; 0x38
 8012f38:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8012f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f3e:	2100      	movs	r1, #0
 8012f40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012f42:	f7fd f9aa 	bl	801029a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012f46:	220b      	movs	r2, #11
 8012f48:	2120      	movs	r1, #32
 8012f4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012f4c:	f7fd f9a5 	bl	801029a <mem_set>
					dir[DIR_Name] = '.';
 8012f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f52:	222e      	movs	r2, #46	; 0x2e
 8012f54:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f58:	330b      	adds	r3, #11
 8012f5a:	2210      	movs	r2, #16
 8012f5c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f60:	3316      	adds	r3, #22
 8012f62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7fd f94b 	bl	8010200 <st_dword>
					st_clust(fs, dir, dcl);
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7fe f8f7 	bl	8011164 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f78:	3320      	adds	r3, #32
 8012f7a:	2220      	movs	r2, #32
 8012f7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7fd f96a 	bl	8010258 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f86:	3321      	adds	r3, #33	; 0x21
 8012f88:	222e      	movs	r2, #46	; 0x2e
 8012f8a:	701a      	strb	r2, [r3, #0]
 8012f8c:	697b      	ldr	r3, [r7, #20]
 8012f8e:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	2b03      	cmp	r3, #3
 8012f96:	d106      	bne.n	8012fa6 <f_mkdir+0x154>
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d101      	bne.n	8012fa6 <f_mkdir+0x154>
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8012fa6:	68b8      	ldr	r0, [r7, #8]
 8012fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012faa:	3320      	adds	r3, #32
 8012fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fae:	4619      	mov	r1, r3
 8012fb0:	f7fe f8d8 	bl	8011164 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	895b      	ldrh	r3, [r3, #10]
 8012fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8012fba:	e01b      	b.n	8012ff4 <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 8012fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fbe:	1c5a      	adds	r2, r3, #1
 8012fc0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012fc2:	68ba      	ldr	r2, [r7, #8]
 8012fc4:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	2201      	movs	r2, #1
 8012fca:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7fd fb5e 	bl	8010690 <sync_window>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8012fda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d10c      	bne.n	8012ffc <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 8012fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fe6:	2100      	movs	r1, #0
 8012fe8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012fea:	f7fd f956 	bl	801029a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ff0:	3b01      	subs	r3, #1
 8012ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8012ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d1e0      	bne.n	8012fbc <f_mkdir+0x16a>
 8012ffa:	e000      	b.n	8012ffe <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 8012ffc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012ffe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013002:	2b00      	cmp	r3, #0
 8013004:	d107      	bne.n	8013016 <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013006:	f107 030c 	add.w	r3, r7, #12
 801300a:	4618      	mov	r0, r3
 801300c:	f7fe f91f 	bl	801124e <dir_register>
 8013010:	4603      	mov	r3, r0
 8013012:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013016:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801301a:	2b00      	cmp	r3, #0
 801301c:	d120      	bne.n	8013060 <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013020:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013024:	3316      	adds	r3, #22
 8013026:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013028:	4618      	mov	r0, r3
 801302a:	f7fd f8e9 	bl	8010200 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013032:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013034:	4618      	mov	r0, r3
 8013036:	f7fe f895 	bl	8011164 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801303a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801303c:	330b      	adds	r3, #11
 801303e:	2210      	movs	r2, #16
 8013040:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	2201      	movs	r2, #1
 8013046:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801304c:	2b00      	cmp	r3, #0
 801304e:	d10e      	bne.n	801306e <f_mkdir+0x21c>
					res = sync_fs(fs);
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	4618      	mov	r0, r3
 8013054:	f7fd fb8e 	bl	8010774 <sync_fs>
 8013058:	4603      	mov	r3, r0
 801305a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801305e:	e006      	b.n	801306e <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013060:	f107 030c 	add.w	r3, r7, #12
 8013064:	2200      	movs	r2, #0
 8013066:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013068:	4618      	mov	r0, r3
 801306a:	f7fd fda4 	bl	8010bb6 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013074:	4611      	mov	r1, r2
 8013076:	4618      	mov	r0, r3
 8013078:	f7fd f982 	bl	8010380 <unlock_fs>
 801307c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013080:	4618      	mov	r0, r3
 8013082:	3758      	adds	r7, #88	; 0x58
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8013088:	b590      	push	{r4, r7, lr}
 801308a:	b09d      	sub	sp, #116	; 0x74
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	607a      	str	r2, [r7, #4]
 8013092:	603b      	str	r3, [r7, #0]
 8013094:	460b      	mov	r3, r1
 8013096:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8013098:	2301      	movs	r3, #1
 801309a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 801309c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80130a0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80130a2:	f107 030c 	add.w	r3, r7, #12
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fe fa5e 	bl	8011568 <get_ldnumber>
 80130ac:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80130ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	da02      	bge.n	80130ba <f_mkfs+0x32>
 80130b4:	230b      	movs	r3, #11
 80130b6:	f000 bc0d 	b.w	80138d4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80130ba:	4a94      	ldr	r2, [pc, #592]	; (801330c <f_mkfs+0x284>)
 80130bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d005      	beq.n	80130d2 <f_mkfs+0x4a>
 80130c6:	4a91      	ldr	r2, [pc, #580]	; (801330c <f_mkfs+0x284>)
 80130c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130ce:	2200      	movs	r2, #0
 80130d0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80130d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80130d8:	2300      	movs	r3, #0
 80130da:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80130de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fc ffb2 	bl	801004c <disk_initialize>
 80130e8:	4603      	mov	r3, r0
 80130ea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80130ee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80130f2:	f003 0301 	and.w	r3, r3, #1
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d001      	beq.n	80130fe <f_mkfs+0x76>
 80130fa:	2303      	movs	r3, #3
 80130fc:	e3ea      	b.n	80138d4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80130fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8013102:	f003 0304 	and.w	r3, r3, #4
 8013106:	2b00      	cmp	r3, #0
 8013108:	d001      	beq.n	801310e <f_mkfs+0x86>
 801310a:	230a      	movs	r3, #10
 801310c:	e3e2      	b.n	80138d4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801310e:	f107 0214 	add.w	r2, r7, #20
 8013112:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013116:	2103      	movs	r1, #3
 8013118:	4618      	mov	r0, r3
 801311a:	f7fc fffd 	bl	8010118 <disk_ioctl>
 801311e:	4603      	mov	r3, r0
 8013120:	2b00      	cmp	r3, #0
 8013122:	d10c      	bne.n	801313e <f_mkfs+0xb6>
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d009      	beq.n	801313e <f_mkfs+0xb6>
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013130:	d805      	bhi.n	801313e <f_mkfs+0xb6>
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	1e5a      	subs	r2, r3, #1
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	4013      	ands	r3, r2
 801313a:	2b00      	cmp	r3, #0
 801313c:	d001      	beq.n	8013142 <f_mkfs+0xba>
 801313e:	2301      	movs	r3, #1
 8013140:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8013142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013146:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d003      	beq.n	8013156 <f_mkfs+0xce>
 801314e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	429a      	cmp	r2, r3
 8013154:	d309      	bcc.n	801316a <f_mkfs+0xe2>
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801315c:	d805      	bhi.n	801316a <f_mkfs+0xe2>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	1e5a      	subs	r2, r3, #1
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	4013      	ands	r3, r2
 8013166:	2b00      	cmp	r3, #0
 8013168:	d001      	beq.n	801316e <f_mkfs+0xe6>
 801316a:	2313      	movs	r3, #19
 801316c:	e3b2      	b.n	80138d4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 801316e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013170:	687a      	ldr	r2, [r7, #4]
 8013172:	fbb2 f3f3 	udiv	r3, r2, r3
 8013176:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 801317c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801317e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013182:	fbb2 f3f3 	udiv	r3, r2, r3
 8013186:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8013188:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318c:	fb02 f303 	mul.w	r3, r2, r3
 8013190:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8013192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013194:	2b00      	cmp	r3, #0
 8013196:	d101      	bne.n	801319c <f_mkfs+0x114>
 8013198:	230e      	movs	r3, #14
 801319a:	e39b      	b.n	80138d4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 801319c:	f107 0210 	add.w	r2, r7, #16
 80131a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80131a4:	2101      	movs	r1, #1
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7fc ffb6 	bl	8010118 <disk_ioctl>
 80131ac:	4603      	mov	r3, r0
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d001      	beq.n	80131b6 <f_mkfs+0x12e>
 80131b2:	2301      	movs	r3, #1
 80131b4:	e38e      	b.n	80138d4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80131b6:	7afb      	ldrb	r3, [r7, #11]
 80131b8:	f003 0308 	and.w	r3, r3, #8
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d001      	beq.n	80131c4 <f_mkfs+0x13c>
 80131c0:	2300      	movs	r3, #0
 80131c2:	e000      	b.n	80131c6 <f_mkfs+0x13e>
 80131c4:	233f      	movs	r3, #63	; 0x3f
 80131c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d901      	bls.n	80131d4 <f_mkfs+0x14c>
 80131d0:	230e      	movs	r3, #14
 80131d2:	e37f      	b.n	80138d4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80131d4:	693a      	ldr	r2, [r7, #16]
 80131d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d8:	1ad3      	subs	r3, r2, r3
 80131da:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	2b7f      	cmp	r3, #127	; 0x7f
 80131e0:	d801      	bhi.n	80131e6 <f_mkfs+0x15e>
 80131e2:	230e      	movs	r3, #14
 80131e4:	e376      	b.n	80138d4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2b80      	cmp	r3, #128	; 0x80
 80131ea:	d901      	bls.n	80131f0 <f_mkfs+0x168>
 80131ec:	2313      	movs	r3, #19
 80131ee:	e371      	b.n	80138d4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80131f0:	7afb      	ldrb	r3, [r7, #11]
 80131f2:	f003 0302 	and.w	r3, r3, #2
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d00d      	beq.n	8013216 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80131fa:	7afb      	ldrb	r3, [r7, #11]
 80131fc:	f003 0307 	and.w	r3, r3, #7
 8013200:	2b02      	cmp	r3, #2
 8013202:	d004      	beq.n	801320e <f_mkfs+0x186>
 8013204:	7afb      	ldrb	r3, [r7, #11]
 8013206:	f003 0301 	and.w	r3, r3, #1
 801320a:	2b00      	cmp	r3, #0
 801320c:	d103      	bne.n	8013216 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801320e:	2303      	movs	r3, #3
 8013210:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8013214:	e009      	b.n	801322a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8013216:	7afb      	ldrb	r3, [r7, #11]
 8013218:	f003 0301 	and.w	r3, r3, #1
 801321c:	2b00      	cmp	r3, #0
 801321e:	d101      	bne.n	8013224 <f_mkfs+0x19c>
 8013220:	2313      	movs	r3, #19
 8013222:	e357      	b.n	80138d4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8013224:	2302      	movs	r3, #2
 8013226:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801322e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013232:	2b03      	cmp	r3, #3
 8013234:	d13c      	bne.n	80132b0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8013236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013238:	2b00      	cmp	r3, #0
 801323a:	d11b      	bne.n	8013274 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	0c5b      	lsrs	r3, r3, #17
 8013240:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013242:	2300      	movs	r3, #0
 8013244:	64bb      	str	r3, [r7, #72]	; 0x48
 8013246:	2301      	movs	r3, #1
 8013248:	653b      	str	r3, [r7, #80]	; 0x50
 801324a:	e005      	b.n	8013258 <f_mkfs+0x1d0>
 801324c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801324e:	3301      	adds	r3, #1
 8013250:	64bb      	str	r3, [r7, #72]	; 0x48
 8013252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013254:	005b      	lsls	r3, r3, #1
 8013256:	653b      	str	r3, [r7, #80]	; 0x50
 8013258:	4a2d      	ldr	r2, [pc, #180]	; (8013310 <f_mkfs+0x288>)
 801325a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801325c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d007      	beq.n	8013274 <f_mkfs+0x1ec>
 8013264:	4a2a      	ldr	r2, [pc, #168]	; (8013310 <f_mkfs+0x288>)
 8013266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801326c:	461a      	mov	r2, r3
 801326e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013270:	4293      	cmp	r3, r2
 8013272:	d2eb      	bcs.n	801324c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8013274:	693a      	ldr	r2, [r7, #16]
 8013276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013278:	fbb2 f3f3 	udiv	r3, r2, r3
 801327c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801327e:	6a3b      	ldr	r3, [r7, #32]
 8013280:	3302      	adds	r3, #2
 8013282:	009a      	lsls	r2, r3, #2
 8013284:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013286:	4413      	add	r3, r2
 8013288:	1e5a      	subs	r2, r3, #1
 801328a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013290:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8013292:	2320      	movs	r3, #32
 8013294:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8013296:	2300      	movs	r3, #0
 8013298:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801329a:	6a3b      	ldr	r3, [r7, #32]
 801329c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d903      	bls.n	80132ac <f_mkfs+0x224>
 80132a4:	6a3b      	ldr	r3, [r7, #32]
 80132a6:	4a1b      	ldr	r2, [pc, #108]	; (8013314 <f_mkfs+0x28c>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d952      	bls.n	8013352 <f_mkfs+0x2ca>
 80132ac:	230e      	movs	r3, #14
 80132ae:	e311      	b.n	80138d4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80132b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d11b      	bne.n	80132ee <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	0b1b      	lsrs	r3, r3, #12
 80132ba:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80132bc:	2300      	movs	r3, #0
 80132be:	64bb      	str	r3, [r7, #72]	; 0x48
 80132c0:	2301      	movs	r3, #1
 80132c2:	653b      	str	r3, [r7, #80]	; 0x50
 80132c4:	e005      	b.n	80132d2 <f_mkfs+0x24a>
 80132c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132c8:	3301      	adds	r3, #1
 80132ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80132cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132ce:	005b      	lsls	r3, r3, #1
 80132d0:	653b      	str	r3, [r7, #80]	; 0x50
 80132d2:	4a11      	ldr	r2, [pc, #68]	; (8013318 <f_mkfs+0x290>)
 80132d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d007      	beq.n	80132ee <f_mkfs+0x266>
 80132de:	4a0e      	ldr	r2, [pc, #56]	; (8013318 <f_mkfs+0x290>)
 80132e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80132e6:	461a      	mov	r2, r3
 80132e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80132ea:	4293      	cmp	r3, r2
 80132ec:	d2eb      	bcs.n	80132c6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80132ee:	693a      	ldr	r2, [r7, #16]
 80132f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80132f6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80132f8:	6a3b      	ldr	r3, [r7, #32]
 80132fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 80132fe:	4293      	cmp	r3, r2
 8013300:	d90c      	bls.n	801331c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8013302:	6a3b      	ldr	r3, [r7, #32]
 8013304:	3302      	adds	r3, #2
 8013306:	005b      	lsls	r3, r3, #1
 8013308:	65fb      	str	r3, [r7, #92]	; 0x5c
 801330a:	e012      	b.n	8013332 <f_mkfs+0x2aa>
 801330c:	20000a00 	.word	0x20000a00
 8013310:	0801a3b0 	.word	0x0801a3b0
 8013314:	0ffffff5 	.word	0x0ffffff5
 8013318:	0801a3c0 	.word	0x0801a3c0
				} else {
					fmt = FS_FAT12;
 801331c:	2301      	movs	r3, #1
 801331e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8013322:	6a3a      	ldr	r2, [r7, #32]
 8013324:	4613      	mov	r3, r2
 8013326:	005b      	lsls	r3, r3, #1
 8013328:	4413      	add	r3, r2
 801332a:	3301      	adds	r3, #1
 801332c:	085b      	lsrs	r3, r3, #1
 801332e:	3303      	adds	r3, #3
 8013330:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8013332:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013336:	4413      	add	r3, r2
 8013338:	1e5a      	subs	r2, r3, #1
 801333a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013340:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8013342:	2301      	movs	r3, #1
 8013344:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8013346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013348:	015a      	lsls	r2, r3, #5
 801334a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013350:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8013352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013356:	4413      	add	r3, r2
 8013358:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 801335a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801335c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801335e:	fb02 f203 	mul.w	r2, r2, r3
 8013362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013364:	4413      	add	r3, r2
 8013366:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013368:	4413      	add	r3, r2
 801336a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 801336c:	697a      	ldr	r2, [r7, #20]
 801336e:	69fb      	ldr	r3, [r7, #28]
 8013370:	4413      	add	r3, r2
 8013372:	1e5a      	subs	r2, r3, #1
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	425b      	negs	r3, r3
 8013378:	401a      	ands	r2, r3
 801337a:	69fb      	ldr	r3, [r7, #28]
 801337c:	1ad3      	subs	r3, r2, r3
 801337e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8013380:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013384:	2b03      	cmp	r3, #3
 8013386:	d108      	bne.n	801339a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8013388:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801338a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801338c:	4413      	add	r3, r2
 801338e:	657b      	str	r3, [r7, #84]	; 0x54
 8013390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013394:	4413      	add	r3, r2
 8013396:	65bb      	str	r3, [r7, #88]	; 0x58
 8013398:	e006      	b.n	80133a8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801339a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801339c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80133a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80133a4:	4413      	add	r3, r2
 80133a6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80133a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133aa:	011a      	lsls	r2, r3, #4
 80133ac:	69fb      	ldr	r3, [r7, #28]
 80133ae:	441a      	add	r2, r3
 80133b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b2:	1ad2      	subs	r2, r2, r3
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d901      	bls.n	80133be <f_mkfs+0x336>
 80133ba:	230e      	movs	r3, #14
 80133bc:	e28a      	b.n	80138d4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80133be:	693a      	ldr	r2, [r7, #16]
 80133c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133c2:	1ad2      	subs	r2, r2, r3
 80133c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80133c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80133c8:	fb01 f303 	mul.w	r3, r1, r3
 80133cc:	1ad2      	subs	r2, r2, r3
 80133ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133d0:	1ad2      	subs	r2, r2, r3
 80133d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80133d8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80133da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80133de:	2b03      	cmp	r3, #3
 80133e0:	d10f      	bne.n	8013402 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80133e2:	6a3b      	ldr	r3, [r7, #32]
 80133e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80133e8:	4293      	cmp	r3, r2
 80133ea:	d80a      	bhi.n	8013402 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d105      	bne.n	80133fe <f_mkfs+0x376>
 80133f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133f4:	085b      	lsrs	r3, r3, #1
 80133f6:	607b      	str	r3, [r7, #4]
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d144      	bne.n	8013488 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80133fe:	230e      	movs	r3, #14
 8013400:	e268      	b.n	80138d4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8013402:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013406:	2b02      	cmp	r3, #2
 8013408:	d133      	bne.n	8013472 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801340a:	6a3b      	ldr	r3, [r7, #32]
 801340c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013410:	4293      	cmp	r3, r2
 8013412:	d91e      	bls.n	8013452 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d107      	bne.n	801342a <f_mkfs+0x3a2>
 801341a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801341c:	005b      	lsls	r3, r3, #1
 801341e:	2b40      	cmp	r3, #64	; 0x40
 8013420:	d803      	bhi.n	801342a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8013422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013424:	005b      	lsls	r3, r3, #1
 8013426:	607b      	str	r3, [r7, #4]
 8013428:	e033      	b.n	8013492 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801342a:	7afb      	ldrb	r3, [r7, #11]
 801342c:	f003 0302 	and.w	r3, r3, #2
 8013430:	2b00      	cmp	r3, #0
 8013432:	d003      	beq.n	801343c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8013434:	2303      	movs	r3, #3
 8013436:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801343a:	e02a      	b.n	8013492 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d105      	bne.n	801344e <f_mkfs+0x3c6>
 8013442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013444:	005b      	lsls	r3, r3, #1
 8013446:	607b      	str	r3, [r7, #4]
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2b80      	cmp	r3, #128	; 0x80
 801344c:	d91e      	bls.n	801348c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 801344e:	230e      	movs	r3, #14
 8013450:	e240      	b.n	80138d4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8013452:	6a3b      	ldr	r3, [r7, #32]
 8013454:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013458:	4293      	cmp	r3, r2
 801345a:	d80a      	bhi.n	8013472 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d105      	bne.n	801346e <f_mkfs+0x3e6>
 8013462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013464:	005b      	lsls	r3, r3, #1
 8013466:	607b      	str	r3, [r7, #4]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2b80      	cmp	r3, #128	; 0x80
 801346c:	d910      	bls.n	8013490 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 801346e:	230e      	movs	r3, #14
 8013470:	e230      	b.n	80138d4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8013472:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013476:	2b01      	cmp	r3, #1
 8013478:	d10c      	bne.n	8013494 <f_mkfs+0x40c>
 801347a:	6a3b      	ldr	r3, [r7, #32]
 801347c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013480:	4293      	cmp	r3, r2
 8013482:	d907      	bls.n	8013494 <f_mkfs+0x40c>
 8013484:	230e      	movs	r3, #14
 8013486:	e225      	b.n	80138d4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013488:	bf00      	nop
 801348a:	e6ce      	b.n	801322a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801348c:	bf00      	nop
 801348e:	e6cc      	b.n	801322a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013490:	bf00      	nop
			pau = au;
 8013492:	e6ca      	b.n	801322a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8013494:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8013496:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013498:	461a      	mov	r2, r3
 801349a:	2100      	movs	r1, #0
 801349c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801349e:	f7fc fefc 	bl	801029a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80134a2:	220b      	movs	r2, #11
 80134a4:	49bc      	ldr	r1, [pc, #752]	; (8013798 <f_mkfs+0x710>)
 80134a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134a8:	f7fc fed6 	bl	8010258 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80134ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ae:	330b      	adds	r3, #11
 80134b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80134b2:	4611      	mov	r1, r2
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fc fe88 	bl	80101ca <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80134ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134bc:	330d      	adds	r3, #13
 80134be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80134c0:	b2d2      	uxtb	r2, r2
 80134c2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80134c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c6:	330e      	adds	r3, #14
 80134c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80134ca:	b292      	uxth	r2, r2
 80134cc:	4611      	mov	r1, r2
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7fc fe7b 	bl	80101ca <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80134d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d6:	3310      	adds	r3, #16
 80134d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134da:	b2d2      	uxtb	r2, r2
 80134dc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80134de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e0:	f103 0211 	add.w	r2, r3, #17
 80134e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80134e8:	2b03      	cmp	r3, #3
 80134ea:	d002      	beq.n	80134f2 <f_mkfs+0x46a>
 80134ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	e000      	b.n	80134f4 <f_mkfs+0x46c>
 80134f2:	2300      	movs	r3, #0
 80134f4:	4619      	mov	r1, r3
 80134f6:	4610      	mov	r0, r2
 80134f8:	f7fc fe67 	bl	80101ca <st_word>
		if (sz_vol < 0x10000) {
 80134fc:	693b      	ldr	r3, [r7, #16]
 80134fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013502:	d208      	bcs.n	8013516 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8013504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013506:	3313      	adds	r3, #19
 8013508:	693a      	ldr	r2, [r7, #16]
 801350a:	b292      	uxth	r2, r2
 801350c:	4611      	mov	r1, r2
 801350e:	4618      	mov	r0, r3
 8013510:	f7fc fe5b 	bl	80101ca <st_word>
 8013514:	e006      	b.n	8013524 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8013516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013518:	3320      	adds	r3, #32
 801351a:	693a      	ldr	r2, [r7, #16]
 801351c:	4611      	mov	r1, r2
 801351e:	4618      	mov	r0, r3
 8013520:	f7fc fe6e 	bl	8010200 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8013524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013526:	3315      	adds	r3, #21
 8013528:	22f8      	movs	r2, #248	; 0xf8
 801352a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 801352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352e:	3318      	adds	r3, #24
 8013530:	213f      	movs	r1, #63	; 0x3f
 8013532:	4618      	mov	r0, r3
 8013534:	f7fc fe49 	bl	80101ca <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8013538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353a:	331a      	adds	r3, #26
 801353c:	21ff      	movs	r1, #255	; 0xff
 801353e:	4618      	mov	r0, r3
 8013540:	f7fc fe43 	bl	80101ca <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8013544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013546:	331c      	adds	r3, #28
 8013548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801354a:	4618      	mov	r0, r3
 801354c:	f7fc fe58 	bl	8010200 <st_dword>
		if (fmt == FS_FAT32) {
 8013550:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013554:	2b03      	cmp	r3, #3
 8013556:	d131      	bne.n	80135bc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8013558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 801355e:	f7fc faeb 	bl	800fb38 <get_fattime>
 8013562:	4603      	mov	r3, r0
 8013564:	4619      	mov	r1, r3
 8013566:	4620      	mov	r0, r4
 8013568:	f7fc fe4a 	bl	8010200 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 801356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801356e:	3324      	adds	r3, #36	; 0x24
 8013570:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013572:	4618      	mov	r0, r3
 8013574:	f7fc fe44 	bl	8010200 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8013578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801357a:	332c      	adds	r3, #44	; 0x2c
 801357c:	2102      	movs	r1, #2
 801357e:	4618      	mov	r0, r3
 8013580:	f7fc fe3e 	bl	8010200 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8013584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013586:	3330      	adds	r3, #48	; 0x30
 8013588:	2101      	movs	r1, #1
 801358a:	4618      	mov	r0, r3
 801358c:	f7fc fe1d 	bl	80101ca <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8013590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013592:	3332      	adds	r3, #50	; 0x32
 8013594:	2106      	movs	r1, #6
 8013596:	4618      	mov	r0, r3
 8013598:	f7fc fe17 	bl	80101ca <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 801359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801359e:	3340      	adds	r3, #64	; 0x40
 80135a0:	2280      	movs	r2, #128	; 0x80
 80135a2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80135a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a6:	3342      	adds	r3, #66	; 0x42
 80135a8:	2229      	movs	r2, #41	; 0x29
 80135aa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80135ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ae:	3347      	adds	r3, #71	; 0x47
 80135b0:	2213      	movs	r2, #19
 80135b2:	497a      	ldr	r1, [pc, #488]	; (801379c <f_mkfs+0x714>)
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7fc fe4f 	bl	8010258 <mem_cpy>
 80135ba:	e020      	b.n	80135fe <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80135bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135be:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80135c2:	f7fc fab9 	bl	800fb38 <get_fattime>
 80135c6:	4603      	mov	r3, r0
 80135c8:	4619      	mov	r1, r3
 80135ca:	4620      	mov	r0, r4
 80135cc:	f7fc fe18 	bl	8010200 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	3316      	adds	r3, #22
 80135d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80135d6:	b292      	uxth	r2, r2
 80135d8:	4611      	mov	r1, r2
 80135da:	4618      	mov	r0, r3
 80135dc:	f7fc fdf5 	bl	80101ca <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80135e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e2:	3324      	adds	r3, #36	; 0x24
 80135e4:	2280      	movs	r2, #128	; 0x80
 80135e6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80135e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ea:	3326      	adds	r3, #38	; 0x26
 80135ec:	2229      	movs	r2, #41	; 0x29
 80135ee:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80135f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f2:	332b      	adds	r3, #43	; 0x2b
 80135f4:	2213      	movs	r2, #19
 80135f6:	496a      	ldr	r1, [pc, #424]	; (80137a0 <f_mkfs+0x718>)
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7fc fe2d 	bl	8010258 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80135fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013600:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013604:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013608:	4618      	mov	r0, r3
 801360a:	f7fc fdde 	bl	80101ca <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 801360e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013612:	2301      	movs	r3, #1
 8013614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013616:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013618:	f7fc fd5e 	bl	80100d8 <disk_write>
 801361c:	4603      	mov	r3, r0
 801361e:	2b00      	cmp	r3, #0
 8013620:	d001      	beq.n	8013626 <f_mkfs+0x59e>
 8013622:	2301      	movs	r3, #1
 8013624:	e156      	b.n	80138d4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8013626:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801362a:	2b03      	cmp	r3, #3
 801362c:	d140      	bne.n	80136b0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 801362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013630:	1d9a      	adds	r2, r3, #6
 8013632:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013636:	2301      	movs	r3, #1
 8013638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801363a:	f7fc fd4d 	bl	80100d8 <disk_write>
			mem_set(buf, 0, ss);
 801363e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013640:	461a      	mov	r2, r3
 8013642:	2100      	movs	r1, #0
 8013644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013646:	f7fc fe28 	bl	801029a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 801364a:	4956      	ldr	r1, [pc, #344]	; (80137a4 <f_mkfs+0x71c>)
 801364c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801364e:	f7fc fdd7 	bl	8010200 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013654:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013658:	4953      	ldr	r1, [pc, #332]	; (80137a8 <f_mkfs+0x720>)
 801365a:	4618      	mov	r0, r3
 801365c:	f7fc fdd0 	bl	8010200 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8013660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013662:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013666:	6a3b      	ldr	r3, [r7, #32]
 8013668:	3b01      	subs	r3, #1
 801366a:	4619      	mov	r1, r3
 801366c:	4610      	mov	r0, r2
 801366e:	f7fc fdc7 	bl	8010200 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8013672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013674:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013678:	2102      	movs	r1, #2
 801367a:	4618      	mov	r0, r3
 801367c:	f7fc fdc0 	bl	8010200 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8013680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013682:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013686:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801368a:	4618      	mov	r0, r3
 801368c:	f7fc fd9d 	bl	80101ca <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8013690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013692:	1dda      	adds	r2, r3, #7
 8013694:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013698:	2301      	movs	r3, #1
 801369a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801369c:	f7fc fd1c 	bl	80100d8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80136a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a2:	1c5a      	adds	r2, r3, #1
 80136a4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80136a8:	2301      	movs	r3, #1
 80136aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80136ac:	f7fc fd14 	bl	80100d8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80136b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136b2:	2100      	movs	r1, #0
 80136b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136b6:	f7fc fdf0 	bl	801029a <mem_set>
		sect = b_fat;		/* FAT start sector */
 80136ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80136bc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80136be:	2300      	movs	r3, #0
 80136c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80136c2:	e04b      	b.n	801375c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80136c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80136c8:	2b03      	cmp	r3, #3
 80136ca:	d113      	bne.n	80136f4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80136cc:	f06f 0107 	mvn.w	r1, #7
 80136d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136d2:	f7fc fd95 	bl	8010200 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80136d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d8:	3304      	adds	r3, #4
 80136da:	f04f 31ff 	mov.w	r1, #4294967295
 80136de:	4618      	mov	r0, r3
 80136e0:	f7fc fd8e 	bl	8010200 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80136e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e6:	3308      	adds	r3, #8
 80136e8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7fc fd87 	bl	8010200 <st_dword>
 80136f2:	e00b      	b.n	801370c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80136f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	d101      	bne.n	8013700 <f_mkfs+0x678>
 80136fc:	4b2b      	ldr	r3, [pc, #172]	; (80137ac <f_mkfs+0x724>)
 80136fe:	e001      	b.n	8013704 <f_mkfs+0x67c>
 8013700:	f06f 0307 	mvn.w	r3, #7
 8013704:	4619      	mov	r1, r3
 8013706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013708:	f7fc fd7a 	bl	8010200 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 801370c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801370e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8013710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013714:	4293      	cmp	r3, r2
 8013716:	bf28      	it	cs
 8013718:	4613      	movcs	r3, r2
 801371a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801371c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013722:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013726:	f7fc fcd7 	bl	80100d8 <disk_write>
 801372a:	4603      	mov	r3, r0
 801372c:	2b00      	cmp	r3, #0
 801372e:	d001      	beq.n	8013734 <f_mkfs+0x6ac>
 8013730:	2301      	movs	r3, #1
 8013732:	e0cf      	b.n	80138d4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8013734:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013736:	461a      	mov	r2, r3
 8013738:	2100      	movs	r1, #0
 801373a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801373c:	f7fc fdad 	bl	801029a <mem_set>
				sect += n; nsect -= n;
 8013740:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013744:	4413      	add	r3, r2
 8013746:	667b      	str	r3, [r7, #100]	; 0x64
 8013748:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801374a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801374c:	1ad3      	subs	r3, r2, r3
 801374e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8013750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013752:	2b00      	cmp	r3, #0
 8013754:	d1dc      	bne.n	8013710 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8013756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013758:	3301      	adds	r3, #1
 801375a:	64bb      	str	r3, [r7, #72]	; 0x48
 801375c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801375e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013760:	429a      	cmp	r2, r3
 8013762:	d3af      	bcc.n	80136c4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8013764:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013768:	2b03      	cmp	r3, #3
 801376a:	d101      	bne.n	8013770 <f_mkfs+0x6e8>
 801376c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801376e:	e000      	b.n	8013772 <f_mkfs+0x6ea>
 8013770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013772:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8013774:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013778:	4293      	cmp	r3, r2
 801377a:	bf28      	it	cs
 801377c:	4613      	movcs	r3, r2
 801377e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013780:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013786:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801378a:	f7fc fca5 	bl	80100d8 <disk_write>
 801378e:	4603      	mov	r3, r0
 8013790:	2b00      	cmp	r3, #0
 8013792:	d00d      	beq.n	80137b0 <f_mkfs+0x728>
 8013794:	2301      	movs	r3, #1
 8013796:	e09d      	b.n	80138d4 <f_mkfs+0x84c>
 8013798:	080177b4 	.word	0x080177b4
 801379c:	080177c0 	.word	0x080177c0
 80137a0:	080177d4 	.word	0x080177d4
 80137a4:	41615252 	.word	0x41615252
 80137a8:	61417272 	.word	0x61417272
 80137ac:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 80137b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80137b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137b4:	4413      	add	r3, r2
 80137b6:	667b      	str	r3, [r7, #100]	; 0x64
 80137b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80137ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80137c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d1d6      	bne.n	8013774 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80137c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80137ca:	2b03      	cmp	r3, #3
 80137cc:	d103      	bne.n	80137d6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80137ce:	230c      	movs	r3, #12
 80137d0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80137d4:	e010      	b.n	80137f8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137dc:	d303      	bcc.n	80137e6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80137de:	2306      	movs	r3, #6
 80137e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80137e4:	e008      	b.n	80137f8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80137e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80137ea:	2b02      	cmp	r3, #2
 80137ec:	d101      	bne.n	80137f2 <f_mkfs+0x76a>
 80137ee:	2304      	movs	r3, #4
 80137f0:	e000      	b.n	80137f4 <f_mkfs+0x76c>
 80137f2:	2301      	movs	r3, #1
 80137f4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80137f8:	7afb      	ldrb	r3, [r7, #11]
 80137fa:	f003 0308 	and.w	r3, r3, #8
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d15b      	bne.n	80138ba <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8013802:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013804:	461a      	mov	r2, r3
 8013806:	2100      	movs	r1, #0
 8013808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801380a:	f7fc fd46 	bl	801029a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 801380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013810:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013814:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013818:	4618      	mov	r0, r3
 801381a:	f7fc fcd6 	bl	80101ca <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013820:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013824:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8013826:	69bb      	ldr	r3, [r7, #24]
 8013828:	2200      	movs	r2, #0
 801382a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	3301      	adds	r3, #1
 8013830:	2201      	movs	r2, #1
 8013832:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8013834:	69bb      	ldr	r3, [r7, #24]
 8013836:	3302      	adds	r3, #2
 8013838:	2201      	movs	r2, #1
 801383a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 801383c:	69bb      	ldr	r3, [r7, #24]
 801383e:	3303      	adds	r3, #3
 8013840:	2200      	movs	r2, #0
 8013842:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	3304      	adds	r3, #4
 8013848:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 801384c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 801384e:	693a      	ldr	r2, [r7, #16]
 8013850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013852:	441a      	add	r2, r3
 8013854:	4b21      	ldr	r3, [pc, #132]	; (80138dc <f_mkfs+0x854>)
 8013856:	fba3 1302 	umull	r1, r3, r3, r2
 801385a:	1ad2      	subs	r2, r2, r3
 801385c:	0852      	lsrs	r2, r2, #1
 801385e:	4413      	add	r3, r2
 8013860:	0b5b      	lsrs	r3, r3, #13
 8013862:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8013864:	69bb      	ldr	r3, [r7, #24]
 8013866:	3305      	adds	r3, #5
 8013868:	22fe      	movs	r2, #254	; 0xfe
 801386a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 801386c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801386e:	089b      	lsrs	r3, r3, #2
 8013870:	b2da      	uxtb	r2, r3
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	3306      	adds	r3, #6
 8013876:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801387a:	b2d2      	uxtb	r2, r2
 801387c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 801387e:	69bb      	ldr	r3, [r7, #24]
 8013880:	3307      	adds	r3, #7
 8013882:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013884:	b2d2      	uxtb	r2, r2
 8013886:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	3308      	adds	r3, #8
 801388c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801388e:	4618      	mov	r0, r3
 8013890:	f7fc fcb6 	bl	8010200 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8013894:	69bb      	ldr	r3, [r7, #24]
 8013896:	330c      	adds	r3, #12
 8013898:	693a      	ldr	r2, [r7, #16]
 801389a:	4611      	mov	r1, r2
 801389c:	4618      	mov	r0, r3
 801389e:	f7fc fcaf 	bl	8010200 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80138a2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80138a6:	2301      	movs	r3, #1
 80138a8:	2200      	movs	r2, #0
 80138aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80138ac:	f7fc fc14 	bl	80100d8 <disk_write>
 80138b0:	4603      	mov	r3, r0
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d001      	beq.n	80138ba <f_mkfs+0x832>
 80138b6:	2301      	movs	r3, #1
 80138b8:	e00c      	b.n	80138d4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80138ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80138be:	2200      	movs	r2, #0
 80138c0:	2100      	movs	r1, #0
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7fc fc28 	bl	8010118 <disk_ioctl>
 80138c8:	4603      	mov	r3, r0
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d001      	beq.n	80138d2 <f_mkfs+0x84a>
 80138ce:	2301      	movs	r3, #1
 80138d0:	e000      	b.n	80138d4 <f_mkfs+0x84c>

	return FR_OK;
 80138d2:	2300      	movs	r3, #0
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3774      	adds	r7, #116	; 0x74
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd90      	pop	{r4, r7, pc}
 80138dc:	0515565b 	.word	0x0515565b

080138e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80138e0:	b480      	push	{r7}
 80138e2:	b087      	sub	sp, #28
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	4613      	mov	r3, r2
 80138ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80138ee:	2301      	movs	r3, #1
 80138f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80138f2:	2300      	movs	r3, #0
 80138f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80138f6:	4b1f      	ldr	r3, [pc, #124]	; (8013974 <FATFS_LinkDriverEx+0x94>)
 80138f8:	7a5b      	ldrb	r3, [r3, #9]
 80138fa:	b2db      	uxtb	r3, r3
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d131      	bne.n	8013964 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013900:	4b1c      	ldr	r3, [pc, #112]	; (8013974 <FATFS_LinkDriverEx+0x94>)
 8013902:	7a5b      	ldrb	r3, [r3, #9]
 8013904:	b2db      	uxtb	r3, r3
 8013906:	461a      	mov	r2, r3
 8013908:	4b1a      	ldr	r3, [pc, #104]	; (8013974 <FATFS_LinkDriverEx+0x94>)
 801390a:	2100      	movs	r1, #0
 801390c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801390e:	4b19      	ldr	r3, [pc, #100]	; (8013974 <FATFS_LinkDriverEx+0x94>)
 8013910:	7a5b      	ldrb	r3, [r3, #9]
 8013912:	b2db      	uxtb	r3, r3
 8013914:	4a17      	ldr	r2, [pc, #92]	; (8013974 <FATFS_LinkDriverEx+0x94>)
 8013916:	009b      	lsls	r3, r3, #2
 8013918:	4413      	add	r3, r2
 801391a:	68fa      	ldr	r2, [r7, #12]
 801391c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801391e:	4b15      	ldr	r3, [pc, #84]	; (8013974 <FATFS_LinkDriverEx+0x94>)
 8013920:	7a5b      	ldrb	r3, [r3, #9]
 8013922:	b2db      	uxtb	r3, r3
 8013924:	461a      	mov	r2, r3
 8013926:	4b13      	ldr	r3, [pc, #76]	; (8013974 <FATFS_LinkDriverEx+0x94>)
 8013928:	4413      	add	r3, r2
 801392a:	79fa      	ldrb	r2, [r7, #7]
 801392c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801392e:	4b11      	ldr	r3, [pc, #68]	; (8013974 <FATFS_LinkDriverEx+0x94>)
 8013930:	7a5b      	ldrb	r3, [r3, #9]
 8013932:	b2db      	uxtb	r3, r3
 8013934:	1c5a      	adds	r2, r3, #1
 8013936:	b2d1      	uxtb	r1, r2
 8013938:	4a0e      	ldr	r2, [pc, #56]	; (8013974 <FATFS_LinkDriverEx+0x94>)
 801393a:	7251      	strb	r1, [r2, #9]
 801393c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801393e:	7dbb      	ldrb	r3, [r7, #22]
 8013940:	3330      	adds	r3, #48	; 0x30
 8013942:	b2da      	uxtb	r2, r3
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	3301      	adds	r3, #1
 801394c:	223a      	movs	r2, #58	; 0x3a
 801394e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	3302      	adds	r3, #2
 8013954:	222f      	movs	r2, #47	; 0x2f
 8013956:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	3303      	adds	r3, #3
 801395c:	2200      	movs	r2, #0
 801395e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013960:	2300      	movs	r3, #0
 8013962:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013964:	7dfb      	ldrb	r3, [r7, #23]
}
 8013966:	4618      	mov	r0, r3
 8013968:	371c      	adds	r7, #28
 801396a:	46bd      	mov	sp, r7
 801396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013970:	4770      	bx	lr
 8013972:	bf00      	nop
 8013974:	20000a28 	.word	0x20000a28

08013978 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b082      	sub	sp, #8
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013982:	2200      	movs	r2, #0
 8013984:	6839      	ldr	r1, [r7, #0]
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f7ff ffaa 	bl	80138e0 <FATFS_LinkDriverEx>
 801398c:	4603      	mov	r3, r0
}
 801398e:	4618      	mov	r0, r3
 8013990:	3708      	adds	r7, #8
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}

08013996 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8013996:	b580      	push	{r7, lr}
 8013998:	b086      	sub	sp, #24
 801399a:	af00      	add	r7, sp, #0
 801399c:	4603      	mov	r3, r0
 801399e:	6039      	str	r1, [r7, #0]
 80139a0:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80139a2:	2300      	movs	r3, #0
 80139a4:	60fb      	str	r3, [r7, #12]
 80139a6:	2300      	movs	r3, #0
 80139a8:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80139aa:	f107 030c 	add.w	r3, r7, #12
 80139ae:	2101      	movs	r1, #1
 80139b0:	4618      	mov	r0, r3
 80139b2:	f000 f901 	bl	8013bb8 <osSemaphoreCreate>
 80139b6:	4602      	mov	r2, r0
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	bf14      	ite	ne
 80139c4:	2301      	movne	r3, #1
 80139c6:	2300      	moveq	r3, #0
 80139c8:	b2db      	uxtb	r3, r3
 80139ca:	617b      	str	r3, [r7, #20]

    return ret;
 80139cc:	697b      	ldr	r3, [r7, #20]
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3718      	adds	r7, #24
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}

080139d6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80139d6:	b580      	push	{r7, lr}
 80139d8:	b082      	sub	sp, #8
 80139da:	af00      	add	r7, sp, #0
 80139dc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f000 f9a0 	bl	8013d24 <osSemaphoreDelete>
#endif
    return 1;
 80139e4:	2301      	movs	r3, #1
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	3708      	adds	r7, #8
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}

080139ee <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80139ee:	b580      	push	{r7, lr}
 80139f0:	b084      	sub	sp, #16
 80139f2:	af00      	add	r7, sp, #0
 80139f4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80139f6:	2300      	movs	r3, #0
 80139f8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80139fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f000 f90c 	bl	8013c1c <osSemaphoreWait>
 8013a04:	4603      	mov	r3, r0
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d101      	bne.n	8013a0e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3710      	adds	r7, #16
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f000 f949 	bl	8013cb8 <osSemaphoreRelease>
#endif
}
 8013a26:	bf00      	nop
 8013a28:	3708      	adds	r7, #8
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}

08013a2e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013a2e:	b480      	push	{r7}
 8013a30:	b085      	sub	sp, #20
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	4603      	mov	r3, r0
 8013a36:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013a40:	2b84      	cmp	r3, #132	; 0x84
 8013a42:	d005      	beq.n	8013a50 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013a44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	4413      	add	r3, r2
 8013a4c:	3303      	adds	r3, #3
 8013a4e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013a50:	68fb      	ldr	r3, [r7, #12]
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3714      	adds	r7, #20
 8013a56:	46bd      	mov	sp, r7
 8013a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5c:	4770      	bx	lr

08013a5e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8013a5e:	b480      	push	{r7}
 8013a60:	b083      	sub	sp, #12
 8013a62:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a64:	f3ef 8305 	mrs	r3, IPSR
 8013a68:	607b      	str	r3, [r7, #4]
  return(result);
 8013a6a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	bf14      	ite	ne
 8013a70:	2301      	movne	r3, #1
 8013a72:	2300      	moveq	r3, #0
 8013a74:	b2db      	uxtb	r3, r3
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	370c      	adds	r7, #12
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013a82:	b580      	push	{r7, lr}
 8013a84:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013a86:	f001 fe53 	bl	8015730 <vTaskStartScheduler>
  
  return osOK;
 8013a8a:	2300      	movs	r3, #0
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8013a94:	f002 faa4 	bl	8015fe0 <xTaskGetSchedulerState>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	2b01      	cmp	r3, #1
 8013a9c:	d101      	bne.n	8013aa2 <osKernelRunning+0x12>
    return 0;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	e000      	b.n	8013aa4 <osKernelRunning+0x14>
  else
    return 1;
 8013aa2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	bd80      	pop	{r7, pc}

08013aa8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8013aac:	f7ff ffd7 	bl	8013a5e <inHandlerMode>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d003      	beq.n	8013abe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8013ab6:	f001 ff5b 	bl	8015970 <xTaskGetTickCountFromISR>
 8013aba:	4603      	mov	r3, r0
 8013abc:	e002      	b.n	8013ac4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8013abe:	f001 ff47 	bl	8015950 <xTaskGetTickCount>
 8013ac2:	4603      	mov	r3, r0
  }
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013aca:	b089      	sub	sp, #36	; 0x24
 8013acc:	af04      	add	r7, sp, #16
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	695b      	ldr	r3, [r3, #20]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d020      	beq.n	8013b1c <osThreadCreate+0x54>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	699b      	ldr	r3, [r3, #24]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d01c      	beq.n	8013b1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	685c      	ldr	r4, [r3, #4]
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681d      	ldr	r5, [r3, #0]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	691e      	ldr	r6, [r3, #16]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7ff ff9a 	bl	8013a2e <makeFreeRtosPriority>
 8013afa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	695b      	ldr	r3, [r3, #20]
 8013b00:	687a      	ldr	r2, [r7, #4]
 8013b02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013b04:	9202      	str	r2, [sp, #8]
 8013b06:	9301      	str	r3, [sp, #4]
 8013b08:	9100      	str	r1, [sp, #0]
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	4632      	mov	r2, r6
 8013b0e:	4629      	mov	r1, r5
 8013b10:	4620      	mov	r0, r4
 8013b12:	f001 fa79 	bl	8015008 <xTaskCreateStatic>
 8013b16:	4603      	mov	r3, r0
 8013b18:	60fb      	str	r3, [r7, #12]
 8013b1a:	e01c      	b.n	8013b56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	685c      	ldr	r4, [r3, #4]
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013b28:	b29e      	uxth	r6, r3
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7ff ff7c 	bl	8013a2e <makeFreeRtosPriority>
 8013b36:	4602      	mov	r2, r0
 8013b38:	f107 030c 	add.w	r3, r7, #12
 8013b3c:	9301      	str	r3, [sp, #4]
 8013b3e:	9200      	str	r2, [sp, #0]
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	4632      	mov	r2, r6
 8013b44:	4629      	mov	r1, r5
 8013b46:	4620      	mov	r0, r4
 8013b48:	f001 fac1 	bl	80150ce <xTaskCreate>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d001      	beq.n	8013b56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013b52:	2300      	movs	r3, #0
 8013b54:	e000      	b.n	8013b58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013b56:	68fb      	ldr	r3, [r7, #12]
}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3714      	adds	r7, #20
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013b60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b084      	sub	sp, #16
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d001      	beq.n	8013b76 <osDelay+0x16>
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	e000      	b.n	8013b78 <osDelay+0x18>
 8013b76:	2301      	movs	r3, #1
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f001 fc7b 	bl	8015474 <vTaskDelay>
  
  return osOK;
 8013b7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3710      	adds	r7, #16
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	685b      	ldr	r3, [r3, #4]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d007      	beq.n	8013ba8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	2001      	movs	r0, #1
 8013ba0:	f000 fbe3 	bl	801436a <xQueueCreateMutexStatic>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	e003      	b.n	8013bb0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8013ba8:	2001      	movs	r0, #1
 8013baa:	f000 fbc6 	bl	801433a <xQueueCreateMutex>
 8013bae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3708      	adds	r7, #8
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}

08013bb8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b086      	sub	sp, #24
 8013bbc:	af02      	add	r7, sp, #8
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	685b      	ldr	r3, [r3, #4]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d00f      	beq.n	8013bea <osSemaphoreCreate+0x32>
    if (count == 1) {
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d10a      	bne.n	8013be6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	2203      	movs	r2, #3
 8013bd6:	9200      	str	r2, [sp, #0]
 8013bd8:	2200      	movs	r2, #0
 8013bda:	2100      	movs	r1, #0
 8013bdc:	2001      	movs	r0, #1
 8013bde:	f000 faaf 	bl	8014140 <xQueueGenericCreateStatic>
 8013be2:	4603      	mov	r3, r0
 8013be4:	e016      	b.n	8013c14 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8013be6:	2300      	movs	r3, #0
 8013be8:	e014      	b.n	8013c14 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	d110      	bne.n	8013c12 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8013bf0:	2203      	movs	r2, #3
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	2001      	movs	r0, #1
 8013bf6:	f000 fb25 	bl	8014244 <xQueueGenericCreate>
 8013bfa:	60f8      	str	r0, [r7, #12]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d005      	beq.n	8013c0e <osSemaphoreCreate+0x56>
 8013c02:	2300      	movs	r3, #0
 8013c04:	2200      	movs	r2, #0
 8013c06:	2100      	movs	r1, #0
 8013c08:	68f8      	ldr	r0, [r7, #12]
 8013c0a:	f000 fbc9 	bl	80143a0 <xQueueGenericSend>
      return sema;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	e000      	b.n	8013c14 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8013c12:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3710      	adds	r7, #16
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b084      	sub	sp, #16
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8013c26:	2300      	movs	r3, #0
 8013c28:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d101      	bne.n	8013c34 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8013c30:	2380      	movs	r3, #128	; 0x80
 8013c32:	e03a      	b.n	8013caa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013c34:	2300      	movs	r3, #0
 8013c36:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c3e:	d103      	bne.n	8013c48 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8013c40:	f04f 33ff 	mov.w	r3, #4294967295
 8013c44:	60fb      	str	r3, [r7, #12]
 8013c46:	e009      	b.n	8013c5c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d006      	beq.n	8013c5c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d101      	bne.n	8013c5c <osSemaphoreWait+0x40>
      ticks = 1;
 8013c58:	2301      	movs	r3, #1
 8013c5a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8013c5c:	f7ff feff 	bl	8013a5e <inHandlerMode>
 8013c60:	4603      	mov	r3, r0
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d017      	beq.n	8013c96 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013c66:	f107 0308 	add.w	r3, r7, #8
 8013c6a:	461a      	mov	r2, r3
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f000 ffcc 	bl	8014c0c <xQueueReceiveFromISR>
 8013c74:	4603      	mov	r3, r0
 8013c76:	2b01      	cmp	r3, #1
 8013c78:	d001      	beq.n	8013c7e <osSemaphoreWait+0x62>
      return osErrorOS;
 8013c7a:	23ff      	movs	r3, #255	; 0xff
 8013c7c:	e015      	b.n	8013caa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d011      	beq.n	8013ca8 <osSemaphoreWait+0x8c>
 8013c84:	4b0b      	ldr	r3, [pc, #44]	; (8013cb4 <osSemaphoreWait+0x98>)
 8013c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c8a:	601a      	str	r2, [r3, #0]
 8013c8c:	f3bf 8f4f 	dsb	sy
 8013c90:	f3bf 8f6f 	isb	sy
 8013c94:	e008      	b.n	8013ca8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8013c96:	68f9      	ldr	r1, [r7, #12]
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f000 fea3 	bl	80149e4 <xQueueSemaphoreTake>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	d001      	beq.n	8013ca8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8013ca4:	23ff      	movs	r3, #255	; 0xff
 8013ca6:	e000      	b.n	8013caa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8013ca8:	2300      	movs	r3, #0
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	3710      	adds	r7, #16
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}
 8013cb2:	bf00      	nop
 8013cb4:	e000ed04 	.word	0xe000ed04

08013cb8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b084      	sub	sp, #16
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8013cc8:	f7ff fec9 	bl	8013a5e <inHandlerMode>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d016      	beq.n	8013d00 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013cd2:	f107 0308 	add.w	r3, r7, #8
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 fd07 	bl	80146ec <xQueueGiveFromISR>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	2b01      	cmp	r3, #1
 8013ce2:	d001      	beq.n	8013ce8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8013ce4:	23ff      	movs	r3, #255	; 0xff
 8013ce6:	e017      	b.n	8013d18 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d013      	beq.n	8013d16 <osSemaphoreRelease+0x5e>
 8013cee:	4b0c      	ldr	r3, [pc, #48]	; (8013d20 <osSemaphoreRelease+0x68>)
 8013cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cf4:	601a      	str	r2, [r3, #0]
 8013cf6:	f3bf 8f4f 	dsb	sy
 8013cfa:	f3bf 8f6f 	isb	sy
 8013cfe:	e00a      	b.n	8013d16 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8013d00:	2300      	movs	r3, #0
 8013d02:	2200      	movs	r2, #0
 8013d04:	2100      	movs	r1, #0
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f000 fb4a 	bl	80143a0 <xQueueGenericSend>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d001      	beq.n	8013d16 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8013d12:	23ff      	movs	r3, #255	; 0xff
 8013d14:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8013d16:	68fb      	ldr	r3, [r7, #12]
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3710      	adds	r7, #16
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	e000ed04 	.word	0xe000ed04

08013d24 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8013d2c:	f7ff fe97 	bl	8013a5e <inHandlerMode>
 8013d30:	4603      	mov	r3, r0
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d001      	beq.n	8013d3a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8013d36:	2382      	movs	r3, #130	; 0x82
 8013d38:	e003      	b.n	8013d42 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8013d3a:	6878      	ldr	r0, [r7, #4]
 8013d3c:	f000 ffec 	bl	8014d18 <vQueueDelete>

  return osOK; 
 8013d40:	2300      	movs	r3, #0
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3708      	adds	r7, #8
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}

08013d4a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8013d4a:	b590      	push	{r4, r7, lr}
 8013d4c:	b085      	sub	sp, #20
 8013d4e:	af02      	add	r7, sp, #8
 8013d50:	6078      	str	r0, [r7, #4]
 8013d52:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	689b      	ldr	r3, [r3, #8]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d011      	beq.n	8013d80 <osMessageCreate+0x36>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	68db      	ldr	r3, [r3, #12]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d00d      	beq.n	8013d80 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6818      	ldr	r0, [r3, #0]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6859      	ldr	r1, [r3, #4]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	689a      	ldr	r2, [r3, #8]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	2400      	movs	r4, #0
 8013d76:	9400      	str	r4, [sp, #0]
 8013d78:	f000 f9e2 	bl	8014140 <xQueueGenericCreateStatic>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	e008      	b.n	8013d92 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6818      	ldr	r0, [r3, #0]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	4619      	mov	r1, r3
 8013d8c:	f000 fa5a 	bl	8014244 <xQueueGenericCreate>
 8013d90:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	370c      	adds	r7, #12
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd90      	pop	{r4, r7, pc}
	...

08013d9c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b086      	sub	sp, #24
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	60f8      	str	r0, [r7, #12]
 8013da4:	60b9      	str	r1, [r7, #8]
 8013da6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8013da8:	2300      	movs	r3, #0
 8013daa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8013db0:	697b      	ldr	r3, [r7, #20]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d101      	bne.n	8013dba <osMessagePut+0x1e>
    ticks = 1;
 8013db6:	2301      	movs	r3, #1
 8013db8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8013dba:	f7ff fe50 	bl	8013a5e <inHandlerMode>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d018      	beq.n	8013df6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8013dc4:	f107 0210 	add.w	r2, r7, #16
 8013dc8:	f107 0108 	add.w	r1, r7, #8
 8013dcc:	2300      	movs	r3, #0
 8013dce:	68f8      	ldr	r0, [r7, #12]
 8013dd0:	f000 fbec 	bl	80145ac <xQueueGenericSendFromISR>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b01      	cmp	r3, #1
 8013dd8:	d001      	beq.n	8013dde <osMessagePut+0x42>
      return osErrorOS;
 8013dda:	23ff      	movs	r3, #255	; 0xff
 8013ddc:	e018      	b.n	8013e10 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d014      	beq.n	8013e0e <osMessagePut+0x72>
 8013de4:	4b0c      	ldr	r3, [pc, #48]	; (8013e18 <osMessagePut+0x7c>)
 8013de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dea:	601a      	str	r2, [r3, #0]
 8013dec:	f3bf 8f4f 	dsb	sy
 8013df0:	f3bf 8f6f 	isb	sy
 8013df4:	e00b      	b.n	8013e0e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8013df6:	f107 0108 	add.w	r1, r7, #8
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	697a      	ldr	r2, [r7, #20]
 8013dfe:	68f8      	ldr	r0, [r7, #12]
 8013e00:	f000 face 	bl	80143a0 <xQueueGenericSend>
 8013e04:	4603      	mov	r3, r0
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d001      	beq.n	8013e0e <osMessagePut+0x72>
      return osErrorOS;
 8013e0a:	23ff      	movs	r3, #255	; 0xff
 8013e0c:	e000      	b.n	8013e10 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8013e0e:	2300      	movs	r3, #0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3718      	adds	r7, #24
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	e000ed04 	.word	0xe000ed04

08013e1c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8013e1c:	b590      	push	{r4, r7, lr}
 8013e1e:	b08b      	sub	sp, #44	; 0x2c
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d10a      	bne.n	8013e4c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8013e36:	2380      	movs	r3, #128	; 0x80
 8013e38:	617b      	str	r3, [r7, #20]
    return event;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	461c      	mov	r4, r3
 8013e3e:	f107 0314 	add.w	r3, r7, #20
 8013e42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013e46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013e4a:	e054      	b.n	8013ef6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8013e50:	2300      	movs	r3, #0
 8013e52:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e5a:	d103      	bne.n	8013e64 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8013e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e60:	627b      	str	r3, [r7, #36]	; 0x24
 8013e62:	e009      	b.n	8013e78 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d006      	beq.n	8013e78 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8013e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d101      	bne.n	8013e78 <osMessageGet+0x5c>
      ticks = 1;
 8013e74:	2301      	movs	r3, #1
 8013e76:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8013e78:	f7ff fdf1 	bl	8013a5e <inHandlerMode>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d01c      	beq.n	8013ebc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8013e82:	f107 0220 	add.w	r2, r7, #32
 8013e86:	f107 0314 	add.w	r3, r7, #20
 8013e8a:	3304      	adds	r3, #4
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	68b8      	ldr	r0, [r7, #8]
 8013e90:	f000 febc 	bl	8014c0c <xQueueReceiveFromISR>
 8013e94:	4603      	mov	r3, r0
 8013e96:	2b01      	cmp	r3, #1
 8013e98:	d102      	bne.n	8013ea0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8013e9a:	2310      	movs	r3, #16
 8013e9c:	617b      	str	r3, [r7, #20]
 8013e9e:	e001      	b.n	8013ea4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013ea4:	6a3b      	ldr	r3, [r7, #32]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d01d      	beq.n	8013ee6 <osMessageGet+0xca>
 8013eaa:	4b15      	ldr	r3, [pc, #84]	; (8013f00 <osMessageGet+0xe4>)
 8013eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013eb0:	601a      	str	r2, [r3, #0]
 8013eb2:	f3bf 8f4f 	dsb	sy
 8013eb6:	f3bf 8f6f 	isb	sy
 8013eba:	e014      	b.n	8013ee6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8013ebc:	f107 0314 	add.w	r3, r7, #20
 8013ec0:	3304      	adds	r3, #4
 8013ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	68b8      	ldr	r0, [r7, #8]
 8013ec8:	f000 fca6 	bl	8014818 <xQueueReceive>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	2b01      	cmp	r3, #1
 8013ed0:	d102      	bne.n	8013ed8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8013ed2:	2310      	movs	r3, #16
 8013ed4:	617b      	str	r3, [r7, #20]
 8013ed6:	e006      	b.n	8013ee6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d101      	bne.n	8013ee2 <osMessageGet+0xc6>
 8013ede:	2300      	movs	r3, #0
 8013ee0:	e000      	b.n	8013ee4 <osMessageGet+0xc8>
 8013ee2:	2340      	movs	r3, #64	; 0x40
 8013ee4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	461c      	mov	r4, r3
 8013eea:	f107 0314 	add.w	r3, r7, #20
 8013eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8013ef6:	68f8      	ldr	r0, [r7, #12]
 8013ef8:	372c      	adds	r7, #44	; 0x2c
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd90      	pop	{r4, r7, pc}
 8013efe:	bf00      	nop
 8013f00:	e000ed04 	.word	0xe000ed04

08013f04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013f04:	b480      	push	{r7}
 8013f06:	b083      	sub	sp, #12
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f103 0208 	add.w	r2, r3, #8
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f04f 32ff 	mov.w	r2, #4294967295
 8013f1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f103 0208 	add.w	r2, r3, #8
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f103 0208 	add.w	r2, r3, #8
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2200      	movs	r2, #0
 8013f36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013f38:	bf00      	nop
 8013f3a:	370c      	adds	r7, #12
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr

08013f44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013f44:	b480      	push	{r7}
 8013f46:	b083      	sub	sp, #12
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2200      	movs	r2, #0
 8013f50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013f52:	bf00      	nop
 8013f54:	370c      	adds	r7, #12
 8013f56:	46bd      	mov	sp, r7
 8013f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5c:	4770      	bx	lr

08013f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013f5e:	b480      	push	{r7}
 8013f60:	b085      	sub	sp, #20
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
 8013f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	68fa      	ldr	r2, [r7, #12]
 8013f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	689a      	ldr	r2, [r3, #8]
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	689b      	ldr	r3, [r3, #8]
 8013f80:	683a      	ldr	r2, [r7, #0]
 8013f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	683a      	ldr	r2, [r7, #0]
 8013f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	1c5a      	adds	r2, r3, #1
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	601a      	str	r2, [r3, #0]
}
 8013f9a:	bf00      	nop
 8013f9c:	3714      	adds	r7, #20
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa4:	4770      	bx	lr

08013fa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013fa6:	b480      	push	{r7}
 8013fa8:	b085      	sub	sp, #20
 8013faa:	af00      	add	r7, sp, #0
 8013fac:	6078      	str	r0, [r7, #4]
 8013fae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fbc:	d103      	bne.n	8013fc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	691b      	ldr	r3, [r3, #16]
 8013fc2:	60fb      	str	r3, [r7, #12]
 8013fc4:	e00c      	b.n	8013fe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	3308      	adds	r3, #8
 8013fca:	60fb      	str	r3, [r7, #12]
 8013fcc:	e002      	b.n	8013fd4 <vListInsert+0x2e>
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	685b      	ldr	r3, [r3, #4]
 8013fd2:	60fb      	str	r3, [r7, #12]
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	68ba      	ldr	r2, [r7, #8]
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d2f6      	bcs.n	8013fce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	685a      	ldr	r2, [r3, #4]
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	683a      	ldr	r2, [r7, #0]
 8013fee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	68fa      	ldr	r2, [r7, #12]
 8013ff4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	683a      	ldr	r2, [r7, #0]
 8013ffa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	687a      	ldr	r2, [r7, #4]
 8014000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	1c5a      	adds	r2, r3, #1
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	601a      	str	r2, [r3, #0]
}
 801400c:	bf00      	nop
 801400e:	3714      	adds	r7, #20
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr

08014018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014018:	b480      	push	{r7}
 801401a:	b085      	sub	sp, #20
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	691b      	ldr	r3, [r3, #16]
 8014024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	685b      	ldr	r3, [r3, #4]
 801402a:	687a      	ldr	r2, [r7, #4]
 801402c:	6892      	ldr	r2, [r2, #8]
 801402e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	689b      	ldr	r3, [r3, #8]
 8014034:	687a      	ldr	r2, [r7, #4]
 8014036:	6852      	ldr	r2, [r2, #4]
 8014038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	429a      	cmp	r2, r3
 8014042:	d103      	bne.n	801404c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	689a      	ldr	r2, [r3, #8]
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2200      	movs	r2, #0
 8014050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	1e5a      	subs	r2, r3, #1
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	681b      	ldr	r3, [r3, #0]
}
 8014060:	4618      	mov	r0, r3
 8014062:	3714      	adds	r7, #20
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr

0801406c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d10c      	bne.n	801409a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014084:	b672      	cpsid	i
 8014086:	f383 8811 	msr	BASEPRI, r3
 801408a:	f3bf 8f6f 	isb	sy
 801408e:	f3bf 8f4f 	dsb	sy
 8014092:	b662      	cpsie	i
 8014094:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014096:	bf00      	nop
 8014098:	e7fe      	b.n	8014098 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801409a:	f002 faef 	bl	801667c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140a6:	68f9      	ldr	r1, [r7, #12]
 80140a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80140aa:	fb01 f303 	mul.w	r3, r1, r3
 80140ae:	441a      	add	r2, r3
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	2200      	movs	r2, #0
 80140b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	681a      	ldr	r2, [r3, #0]
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140ca:	3b01      	subs	r3, #1
 80140cc:	68f9      	ldr	r1, [r7, #12]
 80140ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80140d0:	fb01 f303 	mul.w	r3, r1, r3
 80140d4:	441a      	add	r2, r3
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	22ff      	movs	r2, #255	; 0xff
 80140de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	22ff      	movs	r2, #255	; 0xff
 80140e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d114      	bne.n	801411a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	691b      	ldr	r3, [r3, #16]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d01a      	beq.n	801412e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	3310      	adds	r3, #16
 80140fc:	4618      	mov	r0, r3
 80140fe:	f001 fdab 	bl	8015c58 <xTaskRemoveFromEventList>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d012      	beq.n	801412e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014108:	4b0c      	ldr	r3, [pc, #48]	; (801413c <xQueueGenericReset+0xd0>)
 801410a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801410e:	601a      	str	r2, [r3, #0]
 8014110:	f3bf 8f4f 	dsb	sy
 8014114:	f3bf 8f6f 	isb	sy
 8014118:	e009      	b.n	801412e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	3310      	adds	r3, #16
 801411e:	4618      	mov	r0, r3
 8014120:	f7ff fef0 	bl	8013f04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	3324      	adds	r3, #36	; 0x24
 8014128:	4618      	mov	r0, r3
 801412a:	f7ff feeb 	bl	8013f04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801412e:	f002 fad9 	bl	80166e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014132:	2301      	movs	r3, #1
}
 8014134:	4618      	mov	r0, r3
 8014136:	3710      	adds	r7, #16
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}
 801413c:	e000ed04 	.word	0xe000ed04

08014140 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014140:	b580      	push	{r7, lr}
 8014142:	b08e      	sub	sp, #56	; 0x38
 8014144:	af02      	add	r7, sp, #8
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
 801414c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d10c      	bne.n	801416e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8014154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014158:	b672      	cpsid	i
 801415a:	f383 8811 	msr	BASEPRI, r3
 801415e:	f3bf 8f6f 	isb	sy
 8014162:	f3bf 8f4f 	dsb	sy
 8014166:	b662      	cpsie	i
 8014168:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801416a:	bf00      	nop
 801416c:	e7fe      	b.n	801416c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d10c      	bne.n	801418e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8014174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014178:	b672      	cpsid	i
 801417a:	f383 8811 	msr	BASEPRI, r3
 801417e:	f3bf 8f6f 	isb	sy
 8014182:	f3bf 8f4f 	dsb	sy
 8014186:	b662      	cpsie	i
 8014188:	627b      	str	r3, [r7, #36]	; 0x24
}
 801418a:	bf00      	nop
 801418c:	e7fe      	b.n	801418c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d002      	beq.n	801419a <xQueueGenericCreateStatic+0x5a>
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d001      	beq.n	801419e <xQueueGenericCreateStatic+0x5e>
 801419a:	2301      	movs	r3, #1
 801419c:	e000      	b.n	80141a0 <xQueueGenericCreateStatic+0x60>
 801419e:	2300      	movs	r3, #0
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d10c      	bne.n	80141be <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80141a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a8:	b672      	cpsid	i
 80141aa:	f383 8811 	msr	BASEPRI, r3
 80141ae:	f3bf 8f6f 	isb	sy
 80141b2:	f3bf 8f4f 	dsb	sy
 80141b6:	b662      	cpsie	i
 80141b8:	623b      	str	r3, [r7, #32]
}
 80141ba:	bf00      	nop
 80141bc:	e7fe      	b.n	80141bc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d102      	bne.n	80141ca <xQueueGenericCreateStatic+0x8a>
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d101      	bne.n	80141ce <xQueueGenericCreateStatic+0x8e>
 80141ca:	2301      	movs	r3, #1
 80141cc:	e000      	b.n	80141d0 <xQueueGenericCreateStatic+0x90>
 80141ce:	2300      	movs	r3, #0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d10c      	bne.n	80141ee <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80141d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141d8:	b672      	cpsid	i
 80141da:	f383 8811 	msr	BASEPRI, r3
 80141de:	f3bf 8f6f 	isb	sy
 80141e2:	f3bf 8f4f 	dsb	sy
 80141e6:	b662      	cpsie	i
 80141e8:	61fb      	str	r3, [r7, #28]
}
 80141ea:	bf00      	nop
 80141ec:	e7fe      	b.n	80141ec <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80141ee:	2348      	movs	r3, #72	; 0x48
 80141f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	2b48      	cmp	r3, #72	; 0x48
 80141f6:	d00c      	beq.n	8014212 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80141f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fc:	b672      	cpsid	i
 80141fe:	f383 8811 	msr	BASEPRI, r3
 8014202:	f3bf 8f6f 	isb	sy
 8014206:	f3bf 8f4f 	dsb	sy
 801420a:	b662      	cpsie	i
 801420c:	61bb      	str	r3, [r7, #24]
}
 801420e:	bf00      	nop
 8014210:	e7fe      	b.n	8014210 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014212:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014214:	683b      	ldr	r3, [r7, #0]
 8014216:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801421a:	2b00      	cmp	r3, #0
 801421c:	d00d      	beq.n	801423a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014220:	2201      	movs	r2, #1
 8014222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014226:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801422c:	9300      	str	r3, [sp, #0]
 801422e:	4613      	mov	r3, r2
 8014230:	687a      	ldr	r2, [r7, #4]
 8014232:	68b9      	ldr	r1, [r7, #8]
 8014234:	68f8      	ldr	r0, [r7, #12]
 8014236:	f000 f847 	bl	80142c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801423c:	4618      	mov	r0, r3
 801423e:	3730      	adds	r7, #48	; 0x30
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}

08014244 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014244:	b580      	push	{r7, lr}
 8014246:	b08a      	sub	sp, #40	; 0x28
 8014248:	af02      	add	r7, sp, #8
 801424a:	60f8      	str	r0, [r7, #12]
 801424c:	60b9      	str	r1, [r7, #8]
 801424e:	4613      	mov	r3, r2
 8014250:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d10c      	bne.n	8014272 <xQueueGenericCreate+0x2e>
	__asm volatile
 8014258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801425c:	b672      	cpsid	i
 801425e:	f383 8811 	msr	BASEPRI, r3
 8014262:	f3bf 8f6f 	isb	sy
 8014266:	f3bf 8f4f 	dsb	sy
 801426a:	b662      	cpsie	i
 801426c:	613b      	str	r3, [r7, #16]
}
 801426e:	bf00      	nop
 8014270:	e7fe      	b.n	8014270 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d102      	bne.n	801427e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014278:	2300      	movs	r3, #0
 801427a:	61fb      	str	r3, [r7, #28]
 801427c:	e004      	b.n	8014288 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	68ba      	ldr	r2, [r7, #8]
 8014282:	fb02 f303 	mul.w	r3, r2, r3
 8014286:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014288:	69fb      	ldr	r3, [r7, #28]
 801428a:	3348      	adds	r3, #72	; 0x48
 801428c:	4618      	mov	r0, r3
 801428e:	f002 fb21 	bl	80168d4 <pvPortMalloc>
 8014292:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014294:	69bb      	ldr	r3, [r7, #24]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d011      	beq.n	80142be <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801429a:	69bb      	ldr	r3, [r7, #24]
 801429c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	3348      	adds	r3, #72	; 0x48
 80142a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80142a4:	69bb      	ldr	r3, [r7, #24]
 80142a6:	2200      	movs	r2, #0
 80142a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80142ac:	79fa      	ldrb	r2, [r7, #7]
 80142ae:	69bb      	ldr	r3, [r7, #24]
 80142b0:	9300      	str	r3, [sp, #0]
 80142b2:	4613      	mov	r3, r2
 80142b4:	697a      	ldr	r2, [r7, #20]
 80142b6:	68b9      	ldr	r1, [r7, #8]
 80142b8:	68f8      	ldr	r0, [r7, #12]
 80142ba:	f000 f805 	bl	80142c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80142be:	69bb      	ldr	r3, [r7, #24]
	}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3720      	adds	r7, #32
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	607a      	str	r2, [r7, #4]
 80142d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d103      	bne.n	80142e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	69ba      	ldr	r2, [r7, #24]
 80142e0:	601a      	str	r2, [r3, #0]
 80142e2:	e002      	b.n	80142ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80142ea:	69bb      	ldr	r3, [r7, #24]
 80142ec:	68fa      	ldr	r2, [r7, #12]
 80142ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80142f0:	69bb      	ldr	r3, [r7, #24]
 80142f2:	68ba      	ldr	r2, [r7, #8]
 80142f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80142f6:	2101      	movs	r1, #1
 80142f8:	69b8      	ldr	r0, [r7, #24]
 80142fa:	f7ff feb7 	bl	801406c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80142fe:	bf00      	nop
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}

08014306 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8014306:	b580      	push	{r7, lr}
 8014308:	b082      	sub	sp, #8
 801430a:	af00      	add	r7, sp, #0
 801430c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d00e      	beq.n	8014332 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2200      	movs	r2, #0
 8014318:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2200      	movs	r2, #0
 801431e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2200      	movs	r2, #0
 8014324:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014326:	2300      	movs	r3, #0
 8014328:	2200      	movs	r2, #0
 801432a:	2100      	movs	r1, #0
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f000 f837 	bl	80143a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8014332:	bf00      	nop
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}

0801433a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801433a:	b580      	push	{r7, lr}
 801433c:	b086      	sub	sp, #24
 801433e:	af00      	add	r7, sp, #0
 8014340:	4603      	mov	r3, r0
 8014342:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014344:	2301      	movs	r3, #1
 8014346:	617b      	str	r3, [r7, #20]
 8014348:	2300      	movs	r3, #0
 801434a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801434c:	79fb      	ldrb	r3, [r7, #7]
 801434e:	461a      	mov	r2, r3
 8014350:	6939      	ldr	r1, [r7, #16]
 8014352:	6978      	ldr	r0, [r7, #20]
 8014354:	f7ff ff76 	bl	8014244 <xQueueGenericCreate>
 8014358:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801435a:	68f8      	ldr	r0, [r7, #12]
 801435c:	f7ff ffd3 	bl	8014306 <prvInitialiseMutex>

		return xNewQueue;
 8014360:	68fb      	ldr	r3, [r7, #12]
	}
 8014362:	4618      	mov	r0, r3
 8014364:	3718      	adds	r7, #24
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}

0801436a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801436a:	b580      	push	{r7, lr}
 801436c:	b088      	sub	sp, #32
 801436e:	af02      	add	r7, sp, #8
 8014370:	4603      	mov	r3, r0
 8014372:	6039      	str	r1, [r7, #0]
 8014374:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014376:	2301      	movs	r3, #1
 8014378:	617b      	str	r3, [r7, #20]
 801437a:	2300      	movs	r3, #0
 801437c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801437e:	79fb      	ldrb	r3, [r7, #7]
 8014380:	9300      	str	r3, [sp, #0]
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	2200      	movs	r2, #0
 8014386:	6939      	ldr	r1, [r7, #16]
 8014388:	6978      	ldr	r0, [r7, #20]
 801438a:	f7ff fed9 	bl	8014140 <xQueueGenericCreateStatic>
 801438e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014390:	68f8      	ldr	r0, [r7, #12]
 8014392:	f7ff ffb8 	bl	8014306 <prvInitialiseMutex>

		return xNewQueue;
 8014396:	68fb      	ldr	r3, [r7, #12]
	}
 8014398:	4618      	mov	r0, r3
 801439a:	3718      	adds	r7, #24
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}

080143a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b08e      	sub	sp, #56	; 0x38
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	60f8      	str	r0, [r7, #12]
 80143a8:	60b9      	str	r1, [r7, #8]
 80143aa:	607a      	str	r2, [r7, #4]
 80143ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80143ae:	2300      	movs	r3, #0
 80143b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80143b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d10c      	bne.n	80143d6 <xQueueGenericSend+0x36>
	__asm volatile
 80143bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c0:	b672      	cpsid	i
 80143c2:	f383 8811 	msr	BASEPRI, r3
 80143c6:	f3bf 8f6f 	isb	sy
 80143ca:	f3bf 8f4f 	dsb	sy
 80143ce:	b662      	cpsie	i
 80143d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80143d2:	bf00      	nop
 80143d4:	e7fe      	b.n	80143d4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d103      	bne.n	80143e4 <xQueueGenericSend+0x44>
 80143dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d101      	bne.n	80143e8 <xQueueGenericSend+0x48>
 80143e4:	2301      	movs	r3, #1
 80143e6:	e000      	b.n	80143ea <xQueueGenericSend+0x4a>
 80143e8:	2300      	movs	r3, #0
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d10c      	bne.n	8014408 <xQueueGenericSend+0x68>
	__asm volatile
 80143ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f2:	b672      	cpsid	i
 80143f4:	f383 8811 	msr	BASEPRI, r3
 80143f8:	f3bf 8f6f 	isb	sy
 80143fc:	f3bf 8f4f 	dsb	sy
 8014400:	b662      	cpsie	i
 8014402:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014404:	bf00      	nop
 8014406:	e7fe      	b.n	8014406 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	2b02      	cmp	r3, #2
 801440c:	d103      	bne.n	8014416 <xQueueGenericSend+0x76>
 801440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014412:	2b01      	cmp	r3, #1
 8014414:	d101      	bne.n	801441a <xQueueGenericSend+0x7a>
 8014416:	2301      	movs	r3, #1
 8014418:	e000      	b.n	801441c <xQueueGenericSend+0x7c>
 801441a:	2300      	movs	r3, #0
 801441c:	2b00      	cmp	r3, #0
 801441e:	d10c      	bne.n	801443a <xQueueGenericSend+0x9a>
	__asm volatile
 8014420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014424:	b672      	cpsid	i
 8014426:	f383 8811 	msr	BASEPRI, r3
 801442a:	f3bf 8f6f 	isb	sy
 801442e:	f3bf 8f4f 	dsb	sy
 8014432:	b662      	cpsie	i
 8014434:	623b      	str	r3, [r7, #32]
}
 8014436:	bf00      	nop
 8014438:	e7fe      	b.n	8014438 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801443a:	f001 fdd1 	bl	8015fe0 <xTaskGetSchedulerState>
 801443e:	4603      	mov	r3, r0
 8014440:	2b00      	cmp	r3, #0
 8014442:	d102      	bne.n	801444a <xQueueGenericSend+0xaa>
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d101      	bne.n	801444e <xQueueGenericSend+0xae>
 801444a:	2301      	movs	r3, #1
 801444c:	e000      	b.n	8014450 <xQueueGenericSend+0xb0>
 801444e:	2300      	movs	r3, #0
 8014450:	2b00      	cmp	r3, #0
 8014452:	d10c      	bne.n	801446e <xQueueGenericSend+0xce>
	__asm volatile
 8014454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014458:	b672      	cpsid	i
 801445a:	f383 8811 	msr	BASEPRI, r3
 801445e:	f3bf 8f6f 	isb	sy
 8014462:	f3bf 8f4f 	dsb	sy
 8014466:	b662      	cpsie	i
 8014468:	61fb      	str	r3, [r7, #28]
}
 801446a:	bf00      	nop
 801446c:	e7fe      	b.n	801446c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801446e:	f002 f905 	bl	801667c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801447a:	429a      	cmp	r2, r3
 801447c:	d302      	bcc.n	8014484 <xQueueGenericSend+0xe4>
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	2b02      	cmp	r3, #2
 8014482:	d129      	bne.n	80144d8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014484:	683a      	ldr	r2, [r7, #0]
 8014486:	68b9      	ldr	r1, [r7, #8]
 8014488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801448a:	f000 fc82 	bl	8014d92 <prvCopyDataToQueue>
 801448e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014494:	2b00      	cmp	r3, #0
 8014496:	d010      	beq.n	80144ba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801449a:	3324      	adds	r3, #36	; 0x24
 801449c:	4618      	mov	r0, r3
 801449e:	f001 fbdb 	bl	8015c58 <xTaskRemoveFromEventList>
 80144a2:	4603      	mov	r3, r0
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d013      	beq.n	80144d0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80144a8:	4b3f      	ldr	r3, [pc, #252]	; (80145a8 <xQueueGenericSend+0x208>)
 80144aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144ae:	601a      	str	r2, [r3, #0]
 80144b0:	f3bf 8f4f 	dsb	sy
 80144b4:	f3bf 8f6f 	isb	sy
 80144b8:	e00a      	b.n	80144d0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80144ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d007      	beq.n	80144d0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80144c0:	4b39      	ldr	r3, [pc, #228]	; (80145a8 <xQueueGenericSend+0x208>)
 80144c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144c6:	601a      	str	r2, [r3, #0]
 80144c8:	f3bf 8f4f 	dsb	sy
 80144cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80144d0:	f002 f908 	bl	80166e4 <vPortExitCritical>
				return pdPASS;
 80144d4:	2301      	movs	r3, #1
 80144d6:	e063      	b.n	80145a0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d103      	bne.n	80144e6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80144de:	f002 f901 	bl	80166e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80144e2:	2300      	movs	r3, #0
 80144e4:	e05c      	b.n	80145a0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80144e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d106      	bne.n	80144fa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80144ec:	f107 0314 	add.w	r3, r7, #20
 80144f0:	4618      	mov	r0, r3
 80144f2:	f001 fc15 	bl	8015d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80144f6:	2301      	movs	r3, #1
 80144f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80144fa:	f002 f8f3 	bl	80166e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80144fe:	f001 f97b 	bl	80157f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014502:	f002 f8bb 	bl	801667c <vPortEnterCritical>
 8014506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801450c:	b25b      	sxtb	r3, r3
 801450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014512:	d103      	bne.n	801451c <xQueueGenericSend+0x17c>
 8014514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014516:	2200      	movs	r2, #0
 8014518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014522:	b25b      	sxtb	r3, r3
 8014524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014528:	d103      	bne.n	8014532 <xQueueGenericSend+0x192>
 801452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801452c:	2200      	movs	r2, #0
 801452e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014532:	f002 f8d7 	bl	80166e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014536:	1d3a      	adds	r2, r7, #4
 8014538:	f107 0314 	add.w	r3, r7, #20
 801453c:	4611      	mov	r1, r2
 801453e:	4618      	mov	r0, r3
 8014540:	f001 fc04 	bl	8015d4c <xTaskCheckForTimeOut>
 8014544:	4603      	mov	r3, r0
 8014546:	2b00      	cmp	r3, #0
 8014548:	d124      	bne.n	8014594 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801454a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801454c:	f000 fd19 	bl	8014f82 <prvIsQueueFull>
 8014550:	4603      	mov	r3, r0
 8014552:	2b00      	cmp	r3, #0
 8014554:	d018      	beq.n	8014588 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014558:	3310      	adds	r3, #16
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	4611      	mov	r1, r2
 801455e:	4618      	mov	r0, r3
 8014560:	f001 fb54 	bl	8015c0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014566:	f000 fca4 	bl	8014eb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801456a:	f001 f953 	bl	8015814 <xTaskResumeAll>
 801456e:	4603      	mov	r3, r0
 8014570:	2b00      	cmp	r3, #0
 8014572:	f47f af7c 	bne.w	801446e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8014576:	4b0c      	ldr	r3, [pc, #48]	; (80145a8 <xQueueGenericSend+0x208>)
 8014578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801457c:	601a      	str	r2, [r3, #0]
 801457e:	f3bf 8f4f 	dsb	sy
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	e772      	b.n	801446e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801458a:	f000 fc92 	bl	8014eb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801458e:	f001 f941 	bl	8015814 <xTaskResumeAll>
 8014592:	e76c      	b.n	801446e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014596:	f000 fc8c 	bl	8014eb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801459a:	f001 f93b 	bl	8015814 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801459e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3738      	adds	r7, #56	; 0x38
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	e000ed04 	.word	0xe000ed04

080145ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b08e      	sub	sp, #56	; 0x38
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	60f8      	str	r0, [r7, #12]
 80145b4:	60b9      	str	r1, [r7, #8]
 80145b6:	607a      	str	r2, [r7, #4]
 80145b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80145be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d10c      	bne.n	80145de <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80145c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c8:	b672      	cpsid	i
 80145ca:	f383 8811 	msr	BASEPRI, r3
 80145ce:	f3bf 8f6f 	isb	sy
 80145d2:	f3bf 8f4f 	dsb	sy
 80145d6:	b662      	cpsie	i
 80145d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80145da:	bf00      	nop
 80145dc:	e7fe      	b.n	80145dc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d103      	bne.n	80145ec <xQueueGenericSendFromISR+0x40>
 80145e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d101      	bne.n	80145f0 <xQueueGenericSendFromISR+0x44>
 80145ec:	2301      	movs	r3, #1
 80145ee:	e000      	b.n	80145f2 <xQueueGenericSendFromISR+0x46>
 80145f0:	2300      	movs	r3, #0
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d10c      	bne.n	8014610 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80145f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145fa:	b672      	cpsid	i
 80145fc:	f383 8811 	msr	BASEPRI, r3
 8014600:	f3bf 8f6f 	isb	sy
 8014604:	f3bf 8f4f 	dsb	sy
 8014608:	b662      	cpsie	i
 801460a:	623b      	str	r3, [r7, #32]
}
 801460c:	bf00      	nop
 801460e:	e7fe      	b.n	801460e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	2b02      	cmp	r3, #2
 8014614:	d103      	bne.n	801461e <xQueueGenericSendFromISR+0x72>
 8014616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801461a:	2b01      	cmp	r3, #1
 801461c:	d101      	bne.n	8014622 <xQueueGenericSendFromISR+0x76>
 801461e:	2301      	movs	r3, #1
 8014620:	e000      	b.n	8014624 <xQueueGenericSendFromISR+0x78>
 8014622:	2300      	movs	r3, #0
 8014624:	2b00      	cmp	r3, #0
 8014626:	d10c      	bne.n	8014642 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8014628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801462c:	b672      	cpsid	i
 801462e:	f383 8811 	msr	BASEPRI, r3
 8014632:	f3bf 8f6f 	isb	sy
 8014636:	f3bf 8f4f 	dsb	sy
 801463a:	b662      	cpsie	i
 801463c:	61fb      	str	r3, [r7, #28]
}
 801463e:	bf00      	nop
 8014640:	e7fe      	b.n	8014640 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014642:	f002 f903 	bl	801684c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014646:	f3ef 8211 	mrs	r2, BASEPRI
 801464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801464e:	b672      	cpsid	i
 8014650:	f383 8811 	msr	BASEPRI, r3
 8014654:	f3bf 8f6f 	isb	sy
 8014658:	f3bf 8f4f 	dsb	sy
 801465c:	b662      	cpsie	i
 801465e:	61ba      	str	r2, [r7, #24]
 8014660:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014662:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014664:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801466e:	429a      	cmp	r2, r3
 8014670:	d302      	bcc.n	8014678 <xQueueGenericSendFromISR+0xcc>
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	2b02      	cmp	r3, #2
 8014676:	d12c      	bne.n	80146d2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801467e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014682:	683a      	ldr	r2, [r7, #0]
 8014684:	68b9      	ldr	r1, [r7, #8]
 8014686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014688:	f000 fb83 	bl	8014d92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801468c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014694:	d112      	bne.n	80146bc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801469a:	2b00      	cmp	r3, #0
 801469c:	d016      	beq.n	80146cc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a0:	3324      	adds	r3, #36	; 0x24
 80146a2:	4618      	mov	r0, r3
 80146a4:	f001 fad8 	bl	8015c58 <xTaskRemoveFromEventList>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d00e      	beq.n	80146cc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d00b      	beq.n	80146cc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2201      	movs	r2, #1
 80146b8:	601a      	str	r2, [r3, #0]
 80146ba:	e007      	b.n	80146cc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80146bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80146c0:	3301      	adds	r3, #1
 80146c2:	b2db      	uxtb	r3, r3
 80146c4:	b25a      	sxtb	r2, r3
 80146c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80146cc:	2301      	movs	r3, #1
 80146ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80146d0:	e001      	b.n	80146d6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80146d2:	2300      	movs	r3, #0
 80146d4:	637b      	str	r3, [r7, #52]	; 0x34
 80146d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80146e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80146e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3738      	adds	r7, #56	; 0x38
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}

080146ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b08e      	sub	sp, #56	; 0x38
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
 80146f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80146fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d10c      	bne.n	801471a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8014700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014704:	b672      	cpsid	i
 8014706:	f383 8811 	msr	BASEPRI, r3
 801470a:	f3bf 8f6f 	isb	sy
 801470e:	f3bf 8f4f 	dsb	sy
 8014712:	b662      	cpsie	i
 8014714:	623b      	str	r3, [r7, #32]
}
 8014716:	bf00      	nop
 8014718:	e7fe      	b.n	8014718 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801471e:	2b00      	cmp	r3, #0
 8014720:	d00c      	beq.n	801473c <xQueueGiveFromISR+0x50>
	__asm volatile
 8014722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014726:	b672      	cpsid	i
 8014728:	f383 8811 	msr	BASEPRI, r3
 801472c:	f3bf 8f6f 	isb	sy
 8014730:	f3bf 8f4f 	dsb	sy
 8014734:	b662      	cpsie	i
 8014736:	61fb      	str	r3, [r7, #28]
}
 8014738:	bf00      	nop
 801473a:	e7fe      	b.n	801473a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d103      	bne.n	801474c <xQueueGiveFromISR+0x60>
 8014744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014746:	689b      	ldr	r3, [r3, #8]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d101      	bne.n	8014750 <xQueueGiveFromISR+0x64>
 801474c:	2301      	movs	r3, #1
 801474e:	e000      	b.n	8014752 <xQueueGiveFromISR+0x66>
 8014750:	2300      	movs	r3, #0
 8014752:	2b00      	cmp	r3, #0
 8014754:	d10c      	bne.n	8014770 <xQueueGiveFromISR+0x84>
	__asm volatile
 8014756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801475a:	b672      	cpsid	i
 801475c:	f383 8811 	msr	BASEPRI, r3
 8014760:	f3bf 8f6f 	isb	sy
 8014764:	f3bf 8f4f 	dsb	sy
 8014768:	b662      	cpsie	i
 801476a:	61bb      	str	r3, [r7, #24]
}
 801476c:	bf00      	nop
 801476e:	e7fe      	b.n	801476e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014770:	f002 f86c 	bl	801684c <vPortValidateInterruptPriority>
	__asm volatile
 8014774:	f3ef 8211 	mrs	r2, BASEPRI
 8014778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801477c:	b672      	cpsid	i
 801477e:	f383 8811 	msr	BASEPRI, r3
 8014782:	f3bf 8f6f 	isb	sy
 8014786:	f3bf 8f4f 	dsb	sy
 801478a:	b662      	cpsie	i
 801478c:	617a      	str	r2, [r7, #20]
 801478e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014790:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014792:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014798:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801479e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d22b      	bcs.n	80147fc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80147a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80147aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147b0:	1c5a      	adds	r2, r3, #1
 80147b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80147b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80147ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147be:	d112      	bne.n	80147e6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80147c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d016      	beq.n	80147f6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80147c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ca:	3324      	adds	r3, #36	; 0x24
 80147cc:	4618      	mov	r0, r3
 80147ce:	f001 fa43 	bl	8015c58 <xTaskRemoveFromEventList>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d00e      	beq.n	80147f6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d00b      	beq.n	80147f6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	2201      	movs	r2, #1
 80147e2:	601a      	str	r2, [r3, #0]
 80147e4:	e007      	b.n	80147f6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80147e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147ea:	3301      	adds	r3, #1
 80147ec:	b2db      	uxtb	r3, r3
 80147ee:	b25a      	sxtb	r2, r3
 80147f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80147f6:	2301      	movs	r3, #1
 80147f8:	637b      	str	r3, [r7, #52]	; 0x34
 80147fa:	e001      	b.n	8014800 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80147fc:	2300      	movs	r3, #0
 80147fe:	637b      	str	r3, [r7, #52]	; 0x34
 8014800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014802:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	f383 8811 	msr	BASEPRI, r3
}
 801480a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801480c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801480e:	4618      	mov	r0, r3
 8014810:	3738      	adds	r7, #56	; 0x38
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}
	...

08014818 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b08c      	sub	sp, #48	; 0x30
 801481c:	af00      	add	r7, sp, #0
 801481e:	60f8      	str	r0, [r7, #12]
 8014820:	60b9      	str	r1, [r7, #8]
 8014822:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014824:	2300      	movs	r3, #0
 8014826:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801482e:	2b00      	cmp	r3, #0
 8014830:	d10c      	bne.n	801484c <xQueueReceive+0x34>
	__asm volatile
 8014832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014836:	b672      	cpsid	i
 8014838:	f383 8811 	msr	BASEPRI, r3
 801483c:	f3bf 8f6f 	isb	sy
 8014840:	f3bf 8f4f 	dsb	sy
 8014844:	b662      	cpsie	i
 8014846:	623b      	str	r3, [r7, #32]
}
 8014848:	bf00      	nop
 801484a:	e7fe      	b.n	801484a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d103      	bne.n	801485a <xQueueReceive+0x42>
 8014852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014856:	2b00      	cmp	r3, #0
 8014858:	d101      	bne.n	801485e <xQueueReceive+0x46>
 801485a:	2301      	movs	r3, #1
 801485c:	e000      	b.n	8014860 <xQueueReceive+0x48>
 801485e:	2300      	movs	r3, #0
 8014860:	2b00      	cmp	r3, #0
 8014862:	d10c      	bne.n	801487e <xQueueReceive+0x66>
	__asm volatile
 8014864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014868:	b672      	cpsid	i
 801486a:	f383 8811 	msr	BASEPRI, r3
 801486e:	f3bf 8f6f 	isb	sy
 8014872:	f3bf 8f4f 	dsb	sy
 8014876:	b662      	cpsie	i
 8014878:	61fb      	str	r3, [r7, #28]
}
 801487a:	bf00      	nop
 801487c:	e7fe      	b.n	801487c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801487e:	f001 fbaf 	bl	8015fe0 <xTaskGetSchedulerState>
 8014882:	4603      	mov	r3, r0
 8014884:	2b00      	cmp	r3, #0
 8014886:	d102      	bne.n	801488e <xQueueReceive+0x76>
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d101      	bne.n	8014892 <xQueueReceive+0x7a>
 801488e:	2301      	movs	r3, #1
 8014890:	e000      	b.n	8014894 <xQueueReceive+0x7c>
 8014892:	2300      	movs	r3, #0
 8014894:	2b00      	cmp	r3, #0
 8014896:	d10c      	bne.n	80148b2 <xQueueReceive+0x9a>
	__asm volatile
 8014898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801489c:	b672      	cpsid	i
 801489e:	f383 8811 	msr	BASEPRI, r3
 80148a2:	f3bf 8f6f 	isb	sy
 80148a6:	f3bf 8f4f 	dsb	sy
 80148aa:	b662      	cpsie	i
 80148ac:	61bb      	str	r3, [r7, #24]
}
 80148ae:	bf00      	nop
 80148b0:	e7fe      	b.n	80148b0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80148b2:	f001 fee3 	bl	801667c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80148b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80148bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d01f      	beq.n	8014902 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80148c2:	68b9      	ldr	r1, [r7, #8]
 80148c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148c6:	f000 face 	bl	8014e66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80148ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148cc:	1e5a      	subs	r2, r3, #1
 80148ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80148d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d4:	691b      	ldr	r3, [r3, #16]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d00f      	beq.n	80148fa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80148da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148dc:	3310      	adds	r3, #16
 80148de:	4618      	mov	r0, r3
 80148e0:	f001 f9ba 	bl	8015c58 <xTaskRemoveFromEventList>
 80148e4:	4603      	mov	r3, r0
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d007      	beq.n	80148fa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80148ea:	4b3d      	ldr	r3, [pc, #244]	; (80149e0 <xQueueReceive+0x1c8>)
 80148ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148f0:	601a      	str	r2, [r3, #0]
 80148f2:	f3bf 8f4f 	dsb	sy
 80148f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80148fa:	f001 fef3 	bl	80166e4 <vPortExitCritical>
				return pdPASS;
 80148fe:	2301      	movs	r3, #1
 8014900:	e069      	b.n	80149d6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d103      	bne.n	8014910 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014908:	f001 feec 	bl	80166e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801490c:	2300      	movs	r3, #0
 801490e:	e062      	b.n	80149d6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014912:	2b00      	cmp	r3, #0
 8014914:	d106      	bne.n	8014924 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014916:	f107 0310 	add.w	r3, r7, #16
 801491a:	4618      	mov	r0, r3
 801491c:	f001 fa00 	bl	8015d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014920:	2301      	movs	r3, #1
 8014922:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014924:	f001 fede 	bl	80166e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014928:	f000 ff66 	bl	80157f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801492c:	f001 fea6 	bl	801667c <vPortEnterCritical>
 8014930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014936:	b25b      	sxtb	r3, r3
 8014938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801493c:	d103      	bne.n	8014946 <xQueueReceive+0x12e>
 801493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014940:	2200      	movs	r2, #0
 8014942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801494c:	b25b      	sxtb	r3, r3
 801494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014952:	d103      	bne.n	801495c <xQueueReceive+0x144>
 8014954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014956:	2200      	movs	r2, #0
 8014958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801495c:	f001 fec2 	bl	80166e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014960:	1d3a      	adds	r2, r7, #4
 8014962:	f107 0310 	add.w	r3, r7, #16
 8014966:	4611      	mov	r1, r2
 8014968:	4618      	mov	r0, r3
 801496a:	f001 f9ef 	bl	8015d4c <xTaskCheckForTimeOut>
 801496e:	4603      	mov	r3, r0
 8014970:	2b00      	cmp	r3, #0
 8014972:	d123      	bne.n	80149bc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014976:	f000 faee 	bl	8014f56 <prvIsQueueEmpty>
 801497a:	4603      	mov	r3, r0
 801497c:	2b00      	cmp	r3, #0
 801497e:	d017      	beq.n	80149b0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014982:	3324      	adds	r3, #36	; 0x24
 8014984:	687a      	ldr	r2, [r7, #4]
 8014986:	4611      	mov	r1, r2
 8014988:	4618      	mov	r0, r3
 801498a:	f001 f93f 	bl	8015c0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801498e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014990:	f000 fa8f 	bl	8014eb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014994:	f000 ff3e 	bl	8015814 <xTaskResumeAll>
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d189      	bne.n	80148b2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801499e:	4b10      	ldr	r3, [pc, #64]	; (80149e0 <xQueueReceive+0x1c8>)
 80149a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149a4:	601a      	str	r2, [r3, #0]
 80149a6:	f3bf 8f4f 	dsb	sy
 80149aa:	f3bf 8f6f 	isb	sy
 80149ae:	e780      	b.n	80148b2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80149b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149b2:	f000 fa7e 	bl	8014eb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80149b6:	f000 ff2d 	bl	8015814 <xTaskResumeAll>
 80149ba:	e77a      	b.n	80148b2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80149bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149be:	f000 fa78 	bl	8014eb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80149c2:	f000 ff27 	bl	8015814 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80149c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149c8:	f000 fac5 	bl	8014f56 <prvIsQueueEmpty>
 80149cc:	4603      	mov	r3, r0
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	f43f af6f 	beq.w	80148b2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80149d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3730      	adds	r7, #48	; 0x30
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	e000ed04 	.word	0xe000ed04

080149e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b08e      	sub	sp, #56	; 0x38
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80149ee:	2300      	movs	r3, #0
 80149f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80149f6:	2300      	movs	r3, #0
 80149f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80149fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d10c      	bne.n	8014a1a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8014a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a04:	b672      	cpsid	i
 8014a06:	f383 8811 	msr	BASEPRI, r3
 8014a0a:	f3bf 8f6f 	isb	sy
 8014a0e:	f3bf 8f4f 	dsb	sy
 8014a12:	b662      	cpsie	i
 8014a14:	623b      	str	r3, [r7, #32]
}
 8014a16:	bf00      	nop
 8014a18:	e7fe      	b.n	8014a18 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d00c      	beq.n	8014a3c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8014a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a26:	b672      	cpsid	i
 8014a28:	f383 8811 	msr	BASEPRI, r3
 8014a2c:	f3bf 8f6f 	isb	sy
 8014a30:	f3bf 8f4f 	dsb	sy
 8014a34:	b662      	cpsie	i
 8014a36:	61fb      	str	r3, [r7, #28]
}
 8014a38:	bf00      	nop
 8014a3a:	e7fe      	b.n	8014a3a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014a3c:	f001 fad0 	bl	8015fe0 <xTaskGetSchedulerState>
 8014a40:	4603      	mov	r3, r0
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d102      	bne.n	8014a4c <xQueueSemaphoreTake+0x68>
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d101      	bne.n	8014a50 <xQueueSemaphoreTake+0x6c>
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	e000      	b.n	8014a52 <xQueueSemaphoreTake+0x6e>
 8014a50:	2300      	movs	r3, #0
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d10c      	bne.n	8014a70 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8014a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a5a:	b672      	cpsid	i
 8014a5c:	f383 8811 	msr	BASEPRI, r3
 8014a60:	f3bf 8f6f 	isb	sy
 8014a64:	f3bf 8f4f 	dsb	sy
 8014a68:	b662      	cpsie	i
 8014a6a:	61bb      	str	r3, [r7, #24]
}
 8014a6c:	bf00      	nop
 8014a6e:	e7fe      	b.n	8014a6e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014a70:	f001 fe04 	bl	801667c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d024      	beq.n	8014aca <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a82:	1e5a      	subs	r2, r3, #1
 8014a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d104      	bne.n	8014a9a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014a90:	f001 fc6c 	bl	801636c <pvTaskIncrementMutexHeldCount>
 8014a94:	4602      	mov	r2, r0
 8014a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a9c:	691b      	ldr	r3, [r3, #16]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d00f      	beq.n	8014ac2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa4:	3310      	adds	r3, #16
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f001 f8d6 	bl	8015c58 <xTaskRemoveFromEventList>
 8014aac:	4603      	mov	r3, r0
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d007      	beq.n	8014ac2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014ab2:	4b55      	ldr	r3, [pc, #340]	; (8014c08 <xQueueSemaphoreTake+0x224>)
 8014ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ab8:	601a      	str	r2, [r3, #0]
 8014aba:	f3bf 8f4f 	dsb	sy
 8014abe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014ac2:	f001 fe0f 	bl	80166e4 <vPortExitCritical>
				return pdPASS;
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	e099      	b.n	8014bfe <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d113      	bne.n	8014af8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d00c      	beq.n	8014af0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8014ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ada:	b672      	cpsid	i
 8014adc:	f383 8811 	msr	BASEPRI, r3
 8014ae0:	f3bf 8f6f 	isb	sy
 8014ae4:	f3bf 8f4f 	dsb	sy
 8014ae8:	b662      	cpsie	i
 8014aea:	617b      	str	r3, [r7, #20]
}
 8014aec:	bf00      	nop
 8014aee:	e7fe      	b.n	8014aee <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014af0:	f001 fdf8 	bl	80166e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014af4:	2300      	movs	r3, #0
 8014af6:	e082      	b.n	8014bfe <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d106      	bne.n	8014b0c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014afe:	f107 030c 	add.w	r3, r7, #12
 8014b02:	4618      	mov	r0, r3
 8014b04:	f001 f90c 	bl	8015d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014b08:	2301      	movs	r3, #1
 8014b0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014b0c:	f001 fdea 	bl	80166e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014b10:	f000 fe72 	bl	80157f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014b14:	f001 fdb2 	bl	801667c <vPortEnterCritical>
 8014b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014b1e:	b25b      	sxtb	r3, r3
 8014b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b24:	d103      	bne.n	8014b2e <xQueueSemaphoreTake+0x14a>
 8014b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b28:	2200      	movs	r2, #0
 8014b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014b34:	b25b      	sxtb	r3, r3
 8014b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b3a:	d103      	bne.n	8014b44 <xQueueSemaphoreTake+0x160>
 8014b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b3e:	2200      	movs	r2, #0
 8014b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014b44:	f001 fdce 	bl	80166e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014b48:	463a      	mov	r2, r7
 8014b4a:	f107 030c 	add.w	r3, r7, #12
 8014b4e:	4611      	mov	r1, r2
 8014b50:	4618      	mov	r0, r3
 8014b52:	f001 f8fb 	bl	8015d4c <xTaskCheckForTimeOut>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d132      	bne.n	8014bc2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b5e:	f000 f9fa 	bl	8014f56 <prvIsQueueEmpty>
 8014b62:	4603      	mov	r3, r0
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d026      	beq.n	8014bb6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d109      	bne.n	8014b84 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8014b70:	f001 fd84 	bl	801667c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b76:	689b      	ldr	r3, [r3, #8]
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f001 fa4f 	bl	801601c <xTaskPriorityInherit>
 8014b7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014b80:	f001 fdb0 	bl	80166e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b86:	3324      	adds	r3, #36	; 0x24
 8014b88:	683a      	ldr	r2, [r7, #0]
 8014b8a:	4611      	mov	r1, r2
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f001 f83d 	bl	8015c0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014b92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b94:	f000 f98d 	bl	8014eb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014b98:	f000 fe3c 	bl	8015814 <xTaskResumeAll>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f47f af66 	bne.w	8014a70 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8014ba4:	4b18      	ldr	r3, [pc, #96]	; (8014c08 <xQueueSemaphoreTake+0x224>)
 8014ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014baa:	601a      	str	r2, [r3, #0]
 8014bac:	f3bf 8f4f 	dsb	sy
 8014bb0:	f3bf 8f6f 	isb	sy
 8014bb4:	e75c      	b.n	8014a70 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014bb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014bb8:	f000 f97b 	bl	8014eb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014bbc:	f000 fe2a 	bl	8015814 <xTaskResumeAll>
 8014bc0:	e756      	b.n	8014a70 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014bc4:	f000 f975 	bl	8014eb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014bc8:	f000 fe24 	bl	8015814 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014bcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014bce:	f000 f9c2 	bl	8014f56 <prvIsQueueEmpty>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	f43f af4b 	beq.w	8014a70 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d00d      	beq.n	8014bfc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8014be0:	f001 fd4c 	bl	801667c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014be4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014be6:	f000 f8bc 	bl	8014d62 <prvGetDisinheritPriorityAfterTimeout>
 8014bea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bee:	689b      	ldr	r3, [r3, #8]
 8014bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f001 fb1c 	bl	8016230 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014bf8:	f001 fd74 	bl	80166e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014bfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3738      	adds	r7, #56	; 0x38
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	e000ed04 	.word	0xe000ed04

08014c0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b08e      	sub	sp, #56	; 0x38
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d10c      	bne.n	8014c3c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8014c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c26:	b672      	cpsid	i
 8014c28:	f383 8811 	msr	BASEPRI, r3
 8014c2c:	f3bf 8f6f 	isb	sy
 8014c30:	f3bf 8f4f 	dsb	sy
 8014c34:	b662      	cpsie	i
 8014c36:	623b      	str	r3, [r7, #32]
}
 8014c38:	bf00      	nop
 8014c3a:	e7fe      	b.n	8014c3a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c3c:	68bb      	ldr	r3, [r7, #8]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d103      	bne.n	8014c4a <xQueueReceiveFromISR+0x3e>
 8014c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d101      	bne.n	8014c4e <xQueueReceiveFromISR+0x42>
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	e000      	b.n	8014c50 <xQueueReceiveFromISR+0x44>
 8014c4e:	2300      	movs	r3, #0
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d10c      	bne.n	8014c6e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8014c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c58:	b672      	cpsid	i
 8014c5a:	f383 8811 	msr	BASEPRI, r3
 8014c5e:	f3bf 8f6f 	isb	sy
 8014c62:	f3bf 8f4f 	dsb	sy
 8014c66:	b662      	cpsie	i
 8014c68:	61fb      	str	r3, [r7, #28]
}
 8014c6a:	bf00      	nop
 8014c6c:	e7fe      	b.n	8014c6c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014c6e:	f001 fded 	bl	801684c <vPortValidateInterruptPriority>
	__asm volatile
 8014c72:	f3ef 8211 	mrs	r2, BASEPRI
 8014c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c7a:	b672      	cpsid	i
 8014c7c:	f383 8811 	msr	BASEPRI, r3
 8014c80:	f3bf 8f6f 	isb	sy
 8014c84:	f3bf 8f4f 	dsb	sy
 8014c88:	b662      	cpsie	i
 8014c8a:	61ba      	str	r2, [r7, #24]
 8014c8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014c8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014c90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d02f      	beq.n	8014cfe <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014ca8:	68b9      	ldr	r1, [r7, #8]
 8014caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cac:	f000 f8db 	bl	8014e66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cb2:	1e5a      	subs	r2, r3, #1
 8014cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014cb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cc0:	d112      	bne.n	8014ce8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc4:	691b      	ldr	r3, [r3, #16]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d016      	beq.n	8014cf8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ccc:	3310      	adds	r3, #16
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f000 ffc2 	bl	8015c58 <xTaskRemoveFromEventList>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d00e      	beq.n	8014cf8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d00b      	beq.n	8014cf8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2201      	movs	r2, #1
 8014ce4:	601a      	str	r2, [r3, #0]
 8014ce6:	e007      	b.n	8014cf8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cec:	3301      	adds	r3, #1
 8014cee:	b2db      	uxtb	r3, r3
 8014cf0:	b25a      	sxtb	r2, r3
 8014cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8014cfc:	e001      	b.n	8014d02 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	637b      	str	r3, [r7, #52]	; 0x34
 8014d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	f383 8811 	msr	BASEPRI, r3
}
 8014d0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3738      	adds	r7, #56	; 0x38
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}

08014d18 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b084      	sub	sp, #16
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d10c      	bne.n	8014d44 <vQueueDelete+0x2c>
	__asm volatile
 8014d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d2e:	b672      	cpsid	i
 8014d30:	f383 8811 	msr	BASEPRI, r3
 8014d34:	f3bf 8f6f 	isb	sy
 8014d38:	f3bf 8f4f 	dsb	sy
 8014d3c:	b662      	cpsie	i
 8014d3e:	60bb      	str	r3, [r7, #8]
}
 8014d40:	bf00      	nop
 8014d42:	e7fe      	b.n	8014d42 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014d44:	68f8      	ldr	r0, [r7, #12]
 8014d46:	f000 f935 	bl	8014fb4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d102      	bne.n	8014d5a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8014d54:	68f8      	ldr	r0, [r7, #12]
 8014d56:	f001 fe8d 	bl	8016a74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014d5a:	bf00      	nop
 8014d5c:	3710      	adds	r7, #16
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}

08014d62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014d62:	b480      	push	{r7}
 8014d64:	b085      	sub	sp, #20
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d006      	beq.n	8014d80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	f1c3 0307 	rsb	r3, r3, #7
 8014d7c:	60fb      	str	r3, [r7, #12]
 8014d7e:	e001      	b.n	8014d84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014d80:	2300      	movs	r3, #0
 8014d82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014d84:	68fb      	ldr	r3, [r7, #12]
	}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3714      	adds	r7, #20
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr

08014d92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b086      	sub	sp, #24
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	60f8      	str	r0, [r7, #12]
 8014d9a:	60b9      	str	r1, [r7, #8]
 8014d9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014d9e:	2300      	movs	r3, #0
 8014da0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014da6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d10d      	bne.n	8014dcc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d14d      	bne.n	8014e54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	689b      	ldr	r3, [r3, #8]
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f001 f9ad 	bl	801611c <xTaskPriorityDisinherit>
 8014dc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	609a      	str	r2, [r3, #8]
 8014dca:	e043      	b.n	8014e54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d119      	bne.n	8014e06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	6858      	ldr	r0, [r3, #4]
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dda:	461a      	mov	r2, r3
 8014ddc:	68b9      	ldr	r1, [r7, #8]
 8014dde:	f001 ff8d 	bl	8016cfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	685a      	ldr	r2, [r3, #4]
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dea:	441a      	add	r2, r3
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	685a      	ldr	r2, [r3, #4]
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	689b      	ldr	r3, [r3, #8]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d32b      	bcc.n	8014e54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	681a      	ldr	r2, [r3, #0]
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	605a      	str	r2, [r3, #4]
 8014e04:	e026      	b.n	8014e54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	68d8      	ldr	r0, [r3, #12]
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e0e:	461a      	mov	r2, r3
 8014e10:	68b9      	ldr	r1, [r7, #8]
 8014e12:	f001 ff73 	bl	8016cfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	68da      	ldr	r2, [r3, #12]
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e1e:	425b      	negs	r3, r3
 8014e20:	441a      	add	r2, r3
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	68da      	ldr	r2, [r3, #12]
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d207      	bcs.n	8014e42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	689a      	ldr	r2, [r3, #8]
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e3a:	425b      	negs	r3, r3
 8014e3c:	441a      	add	r2, r3
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2b02      	cmp	r3, #2
 8014e46:	d105      	bne.n	8014e54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014e48:	693b      	ldr	r3, [r7, #16]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d002      	beq.n	8014e54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014e4e:	693b      	ldr	r3, [r7, #16]
 8014e50:	3b01      	subs	r3, #1
 8014e52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	1c5a      	adds	r2, r3, #1
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014e5c:	697b      	ldr	r3, [r7, #20]
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3718      	adds	r7, #24
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b082      	sub	sp, #8
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
 8014e6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d018      	beq.n	8014eaa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	68da      	ldr	r2, [r3, #12]
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e80:	441a      	add	r2, r3
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	68da      	ldr	r2, [r3, #12]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	689b      	ldr	r3, [r3, #8]
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	d303      	bcc.n	8014e9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681a      	ldr	r2, [r3, #0]
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	68d9      	ldr	r1, [r3, #12]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ea2:	461a      	mov	r2, r3
 8014ea4:	6838      	ldr	r0, [r7, #0]
 8014ea6:	f001 ff29 	bl	8016cfc <memcpy>
	}
}
 8014eaa:	bf00      	nop
 8014eac:	3708      	adds	r7, #8
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}

08014eb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014eb2:	b580      	push	{r7, lr}
 8014eb4:	b084      	sub	sp, #16
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014eba:	f001 fbdf 	bl	801667c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014ec4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014ec6:	e011      	b.n	8014eec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d012      	beq.n	8014ef6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	3324      	adds	r3, #36	; 0x24
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f000 febf 	bl	8015c58 <xTaskRemoveFromEventList>
 8014eda:	4603      	mov	r3, r0
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d001      	beq.n	8014ee4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014ee0:	f000 ff9a 	bl	8015e18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014ee4:	7bfb      	ldrb	r3, [r7, #15]
 8014ee6:	3b01      	subs	r3, #1
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	dce9      	bgt.n	8014ec8 <prvUnlockQueue+0x16>
 8014ef4:	e000      	b.n	8014ef8 <prvUnlockQueue+0x46>
					break;
 8014ef6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	22ff      	movs	r2, #255	; 0xff
 8014efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014f00:	f001 fbf0 	bl	80166e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014f04:	f001 fbba 	bl	801667c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014f0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014f10:	e011      	b.n	8014f36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	691b      	ldr	r3, [r3, #16]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d012      	beq.n	8014f40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	3310      	adds	r3, #16
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f000 fe9a 	bl	8015c58 <xTaskRemoveFromEventList>
 8014f24:	4603      	mov	r3, r0
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d001      	beq.n	8014f2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014f2a:	f000 ff75 	bl	8015e18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014f2e:	7bbb      	ldrb	r3, [r7, #14]
 8014f30:	3b01      	subs	r3, #1
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	dce9      	bgt.n	8014f12 <prvUnlockQueue+0x60>
 8014f3e:	e000      	b.n	8014f42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014f40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	22ff      	movs	r2, #255	; 0xff
 8014f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014f4a:	f001 fbcb 	bl	80166e4 <vPortExitCritical>
}
 8014f4e:	bf00      	nop
 8014f50:	3710      	adds	r7, #16
 8014f52:	46bd      	mov	sp, r7
 8014f54:	bd80      	pop	{r7, pc}

08014f56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014f56:	b580      	push	{r7, lr}
 8014f58:	b084      	sub	sp, #16
 8014f5a:	af00      	add	r7, sp, #0
 8014f5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014f5e:	f001 fb8d 	bl	801667c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d102      	bne.n	8014f70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	60fb      	str	r3, [r7, #12]
 8014f6e:	e001      	b.n	8014f74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014f70:	2300      	movs	r3, #0
 8014f72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014f74:	f001 fbb6 	bl	80166e4 <vPortExitCritical>

	return xReturn;
 8014f78:	68fb      	ldr	r3, [r7, #12]
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3710      	adds	r7, #16
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}

08014f82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014f82:	b580      	push	{r7, lr}
 8014f84:	b084      	sub	sp, #16
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014f8a:	f001 fb77 	bl	801667c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d102      	bne.n	8014fa0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	60fb      	str	r3, [r7, #12]
 8014f9e:	e001      	b.n	8014fa4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014fa4:	f001 fb9e 	bl	80166e4 <vPortExitCritical>

	return xReturn;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3710      	adds	r7, #16
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}
	...

08014fb4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014fb4:	b480      	push	{r7}
 8014fb6:	b085      	sub	sp, #20
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	60fb      	str	r3, [r7, #12]
 8014fc0:	e016      	b.n	8014ff0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014fc2:	4a10      	ldr	r2, [pc, #64]	; (8015004 <vQueueUnregisterQueue+0x50>)
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	00db      	lsls	r3, r3, #3
 8014fc8:	4413      	add	r3, r2
 8014fca:	685b      	ldr	r3, [r3, #4]
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	d10b      	bne.n	8014fea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014fd2:	4a0c      	ldr	r2, [pc, #48]	; (8015004 <vQueueUnregisterQueue+0x50>)
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014fdc:	4a09      	ldr	r2, [pc, #36]	; (8015004 <vQueueUnregisterQueue+0x50>)
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	00db      	lsls	r3, r3, #3
 8014fe2:	4413      	add	r3, r2
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	605a      	str	r2, [r3, #4]
				break;
 8014fe8:	e006      	b.n	8014ff8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	3301      	adds	r3, #1
 8014fee:	60fb      	str	r3, [r7, #12]
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	2b07      	cmp	r3, #7
 8014ff4:	d9e5      	bls.n	8014fc2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014ff6:	bf00      	nop
 8014ff8:	bf00      	nop
 8014ffa:	3714      	adds	r7, #20
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr
 8015004:	20010154 	.word	0x20010154

08015008 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015008:	b580      	push	{r7, lr}
 801500a:	b08e      	sub	sp, #56	; 0x38
 801500c:	af04      	add	r7, sp, #16
 801500e:	60f8      	str	r0, [r7, #12]
 8015010:	60b9      	str	r1, [r7, #8]
 8015012:	607a      	str	r2, [r7, #4]
 8015014:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015018:	2b00      	cmp	r3, #0
 801501a:	d10c      	bne.n	8015036 <xTaskCreateStatic+0x2e>
	__asm volatile
 801501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015020:	b672      	cpsid	i
 8015022:	f383 8811 	msr	BASEPRI, r3
 8015026:	f3bf 8f6f 	isb	sy
 801502a:	f3bf 8f4f 	dsb	sy
 801502e:	b662      	cpsie	i
 8015030:	623b      	str	r3, [r7, #32]
}
 8015032:	bf00      	nop
 8015034:	e7fe      	b.n	8015034 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015038:	2b00      	cmp	r3, #0
 801503a:	d10c      	bne.n	8015056 <xTaskCreateStatic+0x4e>
	__asm volatile
 801503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015040:	b672      	cpsid	i
 8015042:	f383 8811 	msr	BASEPRI, r3
 8015046:	f3bf 8f6f 	isb	sy
 801504a:	f3bf 8f4f 	dsb	sy
 801504e:	b662      	cpsie	i
 8015050:	61fb      	str	r3, [r7, #28]
}
 8015052:	bf00      	nop
 8015054:	e7fe      	b.n	8015054 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015056:	2354      	movs	r3, #84	; 0x54
 8015058:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801505a:	693b      	ldr	r3, [r7, #16]
 801505c:	2b54      	cmp	r3, #84	; 0x54
 801505e:	d00c      	beq.n	801507a <xTaskCreateStatic+0x72>
	__asm volatile
 8015060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015064:	b672      	cpsid	i
 8015066:	f383 8811 	msr	BASEPRI, r3
 801506a:	f3bf 8f6f 	isb	sy
 801506e:	f3bf 8f4f 	dsb	sy
 8015072:	b662      	cpsie	i
 8015074:	61bb      	str	r3, [r7, #24]
}
 8015076:	bf00      	nop
 8015078:	e7fe      	b.n	8015078 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801507a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801507e:	2b00      	cmp	r3, #0
 8015080:	d01e      	beq.n	80150c0 <xTaskCreateStatic+0xb8>
 8015082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015084:	2b00      	cmp	r3, #0
 8015086:	d01b      	beq.n	80150c0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801508a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015090:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015094:	2202      	movs	r2, #2
 8015096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801509a:	2300      	movs	r3, #0
 801509c:	9303      	str	r3, [sp, #12]
 801509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a0:	9302      	str	r3, [sp, #8]
 80150a2:	f107 0314 	add.w	r3, r7, #20
 80150a6:	9301      	str	r3, [sp, #4]
 80150a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150aa:	9300      	str	r3, [sp, #0]
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	68b9      	ldr	r1, [r7, #8]
 80150b2:	68f8      	ldr	r0, [r7, #12]
 80150b4:	f000 f850 	bl	8015158 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80150b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150ba:	f000 f8df 	bl	801527c <prvAddNewTaskToReadyList>
 80150be:	e001      	b.n	80150c4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80150c0:	2300      	movs	r3, #0
 80150c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80150c4:	697b      	ldr	r3, [r7, #20]
	}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3728      	adds	r7, #40	; 0x28
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}

080150ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80150ce:	b580      	push	{r7, lr}
 80150d0:	b08c      	sub	sp, #48	; 0x30
 80150d2:	af04      	add	r7, sp, #16
 80150d4:	60f8      	str	r0, [r7, #12]
 80150d6:	60b9      	str	r1, [r7, #8]
 80150d8:	603b      	str	r3, [r7, #0]
 80150da:	4613      	mov	r3, r2
 80150dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80150de:	88fb      	ldrh	r3, [r7, #6]
 80150e0:	009b      	lsls	r3, r3, #2
 80150e2:	4618      	mov	r0, r3
 80150e4:	f001 fbf6 	bl	80168d4 <pvPortMalloc>
 80150e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d00e      	beq.n	801510e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80150f0:	2054      	movs	r0, #84	; 0x54
 80150f2:	f001 fbef 	bl	80168d4 <pvPortMalloc>
 80150f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80150f8:	69fb      	ldr	r3, [r7, #28]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d003      	beq.n	8015106 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80150fe:	69fb      	ldr	r3, [r7, #28]
 8015100:	697a      	ldr	r2, [r7, #20]
 8015102:	631a      	str	r2, [r3, #48]	; 0x30
 8015104:	e005      	b.n	8015112 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015106:	6978      	ldr	r0, [r7, #20]
 8015108:	f001 fcb4 	bl	8016a74 <vPortFree>
 801510c:	e001      	b.n	8015112 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801510e:	2300      	movs	r3, #0
 8015110:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015112:	69fb      	ldr	r3, [r7, #28]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d017      	beq.n	8015148 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015118:	69fb      	ldr	r3, [r7, #28]
 801511a:	2200      	movs	r2, #0
 801511c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015120:	88fa      	ldrh	r2, [r7, #6]
 8015122:	2300      	movs	r3, #0
 8015124:	9303      	str	r3, [sp, #12]
 8015126:	69fb      	ldr	r3, [r7, #28]
 8015128:	9302      	str	r3, [sp, #8]
 801512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801512c:	9301      	str	r3, [sp, #4]
 801512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015130:	9300      	str	r3, [sp, #0]
 8015132:	683b      	ldr	r3, [r7, #0]
 8015134:	68b9      	ldr	r1, [r7, #8]
 8015136:	68f8      	ldr	r0, [r7, #12]
 8015138:	f000 f80e 	bl	8015158 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801513c:	69f8      	ldr	r0, [r7, #28]
 801513e:	f000 f89d 	bl	801527c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015142:	2301      	movs	r3, #1
 8015144:	61bb      	str	r3, [r7, #24]
 8015146:	e002      	b.n	801514e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015148:	f04f 33ff 	mov.w	r3, #4294967295
 801514c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801514e:	69bb      	ldr	r3, [r7, #24]
	}
 8015150:	4618      	mov	r0, r3
 8015152:	3720      	adds	r7, #32
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b088      	sub	sp, #32
 801515c:	af00      	add	r7, sp, #0
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	60b9      	str	r1, [r7, #8]
 8015162:	607a      	str	r2, [r7, #4]
 8015164:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015168:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	009b      	lsls	r3, r3, #2
 801516e:	461a      	mov	r2, r3
 8015170:	21a5      	movs	r1, #165	; 0xa5
 8015172:	f001 fdd1 	bl	8016d18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801517a:	6879      	ldr	r1, [r7, #4]
 801517c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8015180:	440b      	add	r3, r1
 8015182:	009b      	lsls	r3, r3, #2
 8015184:	4413      	add	r3, r2
 8015186:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015188:	69bb      	ldr	r3, [r7, #24]
 801518a:	f023 0307 	bic.w	r3, r3, #7
 801518e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015190:	69bb      	ldr	r3, [r7, #24]
 8015192:	f003 0307 	and.w	r3, r3, #7
 8015196:	2b00      	cmp	r3, #0
 8015198:	d00c      	beq.n	80151b4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 801519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801519e:	b672      	cpsid	i
 80151a0:	f383 8811 	msr	BASEPRI, r3
 80151a4:	f3bf 8f6f 	isb	sy
 80151a8:	f3bf 8f4f 	dsb	sy
 80151ac:	b662      	cpsie	i
 80151ae:	617b      	str	r3, [r7, #20]
}
 80151b0:	bf00      	nop
 80151b2:	e7fe      	b.n	80151b2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d01f      	beq.n	80151fa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80151ba:	2300      	movs	r3, #0
 80151bc:	61fb      	str	r3, [r7, #28]
 80151be:	e012      	b.n	80151e6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80151c0:	68ba      	ldr	r2, [r7, #8]
 80151c2:	69fb      	ldr	r3, [r7, #28]
 80151c4:	4413      	add	r3, r2
 80151c6:	7819      	ldrb	r1, [r3, #0]
 80151c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151ca:	69fb      	ldr	r3, [r7, #28]
 80151cc:	4413      	add	r3, r2
 80151ce:	3334      	adds	r3, #52	; 0x34
 80151d0:	460a      	mov	r2, r1
 80151d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80151d4:	68ba      	ldr	r2, [r7, #8]
 80151d6:	69fb      	ldr	r3, [r7, #28]
 80151d8:	4413      	add	r3, r2
 80151da:	781b      	ldrb	r3, [r3, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d006      	beq.n	80151ee <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80151e0:	69fb      	ldr	r3, [r7, #28]
 80151e2:	3301      	adds	r3, #1
 80151e4:	61fb      	str	r3, [r7, #28]
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	2b0f      	cmp	r3, #15
 80151ea:	d9e9      	bls.n	80151c0 <prvInitialiseNewTask+0x68>
 80151ec:	e000      	b.n	80151f0 <prvInitialiseNewTask+0x98>
			{
				break;
 80151ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80151f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f2:	2200      	movs	r2, #0
 80151f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80151f8:	e003      	b.n	8015202 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80151fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151fc:	2200      	movs	r2, #0
 80151fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015204:	2b06      	cmp	r3, #6
 8015206:	d901      	bls.n	801520c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015208:	2306      	movs	r3, #6
 801520a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801520e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015210:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015216:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801521a:	2200      	movs	r2, #0
 801521c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015220:	3304      	adds	r3, #4
 8015222:	4618      	mov	r0, r3
 8015224:	f7fe fe8e 	bl	8013f44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801522a:	3318      	adds	r3, #24
 801522c:	4618      	mov	r0, r3
 801522e:	f7fe fe89 	bl	8013f44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015236:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523a:	f1c3 0207 	rsb	r2, r3, #7
 801523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015240:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015246:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801524a:	2200      	movs	r2, #0
 801524c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015250:	2200      	movs	r2, #0
 8015252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015256:	683a      	ldr	r2, [r7, #0]
 8015258:	68f9      	ldr	r1, [r7, #12]
 801525a:	69b8      	ldr	r0, [r7, #24]
 801525c:	f001 f900 	bl	8016460 <pxPortInitialiseStack>
 8015260:	4602      	mov	r2, r0
 8015262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015264:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015268:	2b00      	cmp	r3, #0
 801526a:	d002      	beq.n	8015272 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801526e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015272:	bf00      	nop
 8015274:	3720      	adds	r7, #32
 8015276:	46bd      	mov	sp, r7
 8015278:	bd80      	pop	{r7, pc}
	...

0801527c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015284:	f001 f9fa 	bl	801667c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015288:	4b2a      	ldr	r3, [pc, #168]	; (8015334 <prvAddNewTaskToReadyList+0xb8>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	3301      	adds	r3, #1
 801528e:	4a29      	ldr	r2, [pc, #164]	; (8015334 <prvAddNewTaskToReadyList+0xb8>)
 8015290:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015292:	4b29      	ldr	r3, [pc, #164]	; (8015338 <prvAddNewTaskToReadyList+0xbc>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d109      	bne.n	80152ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801529a:	4a27      	ldr	r2, [pc, #156]	; (8015338 <prvAddNewTaskToReadyList+0xbc>)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80152a0:	4b24      	ldr	r3, [pc, #144]	; (8015334 <prvAddNewTaskToReadyList+0xb8>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	2b01      	cmp	r3, #1
 80152a6:	d110      	bne.n	80152ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80152a8:	f000 fdda 	bl	8015e60 <prvInitialiseTaskLists>
 80152ac:	e00d      	b.n	80152ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80152ae:	4b23      	ldr	r3, [pc, #140]	; (801533c <prvAddNewTaskToReadyList+0xc0>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d109      	bne.n	80152ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80152b6:	4b20      	ldr	r3, [pc, #128]	; (8015338 <prvAddNewTaskToReadyList+0xbc>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d802      	bhi.n	80152ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80152c4:	4a1c      	ldr	r2, [pc, #112]	; (8015338 <prvAddNewTaskToReadyList+0xbc>)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80152ca:	4b1d      	ldr	r3, [pc, #116]	; (8015340 <prvAddNewTaskToReadyList+0xc4>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	3301      	adds	r3, #1
 80152d0:	4a1b      	ldr	r2, [pc, #108]	; (8015340 <prvAddNewTaskToReadyList+0xc4>)
 80152d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152d8:	2201      	movs	r2, #1
 80152da:	409a      	lsls	r2, r3
 80152dc:	4b19      	ldr	r3, [pc, #100]	; (8015344 <prvAddNewTaskToReadyList+0xc8>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	4313      	orrs	r3, r2
 80152e2:	4a18      	ldr	r2, [pc, #96]	; (8015344 <prvAddNewTaskToReadyList+0xc8>)
 80152e4:	6013      	str	r3, [r2, #0]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152ea:	4613      	mov	r3, r2
 80152ec:	009b      	lsls	r3, r3, #2
 80152ee:	4413      	add	r3, r2
 80152f0:	009b      	lsls	r3, r3, #2
 80152f2:	4a15      	ldr	r2, [pc, #84]	; (8015348 <prvAddNewTaskToReadyList+0xcc>)
 80152f4:	441a      	add	r2, r3
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	3304      	adds	r3, #4
 80152fa:	4619      	mov	r1, r3
 80152fc:	4610      	mov	r0, r2
 80152fe:	f7fe fe2e 	bl	8013f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015302:	f001 f9ef 	bl	80166e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015306:	4b0d      	ldr	r3, [pc, #52]	; (801533c <prvAddNewTaskToReadyList+0xc0>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d00e      	beq.n	801532c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801530e:	4b0a      	ldr	r3, [pc, #40]	; (8015338 <prvAddNewTaskToReadyList+0xbc>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015318:	429a      	cmp	r2, r3
 801531a:	d207      	bcs.n	801532c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801531c:	4b0b      	ldr	r3, [pc, #44]	; (801534c <prvAddNewTaskToReadyList+0xd0>)
 801531e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015322:	601a      	str	r2, [r3, #0]
 8015324:	f3bf 8f4f 	dsb	sy
 8015328:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801532c:	bf00      	nop
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}
 8015334:	20000b34 	.word	0x20000b34
 8015338:	20000a34 	.word	0x20000a34
 801533c:	20000b40 	.word	0x20000b40
 8015340:	20000b50 	.word	0x20000b50
 8015344:	20000b3c 	.word	0x20000b3c
 8015348:	20000a38 	.word	0x20000a38
 801534c:	e000ed04 	.word	0xe000ed04

08015350 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8015350:	b580      	push	{r7, lr}
 8015352:	b084      	sub	sp, #16
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8015358:	f001 f990 	bl	801667c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d102      	bne.n	8015368 <vTaskDelete+0x18>
 8015362:	4b3a      	ldr	r3, [pc, #232]	; (801544c <vTaskDelete+0xfc>)
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	e000      	b.n	801536a <vTaskDelete+0x1a>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	3304      	adds	r3, #4
 8015370:	4618      	mov	r0, r3
 8015372:	f7fe fe51 	bl	8014018 <uxListRemove>
 8015376:	4603      	mov	r3, r0
 8015378:	2b00      	cmp	r3, #0
 801537a:	d115      	bne.n	80153a8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015380:	4933      	ldr	r1, [pc, #204]	; (8015450 <vTaskDelete+0x100>)
 8015382:	4613      	mov	r3, r2
 8015384:	009b      	lsls	r3, r3, #2
 8015386:	4413      	add	r3, r2
 8015388:	009b      	lsls	r3, r3, #2
 801538a:	440b      	add	r3, r1
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d10a      	bne.n	80153a8 <vTaskDelete+0x58>
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015396:	2201      	movs	r2, #1
 8015398:	fa02 f303 	lsl.w	r3, r2, r3
 801539c:	43da      	mvns	r2, r3
 801539e:	4b2d      	ldr	r3, [pc, #180]	; (8015454 <vTaskDelete+0x104>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	4013      	ands	r3, r2
 80153a4:	4a2b      	ldr	r2, [pc, #172]	; (8015454 <vTaskDelete+0x104>)
 80153a6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d004      	beq.n	80153ba <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	3318      	adds	r3, #24
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7fe fe2f 	bl	8014018 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80153ba:	4b27      	ldr	r3, [pc, #156]	; (8015458 <vTaskDelete+0x108>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	3301      	adds	r3, #1
 80153c0:	4a25      	ldr	r2, [pc, #148]	; (8015458 <vTaskDelete+0x108>)
 80153c2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80153c4:	4b21      	ldr	r3, [pc, #132]	; (801544c <vTaskDelete+0xfc>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	68fa      	ldr	r2, [r7, #12]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d10b      	bne.n	80153e6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	3304      	adds	r3, #4
 80153d2:	4619      	mov	r1, r3
 80153d4:	4821      	ldr	r0, [pc, #132]	; (801545c <vTaskDelete+0x10c>)
 80153d6:	f7fe fdc2 	bl	8013f5e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80153da:	4b21      	ldr	r3, [pc, #132]	; (8015460 <vTaskDelete+0x110>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	3301      	adds	r3, #1
 80153e0:	4a1f      	ldr	r2, [pc, #124]	; (8015460 <vTaskDelete+0x110>)
 80153e2:	6013      	str	r3, [r2, #0]
 80153e4:	e009      	b.n	80153fa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80153e6:	4b1f      	ldr	r3, [pc, #124]	; (8015464 <vTaskDelete+0x114>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	3b01      	subs	r3, #1
 80153ec:	4a1d      	ldr	r2, [pc, #116]	; (8015464 <vTaskDelete+0x114>)
 80153ee:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80153f0:	68f8      	ldr	r0, [r7, #12]
 80153f2:	f000 fda3 	bl	8015f3c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80153f6:	f000 fdd3 	bl	8015fa0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80153fa:	f001 f973 	bl	80166e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80153fe:	4b1a      	ldr	r3, [pc, #104]	; (8015468 <vTaskDelete+0x118>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d01d      	beq.n	8015442 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8015406:	4b11      	ldr	r3, [pc, #68]	; (801544c <vTaskDelete+0xfc>)
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	68fa      	ldr	r2, [r7, #12]
 801540c:	429a      	cmp	r2, r3
 801540e:	d118      	bne.n	8015442 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8015410:	4b16      	ldr	r3, [pc, #88]	; (801546c <vTaskDelete+0x11c>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d00c      	beq.n	8015432 <vTaskDelete+0xe2>
	__asm volatile
 8015418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801541c:	b672      	cpsid	i
 801541e:	f383 8811 	msr	BASEPRI, r3
 8015422:	f3bf 8f6f 	isb	sy
 8015426:	f3bf 8f4f 	dsb	sy
 801542a:	b662      	cpsie	i
 801542c:	60bb      	str	r3, [r7, #8]
}
 801542e:	bf00      	nop
 8015430:	e7fe      	b.n	8015430 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8015432:	4b0f      	ldr	r3, [pc, #60]	; (8015470 <vTaskDelete+0x120>)
 8015434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015438:	601a      	str	r2, [r3, #0]
 801543a:	f3bf 8f4f 	dsb	sy
 801543e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015442:	bf00      	nop
 8015444:	3710      	adds	r7, #16
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	20000a34 	.word	0x20000a34
 8015450:	20000a38 	.word	0x20000a38
 8015454:	20000b3c 	.word	0x20000b3c
 8015458:	20000b50 	.word	0x20000b50
 801545c:	20000b08 	.word	0x20000b08
 8015460:	20000b1c 	.word	0x20000b1c
 8015464:	20000b34 	.word	0x20000b34
 8015468:	20000b40 	.word	0x20000b40
 801546c:	20000b5c 	.word	0x20000b5c
 8015470:	e000ed04 	.word	0xe000ed04

08015474 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015474:	b580      	push	{r7, lr}
 8015476:	b084      	sub	sp, #16
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801547c:	2300      	movs	r3, #0
 801547e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d019      	beq.n	80154ba <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015486:	4b14      	ldr	r3, [pc, #80]	; (80154d8 <vTaskDelay+0x64>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d00c      	beq.n	80154a8 <vTaskDelay+0x34>
	__asm volatile
 801548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015492:	b672      	cpsid	i
 8015494:	f383 8811 	msr	BASEPRI, r3
 8015498:	f3bf 8f6f 	isb	sy
 801549c:	f3bf 8f4f 	dsb	sy
 80154a0:	b662      	cpsie	i
 80154a2:	60bb      	str	r3, [r7, #8]
}
 80154a4:	bf00      	nop
 80154a6:	e7fe      	b.n	80154a6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80154a8:	f000 f9a6 	bl	80157f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80154ac:	2100      	movs	r1, #0
 80154ae:	6878      	ldr	r0, [r7, #4]
 80154b0:	f000 ff70 	bl	8016394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80154b4:	f000 f9ae 	bl	8015814 <xTaskResumeAll>
 80154b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d107      	bne.n	80154d0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80154c0:	4b06      	ldr	r3, [pc, #24]	; (80154dc <vTaskDelay+0x68>)
 80154c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154c6:	601a      	str	r2, [r3, #0]
 80154c8:	f3bf 8f4f 	dsb	sy
 80154cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80154d0:	bf00      	nop
 80154d2:	3710      	adds	r7, #16
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	20000b5c 	.word	0x20000b5c
 80154dc:	e000ed04 	.word	0xe000ed04

080154e0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b084      	sub	sp, #16
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80154e8:	f001 f8c8 	bl	801667c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d102      	bne.n	80154f8 <vTaskSuspend+0x18>
 80154f2:	4b3d      	ldr	r3, [pc, #244]	; (80155e8 <vTaskSuspend+0x108>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	e000      	b.n	80154fa <vTaskSuspend+0x1a>
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	3304      	adds	r3, #4
 8015500:	4618      	mov	r0, r3
 8015502:	f7fe fd89 	bl	8014018 <uxListRemove>
 8015506:	4603      	mov	r3, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	d115      	bne.n	8015538 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015510:	4936      	ldr	r1, [pc, #216]	; (80155ec <vTaskSuspend+0x10c>)
 8015512:	4613      	mov	r3, r2
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	4413      	add	r3, r2
 8015518:	009b      	lsls	r3, r3, #2
 801551a:	440b      	add	r3, r1
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d10a      	bne.n	8015538 <vTaskSuspend+0x58>
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015526:	2201      	movs	r2, #1
 8015528:	fa02 f303 	lsl.w	r3, r2, r3
 801552c:	43da      	mvns	r2, r3
 801552e:	4b30      	ldr	r3, [pc, #192]	; (80155f0 <vTaskSuspend+0x110>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	4013      	ands	r3, r2
 8015534:	4a2e      	ldr	r2, [pc, #184]	; (80155f0 <vTaskSuspend+0x110>)
 8015536:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801553c:	2b00      	cmp	r3, #0
 801553e:	d004      	beq.n	801554a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	3318      	adds	r3, #24
 8015544:	4618      	mov	r0, r3
 8015546:	f7fe fd67 	bl	8014018 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	3304      	adds	r3, #4
 801554e:	4619      	mov	r1, r3
 8015550:	4828      	ldr	r0, [pc, #160]	; (80155f4 <vTaskSuspend+0x114>)
 8015552:	f7fe fd04 	bl	8013f5e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801555c:	b2db      	uxtb	r3, r3
 801555e:	2b01      	cmp	r3, #1
 8015560:	d103      	bne.n	801556a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	2200      	movs	r2, #0
 8015566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801556a:	f001 f8bb 	bl	80166e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801556e:	4b22      	ldr	r3, [pc, #136]	; (80155f8 <vTaskSuspend+0x118>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d005      	beq.n	8015582 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8015576:	f001 f881 	bl	801667c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801557a:	f000 fd11 	bl	8015fa0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801557e:	f001 f8b1 	bl	80166e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8015582:	4b19      	ldr	r3, [pc, #100]	; (80155e8 <vTaskSuspend+0x108>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	68fa      	ldr	r2, [r7, #12]
 8015588:	429a      	cmp	r2, r3
 801558a:	d129      	bne.n	80155e0 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 801558c:	4b1a      	ldr	r3, [pc, #104]	; (80155f8 <vTaskSuspend+0x118>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d019      	beq.n	80155c8 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8015594:	4b19      	ldr	r3, [pc, #100]	; (80155fc <vTaskSuspend+0x11c>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d00c      	beq.n	80155b6 <vTaskSuspend+0xd6>
	__asm volatile
 801559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155a0:	b672      	cpsid	i
 80155a2:	f383 8811 	msr	BASEPRI, r3
 80155a6:	f3bf 8f6f 	isb	sy
 80155aa:	f3bf 8f4f 	dsb	sy
 80155ae:	b662      	cpsie	i
 80155b0:	60bb      	str	r3, [r7, #8]
}
 80155b2:	bf00      	nop
 80155b4:	e7fe      	b.n	80155b4 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 80155b6:	4b12      	ldr	r3, [pc, #72]	; (8015600 <vTaskSuspend+0x120>)
 80155b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155bc:	601a      	str	r2, [r3, #0]
 80155be:	f3bf 8f4f 	dsb	sy
 80155c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80155c6:	e00b      	b.n	80155e0 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80155c8:	4b0a      	ldr	r3, [pc, #40]	; (80155f4 <vTaskSuspend+0x114>)
 80155ca:	681a      	ldr	r2, [r3, #0]
 80155cc:	4b0d      	ldr	r3, [pc, #52]	; (8015604 <vTaskSuspend+0x124>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	429a      	cmp	r2, r3
 80155d2:	d103      	bne.n	80155dc <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 80155d4:	4b04      	ldr	r3, [pc, #16]	; (80155e8 <vTaskSuspend+0x108>)
 80155d6:	2200      	movs	r2, #0
 80155d8:	601a      	str	r2, [r3, #0]
	}
 80155da:	e001      	b.n	80155e0 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 80155dc:	f000 fa94 	bl	8015b08 <vTaskSwitchContext>
	}
 80155e0:	bf00      	nop
 80155e2:	3710      	adds	r7, #16
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	20000a34 	.word	0x20000a34
 80155ec:	20000a38 	.word	0x20000a38
 80155f0:	20000b3c 	.word	0x20000b3c
 80155f4:	20000b20 	.word	0x20000b20
 80155f8:	20000b40 	.word	0x20000b40
 80155fc:	20000b5c 	.word	0x20000b5c
 8015600:	e000ed04 	.word	0xe000ed04
 8015604:	20000b34 	.word	0x20000b34

08015608 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8015608:	b480      	push	{r7}
 801560a:	b087      	sub	sp, #28
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8015610:	2300      	movs	r3, #0
 8015612:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d10c      	bne.n	8015638 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 801561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015622:	b672      	cpsid	i
 8015624:	f383 8811 	msr	BASEPRI, r3
 8015628:	f3bf 8f6f 	isb	sy
 801562c:	f3bf 8f4f 	dsb	sy
 8015630:	b662      	cpsie	i
 8015632:	60fb      	str	r3, [r7, #12]
}
 8015634:	bf00      	nop
 8015636:	e7fe      	b.n	8015636 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015638:	693b      	ldr	r3, [r7, #16]
 801563a:	695b      	ldr	r3, [r3, #20]
 801563c:	4a0a      	ldr	r2, [pc, #40]	; (8015668 <prvTaskIsTaskSuspended+0x60>)
 801563e:	4293      	cmp	r3, r2
 8015640:	d10a      	bne.n	8015658 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8015642:	693b      	ldr	r3, [r7, #16]
 8015644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015646:	4a09      	ldr	r2, [pc, #36]	; (801566c <prvTaskIsTaskSuspended+0x64>)
 8015648:	4293      	cmp	r3, r2
 801564a:	d005      	beq.n	8015658 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015650:	2b00      	cmp	r3, #0
 8015652:	d101      	bne.n	8015658 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8015654:	2301      	movs	r3, #1
 8015656:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015658:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801565a:	4618      	mov	r0, r3
 801565c:	371c      	adds	r7, #28
 801565e:	46bd      	mov	sp, r7
 8015660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015664:	4770      	bx	lr
 8015666:	bf00      	nop
 8015668:	20000b20 	.word	0x20000b20
 801566c:	20000af4 	.word	0x20000af4

08015670 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8015670:	b580      	push	{r7, lr}
 8015672:	b084      	sub	sp, #16
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d10c      	bne.n	801569c <vTaskResume+0x2c>
	__asm volatile
 8015682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015686:	b672      	cpsid	i
 8015688:	f383 8811 	msr	BASEPRI, r3
 801568c:	f3bf 8f6f 	isb	sy
 8015690:	f3bf 8f4f 	dsb	sy
 8015694:	b662      	cpsie	i
 8015696:	60bb      	str	r3, [r7, #8]
}
 8015698:	bf00      	nop
 801569a:	e7fe      	b.n	801569a <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801569c:	4b20      	ldr	r3, [pc, #128]	; (8015720 <vTaskResume+0xb0>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	68fa      	ldr	r2, [r7, #12]
 80156a2:	429a      	cmp	r2, r3
 80156a4:	d037      	beq.n	8015716 <vTaskResume+0xa6>
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d034      	beq.n	8015716 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 80156ac:	f000 ffe6 	bl	801667c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80156b0:	68f8      	ldr	r0, [r7, #12]
 80156b2:	f7ff ffa9 	bl	8015608 <prvTaskIsTaskSuspended>
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d02a      	beq.n	8015712 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	3304      	adds	r3, #4
 80156c0:	4618      	mov	r0, r3
 80156c2:	f7fe fca9 	bl	8014018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156ca:	2201      	movs	r2, #1
 80156cc:	409a      	lsls	r2, r3
 80156ce:	4b15      	ldr	r3, [pc, #84]	; (8015724 <vTaskResume+0xb4>)
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	4313      	orrs	r3, r2
 80156d4:	4a13      	ldr	r2, [pc, #76]	; (8015724 <vTaskResume+0xb4>)
 80156d6:	6013      	str	r3, [r2, #0]
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156dc:	4613      	mov	r3, r2
 80156de:	009b      	lsls	r3, r3, #2
 80156e0:	4413      	add	r3, r2
 80156e2:	009b      	lsls	r3, r3, #2
 80156e4:	4a10      	ldr	r2, [pc, #64]	; (8015728 <vTaskResume+0xb8>)
 80156e6:	441a      	add	r2, r3
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	3304      	adds	r3, #4
 80156ec:	4619      	mov	r1, r3
 80156ee:	4610      	mov	r0, r2
 80156f0:	f7fe fc35 	bl	8013f5e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156f8:	4b09      	ldr	r3, [pc, #36]	; (8015720 <vTaskResume+0xb0>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156fe:	429a      	cmp	r2, r3
 8015700:	d307      	bcc.n	8015712 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8015702:	4b0a      	ldr	r3, [pc, #40]	; (801572c <vTaskResume+0xbc>)
 8015704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015708:	601a      	str	r2, [r3, #0]
 801570a:	f3bf 8f4f 	dsb	sy
 801570e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8015712:	f000 ffe7 	bl	80166e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015716:	bf00      	nop
 8015718:	3710      	adds	r7, #16
 801571a:	46bd      	mov	sp, r7
 801571c:	bd80      	pop	{r7, pc}
 801571e:	bf00      	nop
 8015720:	20000a34 	.word	0x20000a34
 8015724:	20000b3c 	.word	0x20000b3c
 8015728:	20000a38 	.word	0x20000a38
 801572c:	e000ed04 	.word	0xe000ed04

08015730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b08a      	sub	sp, #40	; 0x28
 8015734:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015736:	2300      	movs	r3, #0
 8015738:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801573a:	2300      	movs	r3, #0
 801573c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801573e:	463a      	mov	r2, r7
 8015740:	1d39      	adds	r1, r7, #4
 8015742:	f107 0308 	add.w	r3, r7, #8
 8015746:	4618      	mov	r0, r3
 8015748:	f7ea ff48 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801574c:	6839      	ldr	r1, [r7, #0]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	68ba      	ldr	r2, [r7, #8]
 8015752:	9202      	str	r2, [sp, #8]
 8015754:	9301      	str	r3, [sp, #4]
 8015756:	2300      	movs	r3, #0
 8015758:	9300      	str	r3, [sp, #0]
 801575a:	2300      	movs	r3, #0
 801575c:	460a      	mov	r2, r1
 801575e:	4920      	ldr	r1, [pc, #128]	; (80157e0 <vTaskStartScheduler+0xb0>)
 8015760:	4820      	ldr	r0, [pc, #128]	; (80157e4 <vTaskStartScheduler+0xb4>)
 8015762:	f7ff fc51 	bl	8015008 <xTaskCreateStatic>
 8015766:	4603      	mov	r3, r0
 8015768:	4a1f      	ldr	r2, [pc, #124]	; (80157e8 <vTaskStartScheduler+0xb8>)
 801576a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801576c:	4b1e      	ldr	r3, [pc, #120]	; (80157e8 <vTaskStartScheduler+0xb8>)
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d002      	beq.n	801577a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015774:	2301      	movs	r3, #1
 8015776:	617b      	str	r3, [r7, #20]
 8015778:	e001      	b.n	801577e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801577a:	2300      	movs	r3, #0
 801577c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	2b01      	cmp	r3, #1
 8015782:	d118      	bne.n	80157b6 <vTaskStartScheduler+0x86>
	__asm volatile
 8015784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015788:	b672      	cpsid	i
 801578a:	f383 8811 	msr	BASEPRI, r3
 801578e:	f3bf 8f6f 	isb	sy
 8015792:	f3bf 8f4f 	dsb	sy
 8015796:	b662      	cpsie	i
 8015798:	613b      	str	r3, [r7, #16]
}
 801579a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801579c:	4b13      	ldr	r3, [pc, #76]	; (80157ec <vTaskStartScheduler+0xbc>)
 801579e:	f04f 32ff 	mov.w	r2, #4294967295
 80157a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80157a4:	4b12      	ldr	r3, [pc, #72]	; (80157f0 <vTaskStartScheduler+0xc0>)
 80157a6:	2201      	movs	r2, #1
 80157a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80157aa:	4b12      	ldr	r3, [pc, #72]	; (80157f4 <vTaskStartScheduler+0xc4>)
 80157ac:	2200      	movs	r2, #0
 80157ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80157b0:	f000 fee6 	bl	8016580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80157b4:	e010      	b.n	80157d8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157bc:	d10c      	bne.n	80157d8 <vTaskStartScheduler+0xa8>
	__asm volatile
 80157be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157c2:	b672      	cpsid	i
 80157c4:	f383 8811 	msr	BASEPRI, r3
 80157c8:	f3bf 8f6f 	isb	sy
 80157cc:	f3bf 8f4f 	dsb	sy
 80157d0:	b662      	cpsie	i
 80157d2:	60fb      	str	r3, [r7, #12]
}
 80157d4:	bf00      	nop
 80157d6:	e7fe      	b.n	80157d6 <vTaskStartScheduler+0xa6>
}
 80157d8:	bf00      	nop
 80157da:	3718      	adds	r7, #24
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	080177e8 	.word	0x080177e8
 80157e4:	08015e31 	.word	0x08015e31
 80157e8:	20000b58 	.word	0x20000b58
 80157ec:	20000b54 	.word	0x20000b54
 80157f0:	20000b40 	.word	0x20000b40
 80157f4:	20000b38 	.word	0x20000b38

080157f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80157f8:	b480      	push	{r7}
 80157fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80157fc:	4b04      	ldr	r3, [pc, #16]	; (8015810 <vTaskSuspendAll+0x18>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	3301      	adds	r3, #1
 8015802:	4a03      	ldr	r2, [pc, #12]	; (8015810 <vTaskSuspendAll+0x18>)
 8015804:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8015806:	bf00      	nop
 8015808:	46bd      	mov	sp, r7
 801580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580e:	4770      	bx	lr
 8015810:	20000b5c 	.word	0x20000b5c

08015814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b084      	sub	sp, #16
 8015818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801581a:	2300      	movs	r3, #0
 801581c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801581e:	2300      	movs	r3, #0
 8015820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015822:	4b42      	ldr	r3, [pc, #264]	; (801592c <xTaskResumeAll+0x118>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d10c      	bne.n	8015844 <xTaskResumeAll+0x30>
	__asm volatile
 801582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801582e:	b672      	cpsid	i
 8015830:	f383 8811 	msr	BASEPRI, r3
 8015834:	f3bf 8f6f 	isb	sy
 8015838:	f3bf 8f4f 	dsb	sy
 801583c:	b662      	cpsie	i
 801583e:	603b      	str	r3, [r7, #0]
}
 8015840:	bf00      	nop
 8015842:	e7fe      	b.n	8015842 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015844:	f000 ff1a 	bl	801667c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015848:	4b38      	ldr	r3, [pc, #224]	; (801592c <xTaskResumeAll+0x118>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	3b01      	subs	r3, #1
 801584e:	4a37      	ldr	r2, [pc, #220]	; (801592c <xTaskResumeAll+0x118>)
 8015850:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015852:	4b36      	ldr	r3, [pc, #216]	; (801592c <xTaskResumeAll+0x118>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d161      	bne.n	801591e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801585a:	4b35      	ldr	r3, [pc, #212]	; (8015930 <xTaskResumeAll+0x11c>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d05d      	beq.n	801591e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015862:	e02e      	b.n	80158c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015864:	4b33      	ldr	r3, [pc, #204]	; (8015934 <xTaskResumeAll+0x120>)
 8015866:	68db      	ldr	r3, [r3, #12]
 8015868:	68db      	ldr	r3, [r3, #12]
 801586a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	3318      	adds	r3, #24
 8015870:	4618      	mov	r0, r3
 8015872:	f7fe fbd1 	bl	8014018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	3304      	adds	r3, #4
 801587a:	4618      	mov	r0, r3
 801587c:	f7fe fbcc 	bl	8014018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015884:	2201      	movs	r2, #1
 8015886:	409a      	lsls	r2, r3
 8015888:	4b2b      	ldr	r3, [pc, #172]	; (8015938 <xTaskResumeAll+0x124>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	4313      	orrs	r3, r2
 801588e:	4a2a      	ldr	r2, [pc, #168]	; (8015938 <xTaskResumeAll+0x124>)
 8015890:	6013      	str	r3, [r2, #0]
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015896:	4613      	mov	r3, r2
 8015898:	009b      	lsls	r3, r3, #2
 801589a:	4413      	add	r3, r2
 801589c:	009b      	lsls	r3, r3, #2
 801589e:	4a27      	ldr	r2, [pc, #156]	; (801593c <xTaskResumeAll+0x128>)
 80158a0:	441a      	add	r2, r3
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	3304      	adds	r3, #4
 80158a6:	4619      	mov	r1, r3
 80158a8:	4610      	mov	r0, r2
 80158aa:	f7fe fb58 	bl	8013f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158b2:	4b23      	ldr	r3, [pc, #140]	; (8015940 <xTaskResumeAll+0x12c>)
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158b8:	429a      	cmp	r2, r3
 80158ba:	d302      	bcc.n	80158c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80158bc:	4b21      	ldr	r3, [pc, #132]	; (8015944 <xTaskResumeAll+0x130>)
 80158be:	2201      	movs	r2, #1
 80158c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80158c2:	4b1c      	ldr	r3, [pc, #112]	; (8015934 <xTaskResumeAll+0x120>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d1cc      	bne.n	8015864 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d001      	beq.n	80158d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80158d0:	f000 fb66 	bl	8015fa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80158d4:	4b1c      	ldr	r3, [pc, #112]	; (8015948 <xTaskResumeAll+0x134>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d010      	beq.n	8015902 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80158e0:	f000 f858 	bl	8015994 <xTaskIncrementTick>
 80158e4:	4603      	mov	r3, r0
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d002      	beq.n	80158f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80158ea:	4b16      	ldr	r3, [pc, #88]	; (8015944 <xTaskResumeAll+0x130>)
 80158ec:	2201      	movs	r2, #1
 80158ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	3b01      	subs	r3, #1
 80158f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d1f1      	bne.n	80158e0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80158fc:	4b12      	ldr	r3, [pc, #72]	; (8015948 <xTaskResumeAll+0x134>)
 80158fe:	2200      	movs	r2, #0
 8015900:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015902:	4b10      	ldr	r3, [pc, #64]	; (8015944 <xTaskResumeAll+0x130>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d009      	beq.n	801591e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801590a:	2301      	movs	r3, #1
 801590c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801590e:	4b0f      	ldr	r3, [pc, #60]	; (801594c <xTaskResumeAll+0x138>)
 8015910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015914:	601a      	str	r2, [r3, #0]
 8015916:	f3bf 8f4f 	dsb	sy
 801591a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801591e:	f000 fee1 	bl	80166e4 <vPortExitCritical>

	return xAlreadyYielded;
 8015922:	68bb      	ldr	r3, [r7, #8]
}
 8015924:	4618      	mov	r0, r3
 8015926:	3710      	adds	r7, #16
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}
 801592c:	20000b5c 	.word	0x20000b5c
 8015930:	20000b34 	.word	0x20000b34
 8015934:	20000af4 	.word	0x20000af4
 8015938:	20000b3c 	.word	0x20000b3c
 801593c:	20000a38 	.word	0x20000a38
 8015940:	20000a34 	.word	0x20000a34
 8015944:	20000b48 	.word	0x20000b48
 8015948:	20000b44 	.word	0x20000b44
 801594c:	e000ed04 	.word	0xe000ed04

08015950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015950:	b480      	push	{r7}
 8015952:	b083      	sub	sp, #12
 8015954:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015956:	4b05      	ldr	r3, [pc, #20]	; (801596c <xTaskGetTickCount+0x1c>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801595c:	687b      	ldr	r3, [r7, #4]
}
 801595e:	4618      	mov	r0, r3
 8015960:	370c      	adds	r7, #12
 8015962:	46bd      	mov	sp, r7
 8015964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015968:	4770      	bx	lr
 801596a:	bf00      	nop
 801596c:	20000b38 	.word	0x20000b38

08015970 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015976:	f000 ff69 	bl	801684c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801597a:	2300      	movs	r3, #0
 801597c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801597e:	4b04      	ldr	r3, [pc, #16]	; (8015990 <xTaskGetTickCountFromISR+0x20>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015984:	683b      	ldr	r3, [r7, #0]
}
 8015986:	4618      	mov	r0, r3
 8015988:	3708      	adds	r7, #8
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}
 801598e:	bf00      	nop
 8015990:	20000b38 	.word	0x20000b38

08015994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b086      	sub	sp, #24
 8015998:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801599a:	2300      	movs	r3, #0
 801599c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801599e:	4b4f      	ldr	r3, [pc, #316]	; (8015adc <xTaskIncrementTick+0x148>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	f040 808a 	bne.w	8015abc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80159a8:	4b4d      	ldr	r3, [pc, #308]	; (8015ae0 <xTaskIncrementTick+0x14c>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	3301      	adds	r3, #1
 80159ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80159b0:	4a4b      	ldr	r2, [pc, #300]	; (8015ae0 <xTaskIncrementTick+0x14c>)
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80159b6:	693b      	ldr	r3, [r7, #16]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d122      	bne.n	8015a02 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80159bc:	4b49      	ldr	r3, [pc, #292]	; (8015ae4 <xTaskIncrementTick+0x150>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d00c      	beq.n	80159e0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80159c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ca:	b672      	cpsid	i
 80159cc:	f383 8811 	msr	BASEPRI, r3
 80159d0:	f3bf 8f6f 	isb	sy
 80159d4:	f3bf 8f4f 	dsb	sy
 80159d8:	b662      	cpsie	i
 80159da:	603b      	str	r3, [r7, #0]
}
 80159dc:	bf00      	nop
 80159de:	e7fe      	b.n	80159de <xTaskIncrementTick+0x4a>
 80159e0:	4b40      	ldr	r3, [pc, #256]	; (8015ae4 <xTaskIncrementTick+0x150>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	60fb      	str	r3, [r7, #12]
 80159e6:	4b40      	ldr	r3, [pc, #256]	; (8015ae8 <xTaskIncrementTick+0x154>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4a3e      	ldr	r2, [pc, #248]	; (8015ae4 <xTaskIncrementTick+0x150>)
 80159ec:	6013      	str	r3, [r2, #0]
 80159ee:	4a3e      	ldr	r2, [pc, #248]	; (8015ae8 <xTaskIncrementTick+0x154>)
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	6013      	str	r3, [r2, #0]
 80159f4:	4b3d      	ldr	r3, [pc, #244]	; (8015aec <xTaskIncrementTick+0x158>)
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	3301      	adds	r3, #1
 80159fa:	4a3c      	ldr	r2, [pc, #240]	; (8015aec <xTaskIncrementTick+0x158>)
 80159fc:	6013      	str	r3, [r2, #0]
 80159fe:	f000 facf 	bl	8015fa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015a02:	4b3b      	ldr	r3, [pc, #236]	; (8015af0 <xTaskIncrementTick+0x15c>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	693a      	ldr	r2, [r7, #16]
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d348      	bcc.n	8015a9e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a0c:	4b35      	ldr	r3, [pc, #212]	; (8015ae4 <xTaskIncrementTick+0x150>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d104      	bne.n	8015a20 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a16:	4b36      	ldr	r3, [pc, #216]	; (8015af0 <xTaskIncrementTick+0x15c>)
 8015a18:	f04f 32ff 	mov.w	r2, #4294967295
 8015a1c:	601a      	str	r2, [r3, #0]
					break;
 8015a1e:	e03e      	b.n	8015a9e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a20:	4b30      	ldr	r3, [pc, #192]	; (8015ae4 <xTaskIncrementTick+0x150>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	68db      	ldr	r3, [r3, #12]
 8015a26:	68db      	ldr	r3, [r3, #12]
 8015a28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	685b      	ldr	r3, [r3, #4]
 8015a2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015a30:	693a      	ldr	r2, [r7, #16]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d203      	bcs.n	8015a40 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015a38:	4a2d      	ldr	r2, [pc, #180]	; (8015af0 <xTaskIncrementTick+0x15c>)
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015a3e:	e02e      	b.n	8015a9e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	3304      	adds	r3, #4
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7fe fae7 	bl	8014018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015a4a:	68bb      	ldr	r3, [r7, #8]
 8015a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d004      	beq.n	8015a5c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015a52:	68bb      	ldr	r3, [r7, #8]
 8015a54:	3318      	adds	r3, #24
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7fe fade 	bl	8014018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a60:	2201      	movs	r2, #1
 8015a62:	409a      	lsls	r2, r3
 8015a64:	4b23      	ldr	r3, [pc, #140]	; (8015af4 <xTaskIncrementTick+0x160>)
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	4313      	orrs	r3, r2
 8015a6a:	4a22      	ldr	r2, [pc, #136]	; (8015af4 <xTaskIncrementTick+0x160>)
 8015a6c:	6013      	str	r3, [r2, #0]
 8015a6e:	68bb      	ldr	r3, [r7, #8]
 8015a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a72:	4613      	mov	r3, r2
 8015a74:	009b      	lsls	r3, r3, #2
 8015a76:	4413      	add	r3, r2
 8015a78:	009b      	lsls	r3, r3, #2
 8015a7a:	4a1f      	ldr	r2, [pc, #124]	; (8015af8 <xTaskIncrementTick+0x164>)
 8015a7c:	441a      	add	r2, r3
 8015a7e:	68bb      	ldr	r3, [r7, #8]
 8015a80:	3304      	adds	r3, #4
 8015a82:	4619      	mov	r1, r3
 8015a84:	4610      	mov	r0, r2
 8015a86:	f7fe fa6a 	bl	8013f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a8a:	68bb      	ldr	r3, [r7, #8]
 8015a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a8e:	4b1b      	ldr	r3, [pc, #108]	; (8015afc <xTaskIncrementTick+0x168>)
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d3b9      	bcc.n	8015a0c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8015a98:	2301      	movs	r3, #1
 8015a9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a9c:	e7b6      	b.n	8015a0c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015a9e:	4b17      	ldr	r3, [pc, #92]	; (8015afc <xTaskIncrementTick+0x168>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015aa4:	4914      	ldr	r1, [pc, #80]	; (8015af8 <xTaskIncrementTick+0x164>)
 8015aa6:	4613      	mov	r3, r2
 8015aa8:	009b      	lsls	r3, r3, #2
 8015aaa:	4413      	add	r3, r2
 8015aac:	009b      	lsls	r3, r3, #2
 8015aae:	440b      	add	r3, r1
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	2b01      	cmp	r3, #1
 8015ab4:	d907      	bls.n	8015ac6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	617b      	str	r3, [r7, #20]
 8015aba:	e004      	b.n	8015ac6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015abc:	4b10      	ldr	r3, [pc, #64]	; (8015b00 <xTaskIncrementTick+0x16c>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	3301      	adds	r3, #1
 8015ac2:	4a0f      	ldr	r2, [pc, #60]	; (8015b00 <xTaskIncrementTick+0x16c>)
 8015ac4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015ac6:	4b0f      	ldr	r3, [pc, #60]	; (8015b04 <xTaskIncrementTick+0x170>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d001      	beq.n	8015ad2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8015ace:	2301      	movs	r3, #1
 8015ad0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015ad2:	697b      	ldr	r3, [r7, #20]
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	3718      	adds	r7, #24
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}
 8015adc:	20000b5c 	.word	0x20000b5c
 8015ae0:	20000b38 	.word	0x20000b38
 8015ae4:	20000aec 	.word	0x20000aec
 8015ae8:	20000af0 	.word	0x20000af0
 8015aec:	20000b4c 	.word	0x20000b4c
 8015af0:	20000b54 	.word	0x20000b54
 8015af4:	20000b3c 	.word	0x20000b3c
 8015af8:	20000a38 	.word	0x20000a38
 8015afc:	20000a34 	.word	0x20000a34
 8015b00:	20000b44 	.word	0x20000b44
 8015b04:	20000b48 	.word	0x20000b48

08015b08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b088      	sub	sp, #32
 8015b0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015b0e:	4b3a      	ldr	r3, [pc, #232]	; (8015bf8 <vTaskSwitchContext+0xf0>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d003      	beq.n	8015b1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015b16:	4b39      	ldr	r3, [pc, #228]	; (8015bfc <vTaskSwitchContext+0xf4>)
 8015b18:	2201      	movs	r2, #1
 8015b1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015b1c:	e068      	b.n	8015bf0 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8015b1e:	4b37      	ldr	r3, [pc, #220]	; (8015bfc <vTaskSwitchContext+0xf4>)
 8015b20:	2200      	movs	r2, #0
 8015b22:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8015b24:	4b36      	ldr	r3, [pc, #216]	; (8015c00 <vTaskSwitchContext+0xf8>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b2a:	61fb      	str	r3, [r7, #28]
 8015b2c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8015b30:	61bb      	str	r3, [r7, #24]
 8015b32:	69fb      	ldr	r3, [r7, #28]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	69ba      	ldr	r2, [r7, #24]
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	d111      	bne.n	8015b60 <vTaskSwitchContext+0x58>
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	3304      	adds	r3, #4
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	69ba      	ldr	r2, [r7, #24]
 8015b44:	429a      	cmp	r2, r3
 8015b46:	d10b      	bne.n	8015b60 <vTaskSwitchContext+0x58>
 8015b48:	69fb      	ldr	r3, [r7, #28]
 8015b4a:	3308      	adds	r3, #8
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	69ba      	ldr	r2, [r7, #24]
 8015b50:	429a      	cmp	r2, r3
 8015b52:	d105      	bne.n	8015b60 <vTaskSwitchContext+0x58>
 8015b54:	69fb      	ldr	r3, [r7, #28]
 8015b56:	330c      	adds	r3, #12
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	69ba      	ldr	r2, [r7, #24]
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d008      	beq.n	8015b72 <vTaskSwitchContext+0x6a>
 8015b60:	4b27      	ldr	r3, [pc, #156]	; (8015c00 <vTaskSwitchContext+0xf8>)
 8015b62:	681a      	ldr	r2, [r3, #0]
 8015b64:	4b26      	ldr	r3, [pc, #152]	; (8015c00 <vTaskSwitchContext+0xf8>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	3334      	adds	r3, #52	; 0x34
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	4610      	mov	r0, r2
 8015b6e:	f7ea fd23 	bl	80005b8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b72:	4b24      	ldr	r3, [pc, #144]	; (8015c04 <vTaskSwitchContext+0xfc>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	fab3 f383 	clz	r3, r3
 8015b7e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015b80:	7afb      	ldrb	r3, [r7, #11]
 8015b82:	f1c3 031f 	rsb	r3, r3, #31
 8015b86:	617b      	str	r3, [r7, #20]
 8015b88:	491f      	ldr	r1, [pc, #124]	; (8015c08 <vTaskSwitchContext+0x100>)
 8015b8a:	697a      	ldr	r2, [r7, #20]
 8015b8c:	4613      	mov	r3, r2
 8015b8e:	009b      	lsls	r3, r3, #2
 8015b90:	4413      	add	r3, r2
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	440b      	add	r3, r1
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d10c      	bne.n	8015bb6 <vTaskSwitchContext+0xae>
	__asm volatile
 8015b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ba0:	b672      	cpsid	i
 8015ba2:	f383 8811 	msr	BASEPRI, r3
 8015ba6:	f3bf 8f6f 	isb	sy
 8015baa:	f3bf 8f4f 	dsb	sy
 8015bae:	b662      	cpsie	i
 8015bb0:	607b      	str	r3, [r7, #4]
}
 8015bb2:	bf00      	nop
 8015bb4:	e7fe      	b.n	8015bb4 <vTaskSwitchContext+0xac>
 8015bb6:	697a      	ldr	r2, [r7, #20]
 8015bb8:	4613      	mov	r3, r2
 8015bba:	009b      	lsls	r3, r3, #2
 8015bbc:	4413      	add	r3, r2
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	4a11      	ldr	r2, [pc, #68]	; (8015c08 <vTaskSwitchContext+0x100>)
 8015bc2:	4413      	add	r3, r2
 8015bc4:	613b      	str	r3, [r7, #16]
 8015bc6:	693b      	ldr	r3, [r7, #16]
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	685a      	ldr	r2, [r3, #4]
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	605a      	str	r2, [r3, #4]
 8015bd0:	693b      	ldr	r3, [r7, #16]
 8015bd2:	685a      	ldr	r2, [r3, #4]
 8015bd4:	693b      	ldr	r3, [r7, #16]
 8015bd6:	3308      	adds	r3, #8
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d104      	bne.n	8015be6 <vTaskSwitchContext+0xde>
 8015bdc:	693b      	ldr	r3, [r7, #16]
 8015bde:	685b      	ldr	r3, [r3, #4]
 8015be0:	685a      	ldr	r2, [r3, #4]
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	605a      	str	r2, [r3, #4]
 8015be6:	693b      	ldr	r3, [r7, #16]
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	4a04      	ldr	r2, [pc, #16]	; (8015c00 <vTaskSwitchContext+0xf8>)
 8015bee:	6013      	str	r3, [r2, #0]
}
 8015bf0:	bf00      	nop
 8015bf2:	3720      	adds	r7, #32
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}
 8015bf8:	20000b5c 	.word	0x20000b5c
 8015bfc:	20000b48 	.word	0x20000b48
 8015c00:	20000a34 	.word	0x20000a34
 8015c04:	20000b3c 	.word	0x20000b3c
 8015c08:	20000a38 	.word	0x20000a38

08015c0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b084      	sub	sp, #16
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d10c      	bne.n	8015c36 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8015c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c20:	b672      	cpsid	i
 8015c22:	f383 8811 	msr	BASEPRI, r3
 8015c26:	f3bf 8f6f 	isb	sy
 8015c2a:	f3bf 8f4f 	dsb	sy
 8015c2e:	b662      	cpsie	i
 8015c30:	60fb      	str	r3, [r7, #12]
}
 8015c32:	bf00      	nop
 8015c34:	e7fe      	b.n	8015c34 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015c36:	4b07      	ldr	r3, [pc, #28]	; (8015c54 <vTaskPlaceOnEventList+0x48>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	3318      	adds	r3, #24
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f7fe f9b1 	bl	8013fa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015c44:	2101      	movs	r1, #1
 8015c46:	6838      	ldr	r0, [r7, #0]
 8015c48:	f000 fba4 	bl	8016394 <prvAddCurrentTaskToDelayedList>
}
 8015c4c:	bf00      	nop
 8015c4e:	3710      	adds	r7, #16
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	20000a34 	.word	0x20000a34

08015c58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b086      	sub	sp, #24
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	68db      	ldr	r3, [r3, #12]
 8015c64:	68db      	ldr	r3, [r3, #12]
 8015c66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015c68:	693b      	ldr	r3, [r7, #16]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d10c      	bne.n	8015c88 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8015c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c72:	b672      	cpsid	i
 8015c74:	f383 8811 	msr	BASEPRI, r3
 8015c78:	f3bf 8f6f 	isb	sy
 8015c7c:	f3bf 8f4f 	dsb	sy
 8015c80:	b662      	cpsie	i
 8015c82:	60fb      	str	r3, [r7, #12]
}
 8015c84:	bf00      	nop
 8015c86:	e7fe      	b.n	8015c86 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015c88:	693b      	ldr	r3, [r7, #16]
 8015c8a:	3318      	adds	r3, #24
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f7fe f9c3 	bl	8014018 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c92:	4b1d      	ldr	r3, [pc, #116]	; (8015d08 <xTaskRemoveFromEventList+0xb0>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d11c      	bne.n	8015cd4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015c9a:	693b      	ldr	r3, [r7, #16]
 8015c9c:	3304      	adds	r3, #4
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7fe f9ba 	bl	8014018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ca8:	2201      	movs	r2, #1
 8015caa:	409a      	lsls	r2, r3
 8015cac:	4b17      	ldr	r3, [pc, #92]	; (8015d0c <xTaskRemoveFromEventList+0xb4>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	4313      	orrs	r3, r2
 8015cb2:	4a16      	ldr	r2, [pc, #88]	; (8015d0c <xTaskRemoveFromEventList+0xb4>)
 8015cb4:	6013      	str	r3, [r2, #0]
 8015cb6:	693b      	ldr	r3, [r7, #16]
 8015cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cba:	4613      	mov	r3, r2
 8015cbc:	009b      	lsls	r3, r3, #2
 8015cbe:	4413      	add	r3, r2
 8015cc0:	009b      	lsls	r3, r3, #2
 8015cc2:	4a13      	ldr	r2, [pc, #76]	; (8015d10 <xTaskRemoveFromEventList+0xb8>)
 8015cc4:	441a      	add	r2, r3
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	3304      	adds	r3, #4
 8015cca:	4619      	mov	r1, r3
 8015ccc:	4610      	mov	r0, r2
 8015cce:	f7fe f946 	bl	8013f5e <vListInsertEnd>
 8015cd2:	e005      	b.n	8015ce0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015cd4:	693b      	ldr	r3, [r7, #16]
 8015cd6:	3318      	adds	r3, #24
 8015cd8:	4619      	mov	r1, r3
 8015cda:	480e      	ldr	r0, [pc, #56]	; (8015d14 <xTaskRemoveFromEventList+0xbc>)
 8015cdc:	f7fe f93f 	bl	8013f5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ce4:	4b0c      	ldr	r3, [pc, #48]	; (8015d18 <xTaskRemoveFromEventList+0xc0>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d905      	bls.n	8015cfa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015cee:	2301      	movs	r3, #1
 8015cf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015cf2:	4b0a      	ldr	r3, [pc, #40]	; (8015d1c <xTaskRemoveFromEventList+0xc4>)
 8015cf4:	2201      	movs	r2, #1
 8015cf6:	601a      	str	r2, [r3, #0]
 8015cf8:	e001      	b.n	8015cfe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015cfe:	697b      	ldr	r3, [r7, #20]
}
 8015d00:	4618      	mov	r0, r3
 8015d02:	3718      	adds	r7, #24
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}
 8015d08:	20000b5c 	.word	0x20000b5c
 8015d0c:	20000b3c 	.word	0x20000b3c
 8015d10:	20000a38 	.word	0x20000a38
 8015d14:	20000af4 	.word	0x20000af4
 8015d18:	20000a34 	.word	0x20000a34
 8015d1c:	20000b48 	.word	0x20000b48

08015d20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015d20:	b480      	push	{r7}
 8015d22:	b083      	sub	sp, #12
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015d28:	4b06      	ldr	r3, [pc, #24]	; (8015d44 <vTaskInternalSetTimeOutState+0x24>)
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015d30:	4b05      	ldr	r3, [pc, #20]	; (8015d48 <vTaskInternalSetTimeOutState+0x28>)
 8015d32:	681a      	ldr	r2, [r3, #0]
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	605a      	str	r2, [r3, #4]
}
 8015d38:	bf00      	nop
 8015d3a:	370c      	adds	r7, #12
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d42:	4770      	bx	lr
 8015d44:	20000b4c 	.word	0x20000b4c
 8015d48:	20000b38 	.word	0x20000b38

08015d4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b088      	sub	sp, #32
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
 8015d54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10c      	bne.n	8015d76 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d60:	b672      	cpsid	i
 8015d62:	f383 8811 	msr	BASEPRI, r3
 8015d66:	f3bf 8f6f 	isb	sy
 8015d6a:	f3bf 8f4f 	dsb	sy
 8015d6e:	b662      	cpsie	i
 8015d70:	613b      	str	r3, [r7, #16]
}
 8015d72:	bf00      	nop
 8015d74:	e7fe      	b.n	8015d74 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d10c      	bne.n	8015d96 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8015d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d80:	b672      	cpsid	i
 8015d82:	f383 8811 	msr	BASEPRI, r3
 8015d86:	f3bf 8f6f 	isb	sy
 8015d8a:	f3bf 8f4f 	dsb	sy
 8015d8e:	b662      	cpsie	i
 8015d90:	60fb      	str	r3, [r7, #12]
}
 8015d92:	bf00      	nop
 8015d94:	e7fe      	b.n	8015d94 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8015d96:	f000 fc71 	bl	801667c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015d9a:	4b1d      	ldr	r3, [pc, #116]	; (8015e10 <xTaskCheckForTimeOut+0xc4>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	685b      	ldr	r3, [r3, #4]
 8015da4:	69ba      	ldr	r2, [r7, #24]
 8015da6:	1ad3      	subs	r3, r2, r3
 8015da8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015daa:	683b      	ldr	r3, [r7, #0]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015db2:	d102      	bne.n	8015dba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015db4:	2300      	movs	r3, #0
 8015db6:	61fb      	str	r3, [r7, #28]
 8015db8:	e023      	b.n	8015e02 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681a      	ldr	r2, [r3, #0]
 8015dbe:	4b15      	ldr	r3, [pc, #84]	; (8015e14 <xTaskCheckForTimeOut+0xc8>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	d007      	beq.n	8015dd6 <xTaskCheckForTimeOut+0x8a>
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	69ba      	ldr	r2, [r7, #24]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d302      	bcc.n	8015dd6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	61fb      	str	r3, [r7, #28]
 8015dd4:	e015      	b.n	8015e02 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	697a      	ldr	r2, [r7, #20]
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d20b      	bcs.n	8015df8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015de0:	683b      	ldr	r3, [r7, #0]
 8015de2:	681a      	ldr	r2, [r3, #0]
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	1ad2      	subs	r2, r2, r3
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015dec:	6878      	ldr	r0, [r7, #4]
 8015dee:	f7ff ff97 	bl	8015d20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015df2:	2300      	movs	r3, #0
 8015df4:	61fb      	str	r3, [r7, #28]
 8015df6:	e004      	b.n	8015e02 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015dfe:	2301      	movs	r3, #1
 8015e00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015e02:	f000 fc6f 	bl	80166e4 <vPortExitCritical>

	return xReturn;
 8015e06:	69fb      	ldr	r3, [r7, #28]
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3720      	adds	r7, #32
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}
 8015e10:	20000b38 	.word	0x20000b38
 8015e14:	20000b4c 	.word	0x20000b4c

08015e18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015e18:	b480      	push	{r7}
 8015e1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015e1c:	4b03      	ldr	r3, [pc, #12]	; (8015e2c <vTaskMissedYield+0x14>)
 8015e1e:	2201      	movs	r2, #1
 8015e20:	601a      	str	r2, [r3, #0]
}
 8015e22:	bf00      	nop
 8015e24:	46bd      	mov	sp, r7
 8015e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2a:	4770      	bx	lr
 8015e2c:	20000b48 	.word	0x20000b48

08015e30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b082      	sub	sp, #8
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015e38:	f000 f852 	bl	8015ee0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015e3c:	4b06      	ldr	r3, [pc, #24]	; (8015e58 <prvIdleTask+0x28>)
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2b01      	cmp	r3, #1
 8015e42:	d9f9      	bls.n	8015e38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015e44:	4b05      	ldr	r3, [pc, #20]	; (8015e5c <prvIdleTask+0x2c>)
 8015e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e4a:	601a      	str	r2, [r3, #0]
 8015e4c:	f3bf 8f4f 	dsb	sy
 8015e50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015e54:	e7f0      	b.n	8015e38 <prvIdleTask+0x8>
 8015e56:	bf00      	nop
 8015e58:	20000a38 	.word	0x20000a38
 8015e5c:	e000ed04 	.word	0xe000ed04

08015e60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b082      	sub	sp, #8
 8015e64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e66:	2300      	movs	r3, #0
 8015e68:	607b      	str	r3, [r7, #4]
 8015e6a:	e00c      	b.n	8015e86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	4613      	mov	r3, r2
 8015e70:	009b      	lsls	r3, r3, #2
 8015e72:	4413      	add	r3, r2
 8015e74:	009b      	lsls	r3, r3, #2
 8015e76:	4a12      	ldr	r2, [pc, #72]	; (8015ec0 <prvInitialiseTaskLists+0x60>)
 8015e78:	4413      	add	r3, r2
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7fe f842 	bl	8013f04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	3301      	adds	r3, #1
 8015e84:	607b      	str	r3, [r7, #4]
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	2b06      	cmp	r3, #6
 8015e8a:	d9ef      	bls.n	8015e6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015e8c:	480d      	ldr	r0, [pc, #52]	; (8015ec4 <prvInitialiseTaskLists+0x64>)
 8015e8e:	f7fe f839 	bl	8013f04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015e92:	480d      	ldr	r0, [pc, #52]	; (8015ec8 <prvInitialiseTaskLists+0x68>)
 8015e94:	f7fe f836 	bl	8013f04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015e98:	480c      	ldr	r0, [pc, #48]	; (8015ecc <prvInitialiseTaskLists+0x6c>)
 8015e9a:	f7fe f833 	bl	8013f04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015e9e:	480c      	ldr	r0, [pc, #48]	; (8015ed0 <prvInitialiseTaskLists+0x70>)
 8015ea0:	f7fe f830 	bl	8013f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015ea4:	480b      	ldr	r0, [pc, #44]	; (8015ed4 <prvInitialiseTaskLists+0x74>)
 8015ea6:	f7fe f82d 	bl	8013f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015eaa:	4b0b      	ldr	r3, [pc, #44]	; (8015ed8 <prvInitialiseTaskLists+0x78>)
 8015eac:	4a05      	ldr	r2, [pc, #20]	; (8015ec4 <prvInitialiseTaskLists+0x64>)
 8015eae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015eb0:	4b0a      	ldr	r3, [pc, #40]	; (8015edc <prvInitialiseTaskLists+0x7c>)
 8015eb2:	4a05      	ldr	r2, [pc, #20]	; (8015ec8 <prvInitialiseTaskLists+0x68>)
 8015eb4:	601a      	str	r2, [r3, #0]
}
 8015eb6:	bf00      	nop
 8015eb8:	3708      	adds	r7, #8
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}
 8015ebe:	bf00      	nop
 8015ec0:	20000a38 	.word	0x20000a38
 8015ec4:	20000ac4 	.word	0x20000ac4
 8015ec8:	20000ad8 	.word	0x20000ad8
 8015ecc:	20000af4 	.word	0x20000af4
 8015ed0:	20000b08 	.word	0x20000b08
 8015ed4:	20000b20 	.word	0x20000b20
 8015ed8:	20000aec 	.word	0x20000aec
 8015edc:	20000af0 	.word	0x20000af0

08015ee0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b082      	sub	sp, #8
 8015ee4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015ee6:	e019      	b.n	8015f1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015ee8:	f000 fbc8 	bl	801667c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015eec:	4b10      	ldr	r3, [pc, #64]	; (8015f30 <prvCheckTasksWaitingTermination+0x50>)
 8015eee:	68db      	ldr	r3, [r3, #12]
 8015ef0:	68db      	ldr	r3, [r3, #12]
 8015ef2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	3304      	adds	r3, #4
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7fe f88d 	bl	8014018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015efe:	4b0d      	ldr	r3, [pc, #52]	; (8015f34 <prvCheckTasksWaitingTermination+0x54>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	3b01      	subs	r3, #1
 8015f04:	4a0b      	ldr	r2, [pc, #44]	; (8015f34 <prvCheckTasksWaitingTermination+0x54>)
 8015f06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015f08:	4b0b      	ldr	r3, [pc, #44]	; (8015f38 <prvCheckTasksWaitingTermination+0x58>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	3b01      	subs	r3, #1
 8015f0e:	4a0a      	ldr	r2, [pc, #40]	; (8015f38 <prvCheckTasksWaitingTermination+0x58>)
 8015f10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015f12:	f000 fbe7 	bl	80166e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 f810 	bl	8015f3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015f1c:	4b06      	ldr	r3, [pc, #24]	; (8015f38 <prvCheckTasksWaitingTermination+0x58>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d1e1      	bne.n	8015ee8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015f24:	bf00      	nop
 8015f26:	bf00      	nop
 8015f28:	3708      	adds	r7, #8
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}
 8015f2e:	bf00      	nop
 8015f30:	20000b08 	.word	0x20000b08
 8015f34:	20000b34 	.word	0x20000b34
 8015f38:	20000b1c 	.word	0x20000b1c

08015f3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b084      	sub	sp, #16
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d108      	bne.n	8015f60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f52:	4618      	mov	r0, r3
 8015f54:	f000 fd8e 	bl	8016a74 <vPortFree>
				vPortFree( pxTCB );
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f000 fd8b 	bl	8016a74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015f5e:	e01a      	b.n	8015f96 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015f66:	2b01      	cmp	r3, #1
 8015f68:	d103      	bne.n	8015f72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f000 fd82 	bl	8016a74 <vPortFree>
	}
 8015f70:	e011      	b.n	8015f96 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015f78:	2b02      	cmp	r3, #2
 8015f7a:	d00c      	beq.n	8015f96 <prvDeleteTCB+0x5a>
	__asm volatile
 8015f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f80:	b672      	cpsid	i
 8015f82:	f383 8811 	msr	BASEPRI, r3
 8015f86:	f3bf 8f6f 	isb	sy
 8015f8a:	f3bf 8f4f 	dsb	sy
 8015f8e:	b662      	cpsie	i
 8015f90:	60fb      	str	r3, [r7, #12]
}
 8015f92:	bf00      	nop
 8015f94:	e7fe      	b.n	8015f94 <prvDeleteTCB+0x58>
	}
 8015f96:	bf00      	nop
 8015f98:	3710      	adds	r7, #16
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
	...

08015fa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015fa0:	b480      	push	{r7}
 8015fa2:	b083      	sub	sp, #12
 8015fa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015fa6:	4b0c      	ldr	r3, [pc, #48]	; (8015fd8 <prvResetNextTaskUnblockTime+0x38>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d104      	bne.n	8015fba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015fb0:	4b0a      	ldr	r3, [pc, #40]	; (8015fdc <prvResetNextTaskUnblockTime+0x3c>)
 8015fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8015fb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015fb8:	e008      	b.n	8015fcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015fba:	4b07      	ldr	r3, [pc, #28]	; (8015fd8 <prvResetNextTaskUnblockTime+0x38>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	68db      	ldr	r3, [r3, #12]
 8015fc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	685b      	ldr	r3, [r3, #4]
 8015fc8:	4a04      	ldr	r2, [pc, #16]	; (8015fdc <prvResetNextTaskUnblockTime+0x3c>)
 8015fca:	6013      	str	r3, [r2, #0]
}
 8015fcc:	bf00      	nop
 8015fce:	370c      	adds	r7, #12
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd6:	4770      	bx	lr
 8015fd8:	20000aec 	.word	0x20000aec
 8015fdc:	20000b54 	.word	0x20000b54

08015fe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015fe0:	b480      	push	{r7}
 8015fe2:	b083      	sub	sp, #12
 8015fe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015fe6:	4b0b      	ldr	r3, [pc, #44]	; (8016014 <xTaskGetSchedulerState+0x34>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d102      	bne.n	8015ff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015fee:	2301      	movs	r3, #1
 8015ff0:	607b      	str	r3, [r7, #4]
 8015ff2:	e008      	b.n	8016006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ff4:	4b08      	ldr	r3, [pc, #32]	; (8016018 <xTaskGetSchedulerState+0x38>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d102      	bne.n	8016002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015ffc:	2302      	movs	r3, #2
 8015ffe:	607b      	str	r3, [r7, #4]
 8016000:	e001      	b.n	8016006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016002:	2300      	movs	r3, #0
 8016004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016006:	687b      	ldr	r3, [r7, #4]
	}
 8016008:	4618      	mov	r0, r3
 801600a:	370c      	adds	r7, #12
 801600c:	46bd      	mov	sp, r7
 801600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016012:	4770      	bx	lr
 8016014:	20000b40 	.word	0x20000b40
 8016018:	20000b5c 	.word	0x20000b5c

0801601c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801601c:	b580      	push	{r7, lr}
 801601e:	b084      	sub	sp, #16
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016028:	2300      	movs	r3, #0
 801602a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d069      	beq.n	8016106 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016036:	4b36      	ldr	r3, [pc, #216]	; (8016110 <xTaskPriorityInherit+0xf4>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801603c:	429a      	cmp	r2, r3
 801603e:	d259      	bcs.n	80160f4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	699b      	ldr	r3, [r3, #24]
 8016044:	2b00      	cmp	r3, #0
 8016046:	db06      	blt.n	8016056 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016048:	4b31      	ldr	r3, [pc, #196]	; (8016110 <xTaskPriorityInherit+0xf4>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801604e:	f1c3 0207 	rsb	r2, r3, #7
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016056:	68bb      	ldr	r3, [r7, #8]
 8016058:	6959      	ldr	r1, [r3, #20]
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801605e:	4613      	mov	r3, r2
 8016060:	009b      	lsls	r3, r3, #2
 8016062:	4413      	add	r3, r2
 8016064:	009b      	lsls	r3, r3, #2
 8016066:	4a2b      	ldr	r2, [pc, #172]	; (8016114 <xTaskPriorityInherit+0xf8>)
 8016068:	4413      	add	r3, r2
 801606a:	4299      	cmp	r1, r3
 801606c:	d13a      	bne.n	80160e4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801606e:	68bb      	ldr	r3, [r7, #8]
 8016070:	3304      	adds	r3, #4
 8016072:	4618      	mov	r0, r3
 8016074:	f7fd ffd0 	bl	8014018 <uxListRemove>
 8016078:	4603      	mov	r3, r0
 801607a:	2b00      	cmp	r3, #0
 801607c:	d115      	bne.n	80160aa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016082:	4924      	ldr	r1, [pc, #144]	; (8016114 <xTaskPriorityInherit+0xf8>)
 8016084:	4613      	mov	r3, r2
 8016086:	009b      	lsls	r3, r3, #2
 8016088:	4413      	add	r3, r2
 801608a:	009b      	lsls	r3, r3, #2
 801608c:	440b      	add	r3, r1
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d10a      	bne.n	80160aa <xTaskPriorityInherit+0x8e>
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016098:	2201      	movs	r2, #1
 801609a:	fa02 f303 	lsl.w	r3, r2, r3
 801609e:	43da      	mvns	r2, r3
 80160a0:	4b1d      	ldr	r3, [pc, #116]	; (8016118 <xTaskPriorityInherit+0xfc>)
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	4013      	ands	r3, r2
 80160a6:	4a1c      	ldr	r2, [pc, #112]	; (8016118 <xTaskPriorityInherit+0xfc>)
 80160a8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80160aa:	4b19      	ldr	r3, [pc, #100]	; (8016110 <xTaskPriorityInherit+0xf4>)
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160b8:	2201      	movs	r2, #1
 80160ba:	409a      	lsls	r2, r3
 80160bc:	4b16      	ldr	r3, [pc, #88]	; (8016118 <xTaskPriorityInherit+0xfc>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	4313      	orrs	r3, r2
 80160c2:	4a15      	ldr	r2, [pc, #84]	; (8016118 <xTaskPriorityInherit+0xfc>)
 80160c4:	6013      	str	r3, [r2, #0]
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160ca:	4613      	mov	r3, r2
 80160cc:	009b      	lsls	r3, r3, #2
 80160ce:	4413      	add	r3, r2
 80160d0:	009b      	lsls	r3, r3, #2
 80160d2:	4a10      	ldr	r2, [pc, #64]	; (8016114 <xTaskPriorityInherit+0xf8>)
 80160d4:	441a      	add	r2, r3
 80160d6:	68bb      	ldr	r3, [r7, #8]
 80160d8:	3304      	adds	r3, #4
 80160da:	4619      	mov	r1, r3
 80160dc:	4610      	mov	r0, r2
 80160de:	f7fd ff3e 	bl	8013f5e <vListInsertEnd>
 80160e2:	e004      	b.n	80160ee <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80160e4:	4b0a      	ldr	r3, [pc, #40]	; (8016110 <xTaskPriorityInherit+0xf4>)
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80160ee:	2301      	movs	r3, #1
 80160f0:	60fb      	str	r3, [r7, #12]
 80160f2:	e008      	b.n	8016106 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80160f8:	4b05      	ldr	r3, [pc, #20]	; (8016110 <xTaskPriorityInherit+0xf4>)
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160fe:	429a      	cmp	r2, r3
 8016100:	d201      	bcs.n	8016106 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016102:	2301      	movs	r3, #1
 8016104:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016106:	68fb      	ldr	r3, [r7, #12]
	}
 8016108:	4618      	mov	r0, r3
 801610a:	3710      	adds	r7, #16
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}
 8016110:	20000a34 	.word	0x20000a34
 8016114:	20000a38 	.word	0x20000a38
 8016118:	20000b3c 	.word	0x20000b3c

0801611c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801611c:	b580      	push	{r7, lr}
 801611e:	b086      	sub	sp, #24
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016128:	2300      	movs	r3, #0
 801612a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d072      	beq.n	8016218 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016132:	4b3c      	ldr	r3, [pc, #240]	; (8016224 <xTaskPriorityDisinherit+0x108>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	693a      	ldr	r2, [r7, #16]
 8016138:	429a      	cmp	r2, r3
 801613a:	d00c      	beq.n	8016156 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 801613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016140:	b672      	cpsid	i
 8016142:	f383 8811 	msr	BASEPRI, r3
 8016146:	f3bf 8f6f 	isb	sy
 801614a:	f3bf 8f4f 	dsb	sy
 801614e:	b662      	cpsie	i
 8016150:	60fb      	str	r3, [r7, #12]
}
 8016152:	bf00      	nop
 8016154:	e7fe      	b.n	8016154 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801615a:	2b00      	cmp	r3, #0
 801615c:	d10c      	bne.n	8016178 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016162:	b672      	cpsid	i
 8016164:	f383 8811 	msr	BASEPRI, r3
 8016168:	f3bf 8f6f 	isb	sy
 801616c:	f3bf 8f4f 	dsb	sy
 8016170:	b662      	cpsie	i
 8016172:	60bb      	str	r3, [r7, #8]
}
 8016174:	bf00      	nop
 8016176:	e7fe      	b.n	8016176 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801617c:	1e5a      	subs	r2, r3, #1
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016182:	693b      	ldr	r3, [r7, #16]
 8016184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801618a:	429a      	cmp	r2, r3
 801618c:	d044      	beq.n	8016218 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016192:	2b00      	cmp	r3, #0
 8016194:	d140      	bne.n	8016218 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016196:	693b      	ldr	r3, [r7, #16]
 8016198:	3304      	adds	r3, #4
 801619a:	4618      	mov	r0, r3
 801619c:	f7fd ff3c 	bl	8014018 <uxListRemove>
 80161a0:	4603      	mov	r3, r0
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d115      	bne.n	80161d2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80161a6:	693b      	ldr	r3, [r7, #16]
 80161a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161aa:	491f      	ldr	r1, [pc, #124]	; (8016228 <xTaskPriorityDisinherit+0x10c>)
 80161ac:	4613      	mov	r3, r2
 80161ae:	009b      	lsls	r3, r3, #2
 80161b0:	4413      	add	r3, r2
 80161b2:	009b      	lsls	r3, r3, #2
 80161b4:	440b      	add	r3, r1
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d10a      	bne.n	80161d2 <xTaskPriorityDisinherit+0xb6>
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161c0:	2201      	movs	r2, #1
 80161c2:	fa02 f303 	lsl.w	r3, r2, r3
 80161c6:	43da      	mvns	r2, r3
 80161c8:	4b18      	ldr	r3, [pc, #96]	; (801622c <xTaskPriorityDisinherit+0x110>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	4013      	ands	r3, r2
 80161ce:	4a17      	ldr	r2, [pc, #92]	; (801622c <xTaskPriorityDisinherit+0x110>)
 80161d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80161d2:	693b      	ldr	r3, [r7, #16]
 80161d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80161d6:	693b      	ldr	r3, [r7, #16]
 80161d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161da:	693b      	ldr	r3, [r7, #16]
 80161dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161de:	f1c3 0207 	rsb	r2, r3, #7
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80161e6:	693b      	ldr	r3, [r7, #16]
 80161e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161ea:	2201      	movs	r2, #1
 80161ec:	409a      	lsls	r2, r3
 80161ee:	4b0f      	ldr	r3, [pc, #60]	; (801622c <xTaskPriorityDisinherit+0x110>)
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	4313      	orrs	r3, r2
 80161f4:	4a0d      	ldr	r2, [pc, #52]	; (801622c <xTaskPriorityDisinherit+0x110>)
 80161f6:	6013      	str	r3, [r2, #0]
 80161f8:	693b      	ldr	r3, [r7, #16]
 80161fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161fc:	4613      	mov	r3, r2
 80161fe:	009b      	lsls	r3, r3, #2
 8016200:	4413      	add	r3, r2
 8016202:	009b      	lsls	r3, r3, #2
 8016204:	4a08      	ldr	r2, [pc, #32]	; (8016228 <xTaskPriorityDisinherit+0x10c>)
 8016206:	441a      	add	r2, r3
 8016208:	693b      	ldr	r3, [r7, #16]
 801620a:	3304      	adds	r3, #4
 801620c:	4619      	mov	r1, r3
 801620e:	4610      	mov	r0, r2
 8016210:	f7fd fea5 	bl	8013f5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016214:	2301      	movs	r3, #1
 8016216:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016218:	697b      	ldr	r3, [r7, #20]
	}
 801621a:	4618      	mov	r0, r3
 801621c:	3718      	adds	r7, #24
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}
 8016222:	bf00      	nop
 8016224:	20000a34 	.word	0x20000a34
 8016228:	20000a38 	.word	0x20000a38
 801622c:	20000b3c 	.word	0x20000b3c

08016230 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016230:	b580      	push	{r7, lr}
 8016232:	b088      	sub	sp, #32
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
 8016238:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801623e:	2301      	movs	r3, #1
 8016240:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2b00      	cmp	r3, #0
 8016246:	f000 8087 	beq.w	8016358 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801624a:	69bb      	ldr	r3, [r7, #24]
 801624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801624e:	2b00      	cmp	r3, #0
 8016250:	d10c      	bne.n	801626c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8016252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016256:	b672      	cpsid	i
 8016258:	f383 8811 	msr	BASEPRI, r3
 801625c:	f3bf 8f6f 	isb	sy
 8016260:	f3bf 8f4f 	dsb	sy
 8016264:	b662      	cpsie	i
 8016266:	60fb      	str	r3, [r7, #12]
}
 8016268:	bf00      	nop
 801626a:	e7fe      	b.n	801626a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801626c:	69bb      	ldr	r3, [r7, #24]
 801626e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016270:	683a      	ldr	r2, [r7, #0]
 8016272:	429a      	cmp	r2, r3
 8016274:	d902      	bls.n	801627c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	61fb      	str	r3, [r7, #28]
 801627a:	e002      	b.n	8016282 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801627c:	69bb      	ldr	r3, [r7, #24]
 801627e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016280:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016282:	69bb      	ldr	r3, [r7, #24]
 8016284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016286:	69fa      	ldr	r2, [r7, #28]
 8016288:	429a      	cmp	r2, r3
 801628a:	d065      	beq.n	8016358 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801628c:	69bb      	ldr	r3, [r7, #24]
 801628e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016290:	697a      	ldr	r2, [r7, #20]
 8016292:	429a      	cmp	r2, r3
 8016294:	d160      	bne.n	8016358 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016296:	4b32      	ldr	r3, [pc, #200]	; (8016360 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	69ba      	ldr	r2, [r7, #24]
 801629c:	429a      	cmp	r2, r3
 801629e:	d10c      	bne.n	80162ba <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80162a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a4:	b672      	cpsid	i
 80162a6:	f383 8811 	msr	BASEPRI, r3
 80162aa:	f3bf 8f6f 	isb	sy
 80162ae:	f3bf 8f4f 	dsb	sy
 80162b2:	b662      	cpsie	i
 80162b4:	60bb      	str	r3, [r7, #8]
}
 80162b6:	bf00      	nop
 80162b8:	e7fe      	b.n	80162b8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80162ba:	69bb      	ldr	r3, [r7, #24]
 80162bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80162c0:	69bb      	ldr	r3, [r7, #24]
 80162c2:	69fa      	ldr	r2, [r7, #28]
 80162c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	699b      	ldr	r3, [r3, #24]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	db04      	blt.n	80162d8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162ce:	69fb      	ldr	r3, [r7, #28]
 80162d0:	f1c3 0207 	rsb	r2, r3, #7
 80162d4:	69bb      	ldr	r3, [r7, #24]
 80162d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80162d8:	69bb      	ldr	r3, [r7, #24]
 80162da:	6959      	ldr	r1, [r3, #20]
 80162dc:	693a      	ldr	r2, [r7, #16]
 80162de:	4613      	mov	r3, r2
 80162e0:	009b      	lsls	r3, r3, #2
 80162e2:	4413      	add	r3, r2
 80162e4:	009b      	lsls	r3, r3, #2
 80162e6:	4a1f      	ldr	r2, [pc, #124]	; (8016364 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80162e8:	4413      	add	r3, r2
 80162ea:	4299      	cmp	r1, r3
 80162ec:	d134      	bne.n	8016358 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80162ee:	69bb      	ldr	r3, [r7, #24]
 80162f0:	3304      	adds	r3, #4
 80162f2:	4618      	mov	r0, r3
 80162f4:	f7fd fe90 	bl	8014018 <uxListRemove>
 80162f8:	4603      	mov	r3, r0
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d115      	bne.n	801632a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80162fe:	69bb      	ldr	r3, [r7, #24]
 8016300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016302:	4918      	ldr	r1, [pc, #96]	; (8016364 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8016304:	4613      	mov	r3, r2
 8016306:	009b      	lsls	r3, r3, #2
 8016308:	4413      	add	r3, r2
 801630a:	009b      	lsls	r3, r3, #2
 801630c:	440b      	add	r3, r1
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d10a      	bne.n	801632a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8016314:	69bb      	ldr	r3, [r7, #24]
 8016316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016318:	2201      	movs	r2, #1
 801631a:	fa02 f303 	lsl.w	r3, r2, r3
 801631e:	43da      	mvns	r2, r3
 8016320:	4b11      	ldr	r3, [pc, #68]	; (8016368 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	4013      	ands	r3, r2
 8016326:	4a10      	ldr	r2, [pc, #64]	; (8016368 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016328:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801632a:	69bb      	ldr	r3, [r7, #24]
 801632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801632e:	2201      	movs	r2, #1
 8016330:	409a      	lsls	r2, r3
 8016332:	4b0d      	ldr	r3, [pc, #52]	; (8016368 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	4313      	orrs	r3, r2
 8016338:	4a0b      	ldr	r2, [pc, #44]	; (8016368 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801633a:	6013      	str	r3, [r2, #0]
 801633c:	69bb      	ldr	r3, [r7, #24]
 801633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016340:	4613      	mov	r3, r2
 8016342:	009b      	lsls	r3, r3, #2
 8016344:	4413      	add	r3, r2
 8016346:	009b      	lsls	r3, r3, #2
 8016348:	4a06      	ldr	r2, [pc, #24]	; (8016364 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801634a:	441a      	add	r2, r3
 801634c:	69bb      	ldr	r3, [r7, #24]
 801634e:	3304      	adds	r3, #4
 8016350:	4619      	mov	r1, r3
 8016352:	4610      	mov	r0, r2
 8016354:	f7fd fe03 	bl	8013f5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016358:	bf00      	nop
 801635a:	3720      	adds	r7, #32
 801635c:	46bd      	mov	sp, r7
 801635e:	bd80      	pop	{r7, pc}
 8016360:	20000a34 	.word	0x20000a34
 8016364:	20000a38 	.word	0x20000a38
 8016368:	20000b3c 	.word	0x20000b3c

0801636c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801636c:	b480      	push	{r7}
 801636e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016370:	4b07      	ldr	r3, [pc, #28]	; (8016390 <pvTaskIncrementMutexHeldCount+0x24>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d004      	beq.n	8016382 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016378:	4b05      	ldr	r3, [pc, #20]	; (8016390 <pvTaskIncrementMutexHeldCount+0x24>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801637e:	3201      	adds	r2, #1
 8016380:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016382:	4b03      	ldr	r3, [pc, #12]	; (8016390 <pvTaskIncrementMutexHeldCount+0x24>)
 8016384:	681b      	ldr	r3, [r3, #0]
	}
 8016386:	4618      	mov	r0, r3
 8016388:	46bd      	mov	sp, r7
 801638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638e:	4770      	bx	lr
 8016390:	20000a34 	.word	0x20000a34

08016394 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b084      	sub	sp, #16
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
 801639c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801639e:	4b29      	ldr	r3, [pc, #164]	; (8016444 <prvAddCurrentTaskToDelayedList+0xb0>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80163a4:	4b28      	ldr	r3, [pc, #160]	; (8016448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	3304      	adds	r3, #4
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7fd fe34 	bl	8014018 <uxListRemove>
 80163b0:	4603      	mov	r3, r0
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d10b      	bne.n	80163ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80163b6:	4b24      	ldr	r3, [pc, #144]	; (8016448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163bc:	2201      	movs	r2, #1
 80163be:	fa02 f303 	lsl.w	r3, r2, r3
 80163c2:	43da      	mvns	r2, r3
 80163c4:	4b21      	ldr	r3, [pc, #132]	; (801644c <prvAddCurrentTaskToDelayedList+0xb8>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	4013      	ands	r3, r2
 80163ca:	4a20      	ldr	r2, [pc, #128]	; (801644c <prvAddCurrentTaskToDelayedList+0xb8>)
 80163cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163d4:	d10a      	bne.n	80163ec <prvAddCurrentTaskToDelayedList+0x58>
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d007      	beq.n	80163ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80163dc:	4b1a      	ldr	r3, [pc, #104]	; (8016448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	3304      	adds	r3, #4
 80163e2:	4619      	mov	r1, r3
 80163e4:	481a      	ldr	r0, [pc, #104]	; (8016450 <prvAddCurrentTaskToDelayedList+0xbc>)
 80163e6:	f7fd fdba 	bl	8013f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80163ea:	e026      	b.n	801643a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80163ec:	68fa      	ldr	r2, [r7, #12]
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	4413      	add	r3, r2
 80163f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80163f4:	4b14      	ldr	r3, [pc, #80]	; (8016448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	68ba      	ldr	r2, [r7, #8]
 80163fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80163fc:	68ba      	ldr	r2, [r7, #8]
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	429a      	cmp	r2, r3
 8016402:	d209      	bcs.n	8016418 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016404:	4b13      	ldr	r3, [pc, #76]	; (8016454 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016406:	681a      	ldr	r2, [r3, #0]
 8016408:	4b0f      	ldr	r3, [pc, #60]	; (8016448 <prvAddCurrentTaskToDelayedList+0xb4>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	3304      	adds	r3, #4
 801640e:	4619      	mov	r1, r3
 8016410:	4610      	mov	r0, r2
 8016412:	f7fd fdc8 	bl	8013fa6 <vListInsert>
}
 8016416:	e010      	b.n	801643a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016418:	4b0f      	ldr	r3, [pc, #60]	; (8016458 <prvAddCurrentTaskToDelayedList+0xc4>)
 801641a:	681a      	ldr	r2, [r3, #0]
 801641c:	4b0a      	ldr	r3, [pc, #40]	; (8016448 <prvAddCurrentTaskToDelayedList+0xb4>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	3304      	adds	r3, #4
 8016422:	4619      	mov	r1, r3
 8016424:	4610      	mov	r0, r2
 8016426:	f7fd fdbe 	bl	8013fa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801642a:	4b0c      	ldr	r3, [pc, #48]	; (801645c <prvAddCurrentTaskToDelayedList+0xc8>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	68ba      	ldr	r2, [r7, #8]
 8016430:	429a      	cmp	r2, r3
 8016432:	d202      	bcs.n	801643a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016434:	4a09      	ldr	r2, [pc, #36]	; (801645c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016436:	68bb      	ldr	r3, [r7, #8]
 8016438:	6013      	str	r3, [r2, #0]
}
 801643a:	bf00      	nop
 801643c:	3710      	adds	r7, #16
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	20000b38 	.word	0x20000b38
 8016448:	20000a34 	.word	0x20000a34
 801644c:	20000b3c 	.word	0x20000b3c
 8016450:	20000b20 	.word	0x20000b20
 8016454:	20000af0 	.word	0x20000af0
 8016458:	20000aec 	.word	0x20000aec
 801645c:	20000b54 	.word	0x20000b54

08016460 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016460:	b480      	push	{r7}
 8016462:	b085      	sub	sp, #20
 8016464:	af00      	add	r7, sp, #0
 8016466:	60f8      	str	r0, [r7, #12]
 8016468:	60b9      	str	r1, [r7, #8]
 801646a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	3b04      	subs	r3, #4
 8016470:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016478:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	3b04      	subs	r3, #4
 801647e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	f023 0201 	bic.w	r2, r3, #1
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	3b04      	subs	r3, #4
 801648e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016490:	4a0c      	ldr	r2, [pc, #48]	; (80164c4 <pxPortInitialiseStack+0x64>)
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	3b14      	subs	r3, #20
 801649a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801649c:	687a      	ldr	r2, [r7, #4]
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	3b04      	subs	r3, #4
 80164a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	f06f 0202 	mvn.w	r2, #2
 80164ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	3b20      	subs	r3, #32
 80164b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80164b6:	68fb      	ldr	r3, [r7, #12]
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	3714      	adds	r7, #20
 80164bc:	46bd      	mov	sp, r7
 80164be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c2:	4770      	bx	lr
 80164c4:	080164c9 	.word	0x080164c9

080164c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80164c8:	b480      	push	{r7}
 80164ca:	b085      	sub	sp, #20
 80164cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80164ce:	2300      	movs	r3, #0
 80164d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80164d2:	4b14      	ldr	r3, [pc, #80]	; (8016524 <prvTaskExitError+0x5c>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164da:	d00c      	beq.n	80164f6 <prvTaskExitError+0x2e>
	__asm volatile
 80164dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e0:	b672      	cpsid	i
 80164e2:	f383 8811 	msr	BASEPRI, r3
 80164e6:	f3bf 8f6f 	isb	sy
 80164ea:	f3bf 8f4f 	dsb	sy
 80164ee:	b662      	cpsie	i
 80164f0:	60fb      	str	r3, [r7, #12]
}
 80164f2:	bf00      	nop
 80164f4:	e7fe      	b.n	80164f4 <prvTaskExitError+0x2c>
	__asm volatile
 80164f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164fa:	b672      	cpsid	i
 80164fc:	f383 8811 	msr	BASEPRI, r3
 8016500:	f3bf 8f6f 	isb	sy
 8016504:	f3bf 8f4f 	dsb	sy
 8016508:	b662      	cpsie	i
 801650a:	60bb      	str	r3, [r7, #8]
}
 801650c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801650e:	bf00      	nop
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d0fc      	beq.n	8016510 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016516:	bf00      	nop
 8016518:	bf00      	nop
 801651a:	3714      	adds	r7, #20
 801651c:	46bd      	mov	sp, r7
 801651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016522:	4770      	bx	lr
 8016524:	20000348 	.word	0x20000348
	...

08016530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016530:	4b07      	ldr	r3, [pc, #28]	; (8016550 <pxCurrentTCBConst2>)
 8016532:	6819      	ldr	r1, [r3, #0]
 8016534:	6808      	ldr	r0, [r1, #0]
 8016536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801653a:	f380 8809 	msr	PSP, r0
 801653e:	f3bf 8f6f 	isb	sy
 8016542:	f04f 0000 	mov.w	r0, #0
 8016546:	f380 8811 	msr	BASEPRI, r0
 801654a:	4770      	bx	lr
 801654c:	f3af 8000 	nop.w

08016550 <pxCurrentTCBConst2>:
 8016550:	20000a34 	.word	0x20000a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016554:	bf00      	nop
 8016556:	bf00      	nop

08016558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016558:	4808      	ldr	r0, [pc, #32]	; (801657c <prvPortStartFirstTask+0x24>)
 801655a:	6800      	ldr	r0, [r0, #0]
 801655c:	6800      	ldr	r0, [r0, #0]
 801655e:	f380 8808 	msr	MSP, r0
 8016562:	f04f 0000 	mov.w	r0, #0
 8016566:	f380 8814 	msr	CONTROL, r0
 801656a:	b662      	cpsie	i
 801656c:	b661      	cpsie	f
 801656e:	f3bf 8f4f 	dsb	sy
 8016572:	f3bf 8f6f 	isb	sy
 8016576:	df00      	svc	0
 8016578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801657a:	bf00      	nop
 801657c:	e000ed08 	.word	0xe000ed08

08016580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b084      	sub	sp, #16
 8016584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016586:	4b37      	ldr	r3, [pc, #220]	; (8016664 <xPortStartScheduler+0xe4>)
 8016588:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	781b      	ldrb	r3, [r3, #0]
 801658e:	b2db      	uxtb	r3, r3
 8016590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	22ff      	movs	r2, #255	; 0xff
 8016596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	b2db      	uxtb	r3, r3
 801659e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80165a0:	78fb      	ldrb	r3, [r7, #3]
 80165a2:	b2db      	uxtb	r3, r3
 80165a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80165a8:	b2da      	uxtb	r2, r3
 80165aa:	4b2f      	ldr	r3, [pc, #188]	; (8016668 <xPortStartScheduler+0xe8>)
 80165ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80165ae:	4b2f      	ldr	r3, [pc, #188]	; (801666c <xPortStartScheduler+0xec>)
 80165b0:	2207      	movs	r2, #7
 80165b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165b4:	e009      	b.n	80165ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80165b6:	4b2d      	ldr	r3, [pc, #180]	; (801666c <xPortStartScheduler+0xec>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	3b01      	subs	r3, #1
 80165bc:	4a2b      	ldr	r2, [pc, #172]	; (801666c <xPortStartScheduler+0xec>)
 80165be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80165c0:	78fb      	ldrb	r3, [r7, #3]
 80165c2:	b2db      	uxtb	r3, r3
 80165c4:	005b      	lsls	r3, r3, #1
 80165c6:	b2db      	uxtb	r3, r3
 80165c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165ca:	78fb      	ldrb	r3, [r7, #3]
 80165cc:	b2db      	uxtb	r3, r3
 80165ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165d2:	2b80      	cmp	r3, #128	; 0x80
 80165d4:	d0ef      	beq.n	80165b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80165d6:	4b25      	ldr	r3, [pc, #148]	; (801666c <xPortStartScheduler+0xec>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	f1c3 0307 	rsb	r3, r3, #7
 80165de:	2b04      	cmp	r3, #4
 80165e0:	d00c      	beq.n	80165fc <xPortStartScheduler+0x7c>
	__asm volatile
 80165e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165e6:	b672      	cpsid	i
 80165e8:	f383 8811 	msr	BASEPRI, r3
 80165ec:	f3bf 8f6f 	isb	sy
 80165f0:	f3bf 8f4f 	dsb	sy
 80165f4:	b662      	cpsie	i
 80165f6:	60bb      	str	r3, [r7, #8]
}
 80165f8:	bf00      	nop
 80165fa:	e7fe      	b.n	80165fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80165fc:	4b1b      	ldr	r3, [pc, #108]	; (801666c <xPortStartScheduler+0xec>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	021b      	lsls	r3, r3, #8
 8016602:	4a1a      	ldr	r2, [pc, #104]	; (801666c <xPortStartScheduler+0xec>)
 8016604:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016606:	4b19      	ldr	r3, [pc, #100]	; (801666c <xPortStartScheduler+0xec>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801660e:	4a17      	ldr	r2, [pc, #92]	; (801666c <xPortStartScheduler+0xec>)
 8016610:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	b2da      	uxtb	r2, r3
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801661a:	4b15      	ldr	r3, [pc, #84]	; (8016670 <xPortStartScheduler+0xf0>)
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	4a14      	ldr	r2, [pc, #80]	; (8016670 <xPortStartScheduler+0xf0>)
 8016620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016624:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016626:	4b12      	ldr	r3, [pc, #72]	; (8016670 <xPortStartScheduler+0xf0>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	4a11      	ldr	r2, [pc, #68]	; (8016670 <xPortStartScheduler+0xf0>)
 801662c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016630:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016632:	f000 f8dd 	bl	80167f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016636:	4b0f      	ldr	r3, [pc, #60]	; (8016674 <xPortStartScheduler+0xf4>)
 8016638:	2200      	movs	r2, #0
 801663a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801663c:	f000 f8fc 	bl	8016838 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016640:	4b0d      	ldr	r3, [pc, #52]	; (8016678 <xPortStartScheduler+0xf8>)
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	4a0c      	ldr	r2, [pc, #48]	; (8016678 <xPortStartScheduler+0xf8>)
 8016646:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801664a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801664c:	f7ff ff84 	bl	8016558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016650:	f7ff fa5a 	bl	8015b08 <vTaskSwitchContext>
	prvTaskExitError();
 8016654:	f7ff ff38 	bl	80164c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016658:	2300      	movs	r3, #0
}
 801665a:	4618      	mov	r0, r3
 801665c:	3710      	adds	r7, #16
 801665e:	46bd      	mov	sp, r7
 8016660:	bd80      	pop	{r7, pc}
 8016662:	bf00      	nop
 8016664:	e000e400 	.word	0xe000e400
 8016668:	20000b60 	.word	0x20000b60
 801666c:	20000b64 	.word	0x20000b64
 8016670:	e000ed20 	.word	0xe000ed20
 8016674:	20000348 	.word	0x20000348
 8016678:	e000ef34 	.word	0xe000ef34

0801667c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801667c:	b480      	push	{r7}
 801667e:	b083      	sub	sp, #12
 8016680:	af00      	add	r7, sp, #0
	__asm volatile
 8016682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016686:	b672      	cpsid	i
 8016688:	f383 8811 	msr	BASEPRI, r3
 801668c:	f3bf 8f6f 	isb	sy
 8016690:	f3bf 8f4f 	dsb	sy
 8016694:	b662      	cpsie	i
 8016696:	607b      	str	r3, [r7, #4]
}
 8016698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801669a:	4b10      	ldr	r3, [pc, #64]	; (80166dc <vPortEnterCritical+0x60>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	3301      	adds	r3, #1
 80166a0:	4a0e      	ldr	r2, [pc, #56]	; (80166dc <vPortEnterCritical+0x60>)
 80166a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80166a4:	4b0d      	ldr	r3, [pc, #52]	; (80166dc <vPortEnterCritical+0x60>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	2b01      	cmp	r3, #1
 80166aa:	d111      	bne.n	80166d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80166ac:	4b0c      	ldr	r3, [pc, #48]	; (80166e0 <vPortEnterCritical+0x64>)
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	b2db      	uxtb	r3, r3
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d00c      	beq.n	80166d0 <vPortEnterCritical+0x54>
	__asm volatile
 80166b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ba:	b672      	cpsid	i
 80166bc:	f383 8811 	msr	BASEPRI, r3
 80166c0:	f3bf 8f6f 	isb	sy
 80166c4:	f3bf 8f4f 	dsb	sy
 80166c8:	b662      	cpsie	i
 80166ca:	603b      	str	r3, [r7, #0]
}
 80166cc:	bf00      	nop
 80166ce:	e7fe      	b.n	80166ce <vPortEnterCritical+0x52>
	}
}
 80166d0:	bf00      	nop
 80166d2:	370c      	adds	r7, #12
 80166d4:	46bd      	mov	sp, r7
 80166d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166da:	4770      	bx	lr
 80166dc:	20000348 	.word	0x20000348
 80166e0:	e000ed04 	.word	0xe000ed04

080166e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80166e4:	b480      	push	{r7}
 80166e6:	b083      	sub	sp, #12
 80166e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80166ea:	4b13      	ldr	r3, [pc, #76]	; (8016738 <vPortExitCritical+0x54>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d10c      	bne.n	801670c <vPortExitCritical+0x28>
	__asm volatile
 80166f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166f6:	b672      	cpsid	i
 80166f8:	f383 8811 	msr	BASEPRI, r3
 80166fc:	f3bf 8f6f 	isb	sy
 8016700:	f3bf 8f4f 	dsb	sy
 8016704:	b662      	cpsie	i
 8016706:	607b      	str	r3, [r7, #4]
}
 8016708:	bf00      	nop
 801670a:	e7fe      	b.n	801670a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801670c:	4b0a      	ldr	r3, [pc, #40]	; (8016738 <vPortExitCritical+0x54>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	3b01      	subs	r3, #1
 8016712:	4a09      	ldr	r2, [pc, #36]	; (8016738 <vPortExitCritical+0x54>)
 8016714:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016716:	4b08      	ldr	r3, [pc, #32]	; (8016738 <vPortExitCritical+0x54>)
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d105      	bne.n	801672a <vPortExitCritical+0x46>
 801671e:	2300      	movs	r3, #0
 8016720:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	f383 8811 	msr	BASEPRI, r3
}
 8016728:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801672a:	bf00      	nop
 801672c:	370c      	adds	r7, #12
 801672e:	46bd      	mov	sp, r7
 8016730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016734:	4770      	bx	lr
 8016736:	bf00      	nop
 8016738:	20000348 	.word	0x20000348
 801673c:	00000000 	.word	0x00000000

08016740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016740:	f3ef 8009 	mrs	r0, PSP
 8016744:	f3bf 8f6f 	isb	sy
 8016748:	4b15      	ldr	r3, [pc, #84]	; (80167a0 <pxCurrentTCBConst>)
 801674a:	681a      	ldr	r2, [r3, #0]
 801674c:	f01e 0f10 	tst.w	lr, #16
 8016750:	bf08      	it	eq
 8016752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801675a:	6010      	str	r0, [r2, #0]
 801675c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016764:	b672      	cpsid	i
 8016766:	f380 8811 	msr	BASEPRI, r0
 801676a:	f3bf 8f4f 	dsb	sy
 801676e:	f3bf 8f6f 	isb	sy
 8016772:	b662      	cpsie	i
 8016774:	f7ff f9c8 	bl	8015b08 <vTaskSwitchContext>
 8016778:	f04f 0000 	mov.w	r0, #0
 801677c:	f380 8811 	msr	BASEPRI, r0
 8016780:	bc09      	pop	{r0, r3}
 8016782:	6819      	ldr	r1, [r3, #0]
 8016784:	6808      	ldr	r0, [r1, #0]
 8016786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801678a:	f01e 0f10 	tst.w	lr, #16
 801678e:	bf08      	it	eq
 8016790:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016794:	f380 8809 	msr	PSP, r0
 8016798:	f3bf 8f6f 	isb	sy
 801679c:	4770      	bx	lr
 801679e:	bf00      	nop

080167a0 <pxCurrentTCBConst>:
 80167a0:	20000a34 	.word	0x20000a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80167a4:	bf00      	nop
 80167a6:	bf00      	nop

080167a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b082      	sub	sp, #8
 80167ac:	af00      	add	r7, sp, #0
	__asm volatile
 80167ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167b2:	b672      	cpsid	i
 80167b4:	f383 8811 	msr	BASEPRI, r3
 80167b8:	f3bf 8f6f 	isb	sy
 80167bc:	f3bf 8f4f 	dsb	sy
 80167c0:	b662      	cpsie	i
 80167c2:	607b      	str	r3, [r7, #4]
}
 80167c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80167c6:	f7ff f8e5 	bl	8015994 <xTaskIncrementTick>
 80167ca:	4603      	mov	r3, r0
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d003      	beq.n	80167d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80167d0:	4b06      	ldr	r3, [pc, #24]	; (80167ec <SysTick_Handler+0x44>)
 80167d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167d6:	601a      	str	r2, [r3, #0]
 80167d8:	2300      	movs	r3, #0
 80167da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	f383 8811 	msr	BASEPRI, r3
}
 80167e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80167e4:	bf00      	nop
 80167e6:	3708      	adds	r7, #8
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}
 80167ec:	e000ed04 	.word	0xe000ed04

080167f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80167f0:	b480      	push	{r7}
 80167f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80167f4:	4b0b      	ldr	r3, [pc, #44]	; (8016824 <vPortSetupTimerInterrupt+0x34>)
 80167f6:	2200      	movs	r2, #0
 80167f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80167fa:	4b0b      	ldr	r3, [pc, #44]	; (8016828 <vPortSetupTimerInterrupt+0x38>)
 80167fc:	2200      	movs	r2, #0
 80167fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016800:	4b0a      	ldr	r3, [pc, #40]	; (801682c <vPortSetupTimerInterrupt+0x3c>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	4a0a      	ldr	r2, [pc, #40]	; (8016830 <vPortSetupTimerInterrupt+0x40>)
 8016806:	fba2 2303 	umull	r2, r3, r2, r3
 801680a:	099b      	lsrs	r3, r3, #6
 801680c:	4a09      	ldr	r2, [pc, #36]	; (8016834 <vPortSetupTimerInterrupt+0x44>)
 801680e:	3b01      	subs	r3, #1
 8016810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016812:	4b04      	ldr	r3, [pc, #16]	; (8016824 <vPortSetupTimerInterrupt+0x34>)
 8016814:	2207      	movs	r2, #7
 8016816:	601a      	str	r2, [r3, #0]
}
 8016818:	bf00      	nop
 801681a:	46bd      	mov	sp, r7
 801681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016820:	4770      	bx	lr
 8016822:	bf00      	nop
 8016824:	e000e010 	.word	0xe000e010
 8016828:	e000e018 	.word	0xe000e018
 801682c:	20000300 	.word	0x20000300
 8016830:	10624dd3 	.word	0x10624dd3
 8016834:	e000e014 	.word	0xe000e014

08016838 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016838:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016848 <vPortEnableVFP+0x10>
 801683c:	6801      	ldr	r1, [r0, #0]
 801683e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016842:	6001      	str	r1, [r0, #0]
 8016844:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016846:	bf00      	nop
 8016848:	e000ed88 	.word	0xe000ed88

0801684c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801684c:	b480      	push	{r7}
 801684e:	b085      	sub	sp, #20
 8016850:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016852:	f3ef 8305 	mrs	r3, IPSR
 8016856:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	2b0f      	cmp	r3, #15
 801685c:	d916      	bls.n	801688c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801685e:	4a19      	ldr	r2, [pc, #100]	; (80168c4 <vPortValidateInterruptPriority+0x78>)
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	4413      	add	r3, r2
 8016864:	781b      	ldrb	r3, [r3, #0]
 8016866:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016868:	4b17      	ldr	r3, [pc, #92]	; (80168c8 <vPortValidateInterruptPriority+0x7c>)
 801686a:	781b      	ldrb	r3, [r3, #0]
 801686c:	7afa      	ldrb	r2, [r7, #11]
 801686e:	429a      	cmp	r2, r3
 8016870:	d20c      	bcs.n	801688c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8016872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016876:	b672      	cpsid	i
 8016878:	f383 8811 	msr	BASEPRI, r3
 801687c:	f3bf 8f6f 	isb	sy
 8016880:	f3bf 8f4f 	dsb	sy
 8016884:	b662      	cpsie	i
 8016886:	607b      	str	r3, [r7, #4]
}
 8016888:	bf00      	nop
 801688a:	e7fe      	b.n	801688a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801688c:	4b0f      	ldr	r3, [pc, #60]	; (80168cc <vPortValidateInterruptPriority+0x80>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016894:	4b0e      	ldr	r3, [pc, #56]	; (80168d0 <vPortValidateInterruptPriority+0x84>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	429a      	cmp	r2, r3
 801689a:	d90c      	bls.n	80168b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168a0:	b672      	cpsid	i
 80168a2:	f383 8811 	msr	BASEPRI, r3
 80168a6:	f3bf 8f6f 	isb	sy
 80168aa:	f3bf 8f4f 	dsb	sy
 80168ae:	b662      	cpsie	i
 80168b0:	603b      	str	r3, [r7, #0]
}
 80168b2:	bf00      	nop
 80168b4:	e7fe      	b.n	80168b4 <vPortValidateInterruptPriority+0x68>
	}
 80168b6:	bf00      	nop
 80168b8:	3714      	adds	r7, #20
 80168ba:	46bd      	mov	sp, r7
 80168bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c0:	4770      	bx	lr
 80168c2:	bf00      	nop
 80168c4:	e000e3f0 	.word	0xe000e3f0
 80168c8:	20000b60 	.word	0x20000b60
 80168cc:	e000ed0c 	.word	0xe000ed0c
 80168d0:	20000b64 	.word	0x20000b64

080168d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b08a      	sub	sp, #40	; 0x28
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80168dc:	2300      	movs	r3, #0
 80168de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80168e0:	f7fe ff8a 	bl	80157f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80168e4:	4b5e      	ldr	r3, [pc, #376]	; (8016a60 <pvPortMalloc+0x18c>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d101      	bne.n	80168f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80168ec:	f000 f920 	bl	8016b30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80168f0:	4b5c      	ldr	r3, [pc, #368]	; (8016a64 <pvPortMalloc+0x190>)
 80168f2:	681a      	ldr	r2, [r3, #0]
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	4013      	ands	r3, r2
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	f040 8092 	bne.w	8016a22 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d01f      	beq.n	8016944 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8016904:	2208      	movs	r2, #8
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	4413      	add	r3, r2
 801690a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f003 0307 	and.w	r3, r3, #7
 8016912:	2b00      	cmp	r3, #0
 8016914:	d016      	beq.n	8016944 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f023 0307 	bic.w	r3, r3, #7
 801691c:	3308      	adds	r3, #8
 801691e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f003 0307 	and.w	r3, r3, #7
 8016926:	2b00      	cmp	r3, #0
 8016928:	d00c      	beq.n	8016944 <pvPortMalloc+0x70>
	__asm volatile
 801692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801692e:	b672      	cpsid	i
 8016930:	f383 8811 	msr	BASEPRI, r3
 8016934:	f3bf 8f6f 	isb	sy
 8016938:	f3bf 8f4f 	dsb	sy
 801693c:	b662      	cpsie	i
 801693e:	617b      	str	r3, [r7, #20]
}
 8016940:	bf00      	nop
 8016942:	e7fe      	b.n	8016942 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d06b      	beq.n	8016a22 <pvPortMalloc+0x14e>
 801694a:	4b47      	ldr	r3, [pc, #284]	; (8016a68 <pvPortMalloc+0x194>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	687a      	ldr	r2, [r7, #4]
 8016950:	429a      	cmp	r2, r3
 8016952:	d866      	bhi.n	8016a22 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016954:	4b45      	ldr	r3, [pc, #276]	; (8016a6c <pvPortMalloc+0x198>)
 8016956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016958:	4b44      	ldr	r3, [pc, #272]	; (8016a6c <pvPortMalloc+0x198>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801695e:	e004      	b.n	801696a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8016960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	687a      	ldr	r2, [r7, #4]
 8016970:	429a      	cmp	r2, r3
 8016972:	d903      	bls.n	801697c <pvPortMalloc+0xa8>
 8016974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d1f1      	bne.n	8016960 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801697c:	4b38      	ldr	r3, [pc, #224]	; (8016a60 <pvPortMalloc+0x18c>)
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016982:	429a      	cmp	r2, r3
 8016984:	d04d      	beq.n	8016a22 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016986:	6a3b      	ldr	r3, [r7, #32]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	2208      	movs	r2, #8
 801698c:	4413      	add	r3, r2
 801698e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016992:	681a      	ldr	r2, [r3, #0]
 8016994:	6a3b      	ldr	r3, [r7, #32]
 8016996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801699a:	685a      	ldr	r2, [r3, #4]
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	1ad2      	subs	r2, r2, r3
 80169a0:	2308      	movs	r3, #8
 80169a2:	005b      	lsls	r3, r3, #1
 80169a4:	429a      	cmp	r2, r3
 80169a6:	d921      	bls.n	80169ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80169a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	4413      	add	r3, r2
 80169ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80169b0:	69bb      	ldr	r3, [r7, #24]
 80169b2:	f003 0307 	and.w	r3, r3, #7
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d00c      	beq.n	80169d4 <pvPortMalloc+0x100>
	__asm volatile
 80169ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169be:	b672      	cpsid	i
 80169c0:	f383 8811 	msr	BASEPRI, r3
 80169c4:	f3bf 8f6f 	isb	sy
 80169c8:	f3bf 8f4f 	dsb	sy
 80169cc:	b662      	cpsie	i
 80169ce:	613b      	str	r3, [r7, #16]
}
 80169d0:	bf00      	nop
 80169d2:	e7fe      	b.n	80169d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80169d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d6:	685a      	ldr	r2, [r3, #4]
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	1ad2      	subs	r2, r2, r3
 80169dc:	69bb      	ldr	r3, [r7, #24]
 80169de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80169e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e2:	687a      	ldr	r2, [r7, #4]
 80169e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80169e6:	69b8      	ldr	r0, [r7, #24]
 80169e8:	f000 f904 	bl	8016bf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80169ec:	4b1e      	ldr	r3, [pc, #120]	; (8016a68 <pvPortMalloc+0x194>)
 80169ee:	681a      	ldr	r2, [r3, #0]
 80169f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	1ad3      	subs	r3, r2, r3
 80169f6:	4a1c      	ldr	r2, [pc, #112]	; (8016a68 <pvPortMalloc+0x194>)
 80169f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80169fa:	4b1b      	ldr	r3, [pc, #108]	; (8016a68 <pvPortMalloc+0x194>)
 80169fc:	681a      	ldr	r2, [r3, #0]
 80169fe:	4b1c      	ldr	r3, [pc, #112]	; (8016a70 <pvPortMalloc+0x19c>)
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d203      	bcs.n	8016a0e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016a06:	4b18      	ldr	r3, [pc, #96]	; (8016a68 <pvPortMalloc+0x194>)
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	4a19      	ldr	r2, [pc, #100]	; (8016a70 <pvPortMalloc+0x19c>)
 8016a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a10:	685a      	ldr	r2, [r3, #4]
 8016a12:	4b14      	ldr	r3, [pc, #80]	; (8016a64 <pvPortMalloc+0x190>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	431a      	orrs	r2, r3
 8016a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1e:	2200      	movs	r2, #0
 8016a20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016a22:	f7fe fef7 	bl	8015814 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8016a26:	69fb      	ldr	r3, [r7, #28]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d101      	bne.n	8016a30 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8016a2c:	f7e9 fdcf 	bl	80005ce <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a30:	69fb      	ldr	r3, [r7, #28]
 8016a32:	f003 0307 	and.w	r3, r3, #7
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d00c      	beq.n	8016a54 <pvPortMalloc+0x180>
	__asm volatile
 8016a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a3e:	b672      	cpsid	i
 8016a40:	f383 8811 	msr	BASEPRI, r3
 8016a44:	f3bf 8f6f 	isb	sy
 8016a48:	f3bf 8f4f 	dsb	sy
 8016a4c:	b662      	cpsie	i
 8016a4e:	60fb      	str	r3, [r7, #12]
}
 8016a50:	bf00      	nop
 8016a52:	e7fe      	b.n	8016a52 <pvPortMalloc+0x17e>
	return pvReturn;
 8016a54:	69fb      	ldr	r3, [r7, #28]
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	3728      	adds	r7, #40	; 0x28
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	2000f5d0 	.word	0x2000f5d0
 8016a64:	2000f5dc 	.word	0x2000f5dc
 8016a68:	2000f5d4 	.word	0x2000f5d4
 8016a6c:	2000f5c8 	.word	0x2000f5c8
 8016a70:	2000f5d8 	.word	0x2000f5d8

08016a74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b086      	sub	sp, #24
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d04c      	beq.n	8016b20 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016a86:	2308      	movs	r3, #8
 8016a88:	425b      	negs	r3, r3
 8016a8a:	697a      	ldr	r2, [r7, #20]
 8016a8c:	4413      	add	r3, r2
 8016a8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016a90:	697b      	ldr	r3, [r7, #20]
 8016a92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016a94:	693b      	ldr	r3, [r7, #16]
 8016a96:	685a      	ldr	r2, [r3, #4]
 8016a98:	4b23      	ldr	r3, [pc, #140]	; (8016b28 <vPortFree+0xb4>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	4013      	ands	r3, r2
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d10c      	bne.n	8016abc <vPortFree+0x48>
	__asm volatile
 8016aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa6:	b672      	cpsid	i
 8016aa8:	f383 8811 	msr	BASEPRI, r3
 8016aac:	f3bf 8f6f 	isb	sy
 8016ab0:	f3bf 8f4f 	dsb	sy
 8016ab4:	b662      	cpsie	i
 8016ab6:	60fb      	str	r3, [r7, #12]
}
 8016ab8:	bf00      	nop
 8016aba:	e7fe      	b.n	8016aba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016abc:	693b      	ldr	r3, [r7, #16]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d00c      	beq.n	8016ade <vPortFree+0x6a>
	__asm volatile
 8016ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac8:	b672      	cpsid	i
 8016aca:	f383 8811 	msr	BASEPRI, r3
 8016ace:	f3bf 8f6f 	isb	sy
 8016ad2:	f3bf 8f4f 	dsb	sy
 8016ad6:	b662      	cpsie	i
 8016ad8:	60bb      	str	r3, [r7, #8]
}
 8016ada:	bf00      	nop
 8016adc:	e7fe      	b.n	8016adc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ade:	693b      	ldr	r3, [r7, #16]
 8016ae0:	685a      	ldr	r2, [r3, #4]
 8016ae2:	4b11      	ldr	r3, [pc, #68]	; (8016b28 <vPortFree+0xb4>)
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	4013      	ands	r3, r2
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d019      	beq.n	8016b20 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016aec:	693b      	ldr	r3, [r7, #16]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d115      	bne.n	8016b20 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	685a      	ldr	r2, [r3, #4]
 8016af8:	4b0b      	ldr	r3, [pc, #44]	; (8016b28 <vPortFree+0xb4>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	43db      	mvns	r3, r3
 8016afe:	401a      	ands	r2, r3
 8016b00:	693b      	ldr	r3, [r7, #16]
 8016b02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016b04:	f7fe fe78 	bl	80157f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016b08:	693b      	ldr	r3, [r7, #16]
 8016b0a:	685a      	ldr	r2, [r3, #4]
 8016b0c:	4b07      	ldr	r3, [pc, #28]	; (8016b2c <vPortFree+0xb8>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	4413      	add	r3, r2
 8016b12:	4a06      	ldr	r2, [pc, #24]	; (8016b2c <vPortFree+0xb8>)
 8016b14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016b16:	6938      	ldr	r0, [r7, #16]
 8016b18:	f000 f86c 	bl	8016bf4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016b1c:	f7fe fe7a 	bl	8015814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016b20:	bf00      	nop
 8016b22:	3718      	adds	r7, #24
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}
 8016b28:	2000f5dc 	.word	0x2000f5dc
 8016b2c:	2000f5d4 	.word	0x2000f5d4

08016b30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016b30:	b480      	push	{r7}
 8016b32:	b085      	sub	sp, #20
 8016b34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016b36:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016b3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016b3c:	4b27      	ldr	r3, [pc, #156]	; (8016bdc <prvHeapInit+0xac>)
 8016b3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	f003 0307 	and.w	r3, r3, #7
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d00c      	beq.n	8016b64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	3307      	adds	r3, #7
 8016b4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	f023 0307 	bic.w	r3, r3, #7
 8016b56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016b58:	68ba      	ldr	r2, [r7, #8]
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	1ad3      	subs	r3, r2, r3
 8016b5e:	4a1f      	ldr	r2, [pc, #124]	; (8016bdc <prvHeapInit+0xac>)
 8016b60:	4413      	add	r3, r2
 8016b62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016b68:	4a1d      	ldr	r2, [pc, #116]	; (8016be0 <prvHeapInit+0xb0>)
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016b6e:	4b1c      	ldr	r3, [pc, #112]	; (8016be0 <prvHeapInit+0xb0>)
 8016b70:	2200      	movs	r2, #0
 8016b72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	68ba      	ldr	r2, [r7, #8]
 8016b78:	4413      	add	r3, r2
 8016b7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016b7c:	2208      	movs	r2, #8
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	1a9b      	subs	r3, r3, r2
 8016b82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	f023 0307 	bic.w	r3, r3, #7
 8016b8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	4a15      	ldr	r2, [pc, #84]	; (8016be4 <prvHeapInit+0xb4>)
 8016b90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016b92:	4b14      	ldr	r3, [pc, #80]	; (8016be4 <prvHeapInit+0xb4>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2200      	movs	r2, #0
 8016b98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016b9a:	4b12      	ldr	r3, [pc, #72]	; (8016be4 <prvHeapInit+0xb4>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016ba6:	683b      	ldr	r3, [r7, #0]
 8016ba8:	68fa      	ldr	r2, [r7, #12]
 8016baa:	1ad2      	subs	r2, r2, r3
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016bb0:	4b0c      	ldr	r3, [pc, #48]	; (8016be4 <prvHeapInit+0xb4>)
 8016bb2:	681a      	ldr	r2, [r3, #0]
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	685b      	ldr	r3, [r3, #4]
 8016bbc:	4a0a      	ldr	r2, [pc, #40]	; (8016be8 <prvHeapInit+0xb8>)
 8016bbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016bc0:	683b      	ldr	r3, [r7, #0]
 8016bc2:	685b      	ldr	r3, [r3, #4]
 8016bc4:	4a09      	ldr	r2, [pc, #36]	; (8016bec <prvHeapInit+0xbc>)
 8016bc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016bc8:	4b09      	ldr	r3, [pc, #36]	; (8016bf0 <prvHeapInit+0xc0>)
 8016bca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016bce:	601a      	str	r2, [r3, #0]
}
 8016bd0:	bf00      	nop
 8016bd2:	3714      	adds	r7, #20
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bda:	4770      	bx	lr
 8016bdc:	20000b68 	.word	0x20000b68
 8016be0:	2000f5c8 	.word	0x2000f5c8
 8016be4:	2000f5d0 	.word	0x2000f5d0
 8016be8:	2000f5d8 	.word	0x2000f5d8
 8016bec:	2000f5d4 	.word	0x2000f5d4
 8016bf0:	2000f5dc 	.word	0x2000f5dc

08016bf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016bf4:	b480      	push	{r7}
 8016bf6:	b085      	sub	sp, #20
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016bfc:	4b28      	ldr	r3, [pc, #160]	; (8016ca0 <prvInsertBlockIntoFreeList+0xac>)
 8016bfe:	60fb      	str	r3, [r7, #12]
 8016c00:	e002      	b.n	8016c08 <prvInsertBlockIntoFreeList+0x14>
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	60fb      	str	r3, [r7, #12]
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	687a      	ldr	r2, [r7, #4]
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	d8f7      	bhi.n	8016c02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	685b      	ldr	r3, [r3, #4]
 8016c1a:	68ba      	ldr	r2, [r7, #8]
 8016c1c:	4413      	add	r3, r2
 8016c1e:	687a      	ldr	r2, [r7, #4]
 8016c20:	429a      	cmp	r2, r3
 8016c22:	d108      	bne.n	8016c36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	685a      	ldr	r2, [r3, #4]
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	685b      	ldr	r3, [r3, #4]
 8016c2c:	441a      	add	r2, r3
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	685b      	ldr	r3, [r3, #4]
 8016c3e:	68ba      	ldr	r2, [r7, #8]
 8016c40:	441a      	add	r2, r3
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d118      	bne.n	8016c7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	681a      	ldr	r2, [r3, #0]
 8016c4e:	4b15      	ldr	r3, [pc, #84]	; (8016ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d00d      	beq.n	8016c72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	685a      	ldr	r2, [r3, #4]
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	685b      	ldr	r3, [r3, #4]
 8016c60:	441a      	add	r2, r3
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	681a      	ldr	r2, [r3, #0]
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	601a      	str	r2, [r3, #0]
 8016c70:	e008      	b.n	8016c84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016c72:	4b0c      	ldr	r3, [pc, #48]	; (8016ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	601a      	str	r2, [r3, #0]
 8016c7a:	e003      	b.n	8016c84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016c84:	68fa      	ldr	r2, [r7, #12]
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	429a      	cmp	r2, r3
 8016c8a:	d002      	beq.n	8016c92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	687a      	ldr	r2, [r7, #4]
 8016c90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c92:	bf00      	nop
 8016c94:	3714      	adds	r7, #20
 8016c96:	46bd      	mov	sp, r7
 8016c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9c:	4770      	bx	lr
 8016c9e:	bf00      	nop
 8016ca0:	2000f5c8 	.word	0x2000f5c8
 8016ca4:	2000f5d0 	.word	0x2000f5d0

08016ca8 <__errno>:
 8016ca8:	4b01      	ldr	r3, [pc, #4]	; (8016cb0 <__errno+0x8>)
 8016caa:	6818      	ldr	r0, [r3, #0]
 8016cac:	4770      	bx	lr
 8016cae:	bf00      	nop
 8016cb0:	2000034c 	.word	0x2000034c

08016cb4 <__libc_init_array>:
 8016cb4:	b570      	push	{r4, r5, r6, lr}
 8016cb6:	4d0d      	ldr	r5, [pc, #52]	; (8016cec <__libc_init_array+0x38>)
 8016cb8:	4c0d      	ldr	r4, [pc, #52]	; (8016cf0 <__libc_init_array+0x3c>)
 8016cba:	1b64      	subs	r4, r4, r5
 8016cbc:	10a4      	asrs	r4, r4, #2
 8016cbe:	2600      	movs	r6, #0
 8016cc0:	42a6      	cmp	r6, r4
 8016cc2:	d109      	bne.n	8016cd8 <__libc_init_array+0x24>
 8016cc4:	4d0b      	ldr	r5, [pc, #44]	; (8016cf4 <__libc_init_array+0x40>)
 8016cc6:	4c0c      	ldr	r4, [pc, #48]	; (8016cf8 <__libc_init_array+0x44>)
 8016cc8:	f000 fc60 	bl	801758c <_init>
 8016ccc:	1b64      	subs	r4, r4, r5
 8016cce:	10a4      	asrs	r4, r4, #2
 8016cd0:	2600      	movs	r6, #0
 8016cd2:	42a6      	cmp	r6, r4
 8016cd4:	d105      	bne.n	8016ce2 <__libc_init_array+0x2e>
 8016cd6:	bd70      	pop	{r4, r5, r6, pc}
 8016cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cdc:	4798      	blx	r3
 8016cde:	3601      	adds	r6, #1
 8016ce0:	e7ee      	b.n	8016cc0 <__libc_init_array+0xc>
 8016ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ce6:	4798      	blx	r3
 8016ce8:	3601      	adds	r6, #1
 8016cea:	e7f2      	b.n	8016cd2 <__libc_init_array+0x1e>
 8016cec:	0801a40c 	.word	0x0801a40c
 8016cf0:	0801a40c 	.word	0x0801a40c
 8016cf4:	0801a40c 	.word	0x0801a40c
 8016cf8:	0801a410 	.word	0x0801a410

08016cfc <memcpy>:
 8016cfc:	440a      	add	r2, r1
 8016cfe:	4291      	cmp	r1, r2
 8016d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d04:	d100      	bne.n	8016d08 <memcpy+0xc>
 8016d06:	4770      	bx	lr
 8016d08:	b510      	push	{r4, lr}
 8016d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d12:	4291      	cmp	r1, r2
 8016d14:	d1f9      	bne.n	8016d0a <memcpy+0xe>
 8016d16:	bd10      	pop	{r4, pc}

08016d18 <memset>:
 8016d18:	4402      	add	r2, r0
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	4293      	cmp	r3, r2
 8016d1e:	d100      	bne.n	8016d22 <memset+0xa>
 8016d20:	4770      	bx	lr
 8016d22:	f803 1b01 	strb.w	r1, [r3], #1
 8016d26:	e7f9      	b.n	8016d1c <memset+0x4>

08016d28 <siprintf>:
 8016d28:	b40e      	push	{r1, r2, r3}
 8016d2a:	b500      	push	{lr}
 8016d2c:	b09c      	sub	sp, #112	; 0x70
 8016d2e:	ab1d      	add	r3, sp, #116	; 0x74
 8016d30:	9002      	str	r0, [sp, #8]
 8016d32:	9006      	str	r0, [sp, #24]
 8016d34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016d38:	4809      	ldr	r0, [pc, #36]	; (8016d60 <siprintf+0x38>)
 8016d3a:	9107      	str	r1, [sp, #28]
 8016d3c:	9104      	str	r1, [sp, #16]
 8016d3e:	4909      	ldr	r1, [pc, #36]	; (8016d64 <siprintf+0x3c>)
 8016d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d44:	9105      	str	r1, [sp, #20]
 8016d46:	6800      	ldr	r0, [r0, #0]
 8016d48:	9301      	str	r3, [sp, #4]
 8016d4a:	a902      	add	r1, sp, #8
 8016d4c:	f000 f87a 	bl	8016e44 <_svfiprintf_r>
 8016d50:	9b02      	ldr	r3, [sp, #8]
 8016d52:	2200      	movs	r2, #0
 8016d54:	701a      	strb	r2, [r3, #0]
 8016d56:	b01c      	add	sp, #112	; 0x70
 8016d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d5c:	b003      	add	sp, #12
 8016d5e:	4770      	bx	lr
 8016d60:	2000034c 	.word	0x2000034c
 8016d64:	ffff0208 	.word	0xffff0208

08016d68 <strncmp>:
 8016d68:	b510      	push	{r4, lr}
 8016d6a:	b16a      	cbz	r2, 8016d88 <strncmp+0x20>
 8016d6c:	3901      	subs	r1, #1
 8016d6e:	1884      	adds	r4, r0, r2
 8016d70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016d74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016d78:	4293      	cmp	r3, r2
 8016d7a:	d103      	bne.n	8016d84 <strncmp+0x1c>
 8016d7c:	42a0      	cmp	r0, r4
 8016d7e:	d001      	beq.n	8016d84 <strncmp+0x1c>
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d1f5      	bne.n	8016d70 <strncmp+0x8>
 8016d84:	1a98      	subs	r0, r3, r2
 8016d86:	bd10      	pop	{r4, pc}
 8016d88:	4610      	mov	r0, r2
 8016d8a:	e7fc      	b.n	8016d86 <strncmp+0x1e>

08016d8c <__ssputs_r>:
 8016d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d90:	688e      	ldr	r6, [r1, #8]
 8016d92:	429e      	cmp	r6, r3
 8016d94:	4682      	mov	sl, r0
 8016d96:	460c      	mov	r4, r1
 8016d98:	4690      	mov	r8, r2
 8016d9a:	461f      	mov	r7, r3
 8016d9c:	d838      	bhi.n	8016e10 <__ssputs_r+0x84>
 8016d9e:	898a      	ldrh	r2, [r1, #12]
 8016da0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016da4:	d032      	beq.n	8016e0c <__ssputs_r+0x80>
 8016da6:	6825      	ldr	r5, [r4, #0]
 8016da8:	6909      	ldr	r1, [r1, #16]
 8016daa:	eba5 0901 	sub.w	r9, r5, r1
 8016dae:	6965      	ldr	r5, [r4, #20]
 8016db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016db4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016db8:	3301      	adds	r3, #1
 8016dba:	444b      	add	r3, r9
 8016dbc:	106d      	asrs	r5, r5, #1
 8016dbe:	429d      	cmp	r5, r3
 8016dc0:	bf38      	it	cc
 8016dc2:	461d      	movcc	r5, r3
 8016dc4:	0553      	lsls	r3, r2, #21
 8016dc6:	d531      	bpl.n	8016e2c <__ssputs_r+0xa0>
 8016dc8:	4629      	mov	r1, r5
 8016dca:	f000 fb39 	bl	8017440 <_malloc_r>
 8016dce:	4606      	mov	r6, r0
 8016dd0:	b950      	cbnz	r0, 8016de8 <__ssputs_r+0x5c>
 8016dd2:	230c      	movs	r3, #12
 8016dd4:	f8ca 3000 	str.w	r3, [sl]
 8016dd8:	89a3      	ldrh	r3, [r4, #12]
 8016dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016dde:	81a3      	strh	r3, [r4, #12]
 8016de0:	f04f 30ff 	mov.w	r0, #4294967295
 8016de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016de8:	6921      	ldr	r1, [r4, #16]
 8016dea:	464a      	mov	r2, r9
 8016dec:	f7ff ff86 	bl	8016cfc <memcpy>
 8016df0:	89a3      	ldrh	r3, [r4, #12]
 8016df2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dfa:	81a3      	strh	r3, [r4, #12]
 8016dfc:	6126      	str	r6, [r4, #16]
 8016dfe:	6165      	str	r5, [r4, #20]
 8016e00:	444e      	add	r6, r9
 8016e02:	eba5 0509 	sub.w	r5, r5, r9
 8016e06:	6026      	str	r6, [r4, #0]
 8016e08:	60a5      	str	r5, [r4, #8]
 8016e0a:	463e      	mov	r6, r7
 8016e0c:	42be      	cmp	r6, r7
 8016e0e:	d900      	bls.n	8016e12 <__ssputs_r+0x86>
 8016e10:	463e      	mov	r6, r7
 8016e12:	4632      	mov	r2, r6
 8016e14:	6820      	ldr	r0, [r4, #0]
 8016e16:	4641      	mov	r1, r8
 8016e18:	f000 faa8 	bl	801736c <memmove>
 8016e1c:	68a3      	ldr	r3, [r4, #8]
 8016e1e:	6822      	ldr	r2, [r4, #0]
 8016e20:	1b9b      	subs	r3, r3, r6
 8016e22:	4432      	add	r2, r6
 8016e24:	60a3      	str	r3, [r4, #8]
 8016e26:	6022      	str	r2, [r4, #0]
 8016e28:	2000      	movs	r0, #0
 8016e2a:	e7db      	b.n	8016de4 <__ssputs_r+0x58>
 8016e2c:	462a      	mov	r2, r5
 8016e2e:	f000 fb61 	bl	80174f4 <_realloc_r>
 8016e32:	4606      	mov	r6, r0
 8016e34:	2800      	cmp	r0, #0
 8016e36:	d1e1      	bne.n	8016dfc <__ssputs_r+0x70>
 8016e38:	6921      	ldr	r1, [r4, #16]
 8016e3a:	4650      	mov	r0, sl
 8016e3c:	f000 fab0 	bl	80173a0 <_free_r>
 8016e40:	e7c7      	b.n	8016dd2 <__ssputs_r+0x46>
	...

08016e44 <_svfiprintf_r>:
 8016e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e48:	4698      	mov	r8, r3
 8016e4a:	898b      	ldrh	r3, [r1, #12]
 8016e4c:	061b      	lsls	r3, r3, #24
 8016e4e:	b09d      	sub	sp, #116	; 0x74
 8016e50:	4607      	mov	r7, r0
 8016e52:	460d      	mov	r5, r1
 8016e54:	4614      	mov	r4, r2
 8016e56:	d50e      	bpl.n	8016e76 <_svfiprintf_r+0x32>
 8016e58:	690b      	ldr	r3, [r1, #16]
 8016e5a:	b963      	cbnz	r3, 8016e76 <_svfiprintf_r+0x32>
 8016e5c:	2140      	movs	r1, #64	; 0x40
 8016e5e:	f000 faef 	bl	8017440 <_malloc_r>
 8016e62:	6028      	str	r0, [r5, #0]
 8016e64:	6128      	str	r0, [r5, #16]
 8016e66:	b920      	cbnz	r0, 8016e72 <_svfiprintf_r+0x2e>
 8016e68:	230c      	movs	r3, #12
 8016e6a:	603b      	str	r3, [r7, #0]
 8016e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e70:	e0d1      	b.n	8017016 <_svfiprintf_r+0x1d2>
 8016e72:	2340      	movs	r3, #64	; 0x40
 8016e74:	616b      	str	r3, [r5, #20]
 8016e76:	2300      	movs	r3, #0
 8016e78:	9309      	str	r3, [sp, #36]	; 0x24
 8016e7a:	2320      	movs	r3, #32
 8016e7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e84:	2330      	movs	r3, #48	; 0x30
 8016e86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017030 <_svfiprintf_r+0x1ec>
 8016e8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e8e:	f04f 0901 	mov.w	r9, #1
 8016e92:	4623      	mov	r3, r4
 8016e94:	469a      	mov	sl, r3
 8016e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e9a:	b10a      	cbz	r2, 8016ea0 <_svfiprintf_r+0x5c>
 8016e9c:	2a25      	cmp	r2, #37	; 0x25
 8016e9e:	d1f9      	bne.n	8016e94 <_svfiprintf_r+0x50>
 8016ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8016ea4:	d00b      	beq.n	8016ebe <_svfiprintf_r+0x7a>
 8016ea6:	465b      	mov	r3, fp
 8016ea8:	4622      	mov	r2, r4
 8016eaa:	4629      	mov	r1, r5
 8016eac:	4638      	mov	r0, r7
 8016eae:	f7ff ff6d 	bl	8016d8c <__ssputs_r>
 8016eb2:	3001      	adds	r0, #1
 8016eb4:	f000 80aa 	beq.w	801700c <_svfiprintf_r+0x1c8>
 8016eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016eba:	445a      	add	r2, fp
 8016ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8016ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	f000 80a2 	beq.w	801700c <_svfiprintf_r+0x1c8>
 8016ec8:	2300      	movs	r3, #0
 8016eca:	f04f 32ff 	mov.w	r2, #4294967295
 8016ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ed2:	f10a 0a01 	add.w	sl, sl, #1
 8016ed6:	9304      	str	r3, [sp, #16]
 8016ed8:	9307      	str	r3, [sp, #28]
 8016eda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ede:	931a      	str	r3, [sp, #104]	; 0x68
 8016ee0:	4654      	mov	r4, sl
 8016ee2:	2205      	movs	r2, #5
 8016ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ee8:	4851      	ldr	r0, [pc, #324]	; (8017030 <_svfiprintf_r+0x1ec>)
 8016eea:	f7e9 f999 	bl	8000220 <memchr>
 8016eee:	9a04      	ldr	r2, [sp, #16]
 8016ef0:	b9d8      	cbnz	r0, 8016f2a <_svfiprintf_r+0xe6>
 8016ef2:	06d0      	lsls	r0, r2, #27
 8016ef4:	bf44      	itt	mi
 8016ef6:	2320      	movmi	r3, #32
 8016ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016efc:	0711      	lsls	r1, r2, #28
 8016efe:	bf44      	itt	mi
 8016f00:	232b      	movmi	r3, #43	; 0x2b
 8016f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f06:	f89a 3000 	ldrb.w	r3, [sl]
 8016f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8016f0c:	d015      	beq.n	8016f3a <_svfiprintf_r+0xf6>
 8016f0e:	9a07      	ldr	r2, [sp, #28]
 8016f10:	4654      	mov	r4, sl
 8016f12:	2000      	movs	r0, #0
 8016f14:	f04f 0c0a 	mov.w	ip, #10
 8016f18:	4621      	mov	r1, r4
 8016f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f1e:	3b30      	subs	r3, #48	; 0x30
 8016f20:	2b09      	cmp	r3, #9
 8016f22:	d94e      	bls.n	8016fc2 <_svfiprintf_r+0x17e>
 8016f24:	b1b0      	cbz	r0, 8016f54 <_svfiprintf_r+0x110>
 8016f26:	9207      	str	r2, [sp, #28]
 8016f28:	e014      	b.n	8016f54 <_svfiprintf_r+0x110>
 8016f2a:	eba0 0308 	sub.w	r3, r0, r8
 8016f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8016f32:	4313      	orrs	r3, r2
 8016f34:	9304      	str	r3, [sp, #16]
 8016f36:	46a2      	mov	sl, r4
 8016f38:	e7d2      	b.n	8016ee0 <_svfiprintf_r+0x9c>
 8016f3a:	9b03      	ldr	r3, [sp, #12]
 8016f3c:	1d19      	adds	r1, r3, #4
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	9103      	str	r1, [sp, #12]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	bfbb      	ittet	lt
 8016f46:	425b      	neglt	r3, r3
 8016f48:	f042 0202 	orrlt.w	r2, r2, #2
 8016f4c:	9307      	strge	r3, [sp, #28]
 8016f4e:	9307      	strlt	r3, [sp, #28]
 8016f50:	bfb8      	it	lt
 8016f52:	9204      	strlt	r2, [sp, #16]
 8016f54:	7823      	ldrb	r3, [r4, #0]
 8016f56:	2b2e      	cmp	r3, #46	; 0x2e
 8016f58:	d10c      	bne.n	8016f74 <_svfiprintf_r+0x130>
 8016f5a:	7863      	ldrb	r3, [r4, #1]
 8016f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8016f5e:	d135      	bne.n	8016fcc <_svfiprintf_r+0x188>
 8016f60:	9b03      	ldr	r3, [sp, #12]
 8016f62:	1d1a      	adds	r2, r3, #4
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	9203      	str	r2, [sp, #12]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	bfb8      	it	lt
 8016f6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f70:	3402      	adds	r4, #2
 8016f72:	9305      	str	r3, [sp, #20]
 8016f74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017040 <_svfiprintf_r+0x1fc>
 8016f78:	7821      	ldrb	r1, [r4, #0]
 8016f7a:	2203      	movs	r2, #3
 8016f7c:	4650      	mov	r0, sl
 8016f7e:	f7e9 f94f 	bl	8000220 <memchr>
 8016f82:	b140      	cbz	r0, 8016f96 <_svfiprintf_r+0x152>
 8016f84:	2340      	movs	r3, #64	; 0x40
 8016f86:	eba0 000a 	sub.w	r0, r0, sl
 8016f8a:	fa03 f000 	lsl.w	r0, r3, r0
 8016f8e:	9b04      	ldr	r3, [sp, #16]
 8016f90:	4303      	orrs	r3, r0
 8016f92:	3401      	adds	r4, #1
 8016f94:	9304      	str	r3, [sp, #16]
 8016f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f9a:	4826      	ldr	r0, [pc, #152]	; (8017034 <_svfiprintf_r+0x1f0>)
 8016f9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016fa0:	2206      	movs	r2, #6
 8016fa2:	f7e9 f93d 	bl	8000220 <memchr>
 8016fa6:	2800      	cmp	r0, #0
 8016fa8:	d038      	beq.n	801701c <_svfiprintf_r+0x1d8>
 8016faa:	4b23      	ldr	r3, [pc, #140]	; (8017038 <_svfiprintf_r+0x1f4>)
 8016fac:	bb1b      	cbnz	r3, 8016ff6 <_svfiprintf_r+0x1b2>
 8016fae:	9b03      	ldr	r3, [sp, #12]
 8016fb0:	3307      	adds	r3, #7
 8016fb2:	f023 0307 	bic.w	r3, r3, #7
 8016fb6:	3308      	adds	r3, #8
 8016fb8:	9303      	str	r3, [sp, #12]
 8016fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fbc:	4433      	add	r3, r6
 8016fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8016fc0:	e767      	b.n	8016e92 <_svfiprintf_r+0x4e>
 8016fc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8016fc6:	460c      	mov	r4, r1
 8016fc8:	2001      	movs	r0, #1
 8016fca:	e7a5      	b.n	8016f18 <_svfiprintf_r+0xd4>
 8016fcc:	2300      	movs	r3, #0
 8016fce:	3401      	adds	r4, #1
 8016fd0:	9305      	str	r3, [sp, #20]
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	f04f 0c0a 	mov.w	ip, #10
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fde:	3a30      	subs	r2, #48	; 0x30
 8016fe0:	2a09      	cmp	r2, #9
 8016fe2:	d903      	bls.n	8016fec <_svfiprintf_r+0x1a8>
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d0c5      	beq.n	8016f74 <_svfiprintf_r+0x130>
 8016fe8:	9105      	str	r1, [sp, #20]
 8016fea:	e7c3      	b.n	8016f74 <_svfiprintf_r+0x130>
 8016fec:	fb0c 2101 	mla	r1, ip, r1, r2
 8016ff0:	4604      	mov	r4, r0
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	e7f0      	b.n	8016fd8 <_svfiprintf_r+0x194>
 8016ff6:	ab03      	add	r3, sp, #12
 8016ff8:	9300      	str	r3, [sp, #0]
 8016ffa:	462a      	mov	r2, r5
 8016ffc:	4b0f      	ldr	r3, [pc, #60]	; (801703c <_svfiprintf_r+0x1f8>)
 8016ffe:	a904      	add	r1, sp, #16
 8017000:	4638      	mov	r0, r7
 8017002:	f3af 8000 	nop.w
 8017006:	1c42      	adds	r2, r0, #1
 8017008:	4606      	mov	r6, r0
 801700a:	d1d6      	bne.n	8016fba <_svfiprintf_r+0x176>
 801700c:	89ab      	ldrh	r3, [r5, #12]
 801700e:	065b      	lsls	r3, r3, #25
 8017010:	f53f af2c 	bmi.w	8016e6c <_svfiprintf_r+0x28>
 8017014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017016:	b01d      	add	sp, #116	; 0x74
 8017018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801701c:	ab03      	add	r3, sp, #12
 801701e:	9300      	str	r3, [sp, #0]
 8017020:	462a      	mov	r2, r5
 8017022:	4b06      	ldr	r3, [pc, #24]	; (801703c <_svfiprintf_r+0x1f8>)
 8017024:	a904      	add	r1, sp, #16
 8017026:	4638      	mov	r0, r7
 8017028:	f000 f87a 	bl	8017120 <_printf_i>
 801702c:	e7eb      	b.n	8017006 <_svfiprintf_r+0x1c2>
 801702e:	bf00      	nop
 8017030:	0801a3ce 	.word	0x0801a3ce
 8017034:	0801a3d8 	.word	0x0801a3d8
 8017038:	00000000 	.word	0x00000000
 801703c:	08016d8d 	.word	0x08016d8d
 8017040:	0801a3d4 	.word	0x0801a3d4

08017044 <_printf_common>:
 8017044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017048:	4616      	mov	r6, r2
 801704a:	4699      	mov	r9, r3
 801704c:	688a      	ldr	r2, [r1, #8]
 801704e:	690b      	ldr	r3, [r1, #16]
 8017050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017054:	4293      	cmp	r3, r2
 8017056:	bfb8      	it	lt
 8017058:	4613      	movlt	r3, r2
 801705a:	6033      	str	r3, [r6, #0]
 801705c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017060:	4607      	mov	r7, r0
 8017062:	460c      	mov	r4, r1
 8017064:	b10a      	cbz	r2, 801706a <_printf_common+0x26>
 8017066:	3301      	adds	r3, #1
 8017068:	6033      	str	r3, [r6, #0]
 801706a:	6823      	ldr	r3, [r4, #0]
 801706c:	0699      	lsls	r1, r3, #26
 801706e:	bf42      	ittt	mi
 8017070:	6833      	ldrmi	r3, [r6, #0]
 8017072:	3302      	addmi	r3, #2
 8017074:	6033      	strmi	r3, [r6, #0]
 8017076:	6825      	ldr	r5, [r4, #0]
 8017078:	f015 0506 	ands.w	r5, r5, #6
 801707c:	d106      	bne.n	801708c <_printf_common+0x48>
 801707e:	f104 0a19 	add.w	sl, r4, #25
 8017082:	68e3      	ldr	r3, [r4, #12]
 8017084:	6832      	ldr	r2, [r6, #0]
 8017086:	1a9b      	subs	r3, r3, r2
 8017088:	42ab      	cmp	r3, r5
 801708a:	dc26      	bgt.n	80170da <_printf_common+0x96>
 801708c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017090:	1e13      	subs	r3, r2, #0
 8017092:	6822      	ldr	r2, [r4, #0]
 8017094:	bf18      	it	ne
 8017096:	2301      	movne	r3, #1
 8017098:	0692      	lsls	r2, r2, #26
 801709a:	d42b      	bmi.n	80170f4 <_printf_common+0xb0>
 801709c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80170a0:	4649      	mov	r1, r9
 80170a2:	4638      	mov	r0, r7
 80170a4:	47c0      	blx	r8
 80170a6:	3001      	adds	r0, #1
 80170a8:	d01e      	beq.n	80170e8 <_printf_common+0xa4>
 80170aa:	6823      	ldr	r3, [r4, #0]
 80170ac:	68e5      	ldr	r5, [r4, #12]
 80170ae:	6832      	ldr	r2, [r6, #0]
 80170b0:	f003 0306 	and.w	r3, r3, #6
 80170b4:	2b04      	cmp	r3, #4
 80170b6:	bf08      	it	eq
 80170b8:	1aad      	subeq	r5, r5, r2
 80170ba:	68a3      	ldr	r3, [r4, #8]
 80170bc:	6922      	ldr	r2, [r4, #16]
 80170be:	bf0c      	ite	eq
 80170c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80170c4:	2500      	movne	r5, #0
 80170c6:	4293      	cmp	r3, r2
 80170c8:	bfc4      	itt	gt
 80170ca:	1a9b      	subgt	r3, r3, r2
 80170cc:	18ed      	addgt	r5, r5, r3
 80170ce:	2600      	movs	r6, #0
 80170d0:	341a      	adds	r4, #26
 80170d2:	42b5      	cmp	r5, r6
 80170d4:	d11a      	bne.n	801710c <_printf_common+0xc8>
 80170d6:	2000      	movs	r0, #0
 80170d8:	e008      	b.n	80170ec <_printf_common+0xa8>
 80170da:	2301      	movs	r3, #1
 80170dc:	4652      	mov	r2, sl
 80170de:	4649      	mov	r1, r9
 80170e0:	4638      	mov	r0, r7
 80170e2:	47c0      	blx	r8
 80170e4:	3001      	adds	r0, #1
 80170e6:	d103      	bne.n	80170f0 <_printf_common+0xac>
 80170e8:	f04f 30ff 	mov.w	r0, #4294967295
 80170ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170f0:	3501      	adds	r5, #1
 80170f2:	e7c6      	b.n	8017082 <_printf_common+0x3e>
 80170f4:	18e1      	adds	r1, r4, r3
 80170f6:	1c5a      	adds	r2, r3, #1
 80170f8:	2030      	movs	r0, #48	; 0x30
 80170fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80170fe:	4422      	add	r2, r4
 8017100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017108:	3302      	adds	r3, #2
 801710a:	e7c7      	b.n	801709c <_printf_common+0x58>
 801710c:	2301      	movs	r3, #1
 801710e:	4622      	mov	r2, r4
 8017110:	4649      	mov	r1, r9
 8017112:	4638      	mov	r0, r7
 8017114:	47c0      	blx	r8
 8017116:	3001      	adds	r0, #1
 8017118:	d0e6      	beq.n	80170e8 <_printf_common+0xa4>
 801711a:	3601      	adds	r6, #1
 801711c:	e7d9      	b.n	80170d2 <_printf_common+0x8e>
	...

08017120 <_printf_i>:
 8017120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017124:	460c      	mov	r4, r1
 8017126:	4691      	mov	r9, r2
 8017128:	7e27      	ldrb	r7, [r4, #24]
 801712a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801712c:	2f78      	cmp	r7, #120	; 0x78
 801712e:	4680      	mov	r8, r0
 8017130:	469a      	mov	sl, r3
 8017132:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017136:	d807      	bhi.n	8017148 <_printf_i+0x28>
 8017138:	2f62      	cmp	r7, #98	; 0x62
 801713a:	d80a      	bhi.n	8017152 <_printf_i+0x32>
 801713c:	2f00      	cmp	r7, #0
 801713e:	f000 80d8 	beq.w	80172f2 <_printf_i+0x1d2>
 8017142:	2f58      	cmp	r7, #88	; 0x58
 8017144:	f000 80a3 	beq.w	801728e <_printf_i+0x16e>
 8017148:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801714c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017150:	e03a      	b.n	80171c8 <_printf_i+0xa8>
 8017152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017156:	2b15      	cmp	r3, #21
 8017158:	d8f6      	bhi.n	8017148 <_printf_i+0x28>
 801715a:	a001      	add	r0, pc, #4	; (adr r0, 8017160 <_printf_i+0x40>)
 801715c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017160:	080171b9 	.word	0x080171b9
 8017164:	080171cd 	.word	0x080171cd
 8017168:	08017149 	.word	0x08017149
 801716c:	08017149 	.word	0x08017149
 8017170:	08017149 	.word	0x08017149
 8017174:	08017149 	.word	0x08017149
 8017178:	080171cd 	.word	0x080171cd
 801717c:	08017149 	.word	0x08017149
 8017180:	08017149 	.word	0x08017149
 8017184:	08017149 	.word	0x08017149
 8017188:	08017149 	.word	0x08017149
 801718c:	080172d9 	.word	0x080172d9
 8017190:	080171fd 	.word	0x080171fd
 8017194:	080172bb 	.word	0x080172bb
 8017198:	08017149 	.word	0x08017149
 801719c:	08017149 	.word	0x08017149
 80171a0:	080172fb 	.word	0x080172fb
 80171a4:	08017149 	.word	0x08017149
 80171a8:	080171fd 	.word	0x080171fd
 80171ac:	08017149 	.word	0x08017149
 80171b0:	08017149 	.word	0x08017149
 80171b4:	080172c3 	.word	0x080172c3
 80171b8:	680b      	ldr	r3, [r1, #0]
 80171ba:	1d1a      	adds	r2, r3, #4
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	600a      	str	r2, [r1, #0]
 80171c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80171c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80171c8:	2301      	movs	r3, #1
 80171ca:	e0a3      	b.n	8017314 <_printf_i+0x1f4>
 80171cc:	6825      	ldr	r5, [r4, #0]
 80171ce:	6808      	ldr	r0, [r1, #0]
 80171d0:	062e      	lsls	r6, r5, #24
 80171d2:	f100 0304 	add.w	r3, r0, #4
 80171d6:	d50a      	bpl.n	80171ee <_printf_i+0xce>
 80171d8:	6805      	ldr	r5, [r0, #0]
 80171da:	600b      	str	r3, [r1, #0]
 80171dc:	2d00      	cmp	r5, #0
 80171de:	da03      	bge.n	80171e8 <_printf_i+0xc8>
 80171e0:	232d      	movs	r3, #45	; 0x2d
 80171e2:	426d      	negs	r5, r5
 80171e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171e8:	485e      	ldr	r0, [pc, #376]	; (8017364 <_printf_i+0x244>)
 80171ea:	230a      	movs	r3, #10
 80171ec:	e019      	b.n	8017222 <_printf_i+0x102>
 80171ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80171f2:	6805      	ldr	r5, [r0, #0]
 80171f4:	600b      	str	r3, [r1, #0]
 80171f6:	bf18      	it	ne
 80171f8:	b22d      	sxthne	r5, r5
 80171fa:	e7ef      	b.n	80171dc <_printf_i+0xbc>
 80171fc:	680b      	ldr	r3, [r1, #0]
 80171fe:	6825      	ldr	r5, [r4, #0]
 8017200:	1d18      	adds	r0, r3, #4
 8017202:	6008      	str	r0, [r1, #0]
 8017204:	0628      	lsls	r0, r5, #24
 8017206:	d501      	bpl.n	801720c <_printf_i+0xec>
 8017208:	681d      	ldr	r5, [r3, #0]
 801720a:	e002      	b.n	8017212 <_printf_i+0xf2>
 801720c:	0669      	lsls	r1, r5, #25
 801720e:	d5fb      	bpl.n	8017208 <_printf_i+0xe8>
 8017210:	881d      	ldrh	r5, [r3, #0]
 8017212:	4854      	ldr	r0, [pc, #336]	; (8017364 <_printf_i+0x244>)
 8017214:	2f6f      	cmp	r7, #111	; 0x6f
 8017216:	bf0c      	ite	eq
 8017218:	2308      	moveq	r3, #8
 801721a:	230a      	movne	r3, #10
 801721c:	2100      	movs	r1, #0
 801721e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017222:	6866      	ldr	r6, [r4, #4]
 8017224:	60a6      	str	r6, [r4, #8]
 8017226:	2e00      	cmp	r6, #0
 8017228:	bfa2      	ittt	ge
 801722a:	6821      	ldrge	r1, [r4, #0]
 801722c:	f021 0104 	bicge.w	r1, r1, #4
 8017230:	6021      	strge	r1, [r4, #0]
 8017232:	b90d      	cbnz	r5, 8017238 <_printf_i+0x118>
 8017234:	2e00      	cmp	r6, #0
 8017236:	d04d      	beq.n	80172d4 <_printf_i+0x1b4>
 8017238:	4616      	mov	r6, r2
 801723a:	fbb5 f1f3 	udiv	r1, r5, r3
 801723e:	fb03 5711 	mls	r7, r3, r1, r5
 8017242:	5dc7      	ldrb	r7, [r0, r7]
 8017244:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017248:	462f      	mov	r7, r5
 801724a:	42bb      	cmp	r3, r7
 801724c:	460d      	mov	r5, r1
 801724e:	d9f4      	bls.n	801723a <_printf_i+0x11a>
 8017250:	2b08      	cmp	r3, #8
 8017252:	d10b      	bne.n	801726c <_printf_i+0x14c>
 8017254:	6823      	ldr	r3, [r4, #0]
 8017256:	07df      	lsls	r7, r3, #31
 8017258:	d508      	bpl.n	801726c <_printf_i+0x14c>
 801725a:	6923      	ldr	r3, [r4, #16]
 801725c:	6861      	ldr	r1, [r4, #4]
 801725e:	4299      	cmp	r1, r3
 8017260:	bfde      	ittt	le
 8017262:	2330      	movle	r3, #48	; 0x30
 8017264:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017268:	f106 36ff 	addle.w	r6, r6, #4294967295
 801726c:	1b92      	subs	r2, r2, r6
 801726e:	6122      	str	r2, [r4, #16]
 8017270:	f8cd a000 	str.w	sl, [sp]
 8017274:	464b      	mov	r3, r9
 8017276:	aa03      	add	r2, sp, #12
 8017278:	4621      	mov	r1, r4
 801727a:	4640      	mov	r0, r8
 801727c:	f7ff fee2 	bl	8017044 <_printf_common>
 8017280:	3001      	adds	r0, #1
 8017282:	d14c      	bne.n	801731e <_printf_i+0x1fe>
 8017284:	f04f 30ff 	mov.w	r0, #4294967295
 8017288:	b004      	add	sp, #16
 801728a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801728e:	4835      	ldr	r0, [pc, #212]	; (8017364 <_printf_i+0x244>)
 8017290:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017294:	6823      	ldr	r3, [r4, #0]
 8017296:	680e      	ldr	r6, [r1, #0]
 8017298:	061f      	lsls	r7, r3, #24
 801729a:	f856 5b04 	ldr.w	r5, [r6], #4
 801729e:	600e      	str	r6, [r1, #0]
 80172a0:	d514      	bpl.n	80172cc <_printf_i+0x1ac>
 80172a2:	07d9      	lsls	r1, r3, #31
 80172a4:	bf44      	itt	mi
 80172a6:	f043 0320 	orrmi.w	r3, r3, #32
 80172aa:	6023      	strmi	r3, [r4, #0]
 80172ac:	b91d      	cbnz	r5, 80172b6 <_printf_i+0x196>
 80172ae:	6823      	ldr	r3, [r4, #0]
 80172b0:	f023 0320 	bic.w	r3, r3, #32
 80172b4:	6023      	str	r3, [r4, #0]
 80172b6:	2310      	movs	r3, #16
 80172b8:	e7b0      	b.n	801721c <_printf_i+0xfc>
 80172ba:	6823      	ldr	r3, [r4, #0]
 80172bc:	f043 0320 	orr.w	r3, r3, #32
 80172c0:	6023      	str	r3, [r4, #0]
 80172c2:	2378      	movs	r3, #120	; 0x78
 80172c4:	4828      	ldr	r0, [pc, #160]	; (8017368 <_printf_i+0x248>)
 80172c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80172ca:	e7e3      	b.n	8017294 <_printf_i+0x174>
 80172cc:	065e      	lsls	r6, r3, #25
 80172ce:	bf48      	it	mi
 80172d0:	b2ad      	uxthmi	r5, r5
 80172d2:	e7e6      	b.n	80172a2 <_printf_i+0x182>
 80172d4:	4616      	mov	r6, r2
 80172d6:	e7bb      	b.n	8017250 <_printf_i+0x130>
 80172d8:	680b      	ldr	r3, [r1, #0]
 80172da:	6826      	ldr	r6, [r4, #0]
 80172dc:	6960      	ldr	r0, [r4, #20]
 80172de:	1d1d      	adds	r5, r3, #4
 80172e0:	600d      	str	r5, [r1, #0]
 80172e2:	0635      	lsls	r5, r6, #24
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	d501      	bpl.n	80172ec <_printf_i+0x1cc>
 80172e8:	6018      	str	r0, [r3, #0]
 80172ea:	e002      	b.n	80172f2 <_printf_i+0x1d2>
 80172ec:	0671      	lsls	r1, r6, #25
 80172ee:	d5fb      	bpl.n	80172e8 <_printf_i+0x1c8>
 80172f0:	8018      	strh	r0, [r3, #0]
 80172f2:	2300      	movs	r3, #0
 80172f4:	6123      	str	r3, [r4, #16]
 80172f6:	4616      	mov	r6, r2
 80172f8:	e7ba      	b.n	8017270 <_printf_i+0x150>
 80172fa:	680b      	ldr	r3, [r1, #0]
 80172fc:	1d1a      	adds	r2, r3, #4
 80172fe:	600a      	str	r2, [r1, #0]
 8017300:	681e      	ldr	r6, [r3, #0]
 8017302:	6862      	ldr	r2, [r4, #4]
 8017304:	2100      	movs	r1, #0
 8017306:	4630      	mov	r0, r6
 8017308:	f7e8 ff8a 	bl	8000220 <memchr>
 801730c:	b108      	cbz	r0, 8017312 <_printf_i+0x1f2>
 801730e:	1b80      	subs	r0, r0, r6
 8017310:	6060      	str	r0, [r4, #4]
 8017312:	6863      	ldr	r3, [r4, #4]
 8017314:	6123      	str	r3, [r4, #16]
 8017316:	2300      	movs	r3, #0
 8017318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801731c:	e7a8      	b.n	8017270 <_printf_i+0x150>
 801731e:	6923      	ldr	r3, [r4, #16]
 8017320:	4632      	mov	r2, r6
 8017322:	4649      	mov	r1, r9
 8017324:	4640      	mov	r0, r8
 8017326:	47d0      	blx	sl
 8017328:	3001      	adds	r0, #1
 801732a:	d0ab      	beq.n	8017284 <_printf_i+0x164>
 801732c:	6823      	ldr	r3, [r4, #0]
 801732e:	079b      	lsls	r3, r3, #30
 8017330:	d413      	bmi.n	801735a <_printf_i+0x23a>
 8017332:	68e0      	ldr	r0, [r4, #12]
 8017334:	9b03      	ldr	r3, [sp, #12]
 8017336:	4298      	cmp	r0, r3
 8017338:	bfb8      	it	lt
 801733a:	4618      	movlt	r0, r3
 801733c:	e7a4      	b.n	8017288 <_printf_i+0x168>
 801733e:	2301      	movs	r3, #1
 8017340:	4632      	mov	r2, r6
 8017342:	4649      	mov	r1, r9
 8017344:	4640      	mov	r0, r8
 8017346:	47d0      	blx	sl
 8017348:	3001      	adds	r0, #1
 801734a:	d09b      	beq.n	8017284 <_printf_i+0x164>
 801734c:	3501      	adds	r5, #1
 801734e:	68e3      	ldr	r3, [r4, #12]
 8017350:	9903      	ldr	r1, [sp, #12]
 8017352:	1a5b      	subs	r3, r3, r1
 8017354:	42ab      	cmp	r3, r5
 8017356:	dcf2      	bgt.n	801733e <_printf_i+0x21e>
 8017358:	e7eb      	b.n	8017332 <_printf_i+0x212>
 801735a:	2500      	movs	r5, #0
 801735c:	f104 0619 	add.w	r6, r4, #25
 8017360:	e7f5      	b.n	801734e <_printf_i+0x22e>
 8017362:	bf00      	nop
 8017364:	0801a3df 	.word	0x0801a3df
 8017368:	0801a3f0 	.word	0x0801a3f0

0801736c <memmove>:
 801736c:	4288      	cmp	r0, r1
 801736e:	b510      	push	{r4, lr}
 8017370:	eb01 0402 	add.w	r4, r1, r2
 8017374:	d902      	bls.n	801737c <memmove+0x10>
 8017376:	4284      	cmp	r4, r0
 8017378:	4623      	mov	r3, r4
 801737a:	d807      	bhi.n	801738c <memmove+0x20>
 801737c:	1e43      	subs	r3, r0, #1
 801737e:	42a1      	cmp	r1, r4
 8017380:	d008      	beq.n	8017394 <memmove+0x28>
 8017382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017386:	f803 2f01 	strb.w	r2, [r3, #1]!
 801738a:	e7f8      	b.n	801737e <memmove+0x12>
 801738c:	4402      	add	r2, r0
 801738e:	4601      	mov	r1, r0
 8017390:	428a      	cmp	r2, r1
 8017392:	d100      	bne.n	8017396 <memmove+0x2a>
 8017394:	bd10      	pop	{r4, pc}
 8017396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801739a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801739e:	e7f7      	b.n	8017390 <memmove+0x24>

080173a0 <_free_r>:
 80173a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173a2:	2900      	cmp	r1, #0
 80173a4:	d048      	beq.n	8017438 <_free_r+0x98>
 80173a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80173aa:	9001      	str	r0, [sp, #4]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	f1a1 0404 	sub.w	r4, r1, #4
 80173b2:	bfb8      	it	lt
 80173b4:	18e4      	addlt	r4, r4, r3
 80173b6:	f000 f8d3 	bl	8017560 <__malloc_lock>
 80173ba:	4a20      	ldr	r2, [pc, #128]	; (801743c <_free_r+0x9c>)
 80173bc:	9801      	ldr	r0, [sp, #4]
 80173be:	6813      	ldr	r3, [r2, #0]
 80173c0:	4615      	mov	r5, r2
 80173c2:	b933      	cbnz	r3, 80173d2 <_free_r+0x32>
 80173c4:	6063      	str	r3, [r4, #4]
 80173c6:	6014      	str	r4, [r2, #0]
 80173c8:	b003      	add	sp, #12
 80173ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173ce:	f000 b8cd 	b.w	801756c <__malloc_unlock>
 80173d2:	42a3      	cmp	r3, r4
 80173d4:	d90b      	bls.n	80173ee <_free_r+0x4e>
 80173d6:	6821      	ldr	r1, [r4, #0]
 80173d8:	1862      	adds	r2, r4, r1
 80173da:	4293      	cmp	r3, r2
 80173dc:	bf04      	itt	eq
 80173de:	681a      	ldreq	r2, [r3, #0]
 80173e0:	685b      	ldreq	r3, [r3, #4]
 80173e2:	6063      	str	r3, [r4, #4]
 80173e4:	bf04      	itt	eq
 80173e6:	1852      	addeq	r2, r2, r1
 80173e8:	6022      	streq	r2, [r4, #0]
 80173ea:	602c      	str	r4, [r5, #0]
 80173ec:	e7ec      	b.n	80173c8 <_free_r+0x28>
 80173ee:	461a      	mov	r2, r3
 80173f0:	685b      	ldr	r3, [r3, #4]
 80173f2:	b10b      	cbz	r3, 80173f8 <_free_r+0x58>
 80173f4:	42a3      	cmp	r3, r4
 80173f6:	d9fa      	bls.n	80173ee <_free_r+0x4e>
 80173f8:	6811      	ldr	r1, [r2, #0]
 80173fa:	1855      	adds	r5, r2, r1
 80173fc:	42a5      	cmp	r5, r4
 80173fe:	d10b      	bne.n	8017418 <_free_r+0x78>
 8017400:	6824      	ldr	r4, [r4, #0]
 8017402:	4421      	add	r1, r4
 8017404:	1854      	adds	r4, r2, r1
 8017406:	42a3      	cmp	r3, r4
 8017408:	6011      	str	r1, [r2, #0]
 801740a:	d1dd      	bne.n	80173c8 <_free_r+0x28>
 801740c:	681c      	ldr	r4, [r3, #0]
 801740e:	685b      	ldr	r3, [r3, #4]
 8017410:	6053      	str	r3, [r2, #4]
 8017412:	4421      	add	r1, r4
 8017414:	6011      	str	r1, [r2, #0]
 8017416:	e7d7      	b.n	80173c8 <_free_r+0x28>
 8017418:	d902      	bls.n	8017420 <_free_r+0x80>
 801741a:	230c      	movs	r3, #12
 801741c:	6003      	str	r3, [r0, #0]
 801741e:	e7d3      	b.n	80173c8 <_free_r+0x28>
 8017420:	6825      	ldr	r5, [r4, #0]
 8017422:	1961      	adds	r1, r4, r5
 8017424:	428b      	cmp	r3, r1
 8017426:	bf04      	itt	eq
 8017428:	6819      	ldreq	r1, [r3, #0]
 801742a:	685b      	ldreq	r3, [r3, #4]
 801742c:	6063      	str	r3, [r4, #4]
 801742e:	bf04      	itt	eq
 8017430:	1949      	addeq	r1, r1, r5
 8017432:	6021      	streq	r1, [r4, #0]
 8017434:	6054      	str	r4, [r2, #4]
 8017436:	e7c7      	b.n	80173c8 <_free_r+0x28>
 8017438:	b003      	add	sp, #12
 801743a:	bd30      	pop	{r4, r5, pc}
 801743c:	2000f5e0 	.word	0x2000f5e0

08017440 <_malloc_r>:
 8017440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017442:	1ccd      	adds	r5, r1, #3
 8017444:	f025 0503 	bic.w	r5, r5, #3
 8017448:	3508      	adds	r5, #8
 801744a:	2d0c      	cmp	r5, #12
 801744c:	bf38      	it	cc
 801744e:	250c      	movcc	r5, #12
 8017450:	2d00      	cmp	r5, #0
 8017452:	4606      	mov	r6, r0
 8017454:	db01      	blt.n	801745a <_malloc_r+0x1a>
 8017456:	42a9      	cmp	r1, r5
 8017458:	d903      	bls.n	8017462 <_malloc_r+0x22>
 801745a:	230c      	movs	r3, #12
 801745c:	6033      	str	r3, [r6, #0]
 801745e:	2000      	movs	r0, #0
 8017460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017462:	f000 f87d 	bl	8017560 <__malloc_lock>
 8017466:	4921      	ldr	r1, [pc, #132]	; (80174ec <_malloc_r+0xac>)
 8017468:	680a      	ldr	r2, [r1, #0]
 801746a:	4614      	mov	r4, r2
 801746c:	b99c      	cbnz	r4, 8017496 <_malloc_r+0x56>
 801746e:	4f20      	ldr	r7, [pc, #128]	; (80174f0 <_malloc_r+0xb0>)
 8017470:	683b      	ldr	r3, [r7, #0]
 8017472:	b923      	cbnz	r3, 801747e <_malloc_r+0x3e>
 8017474:	4621      	mov	r1, r4
 8017476:	4630      	mov	r0, r6
 8017478:	f000 f862 	bl	8017540 <_sbrk_r>
 801747c:	6038      	str	r0, [r7, #0]
 801747e:	4629      	mov	r1, r5
 8017480:	4630      	mov	r0, r6
 8017482:	f000 f85d 	bl	8017540 <_sbrk_r>
 8017486:	1c43      	adds	r3, r0, #1
 8017488:	d123      	bne.n	80174d2 <_malloc_r+0x92>
 801748a:	230c      	movs	r3, #12
 801748c:	6033      	str	r3, [r6, #0]
 801748e:	4630      	mov	r0, r6
 8017490:	f000 f86c 	bl	801756c <__malloc_unlock>
 8017494:	e7e3      	b.n	801745e <_malloc_r+0x1e>
 8017496:	6823      	ldr	r3, [r4, #0]
 8017498:	1b5b      	subs	r3, r3, r5
 801749a:	d417      	bmi.n	80174cc <_malloc_r+0x8c>
 801749c:	2b0b      	cmp	r3, #11
 801749e:	d903      	bls.n	80174a8 <_malloc_r+0x68>
 80174a0:	6023      	str	r3, [r4, #0]
 80174a2:	441c      	add	r4, r3
 80174a4:	6025      	str	r5, [r4, #0]
 80174a6:	e004      	b.n	80174b2 <_malloc_r+0x72>
 80174a8:	6863      	ldr	r3, [r4, #4]
 80174aa:	42a2      	cmp	r2, r4
 80174ac:	bf0c      	ite	eq
 80174ae:	600b      	streq	r3, [r1, #0]
 80174b0:	6053      	strne	r3, [r2, #4]
 80174b2:	4630      	mov	r0, r6
 80174b4:	f000 f85a 	bl	801756c <__malloc_unlock>
 80174b8:	f104 000b 	add.w	r0, r4, #11
 80174bc:	1d23      	adds	r3, r4, #4
 80174be:	f020 0007 	bic.w	r0, r0, #7
 80174c2:	1ac2      	subs	r2, r0, r3
 80174c4:	d0cc      	beq.n	8017460 <_malloc_r+0x20>
 80174c6:	1a1b      	subs	r3, r3, r0
 80174c8:	50a3      	str	r3, [r4, r2]
 80174ca:	e7c9      	b.n	8017460 <_malloc_r+0x20>
 80174cc:	4622      	mov	r2, r4
 80174ce:	6864      	ldr	r4, [r4, #4]
 80174d0:	e7cc      	b.n	801746c <_malloc_r+0x2c>
 80174d2:	1cc4      	adds	r4, r0, #3
 80174d4:	f024 0403 	bic.w	r4, r4, #3
 80174d8:	42a0      	cmp	r0, r4
 80174da:	d0e3      	beq.n	80174a4 <_malloc_r+0x64>
 80174dc:	1a21      	subs	r1, r4, r0
 80174de:	4630      	mov	r0, r6
 80174e0:	f000 f82e 	bl	8017540 <_sbrk_r>
 80174e4:	3001      	adds	r0, #1
 80174e6:	d1dd      	bne.n	80174a4 <_malloc_r+0x64>
 80174e8:	e7cf      	b.n	801748a <_malloc_r+0x4a>
 80174ea:	bf00      	nop
 80174ec:	2000f5e0 	.word	0x2000f5e0
 80174f0:	2000f5e4 	.word	0x2000f5e4

080174f4 <_realloc_r>:
 80174f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174f6:	4607      	mov	r7, r0
 80174f8:	4614      	mov	r4, r2
 80174fa:	460e      	mov	r6, r1
 80174fc:	b921      	cbnz	r1, 8017508 <_realloc_r+0x14>
 80174fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017502:	4611      	mov	r1, r2
 8017504:	f7ff bf9c 	b.w	8017440 <_malloc_r>
 8017508:	b922      	cbnz	r2, 8017514 <_realloc_r+0x20>
 801750a:	f7ff ff49 	bl	80173a0 <_free_r>
 801750e:	4625      	mov	r5, r4
 8017510:	4628      	mov	r0, r5
 8017512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017514:	f000 f830 	bl	8017578 <_malloc_usable_size_r>
 8017518:	42a0      	cmp	r0, r4
 801751a:	d20f      	bcs.n	801753c <_realloc_r+0x48>
 801751c:	4621      	mov	r1, r4
 801751e:	4638      	mov	r0, r7
 8017520:	f7ff ff8e 	bl	8017440 <_malloc_r>
 8017524:	4605      	mov	r5, r0
 8017526:	2800      	cmp	r0, #0
 8017528:	d0f2      	beq.n	8017510 <_realloc_r+0x1c>
 801752a:	4631      	mov	r1, r6
 801752c:	4622      	mov	r2, r4
 801752e:	f7ff fbe5 	bl	8016cfc <memcpy>
 8017532:	4631      	mov	r1, r6
 8017534:	4638      	mov	r0, r7
 8017536:	f7ff ff33 	bl	80173a0 <_free_r>
 801753a:	e7e9      	b.n	8017510 <_realloc_r+0x1c>
 801753c:	4635      	mov	r5, r6
 801753e:	e7e7      	b.n	8017510 <_realloc_r+0x1c>

08017540 <_sbrk_r>:
 8017540:	b538      	push	{r3, r4, r5, lr}
 8017542:	4d06      	ldr	r5, [pc, #24]	; (801755c <_sbrk_r+0x1c>)
 8017544:	2300      	movs	r3, #0
 8017546:	4604      	mov	r4, r0
 8017548:	4608      	mov	r0, r1
 801754a:	602b      	str	r3, [r5, #0]
 801754c:	f7ef fa16 	bl	800697c <_sbrk>
 8017550:	1c43      	adds	r3, r0, #1
 8017552:	d102      	bne.n	801755a <_sbrk_r+0x1a>
 8017554:	682b      	ldr	r3, [r5, #0]
 8017556:	b103      	cbz	r3, 801755a <_sbrk_r+0x1a>
 8017558:	6023      	str	r3, [r4, #0]
 801755a:	bd38      	pop	{r3, r4, r5, pc}
 801755c:	20010194 	.word	0x20010194

08017560 <__malloc_lock>:
 8017560:	4801      	ldr	r0, [pc, #4]	; (8017568 <__malloc_lock+0x8>)
 8017562:	f000 b811 	b.w	8017588 <__retarget_lock_acquire_recursive>
 8017566:	bf00      	nop
 8017568:	2001019c 	.word	0x2001019c

0801756c <__malloc_unlock>:
 801756c:	4801      	ldr	r0, [pc, #4]	; (8017574 <__malloc_unlock+0x8>)
 801756e:	f000 b80c 	b.w	801758a <__retarget_lock_release_recursive>
 8017572:	bf00      	nop
 8017574:	2001019c 	.word	0x2001019c

08017578 <_malloc_usable_size_r>:
 8017578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801757c:	1f18      	subs	r0, r3, #4
 801757e:	2b00      	cmp	r3, #0
 8017580:	bfbc      	itt	lt
 8017582:	580b      	ldrlt	r3, [r1, r0]
 8017584:	18c0      	addlt	r0, r0, r3
 8017586:	4770      	bx	lr

08017588 <__retarget_lock_acquire_recursive>:
 8017588:	4770      	bx	lr

0801758a <__retarget_lock_release_recursive>:
 801758a:	4770      	bx	lr

0801758c <_init>:
 801758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801758e:	bf00      	nop
 8017590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017592:	bc08      	pop	{r3}
 8017594:	469e      	mov	lr, r3
 8017596:	4770      	bx	lr

08017598 <_fini>:
 8017598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801759a:	bf00      	nop
 801759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801759e:	bc08      	pop	{r3}
 80175a0:	469e      	mov	lr, r3
 80175a2:	4770      	bx	lr
