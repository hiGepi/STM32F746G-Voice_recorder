
STM32_FS_SD_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002164  08013004  08013004  00023004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015168  08015168  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  08015168  08015168  00025168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015170  08015170  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015170  08015170  00025170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015174  08015174  00025174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08015178  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000967c  20000084  080151fc  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20009700  080151fc  00039700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033908  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000681d  00000000  00000000  000639bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029f0  00000000  00000000  0006a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002750  00000000  00000000  0006cbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f86f  00000000  00000000  0006f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030f63  00000000  00000000  0009eb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112b13  00000000  00000000  000cfaf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e2605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b04c  00000000  00000000  001e2658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012fec 	.word	0x08012fec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08012fec 	.word	0x08012fec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <vApplicationGetIdleTaskMemory+0x2c>)
 800055c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <vApplicationGetIdleTaskMemory+0x30>)
 8000562:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	200000a0 	.word	0x200000a0
 800057c:	200000f4 	.word	0x200000f4

08000580 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800058a:	20c8      	movs	r0, #200	; 0xc8
 800058c:	f001 fd32 	bl	8001ff4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000590:	f000 f9b4 	bl	80008fc <ft5336_I2C_InitializeIfRequired>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b084      	sub	sp, #16
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4603      	mov	r3, r0
 80005ba:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005c4:	2300      	movs	r3, #0
 80005c6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c8:	f000 f998 	bl	80008fc <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e010      	b.n	80005f4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	21a8      	movs	r1, #168	; 0xa8
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fced 	bl	8001fb8 <TS_IO_Read>
 80005de:	4603      	mov	r3, r0
 80005e0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005e2:	7b7b      	ldrb	r3, [r7, #13]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b51      	cmp	r3, #81	; 0x51
 80005e8:	d101      	bne.n	80005ee <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	3301      	adds	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d802      	bhi.n	8000600 <ft5336_ReadID+0x4e>
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d0e8      	beq.n	80005d2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000600:	7b7b      	ldrb	r3, [r7, #13]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	b29b      	uxth	r3, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	4603      	mov	r3, r0
 8000616:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f97e 	bl	800091c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f932 	bl	800088c <ft5336_TS_DisableIT>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fcb7 	bl	8001fb8 <TS_IO_Read>
 800064a:	4603      	mov	r3, r0
 800064c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 030f 	and.w	r3, r3, #15
 8000656:	b2db      	uxtb	r3, r3
 8000658:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b05      	cmp	r3, #5
 8000660:	d901      	bls.n	8000666 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <ft5336_TS_DetectTouch+0x50>)
 800066c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <ft5336_TS_DetectTouch+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	b2db      	uxtb	r3, r3
}
 8000678:	4618      	mov	r0, r3
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200002f4 	.word	0x200002f4

08000684 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
 8000690:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006a6:	4b6d      	ldr	r3, [pc, #436]	; (800085c <ft5336_TS_GetXY+0x1d8>)
 80006a8:	789a      	ldrb	r2, [r3, #2]
 80006aa:	4b6c      	ldr	r3, [pc, #432]	; (800085c <ft5336_TS_GetXY+0x1d8>)
 80006ac:	785b      	ldrb	r3, [r3, #1]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	f080 80cf 	bcs.w	8000852 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006b4:	4b69      	ldr	r3, [pc, #420]	; (800085c <ft5336_TS_GetXY+0x1d8>)
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b09      	cmp	r3, #9
 80006ba:	d871      	bhi.n	80007a0 <ft5336_TS_GetXY+0x11c>
 80006bc:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <ft5336_TS_GetXY+0x40>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	080006ed 	.word	0x080006ed
 80006c8:	080006ff 	.word	0x080006ff
 80006cc:	08000711 	.word	0x08000711
 80006d0:	08000723 	.word	0x08000723
 80006d4:	08000735 	.word	0x08000735
 80006d8:	08000747 	.word	0x08000747
 80006dc:	08000759 	.word	0x08000759
 80006e0:	0800076b 	.word	0x0800076b
 80006e4:	0800077d 	.word	0x0800077d
 80006e8:	0800078f 	.word	0x0800078f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006ec:	2304      	movs	r3, #4
 80006ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006f0:	2303      	movs	r3, #3
 80006f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006f4:	2306      	movs	r3, #6
 80006f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006f8:	2305      	movs	r3, #5
 80006fa:	753b      	strb	r3, [r7, #20]
      break;
 80006fc:	e051      	b.n	80007a2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006fe:	230a      	movs	r3, #10
 8000700:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000702:	2309      	movs	r3, #9
 8000704:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000706:	230c      	movs	r3, #12
 8000708:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800070a:	230b      	movs	r3, #11
 800070c:	753b      	strb	r3, [r7, #20]
      break;
 800070e:	e048      	b.n	80007a2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000710:	2310      	movs	r3, #16
 8000712:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000714:	230f      	movs	r3, #15
 8000716:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000718:	2312      	movs	r3, #18
 800071a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800071c:	2311      	movs	r3, #17
 800071e:	753b      	strb	r3, [r7, #20]
      break;
 8000720:	e03f      	b.n	80007a2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000722:	2316      	movs	r3, #22
 8000724:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000726:	2315      	movs	r3, #21
 8000728:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800072a:	2318      	movs	r3, #24
 800072c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800072e:	2317      	movs	r3, #23
 8000730:	753b      	strb	r3, [r7, #20]
      break;
 8000732:	e036      	b.n	80007a2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000734:	231c      	movs	r3, #28
 8000736:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000738:	231b      	movs	r3, #27
 800073a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800073c:	231e      	movs	r3, #30
 800073e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000740:	231d      	movs	r3, #29
 8000742:	753b      	strb	r3, [r7, #20]
      break;
 8000744:	e02d      	b.n	80007a2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000746:	2322      	movs	r3, #34	; 0x22
 8000748:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800074a:	2321      	movs	r3, #33	; 0x21
 800074c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800074e:	2324      	movs	r3, #36	; 0x24
 8000750:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000752:	2323      	movs	r3, #35	; 0x23
 8000754:	753b      	strb	r3, [r7, #20]
      break;
 8000756:	e024      	b.n	80007a2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000758:	2328      	movs	r3, #40	; 0x28
 800075a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800075c:	2327      	movs	r3, #39	; 0x27
 800075e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000760:	232a      	movs	r3, #42	; 0x2a
 8000762:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000764:	2329      	movs	r3, #41	; 0x29
 8000766:	753b      	strb	r3, [r7, #20]
      break;
 8000768:	e01b      	b.n	80007a2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800076a:	232e      	movs	r3, #46	; 0x2e
 800076c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800076e:	232d      	movs	r3, #45	; 0x2d
 8000770:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000772:	2330      	movs	r3, #48	; 0x30
 8000774:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000776:	232f      	movs	r3, #47	; 0x2f
 8000778:	753b      	strb	r3, [r7, #20]
      break;
 800077a:	e012      	b.n	80007a2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800077c:	2334      	movs	r3, #52	; 0x34
 800077e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000780:	2333      	movs	r3, #51	; 0x33
 8000782:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000784:	2336      	movs	r3, #54	; 0x36
 8000786:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000788:	2335      	movs	r3, #53	; 0x35
 800078a:	753b      	strb	r3, [r7, #20]
      break;
 800078c:	e009      	b.n	80007a2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800078e:	233a      	movs	r3, #58	; 0x3a
 8000790:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000792:	2339      	movs	r3, #57	; 0x39
 8000794:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000796:	233c      	movs	r3, #60	; 0x3c
 8000798:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800079a:	233b      	movs	r3, #59	; 0x3b
 800079c:	753b      	strb	r3, [r7, #20]
      break;
 800079e:	e000      	b.n	80007a2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007a0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007a2:	89fb      	ldrh	r3, [r7, #14]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	7dfa      	ldrb	r2, [r7, #23]
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fc04 	bl	8001fb8 <TS_IO_Read>
 80007b0:	4603      	mov	r3, r0
 80007b2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007b4:	7cfb      	ldrb	r3, [r7, #19]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <ft5336_TS_GetXY+0x1dc>)
 80007bc:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	7dba      	ldrb	r2, [r7, #22]
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fbf6 	bl	8001fb8 <TS_IO_Read>
 80007cc:	4603      	mov	r3, r0
 80007ce:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007d0:	7cfb      	ldrb	r3, [r7, #19]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007da:	b21a      	sxth	r2, r3
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <ft5336_TS_GetXY+0x1dc>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <ft5336_TS_GetXY+0x1dc>)
 80007ea:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <ft5336_TS_GetXY+0x1dc>)
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	7d7a      	ldrb	r2, [r7, #21]
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fbdb 	bl	8001fb8 <TS_IO_Read>
 8000802:	4603      	mov	r3, r0
 8000804:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000806:	7cfb      	ldrb	r3, [r7, #19]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <ft5336_TS_GetXY+0x1dc>)
 800080e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000810:	89fb      	ldrh	r3, [r7, #14]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	7d3a      	ldrb	r2, [r7, #20]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fbcd 	bl	8001fb8 <TS_IO_Read>
 800081e:	4603      	mov	r3, r0
 8000820:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800082c:	b21a      	sxth	r2, r3
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <ft5336_TS_GetXY+0x1dc>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b21b      	sxth	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	b21b      	sxth	r3, r3
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <ft5336_TS_GetXY+0x1dc>)
 800083c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <ft5336_TS_GetXY+0x1dc>)
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <ft5336_TS_GetXY+0x1d8>)
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	3301      	adds	r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <ft5336_TS_GetXY+0x1d8>)
 8000850:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200002f4 	.word	0x200002f4
 8000860:	200002f8 	.word	0x200002f8

08000864 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000872:	2301      	movs	r3, #1
 8000874:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	7bfa      	ldrb	r2, [r7, #15]
 800087c:	21a4      	movs	r1, #164	; 0xa4
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fb80 	bl	8001f84 <TS_IO_Write>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	7bfa      	ldrb	r2, [r7, #15]
 80008a4:	21a4      	movs	r1, #164	; 0xa4
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fb6c 	bl	8001f84 <TS_IO_Write>
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	200002f4 	.word	0x200002f4

080008fc <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000900:	f7ff fff0 	bl	80008e4 <ft5336_Get_I2C_InitializedStatus>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d104      	bne.n	8000914 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800090a:	f001 fb31 	bl	8001f70 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800090e:	4b02      	ldr	r3, [pc, #8]	; (8000918 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
  }
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200002f4 	.word	0x200002f4

0800091c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800093c:	f3bf 8f4f 	dsb	sy
}
 8000940:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000942:	f3bf 8f6f 	isb	sy
}
 8000946:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <SCB_EnableICache+0x48>)
 800094a:	2200      	movs	r2, #0
 800094c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000950:	f3bf 8f4f 	dsb	sy
}
 8000954:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000956:	f3bf 8f6f 	isb	sy
}
 800095a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <SCB_EnableICache+0x48>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <SCB_EnableICache+0x48>)
 8000962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000966:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000968:	f3bf 8f4f 	dsb	sy
}
 800096c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800096e:	f3bf 8f6f 	isb	sy
}
 8000972:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <SCB_EnableDCache+0x84>)
 800098c:	2200      	movs	r2, #0
 800098e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
}
 8000996:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <SCB_EnableDCache+0x84>)
 800099a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800099e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	0b5b      	lsrs	r3, r3, #13
 80009a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009a8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009b2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	015a      	lsls	r2, r3, #5
 80009b8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009bc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009c2:	4911      	ldr	r1, [pc, #68]	; (8000a08 <SCB_EnableDCache+0x84>)
 80009c4:	4313      	orrs	r3, r2
 80009c6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1e5a      	subs	r2, r3, #1
 80009ce:	60ba      	str	r2, [r7, #8]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1ef      	bne.n	80009b4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	1e5a      	subs	r2, r3, #1
 80009d8:	60fa      	str	r2, [r7, #12]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1e5      	bne.n	80009aa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
}
 80009e2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <SCB_EnableDCache+0x84>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <SCB_EnableDCache+0x84>)
 80009ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f0:	f3bf 8f4f 	dsb	sy
}
 80009f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009f6:	f3bf 8f6f 	isb	sy
}
 80009fa:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <RL_sep>:
void StartDefaultTask(void const * argument);
void SDTask(void const * argument);
void AudioTask(void const * argument);

/* USER CODE BEGIN PFP */
void RL_sep(uint16_t* buffer, uint16_t size){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	807b      	strh	r3, [r7, #2]
	uint16_t j=0,k=0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	81fb      	strh	r3, [r7, #14]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	81bb      	strh	r3, [r7, #12]
	for(size_t i=0;i<size;i++){
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	e022      	b.n	8000a6c <RL_sep+0x60>
		if(i%2){
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00d      	beq.n	8000a4c <RL_sep+0x40>
			((uint16_t*)AUDIO_BUFFER_R)[j] = buffer[i];
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	441a      	add	r2, r3
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	0059      	lsls	r1, r3, #1
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <RL_sep+0x78>)
 8000a3e:	440b      	add	r3, r1
 8000a40:	8812      	ldrh	r2, [r2, #0]
 8000a42:	801a      	strh	r2, [r3, #0]
			j++;
 8000a44:	89fb      	ldrh	r3, [r7, #14]
 8000a46:	3301      	adds	r3, #1
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	e00c      	b.n	8000a66 <RL_sep+0x5a>
		}else{
			((uint16_t*)AUDIO_BUFFER_L)[k] = buffer[i];
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	441a      	add	r2, r3
 8000a54:	89bb      	ldrh	r3, [r7, #12]
 8000a56:	0059      	lsls	r1, r3, #1
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <RL_sep+0x7c>)
 8000a5a:	440b      	add	r3, r1
 8000a5c:	8812      	ldrh	r2, [r2, #0]
 8000a5e:	801a      	strh	r2, [r3, #0]
			k++;
 8000a60:	89bb      	ldrh	r3, [r7, #12]
 8000a62:	3301      	adds	r3, #1
 8000a64:	81bb      	strh	r3, [r7, #12]
	for(size_t i=0;i<size;i++){
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	887b      	ldrh	r3, [r7, #2]
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3d8      	bcc.n	8000a26 <RL_sep+0x1a>
		}
	}
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	c0080000 	.word	0xc0080000
 8000a88:	c0080200 	.word	0xc0080200

08000a8c <treatment>:
			k++;
		}
	}
}

void treatment(){
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
	for(size_t i=0;i<AUDIO_BLOCK_SIZE/2;i++){
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	e013      	b.n	8000ac0 <treatment+0x34>
		((uint16_t*)AUDIO_POST)[i] = ((uint16_t*)AUDIO_BUFFER_L)[i] + ((uint16_t*)AUDIO_BUFFER_R)[i];
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	005a      	lsls	r2, r3, #1
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <treatment+0x48>)
 8000a9e:	4413      	add	r3, r2
 8000aa0:	8819      	ldrh	r1, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	005a      	lsls	r2, r3, #1
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <treatment+0x4c>)
 8000aa8:	4413      	add	r3, r2
 8000aaa:	881a      	ldrh	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	0058      	lsls	r0, r3, #1
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <treatment+0x50>)
 8000ab2:	4403      	add	r3, r0
 8000ab4:	440a      	add	r2, r1
 8000ab6:	b292      	uxth	r2, r2
 8000ab8:	801a      	strh	r2, [r3, #0]
	for(size_t i=0;i<AUDIO_BLOCK_SIZE/2;i++){
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3301      	adds	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2bff      	cmp	r3, #255	; 0xff
 8000ac4:	d9e8      	bls.n	8000a98 <treatment+0xc>
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	c0080200 	.word	0xc0080200
 8000ad8:	c0080000 	.word	0xc0080000
 8000adc:	c0080400 	.word	0xc0080400

08000ae0 <RL_cat2>:

void RL_cat2(uint16_t* buffer, uint16_t size){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
	uint16_t j=0,k=0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	81fb      	strh	r3, [r7, #14]
 8000af0:	2300      	movs	r3, #0
 8000af2:	81bb      	strh	r3, [r7, #12]
	for(size_t i=0;i<size;i++){
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	e022      	b.n	8000b40 <RL_cat2+0x60>
		if(i%2){
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d00d      	beq.n	8000b20 <RL_cat2+0x40>
			buffer[i]=((uint16_t*)AUDIO_POST)[j];
 8000b04:	89fb      	ldrh	r3, [r7, #14]
 8000b06:	005a      	lsls	r2, r3, #1
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <RL_cat2+0x78>)
 8000b0a:	4413      	add	r3, r2
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	0052      	lsls	r2, r2, #1
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	440a      	add	r2, r1
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	8013      	strh	r3, [r2, #0]
			j++;
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	81fb      	strh	r3, [r7, #14]
 8000b1e:	e00c      	b.n	8000b3a <RL_cat2+0x5a>
		}
		else{
			buffer[i] = ((uint16_t*)AUDIO_POST)[k];
 8000b20:	89bb      	ldrh	r3, [r7, #12]
 8000b22:	005a      	lsls	r2, r3, #1
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <RL_cat2+0x78>)
 8000b26:	4413      	add	r3, r2
 8000b28:	68ba      	ldr	r2, [r7, #8]
 8000b2a:	0052      	lsls	r2, r2, #1
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	440a      	add	r2, r1
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	8013      	strh	r3, [r2, #0]
			k++;
 8000b34:	89bb      	ldrh	r3, [r7, #12]
 8000b36:	3301      	adds	r3, #1
 8000b38:	81bb      	strh	r3, [r7, #12]
	for(size_t i=0;i<size;i++){
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	887b      	ldrh	r3, [r7, #2]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3d8      	bcc.n	8000afa <RL_cat2+0x1a>
		}
	}
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	c0080400 	.word	0xc0080400

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b096      	sub	sp, #88	; 0x58
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t status = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000b68:	f7ff fee6 	bl	8000938 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000b6c:	f7ff ff0a 	bl	8000984 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b70:	f004 fd8e 	bl	8005690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b74:	f000 f8ca 	bl	8000d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b78:	f000 fba2 	bl	80012c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7c:	f000 fb1c 	bl	80011b8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000b80:	f000 faca 	bl	8001118 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000b84:	f00c f972 	bl	800ce6c <MX_FATFS_Init>
  MX_FMC_Init();
 8000b88:	f000 fb4c 	bl	8001224 <MX_FMC_Init>
  MX_LTDC_Init();
 8000b8c:	f000 f99a 	bl	8000ec4 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8000b90:	f000 fae2 	bl	8001158 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8000b94:	f000 f964 	bl	8000e60 <MX_DMA2D_Init>
  MX_SAI2_Init();
 8000b98:	f000 fa16 	bl	8000fc8 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000b9c:	f001 fe4a 	bl	8002834 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000ba0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f001 fedd 	bl	8002964 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000baa:	f001 feb3 	bl	8002914 <BSP_LCD_GetXSize>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f001 fec4 	bl	800293c <BSP_LCD_GetYSize>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	fb03 f304 	mul.w	r3, r3, r4
 8000bba:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f001 fece 	bl	8002964 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8000bc8:	f002 f904 	bl	8002dd4 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f001 ff29 	bl	8002a24 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd6:	f001 ff81 	bl	8002adc <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8000bda:	4840      	ldr	r0, [pc, #256]	; (8000cdc <main+0x180>)
 8000bdc:	f001 ff64 	bl	8002aa8 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f001 ff46 	bl	8002a74 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8000be8:	483d      	ldr	r0, [pc, #244]	; (8000ce0 <main+0x184>)
 8000bea:	f001 ff2b 	bl	8002a44 <BSP_LCD_SetTextColor>

  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000bee:	f001 fe91 	bl	8002914 <BSP_LCD_GetXSize>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b29c      	uxth	r4, r3
 8000bf6:	f001 fea1 	bl	800293c <BSP_LCD_GetYSize>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4620      	mov	r0, r4
 8000c02:	f002 fcb5 	bl	8003570 <BSP_TS_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (status != TS_OK){
 8000c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d01d      	beq.n	8000c50 <main+0xf4>
	  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f001 ff2c 	bl	8002a74 <BSP_LCD_SetBackColor>
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000c1c:	4831      	ldr	r0, [pc, #196]	; (8000ce4 <main+0x188>)
 8000c1e:	f001 ff11 	bl	8002a44 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 8000c22:	f001 fe8b 	bl	800293c <BSP_LCD_GetYSize>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3b5f      	subs	r3, #95	; 0x5f
 8000c2c:	b299      	uxth	r1, r3
 8000c2e:	2301      	movs	r3, #1
 8000c30:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <main+0x18c>)
 8000c32:	2000      	movs	r0, #0
 8000c34:	f001 ffbe 	bl	8002bb4 <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 8000c38:	f001 fe80 	bl	800293c <BSP_LCD_GetYSize>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	3b50      	subs	r3, #80	; 0x50
 8000c42:	b299      	uxth	r1, r3
 8000c44:	2301      	movs	r3, #1
 8000c46:	4a29      	ldr	r2, [pc, #164]	; (8000cec <main+0x190>)
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f001 ffb3 	bl	8002bb4 <BSP_LCD_DisplayStringAt>
 8000c4e:	e00a      	b.n	8000c66 <main+0x10a>
  } else {
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 150, (uint8_t *)"Realise avec amour", CENTER_MODE);
 8000c50:	f001 fe74 	bl	800293c <BSP_LCD_GetYSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3b96      	subs	r3, #150	; 0x96
 8000c5a:	b299      	uxth	r1, r3
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	4a24      	ldr	r2, [pc, #144]	; (8000cf0 <main+0x194>)
 8000c60:	2000      	movs	r0, #0
 8000c62:	f001 ffa7 	bl	8002bb4 <BSP_LCD_DisplayStringAt>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <main+0x198>)
 8000c68:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000c6c:	461d      	mov	r5, r3
 8000c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f00f faa5 	bl	80101d0 <osThreadCreate>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <main+0x19c>)
 8000c8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of SD */
  osThreadDef(SD, SDTask, osPriorityAboveNormal, 0, 4096);
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <main+0x1a0>)
 8000c8e:	f107 041c 	add.w	r4, r7, #28
 8000c92:	461d      	mov	r5, r3
 8000c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDHandle = osThreadCreate(osThread(SD), NULL);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00f fa92 	bl	80101d0 <osThreadCreate>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <main+0x1a4>)
 8000cb0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Audio */
  osThreadDef(Audio, AudioTask, osPriorityNormal, 0, 2048);
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <main+0x1a8>)
 8000cb4:	463c      	mov	r4, r7
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AudioHandle = osThreadCreate(osThread(Audio), NULL);
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f00f fa81 	bl	80101d0 <osThreadCreate>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <main+0x1ac>)
 8000cd2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cd4:	f00f fa59 	bl	801018a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <main+0x17c>
 8000cda:	bf00      	nop
 8000cdc:	20000034 	.word	0x20000034
 8000ce0:	ff8080ff 	.word	0xff8080ff
 8000ce4:	ffff0000 	.word	0xffff0000
 8000ce8:	0801301c 	.word	0x0801301c
 8000cec:	08013024 	.word	0x08013024
 8000cf0:	08013048 	.word	0x08013048
 8000cf4:	0801305c 	.word	0x0801305c
 8000cf8:	200088a0 	.word	0x200088a0
 8000cfc:	08013078 	.word	0x08013078
 8000d00:	20008a0c 	.word	0x20008a0c
 8000d04:	08013094 	.word	0x08013094
 8000d08:	20008f3c 	.word	0x20008f3c

08000d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0b4      	sub	sp, #208	; 0xd0
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d16:	2230      	movs	r2, #48	; 0x30
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f012 f95e 	bl	8012fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	2284      	movs	r2, #132	; 0x84
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f012 f94f 	bl	8012fdc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d3e:	f007 f801 	bl	8007d44 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <SystemClock_Config+0x148>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a43      	ldr	r2, [pc, #268]	; (8000e54 <SystemClock_Config+0x148>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <SystemClock_Config+0x148>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5a:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <SystemClock_Config+0x14c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <SystemClock_Config+0x14c>)
 8000d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <SystemClock_Config+0x14c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d72:	2301      	movs	r3, #1
 8000d74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d8e:	2319      	movs	r3, #25
 8000d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d94:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000da2:	2309      	movs	r3, #9
 8000da4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f007 f829 	bl	8007e04 <HAL_RCC_OscConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000db8:	f000 ff0a 	bl	8001bd0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dbc:	f006 ffd2 	bl	8007d64 <HAL_PWREx_EnableOverDrive>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000dc6:	f000 ff03 	bl	8001bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ddc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000dec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000df0:	2106      	movs	r1, #6
 8000df2:	4618      	mov	r0, r3
 8000df4:	f007 faaa 	bl	800834c <HAL_RCC_ClockConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000dfe:	f000 fee7 	bl	8001bd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <SystemClock_Config+0x150>)
 8000e04:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000e06:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e0a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000e14:	2303      	movs	r3, #3
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000e22:	2300      	movs	r3, #0
 8000e24:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e26:	2300      	movs	r3, #0
 8000e28:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000e2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f007 fc8d 	bl	800875c <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x140>
  {
    Error_Handler();
 8000e48:	f000 fec2 	bl	8001bd0 <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	37d0      	adds	r7, #208	; 0xd0
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000
 8000e5c:	00b00048 	.word	0x00b00048

08000e60 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_DMA2D_Init+0x5c>)
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <MX_DMA2D_Init+0x60>)
 8000e68:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_DMA2D_Init+0x5c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_DMA2D_Init+0x5c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_DMA2D_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_DMA2D_Init+0x5c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_DMA2D_Init+0x5c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_DMA2D_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_DMA2D_Init+0x5c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <MX_DMA2D_Init+0x5c>)
 8000e96:	f005 f93b 	bl	8006110 <HAL_DMA2D_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ea0:	f000 fe96 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_DMA2D_Init+0x5c>)
 8000ea8:	f005 fa90 	bl	80063cc <HAL_DMA2D_ConfigLayer>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000eb2:	f000 fe8d 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20009000 	.word	0x20009000
 8000ec0:	4002b000 	.word	0x4002b000

08000ec4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2234      	movs	r2, #52	; 0x34
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f012 f883 	bl	8012fdc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000ed8:	4a3a      	ldr	r2, [pc, #232]	; (8000fc4 <MX_LTDC_Init+0x100>)
 8000eda:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000edc:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000ef6:	2228      	movs	r2, #40	; 0x28
 8000ef8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000efc:	2209      	movs	r2, #9
 8000efe:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000f00:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000f02:	2235      	movs	r2, #53	; 0x35
 8000f04:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000f08:	220b      	movs	r2, #11
 8000f0a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000f0e:	f240 2215 	movw	r2, #533	; 0x215
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000f16:	f240 121b 	movw	r2, #283	; 0x11b
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000f1e:	f240 2235 	movw	r2, #565	; 0x235
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000f26:	f240 121d 	movw	r2, #285	; 0x11d
 8000f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f44:	481e      	ldr	r0, [pc, #120]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000f46:	f006 fb85 	bl	8007654 <HAL_LTDC_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f50:	f000 fe3e 	bl	8001bd0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000f58:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f5c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000f62:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f66:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f6c:	23ff      	movs	r3, #255	; 0xff
 8000f6e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f74:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f78:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f7e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000f84:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000f8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_LTDC_Init+0xfc>)
 8000faa:	f006 fce5 	bl	8007978 <HAL_LTDC_ConfigLayer>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000fb4:	f000 fe0c 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3738      	adds	r7, #56	; 0x38
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20008a10 	.word	0x20008a10
 8000fc4:	40016800 	.word	0x40016800

08000fc8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000fcc:	4b4e      	ldr	r3, [pc, #312]	; (8001108 <MX_SAI2_Init+0x140>)
 8000fce:	4a4f      	ldr	r2, [pc, #316]	; (800110c <MX_SAI2_Init+0x144>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fd2:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <MX_SAI2_Init+0x140>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000fd8:	4b4b      	ldr	r3, [pc, #300]	; (8001108 <MX_SAI2_Init+0x140>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000fde:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <MX_SAI2_Init+0x140>)
 8000fe0:	2240      	movs	r2, #64	; 0x40
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fe4:	4b48      	ldr	r3, [pc, #288]	; (8001108 <MX_SAI2_Init+0x140>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000fea:	4b47      	ldr	r3, [pc, #284]	; (8001108 <MX_SAI2_Init+0x140>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ff0:	4b45      	ldr	r3, [pc, #276]	; (8001108 <MX_SAI2_Init+0x140>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ff6:	4b44      	ldr	r3, [pc, #272]	; (8001108 <MX_SAI2_Init+0x140>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ffc:	4b42      	ldr	r3, [pc, #264]	; (8001108 <MX_SAI2_Init+0x140>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <MX_SAI2_Init+0x140>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <MX_SAI2_Init+0x140>)
 800100a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800100e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001010:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <MX_SAI2_Init+0x140>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <MX_SAI2_Init+0x140>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800101c:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <MX_SAI2_Init+0x140>)
 800101e:	2200      	movs	r2, #0
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001022:	4b39      	ldr	r3, [pc, #228]	; (8001108 <MX_SAI2_Init+0x140>)
 8001024:	2200      	movs	r2, #0
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <MX_SAI2_Init+0x140>)
 800102a:	2208      	movs	r2, #8
 800102c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800102e:	4b36      	ldr	r3, [pc, #216]	; (8001108 <MX_SAI2_Init+0x140>)
 8001030:	2201      	movs	r2, #1
 8001032:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001034:	4b34      	ldr	r3, [pc, #208]	; (8001108 <MX_SAI2_Init+0x140>)
 8001036:	2200      	movs	r2, #0
 8001038:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800103a:	4b33      	ldr	r3, [pc, #204]	; (8001108 <MX_SAI2_Init+0x140>)
 800103c:	2200      	movs	r2, #0
 800103e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <MX_SAI2_Init+0x140>)
 8001042:	2200      	movs	r2, #0
 8001044:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001046:	4b30      	ldr	r3, [pc, #192]	; (8001108 <MX_SAI2_Init+0x140>)
 8001048:	2200      	movs	r2, #0
 800104a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <MX_SAI2_Init+0x140>)
 800104e:	2200      	movs	r2, #0
 8001050:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <MX_SAI2_Init+0x140>)
 8001054:	2201      	movs	r2, #1
 8001056:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <MX_SAI2_Init+0x140>)
 800105a:	2200      	movs	r2, #0
 800105c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800105e:	482a      	ldr	r0, [pc, #168]	; (8001108 <MX_SAI2_Init+0x140>)
 8001060:	f008 f9bc 	bl	80093dc <HAL_SAI_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 800106a:	f000 fdb1 	bl	8001bd0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <MX_SAI2_Init+0x148>)
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <MX_SAI2_Init+0x14c>)
 8001072:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001074:	4b26      	ldr	r3, [pc, #152]	; (8001110 <MX_SAI2_Init+0x148>)
 8001076:	2200      	movs	r2, #0
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_SAI2_Init+0x148>)
 800107c:	2203      	movs	r2, #3
 800107e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <MX_SAI2_Init+0x148>)
 8001082:	2240      	movs	r2, #64	; 0x40
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_SAI2_Init+0x148>)
 8001088:	2200      	movs	r2, #0
 800108a:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <MX_SAI2_Init+0x148>)
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001092:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_SAI2_Init+0x148>)
 8001094:	2201      	movs	r2, #1
 8001096:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_SAI2_Init+0x148>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_SAI2_Init+0x148>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_SAI2_Init+0x148>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_SAI2_Init+0x148>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_SAI2_Init+0x148>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_SAI2_Init+0x148>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_SAI2_Init+0x148>)
 80010be:	2208      	movs	r2, #8
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <MX_SAI2_Init+0x148>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_SAI2_Init+0x148>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <MX_SAI2_Init+0x148>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_SAI2_Init+0x148>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <MX_SAI2_Init+0x148>)
 80010dc:	2200      	movs	r2, #0
 80010de:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_SAI2_Init+0x148>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_SAI2_Init+0x148>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_SAI2_Init+0x148>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <MX_SAI2_Init+0x148>)
 80010f4:	f008 f972 	bl	80093dc <HAL_SAI_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 80010fe:	f000 fd67 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20008904 	.word	0x20008904
 800110c:	40015c04 	.word	0x40015c04
 8001110:	2000881c 	.word	0x2000881c
 8001114:	40015c24 	.word	0x40015c24

08001118 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_SDMMC1_SD_Init+0x38>)
 800111e:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <MX_SDMMC1_SD_Init+0x3c>)
 8001120:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_SDMMC1_SD_Init+0x38>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_SDMMC1_SD_Init+0x38>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_SDMMC1_SD_Init+0x38>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_SDMMC1_SD_Init+0x38>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <MX_SDMMC1_SD_Init+0x38>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <MX_SDMMC1_SD_Init+0x38>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	20008988 	.word	0x20008988
 8001154:	40012c00 	.word	0x40012c00

08001158 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <MX_USART1_UART_Init+0x5c>)
 8001160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART1_UART_Init+0x58>)
 800119c:	f00a fbc2 	bl	800b924 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011a6:	f000 fd13 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20008eb8 	.word	0x20008eb8
 80011b4:	40011000 	.word	0x40011000

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_DMA_Init+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <MX_DMA_Init+0x68>)
 80011c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_DMA_Init+0x68>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2105      	movs	r1, #5
 80011da:	203b      	movs	r0, #59	; 0x3b
 80011dc:	f004 fb6a 	bl	80058b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011e0:	203b      	movs	r0, #59	; 0x3b
 80011e2:	f004 fb83 	bl	80058ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2105      	movs	r1, #5
 80011ea:	203c      	movs	r0, #60	; 0x3c
 80011ec:	f004 fb62 	bl	80058b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80011f0:	203c      	movs	r0, #60	; 0x3c
 80011f2:	f004 fb7b 	bl	80058ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	2045      	movs	r0, #69	; 0x45
 80011fc:	f004 fb5a 	bl	80058b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001200:	2045      	movs	r0, #69	; 0x45
 8001202:	f004 fb73 	bl	80058ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2105      	movs	r1, #5
 800120a:	2046      	movs	r0, #70	; 0x46
 800120c:	f004 fb52 	bl	80058b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001210:	2046      	movs	r0, #70	; 0x46
 8001212:	f004 fb6b 	bl	80058ec <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_FMC_Init+0x94>)
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <MX_FMC_Init+0x98>)
 8001240:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_FMC_Init+0x94>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_FMC_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_FMC_Init+0x94>)
 8001250:	2204      	movs	r2, #4
 8001252:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_FMC_Init+0x94>)
 8001256:	2210      	movs	r2, #16
 8001258:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_FMC_Init+0x94>)
 800125c:	2240      	movs	r2, #64	; 0x40
 800125e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_FMC_Init+0x94>)
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_FMC_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_FMC_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_FMC_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_FMC_Init+0x94>)
 800127a:	2200      	movs	r2, #0
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800127e:	2310      	movs	r3, #16
 8001280:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001282:	2310      	movs	r3, #16
 8001284:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001286:	2310      	movs	r3, #16
 8001288:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800128a:	2310      	movs	r3, #16
 800128c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800128e:	2310      	movs	r3, #16
 8001290:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001292:	2310      	movs	r3, #16
 8001294:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001296:	2310      	movs	r3, #16
 8001298:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <MX_FMC_Init+0x94>)
 80012a0:	f009 ffe1 	bl	800b266 <HAL_SDRAM_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80012aa:	f000 fc91 	bl	8001bd0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20009040 	.word	0x20009040
 80012bc:	a0000140 	.word	0xa0000140

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b090      	sub	sp, #64	; 0x40
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d6:	4bae      	ldr	r3, [pc, #696]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4aad      	ldr	r2, [pc, #692]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4bab      	ldr	r3, [pc, #684]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ee:	4ba8      	ldr	r3, [pc, #672]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4aa7      	ldr	r2, [pc, #668]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80012f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4ba5      	ldr	r3, [pc, #660]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4ba2      	ldr	r3, [pc, #648]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4aa1      	ldr	r2, [pc, #644]	; (8001590 <MX_GPIO_Init+0x2d0>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b9f      	ldr	r3, [pc, #636]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	623b      	str	r3, [r7, #32]
 800131c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	4b9c      	ldr	r3, [pc, #624]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a9b      	ldr	r2, [pc, #620]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b99      	ldr	r3, [pc, #612]	; (8001590 <MX_GPIO_Init+0x2d0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b96      	ldr	r3, [pc, #600]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a95      	ldr	r2, [pc, #596]	; (8001590 <MX_GPIO_Init+0x2d0>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b93      	ldr	r3, [pc, #588]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b90      	ldr	r3, [pc, #576]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a8f      	ldr	r2, [pc, #572]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b8d      	ldr	r3, [pc, #564]	; (8001590 <MX_GPIO_Init+0x2d0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001366:	4b8a      	ldr	r3, [pc, #552]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a89      	ldr	r2, [pc, #548]	; (8001590 <MX_GPIO_Init+0x2d0>)
 800136c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b87      	ldr	r3, [pc, #540]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800137e:	4b84      	ldr	r3, [pc, #528]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a83      	ldr	r2, [pc, #524]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b81      	ldr	r3, [pc, #516]	; (8001590 <MX_GPIO_Init+0x2d0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001396:	4b7e      	ldr	r3, [pc, #504]	; (8001590 <MX_GPIO_Init+0x2d0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a7d      	ldr	r2, [pc, #500]	; (8001590 <MX_GPIO_Init+0x2d0>)
 800139c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ae:	4b78      	ldr	r3, [pc, #480]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a77      	ldr	r2, [pc, #476]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b75      	ldr	r3, [pc, #468]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	4b72      	ldr	r3, [pc, #456]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a71      	ldr	r2, [pc, #452]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <MX_GPIO_Init+0x2d0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	2120      	movs	r1, #32
 80013e2:	486c      	ldr	r0, [pc, #432]	; (8001594 <MX_GPIO_Init+0x2d4>)
 80013e4:	f005 fbf0 	bl	8006bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f241 010c 	movw	r1, #4108	; 0x100c
 80013ee:	486a      	ldr	r0, [pc, #424]	; (8001598 <MX_GPIO_Init+0x2d8>)
 80013f0:	f005 fbea 	bl	8006bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2108      	movs	r1, #8
 80013f8:	4868      	ldr	r0, [pc, #416]	; (800159c <MX_GPIO_Init+0x2dc>)
 80013fa:	f005 fbe5 	bl	8006bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001404:	4866      	ldr	r0, [pc, #408]	; (80015a0 <MX_GPIO_Init+0x2e0>)
 8001406:	f005 fbdf 	bl	8006bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	21c8      	movs	r1, #200	; 0xc8
 800140e:	4865      	ldr	r0, [pc, #404]	; (80015a4 <MX_GPIO_Init+0x2e4>)
 8001410:	f005 fbda 	bl	8006bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001414:	2308      	movs	r3, #8
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001424:	4619      	mov	r1, r3
 8001426:	4860      	ldr	r0, [pc, #384]	; (80015a8 <MX_GPIO_Init+0x2e8>)
 8001428:	f005 f8fe 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800142c:	2304      	movs	r3, #4
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800143c:	2309      	movs	r3, #9
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001444:	4619      	mov	r1, r3
 8001446:	4858      	ldr	r0, [pc, #352]	; (80015a8 <MX_GPIO_Init+0x2e8>)
 8001448:	f005 f8ee 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800144c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800145e:	230b      	movs	r3, #11
 8001460:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001466:	4619      	mov	r1, r3
 8001468:	484e      	ldr	r0, [pc, #312]	; (80015a4 <MX_GPIO_Init+0x2e4>)
 800146a:	f005 f8dd 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001478:	2301      	movs	r3, #1
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001480:	2304      	movs	r3, #4
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001488:	4619      	mov	r1, r3
 800148a:	4848      	ldr	r0, [pc, #288]	; (80015ac <MX_GPIO_Init+0x2ec>)
 800148c:	f005 f8cc 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001490:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014a2:	230a      	movs	r3, #10
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014aa:	4619      	mov	r1, r3
 80014ac:	483f      	ldr	r0, [pc, #252]	; (80015ac <MX_GPIO_Init+0x2ec>)
 80014ae:	f005 f8bb 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80014b2:	2310      	movs	r3, #16
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014c2:	2302      	movs	r3, #2
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ca:	4619      	mov	r1, r3
 80014cc:	4837      	ldr	r0, [pc, #220]	; (80015ac <MX_GPIO_Init+0x2ec>)
 80014ce:	f005 f8ab 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80014e2:	2308      	movs	r3, #8
 80014e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ea:	4619      	mov	r1, r3
 80014ec:	4829      	ldr	r0, [pc, #164]	; (8001594 <MX_GPIO_Init+0x2d4>)
 80014ee:	f005 f89b 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80014f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001504:	2301      	movs	r3, #1
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150c:	4619      	mov	r1, r3
 800150e:	4828      	ldr	r0, [pc, #160]	; (80015b0 <MX_GPIO_Init+0x2f0>)
 8001510:	f005 f88a 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001514:	2360      	movs	r3, #96	; 0x60
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001524:	230d      	movs	r3, #13
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152c:	4619      	mov	r1, r3
 800152e:	481e      	ldr	r0, [pc, #120]	; (80015a8 <MX_GPIO_Init+0x2e8>)
 8001530:	f005 f87a 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001534:	2340      	movs	r3, #64	; 0x40
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001544:	230a      	movs	r3, #10
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154c:	4619      	mov	r1, r3
 800154e:	4817      	ldr	r0, [pc, #92]	; (80015ac <MX_GPIO_Init+0x2ec>)
 8001550:	f005 f86a 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001566:	4619      	mov	r1, r3
 8001568:	4812      	ldr	r0, [pc, #72]	; (80015b4 <MX_GPIO_Init+0x2f4>)
 800156a:	f005 f85d 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_GPIO_Init+0x2f8>)
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157e:	4619      	mov	r1, r3
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_GPIO_Init+0x2d4>)
 8001582:	f005 f851 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001586:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800158c:	e016      	b.n	80015bc <MX_GPIO_Init+0x2fc>
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40022000 	.word	0x40022000
 800159c:	40022800 	.word	0x40022800
 80015a0:	40021c00 	.word	0x40021c00
 80015a4:	40021800 	.word	0x40021800
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40022400 	.word	0x40022400
 80015b8:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015c8:	230a      	movs	r3, #10
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d0:	4619      	mov	r1, r3
 80015d2:	48bc      	ldr	r0, [pc, #752]	; (80018c4 <MX_GPIO_Init+0x604>)
 80015d4:	f005 f828 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015d8:	2320      	movs	r3, #32
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ec:	4619      	mov	r1, r3
 80015ee:	48b6      	ldr	r0, [pc, #728]	; (80018c8 <MX_GPIO_Init+0x608>)
 80015f0:	f005 f81a 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80015f4:	2308      	movs	r3, #8
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001604:	230d      	movs	r3, #13
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160c:	4619      	mov	r1, r3
 800160e:	48ae      	ldr	r0, [pc, #696]	; (80018c8 <MX_GPIO_Init+0x608>)
 8001610:	f005 f80a 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001614:	f241 030c 	movw	r3, #4108	; 0x100c
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	48a7      	ldr	r0, [pc, #668]	; (80018cc <MX_GPIO_Init+0x60c>)
 800162e:	f004 fffb 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001644:	4619      	mov	r1, r3
 8001646:	48a2      	ldr	r0, [pc, #648]	; (80018d0 <MX_GPIO_Init+0x610>)
 8001648:	f004 ffee 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800164c:	2308      	movs	r3, #8
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001660:	4619      	mov	r1, r3
 8001662:	489c      	ldr	r0, [pc, #624]	; (80018d4 <MX_GPIO_Init+0x614>)
 8001664:	f004 ffe0 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800167a:	230d      	movs	r3, #13
 800167c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	4894      	ldr	r0, [pc, #592]	; (80018d8 <MX_GPIO_Init+0x618>)
 8001686:	f004 ffcf 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800168a:	2310      	movs	r3, #16
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169a:	4619      	mov	r1, r3
 800169c:	488a      	ldr	r0, [pc, #552]	; (80018c8 <MX_GPIO_Init+0x608>)
 800169e:	f004 ffc3 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80016a2:	f248 0304 	movw	r3, #32772	; 0x8004
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b4:	4619      	mov	r1, r3
 80016b6:	4889      	ldr	r0, [pc, #548]	; (80018dc <MX_GPIO_Init+0x61c>)
 80016b8:	f004 ffb6 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80016bc:	2302      	movs	r3, #2
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016cc:	2305      	movs	r3, #5
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d4:	4619      	mov	r1, r3
 80016d6:	487d      	ldr	r0, [pc, #500]	; (80018cc <MX_GPIO_Init+0x60c>)
 80016d8:	f004 ffa6 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80016dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f2:	4619      	mov	r1, r3
 80016f4:	4879      	ldr	r0, [pc, #484]	; (80018dc <MX_GPIO_Init+0x61c>)
 80016f6:	f004 ff97 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80016fa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800170c:	230d      	movs	r3, #13
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001714:	4619      	mov	r1, r3
 8001716:	4871      	ldr	r0, [pc, #452]	; (80018dc <MX_GPIO_Init+0x61c>)
 8001718:	f004 ff86 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800171c:	2301      	movs	r3, #1
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800172c:	2302      	movs	r3, #2
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001734:	4619      	mov	r1, r3
 8001736:	4865      	ldr	r0, [pc, #404]	; (80018cc <MX_GPIO_Init+0x60c>)
 8001738:	f004 ff76 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800173c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800174e:	2301      	movs	r3, #1
 8001750:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001756:	4619      	mov	r1, r3
 8001758:	485a      	ldr	r0, [pc, #360]	; (80018c4 <MX_GPIO_Init+0x604>)
 800175a:	f004 ff65 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800175e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001764:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <MX_GPIO_Init+0x620>)
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001770:	4619      	mov	r1, r3
 8001772:	4856      	ldr	r0, [pc, #344]	; (80018cc <MX_GPIO_Init+0x60c>)
 8001774:	f004 ff58 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001778:	23c0      	movs	r3, #192	; 0xc0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001788:	2308      	movs	r3, #8
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001790:	4619      	mov	r1, r3
 8001792:	484f      	ldr	r0, [pc, #316]	; (80018d0 <MX_GPIO_Init+0x610>)
 8001794:	f004 ff48 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001798:	2310      	movs	r3, #16
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017a8:	230a      	movs	r3, #10
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b0:	4619      	mov	r1, r3
 80017b2:	484a      	ldr	r0, [pc, #296]	; (80018dc <MX_GPIO_Init+0x61c>)
 80017b4:	f004 ff38 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80017b8:	23c8      	movs	r3, #200	; 0xc8
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017cc:	4619      	mov	r1, r3
 80017ce:	4842      	ldr	r0, [pc, #264]	; (80018d8 <MX_GPIO_Init+0x618>)
 80017d0:	f004 ff2a 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80017d4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017da:	2303      	movs	r3, #3
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e6:	4619      	mov	r1, r3
 80017e8:	483e      	ldr	r0, [pc, #248]	; (80018e4 <MX_GPIO_Init+0x624>)
 80017ea:	f004 ff1d 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80017ee:	2305      	movs	r3, #5
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017fe:	230a      	movs	r3, #10
 8001800:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001806:	4619      	mov	r1, r3
 8001808:	4831      	ldr	r0, [pc, #196]	; (80018d0 <MX_GPIO_Init+0x610>)
 800180a:	f004 ff0d 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800180e:	2332      	movs	r3, #50	; 0x32
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800181e:	230b      	movs	r3, #11
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001826:	4619      	mov	r1, r3
 8001828:	4829      	ldr	r0, [pc, #164]	; (80018d0 <MX_GPIO_Init+0x610>)
 800182a:	f004 fefd 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800182e:	2304      	movs	r3, #4
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800183e:	2309      	movs	r3, #9
 8001840:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001846:	4619      	mov	r1, r3
 8001848:	4827      	ldr	r0, [pc, #156]	; (80018e8 <MX_GPIO_Init+0x628>)
 800184a:	f004 feed 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800184e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001860:	2309      	movs	r3, #9
 8001862:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001868:	4619      	mov	r1, r3
 800186a:	4817      	ldr	r0, [pc, #92]	; (80018c8 <MX_GPIO_Init+0x608>)
 800186c:	f004 fedc 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001870:	2304      	movs	r3, #4
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001880:	4619      	mov	r1, r3
 8001882:	4815      	ldr	r0, [pc, #84]	; (80018d8 <MX_GPIO_Init+0x618>)
 8001884:	f004 fed0 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001888:	2386      	movs	r3, #134	; 0x86
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001898:	230b      	movs	r3, #11
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	4619      	mov	r1, r3
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <MX_GPIO_Init+0x604>)
 80018a4:	f004 fec0 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80018a8:	2301      	movs	r3, #1
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ac:	2303      	movs	r3, #3
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b8:	4619      	mov	r1, r3
 80018ba:	4802      	ldr	r0, [pc, #8]	; (80018c4 <MX_GPIO_Init+0x604>)
 80018bc:	f004 feb4 	bl	8006628 <HAL_GPIO_Init>
 80018c0:	e014      	b.n	80018ec <MX_GPIO_Init+0x62c>
 80018c2:	bf00      	nop
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020c00 	.word	0x40020c00
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40022800 	.word	0x40022800
 80018d8:	40021800 	.word	0x40021800
 80018dc:	40021c00 	.word	0x40021c00
 80018e0:	10120000 	.word	0x10120000
 80018e4:	40021400 	.word	0x40021400
 80018e8:	40020400 	.word	0x40020400

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80018ec:	2350      	movs	r3, #80	; 0x50
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80018fc:	230d      	movs	r3, #13
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001904:	4619      	mov	r1, r3
 8001906:	4824      	ldr	r0, [pc, #144]	; (8001998 <MX_GPIO_Init+0x6d8>)
 8001908:	f004 fe8e 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800190c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001912:	2312      	movs	r3, #18
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001916:	2301      	movs	r3, #1
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800191e:	2304      	movs	r3, #4
 8001920:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001926:	4619      	mov	r1, r3
 8001928:	481c      	ldr	r0, [pc, #112]	; (800199c <MX_GPIO_Init+0x6dc>)
 800192a:	f004 fe7d 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800192e:	2328      	movs	r3, #40	; 0x28
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800193e:	230a      	movs	r3, #10
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001946:	4619      	mov	r1, r3
 8001948:	4813      	ldr	r0, [pc, #76]	; (8001998 <MX_GPIO_Init+0x6d8>)
 800194a:	f004 fe6d 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800194e:	2340      	movs	r3, #64	; 0x40
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800195e:	2309      	movs	r3, #9
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	4619      	mov	r1, r3
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <MX_GPIO_Init+0x6dc>)
 800196a:	f004 fe5d 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800196e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001980:	2305      	movs	r3, #5
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	4619      	mov	r1, r3
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_GPIO_Init+0x6e0>)
 800198c:	f004 fe4c 	bl	8006628 <HAL_GPIO_Init>

}
 8001990:	bf00      	nop
 8001992:	3740      	adds	r7, #64	; 0x40
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40020000 	.word	0x40020000
 800199c:	40021c00 	.word	0x40021c00
 80019a0:	40020400 	.word	0x40020400

080019a4 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/* USER CODE BEGIN 4 */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 80019aa:	2202      	movs	r2, #2
 80019ac:	601a      	str	r2, [r3, #0]
	return;
 80019ae:	bf00      	nop
}
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	200090d4 	.word	0x200090d4

080019bc <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
	return;
 80019c6:	bf00      	nop
}
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	200090d4 	.word	0x200090d4

080019d4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f00e fc43 	bl	8010268 <osDelay>
 80019e2:	e7fb      	b.n	80019dc <StartDefaultTask+0x8>

080019e4 <SDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SDTask */
void SDTask(void const * argument)
{
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80019ea:	af02      	add	r7, sp, #8
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN SDTask */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	uint8_t wtext[] = "La version v1.16.1 ne devrait plus poser de soucis :)"; /* File write buffer */
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <SDTask+0xc8>)
 80019f2:	f507 7402 	add.w	r4, r7, #520	; 0x208
 80019f6:	461d      	mov	r5, r3
 80019f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a08:	6020      	str	r0, [r4, #0]
 8001a0a:	3404      	adds	r4, #4
 8001a0c:	8021      	strh	r1, [r4, #0]
	uint8_t rtext[_MAX_SS];/* File read buffer */
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4927      	ldr	r1, [pc, #156]	; (8001ab0 <SDTask+0xcc>)
 8001a12:	4828      	ldr	r0, [pc, #160]	; (8001ab4 <SDTask+0xd0>)
 8001a14:	f00d fa36 	bl	800ee84 <f_mount>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <SDTask+0x40>
	{
		Error_Handler();
 8001a1e:	f000 f8d7 	bl	8001bd0 <Error_Handler>
 8001a22:	e038      	b.n	8001a96 <SDTask+0xb2>
	}
	else
	{
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2107      	movs	r1, #7
 8001a32:	481f      	ldr	r0, [pc, #124]	; (8001ab0 <SDTask+0xcc>)
 8001a34:	f00d feac 	bl	800f790 <f_mkfs>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <SDTask+0x60>
		{
			Error_Handler();
 8001a3e:	f000 f8c7 	bl	8001bd0 <Error_Handler>
 8001a42:	e028      	b.n	8001a96 <SDTask+0xb2>
		}
		else
		{
			//Open file for writing (Create)
			if(f_open(&SDFile, "EEA.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8001a44:	220a      	movs	r2, #10
 8001a46:	491c      	ldr	r1, [pc, #112]	; (8001ab8 <SDTask+0xd4>)
 8001a48:	481c      	ldr	r0, [pc, #112]	; (8001abc <SDTask+0xd8>)
 8001a4a:	f00d fa7f 	bl	800ef4c <f_open>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <SDTask+0x76>
			{
				Error_Handler();
 8001a54:	f000 f8bc 	bl	8001bd0 <Error_Handler>
 8001a58:	e01d      	b.n	8001a96 <SDTask+0xb2>
			}
			else
			{
				//Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8001a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fbd6 	bl	8000210 <strlen>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001a6a:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8001a6e:	4813      	ldr	r0, [pc, #76]	; (8001abc <SDTask+0xd8>)
 8001a70:	f00d fc31 	bl	800f2d6 <f_write>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
				if((byteswritten == 0) || (res != FR_OK))
 8001a7a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <SDTask+0xa6>
 8001a82:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <SDTask+0xac>
				{
					Error_Handler();
 8001a8a:	f000 f8a1 	bl	8001bd0 <Error_Handler>
 8001a8e:	e002      	b.n	8001a96 <SDTask+0xb2>
				}
				else
				{
					f_close(&SDFile);
 8001a90:	480a      	ldr	r0, [pc, #40]	; (8001abc <SDTask+0xd8>)
 8001a92:	f00d fe4d 	bl	800f730 <f_close>
				}
			}
		}
	}
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <SDTask+0xd0>)
 8001a9c:	f00d f9f2 	bl	800ee84 <f_mount>
	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);
 8001aa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa4:	f00e fbe0 	bl	8010268 <osDelay>
 8001aa8:	e7fa      	b.n	8001aa0 <SDTask+0xbc>
 8001aaa:	bf00      	nop
 8001aac:	080130b8 	.word	0x080130b8
 8001ab0:	20009258 	.word	0x20009258
 8001ab4:	2000948c 	.word	0x2000948c
 8001ab8:	080130b0 	.word	0x080130b0
 8001abc:	2000925c 	.word	0x2000925c

08001ac0 <AudioTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AudioTask */
void AudioTask(void const * argument)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AudioTask */
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, 16000, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8001ac8:	2302      	movs	r3, #2
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2310      	movs	r3, #16
 8001ace:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ad8:	f000 fc62 	bl	80023a0 <BSP_AUDIO_IN_OUT_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d112      	bne.n	8001b08 <AudioTask+0x48>
	{
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae6:	f000 ffc5 	bl	8002a74 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001aea:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001aee:	f000 ffa9 	bl	8002a44 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 90, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 8001af2:	f000 ff23 	bl	800293c <BSP_LCD_GetYSize>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b5a      	subs	r3, #90	; 0x5a
 8001afc:	b299      	uxth	r1, r3
 8001afe:	2301      	movs	r3, #1
 8001b00:	4a24      	ldr	r2, [pc, #144]	; (8001b94 <AudioTask+0xd4>)
 8001b02:	2000      	movs	r0, #0
 8001b04:	f001 f856 	bl	8002bb4 <BSP_LCD_DisplayStringAt>
	}

	/* Initialize SDRAM buffers */
	memset((uint16_t*)AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE*2);
 8001b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4822      	ldr	r0, [pc, #136]	; (8001b98 <AudioTask+0xd8>)
 8001b10:	f011 fa64 	bl	8012fdc <memset>
	memset((uint16_t*)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE*2);
 8001b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4820      	ldr	r0, [pc, #128]	; (8001b9c <AudioTask+0xdc>)
 8001b1c:	f011 fa5e 	bl	8012fdc <memset>
	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <AudioTask+0xe0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]

	/* Start Recording */
	BSP_AUDIO_IN_Record((uint16_t*)AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8001b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2a:	481b      	ldr	r0, [pc, #108]	; (8001b98 <AudioTask+0xd8>)
 8001b2c:	f000 fcb2 	bl	8002494 <BSP_AUDIO_IN_Record>
	BSP_AUDIO_IN_SetVolume(90);
 8001b30:	205a      	movs	r0, #90	; 0x5a
 8001b32:	f000 fcc7 	bl	80024c4 <BSP_AUDIO_IN_SetVolume>
	/* Start Playback */
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8001b36:	2005      	movs	r0, #5
 8001b38:	f000 fa92 	bl	8002060 <BSP_AUDIO_OUT_SetAudioFrameSlot>
	BSP_AUDIO_OUT_Play((uint16_t*)AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE*2);
 8001b3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b40:	4816      	ldr	r0, [pc, #88]	; (8001b9c <AudioTask+0xdc>)
 8001b42:	f000 fa63 	bl	800200c <BSP_AUDIO_OUT_Play>
	/* Infinite loop */
	for(;;)
	{
		while(audio_rec_buffer_state != BUFFER_OFFSET_HALF);
 8001b46:	bf00      	nop
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <AudioTask+0xe0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d1fb      	bne.n	8001b48 <AudioTask+0x88>
		RL_sep((uint16_t*)AUDIO_BUFFER_IN,AUDIO_BLOCK_SIZE);
 8001b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b54:	4810      	ldr	r0, [pc, #64]	; (8001b98 <AudioTask+0xd8>)
 8001b56:	f7fe ff59 	bl	8000a0c <RL_sep>
		treatment();
 8001b5a:	f7fe ff97 	bl	8000a8c <treatment>
		RL_cat2((uint16_t*)AUDIO_BUFFER_OUT,AUDIO_BLOCK_SIZE);
 8001b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <AudioTask+0xdc>)
 8001b64:	f7fe ffbc 	bl	8000ae0 <RL_cat2>
		while(audio_rec_buffer_state != BUFFER_OFFSET_FULL);
 8001b68:	bf00      	nop
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <AudioTask+0xe0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d1fb      	bne.n	8001b6a <AudioTask+0xaa>
		RL_sep((uint16_t*)(AUDIO_BUFFER_IN+(AUDIO_BLOCK_SIZE)),AUDIO_BLOCK_SIZE);
 8001b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b76:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <AudioTask+0xe4>)
 8001b78:	f7fe ff48 	bl	8000a0c <RL_sep>
		treatment();
 8001b7c:	f7fe ff86 	bl	8000a8c <treatment>
		RL_cat2((uint16_t*)(AUDIO_BUFFER_OUT+(AUDIO_BLOCK_SIZE)),AUDIO_BLOCK_SIZE);
 8001b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b84:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <AudioTask+0xe8>)
 8001b86:	f7fe ffab 	bl	8000ae0 <RL_cat2>
		osDelay(2);
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f00e fb6c 	bl	8010268 <osDelay>
		while(audio_rec_buffer_state != BUFFER_OFFSET_HALF);
 8001b90:	e7d9      	b.n	8001b46 <AudioTask+0x86>
 8001b92:	bf00      	nop
 8001b94:	080130f0 	.word	0x080130f0
 8001b98:	c007f800 	.word	0xc007f800
 8001b9c:	c007fc00 	.word	0xc007fc00
 8001ba0:	200090d4 	.word	0x200090d4
 8001ba4:	c007fa00 	.word	0xc007fa00
 8001ba8:	c007fe00 	.word	0xc007fe00

08001bac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bbe:	f003 fd7d 	bl	80056bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40001000 	.word	0x40001000

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <Error_Handler+0x8>
	...

08001bdc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a51      	ldr	r2, [pc, #324]	; (8001d2c <I2Cx_MspInit+0x150>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d14d      	bne.n	8001c88 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	4a4f      	ldr	r2, [pc, #316]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001c08:	2312      	movs	r3, #18
 8001c0a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001c10:	2302      	movs	r3, #2
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001c14:	2304      	movs	r3, #4
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4845      	ldr	r0, [pc, #276]	; (8001d34 <I2Cx_MspInit+0x158>)
 8001c20:	f004 fd02 	bl	8006628 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4840      	ldr	r0, [pc, #256]	; (8001d34 <I2Cx_MspInit+0x158>)
 8001c32:	f004 fcf9 	bl	8006628 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001c36:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a3d      	ldr	r2, [pc, #244]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001c3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001c4e:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a37      	ldr	r2, [pc, #220]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001c54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c58:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001c5a:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a34      	ldr	r2, [pc, #208]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001c60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c64:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	210f      	movs	r1, #15
 8001c6a:	2048      	movs	r0, #72	; 0x48
 8001c6c:	f003 fe22 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001c70:	2048      	movs	r0, #72	; 0x48
 8001c72:	f003 fe3b 	bl	80058ec <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	210f      	movs	r1, #15
 8001c7a:	2049      	movs	r0, #73	; 0x49
 8001c7c:	f003 fe1a 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001c80:	2049      	movs	r0, #73	; 0x49
 8001c82:	f003 fe33 	bl	80058ec <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001c86:	e04d      	b.n	8001d24 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	4a28      	ldr	r2, [pc, #160]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	6313      	str	r3, [r2, #48]	; 0x30
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001ca6:	2312      	movs	r3, #18
 8001ca8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481e      	ldr	r0, [pc, #120]	; (8001d38 <I2Cx_MspInit+0x15c>)
 8001cbe:	f004 fcb3 	bl	8006628 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	481a      	ldr	r0, [pc, #104]	; (8001d38 <I2Cx_MspInit+0x15c>)
 8001cd0:	f004 fcaa 	bl	8006628 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001cf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <I2Cx_MspInit+0x154>)
 8001cfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d02:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	210f      	movs	r1, #15
 8001d08:	201f      	movs	r0, #31
 8001d0a:	f003 fdd3 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001d0e:	201f      	movs	r0, #31
 8001d10:	f003 fdec 	bl	80058ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	210f      	movs	r1, #15
 8001d18:	2020      	movs	r0, #32
 8001d1a:	f003 fdcb 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001d1e:	2020      	movs	r0, #32
 8001d20:	f003 fde4 	bl	80058ec <HAL_NVIC_EnableIRQ>
}
 8001d24:	bf00      	nop
 8001d26:	3730      	adds	r7, #48	; 0x30
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200002fc 	.word	0x200002fc
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40021c00 	.word	0x40021c00
 8001d38:	40020400 	.word	0x40020400

08001d3c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f005 fa5b 	bl	8007200 <HAL_I2C_GetState>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d125      	bne.n	8001d9c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <I2Cx_Init+0x68>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d103      	bne.n	8001d60 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <I2Cx_Init+0x6c>)
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e002      	b.n	8001d66 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <I2Cx_Init+0x70>)
 8001d64:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <I2Cx_Init+0x74>)
 8001d6a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff23 	bl	8001bdc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f004 ff30 	bl	8006bfc <HAL_I2C_Init>
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200002fc 	.word	0x200002fc
 8001da8:	40005c00 	.word	0x40005c00
 8001dac:	40005400 	.word	0x40005400
 8001db0:	40912732 	.word	0x40912732

08001db4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af04      	add	r7, sp, #16
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	4608      	mov	r0, r1
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	72fb      	strb	r3, [r7, #11]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	813b      	strh	r3, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	88f8      	ldrh	r0, [r7, #6]
 8001dd8:	893a      	ldrh	r2, [r7, #8]
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4603      	mov	r3, r0
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f005 f8ee 	bl	8006fcc <HAL_I2C_Mem_Read>
 8001df0:	4603      	mov	r3, r0
 8001df2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f832 	bl	8001e68 <I2Cx_Error>
  }
  return status;    
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b08a      	sub	sp, #40	; 0x28
 8001e12:	af04      	add	r7, sp, #16
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	4608      	mov	r0, r1
 8001e18:	4611      	mov	r1, r2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	72fb      	strb	r3, [r7, #11]
 8001e20:	460b      	mov	r3, r1
 8001e22:	813b      	strh	r3, [r7, #8]
 8001e24:	4613      	mov	r3, r2
 8001e26:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e2c:	7afb      	ldrb	r3, [r7, #11]
 8001e2e:	b299      	uxth	r1, r3
 8001e30:	88f8      	ldrh	r0, [r7, #6]
 8001e32:	893a      	ldrh	r2, [r7, #8]
 8001e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e38:	9302      	str	r3, [sp, #8]
 8001e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	4603      	mov	r3, r0
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f004 ffad 	bl	8006da4 <HAL_I2C_Mem_Write>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001e54:	7afb      	ldrb	r3, [r7, #11]
 8001e56:	4619      	mov	r1, r3
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 f805 	bl	8001e68 <I2Cx_Error>
  }
  return status;
 8001e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f004 ff51 	bl	8006d1c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ff5e 	bl	8001d3c <I2Cx_Init>
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <AUDIO_IO_Init+0x10>)
 8001e8e:	f7ff ff55 	bl	8001d3c <I2Cx_Init>
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200002fc 	.word	0x200002fc

08001e9c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	80bb      	strh	r3, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8001ec2:	89fb      	ldrh	r3, [r7, #14]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001ede:	88ba      	ldrh	r2, [r7, #4]
 8001ee0:	79f9      	ldrb	r1, [r7, #7]
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	1cbb      	adds	r3, r7, #2
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2302      	movs	r3, #2
 8001eec:	4803      	ldr	r0, [pc, #12]	; (8001efc <AUDIO_IO_Write+0x50>)
 8001eee:	f7ff ff8e 	bl	8001e0e <I2Cx_WriteMultiple>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200002fc 	.word	0x200002fc

08001f00 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	4603      	mov	r3, r0
 8001f08:	460a      	mov	r2, r1
 8001f0a:	71fb      	strb	r3, [r7, #7]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	81bb      	strh	r3, [r7, #12]
 8001f14:	2300      	movs	r3, #0
 8001f16:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001f18:	88ba      	ldrh	r2, [r7, #4]
 8001f1a:	79f9      	ldrb	r1, [r7, #7]
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2302      	movs	r3, #2
 8001f28:	480a      	ldr	r0, [pc, #40]	; (8001f54 <AUDIO_IO_Read+0x54>)
 8001f2a:	f7ff ff43 	bl	8001db4 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8001f2e:	89bb      	ldrh	r3, [r7, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8001f34:	89bb      	ldrh	r3, [r7, #12]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8001f46:	89fb      	ldrh	r3, [r7, #14]
 8001f48:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8001f4a:	89bb      	ldrh	r3, [r7, #12]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200002fc 	.word	0x200002fc

08001f58 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f003 fbcb 	bl	80056fc <HAL_Delay>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TS_IO_Init+0x10>)
 8001f76:	f7ff fee1 	bl	8001d3c <I2Cx_Init>
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200002fc 	.word	0x200002fc

08001f84 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	71bb      	strb	r3, [r7, #6]
 8001f92:	4613      	mov	r3, r2
 8001f94:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	79f9      	ldrb	r1, [r7, #7]
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	1d7b      	adds	r3, r7, #5
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <TS_IO_Write+0x30>)
 8001fa8:	f7ff ff31 	bl	8001e0e <I2Cx_WriteMultiple>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200002fc 	.word	0x200002fc

08001fb8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	79f9      	ldrb	r1, [r7, #7]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	f107 030f 	add.w	r3, r7, #15
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	2301      	movs	r3, #1
 8001fde:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <TS_IO_Read+0x38>)
 8001fe0:	f7ff fee8 	bl	8001db4 <I2Cx_ReadMultiple>

  return read_value;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200002fc 	.word	0x200002fc

08001ff4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f003 fb7d 	bl	80056fc <HAL_Delay>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <BSP_AUDIO_OUT_Play+0x4c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	b292      	uxth	r2, r2
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	2034      	movs	r0, #52	; 0x34
 8002024:	4798      	blx	r3
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e00f      	b.n	8002050 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002036:	d203      	bcs.n	8002040 <BSP_AUDIO_OUT_Play+0x34>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	b29b      	uxth	r3, r3
 800203e:	e001      	b.n	8002044 <BSP_AUDIO_OUT_Play+0x38>
 8002040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002044:	461a      	mov	r2, r3
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <BSP_AUDIO_OUT_Play+0x50>)
 800204a:	f007 fb7b 	bl	8009744 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 800204e:	2300      	movs	r3, #0
  }
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20009124 	.word	0x20009124
 800205c:	20000348 	.word	0x20000348

08002060 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002076:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8002078:	4a08      	ldr	r2, [pc, #32]	; (800209c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800207e:	4807      	ldr	r0, [pc, #28]	; (800209c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002080:	f007 f9ac 	bl	80093dc <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000348 	.word	0x20000348

080020a0 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80020a8:	f000 f834 	bl	8002114 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80020bc:	f000 f831 	bl	8002122 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80020d0:	480e      	ldr	r0, [pc, #56]	; (800210c <HAL_SAI_ErrorCallback+0x44>)
 80020d2:	f007 fc75 	bl	80099c0 <HAL_SAI_GetState>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80020da:	480d      	ldr	r0, [pc, #52]	; (8002110 <HAL_SAI_ErrorCallback+0x48>)
 80020dc:	f007 fc70 	bl	80099c0 <HAL_SAI_GetState>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d002      	beq.n	80020f0 <HAL_SAI_ErrorCallback+0x28>
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	2b12      	cmp	r3, #18
 80020ee:	d101      	bne.n	80020f4 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80020f0:	f000 f81e 	bl	8002130 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d002      	beq.n	8002100 <HAL_SAI_ErrorCallback+0x38>
 80020fa:	7bbb      	ldrb	r3, [r7, #14]
 80020fc:	2b22      	cmp	r3, #34	; 0x22
 80020fe:	d101      	bne.n	8002104 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8002100:	f000 fa12 	bl	8002528 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000348 	.word	0x20000348
 8002110:	200003cc 	.word	0x200003cc

08002114 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	; 0x30
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800214a:	4b63      	ldr	r3, [pc, #396]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a62      	ldr	r2, [pc, #392]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002150:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b60      	ldr	r3, [pc, #384]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8002162:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a5c      	ldr	r2, [pc, #368]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b5a      	ldr	r3, [pc, #360]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 800217a:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a56      	ldr	r2, [pc, #344]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b54      	ldr	r3, [pc, #336]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002192:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a50      	ldr	r2, [pc, #320]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b4e      	ldr	r3, [pc, #312]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80021ba:	230a      	movs	r3, #10
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	4619      	mov	r1, r3
 80021c4:	4845      	ldr	r0, [pc, #276]	; (80022dc <BSP_AUDIO_OUT_MspInit+0x19c>)
 80021c6:	f004 fa2f 	bl	8006628 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80021ca:	2320      	movs	r3, #32
 80021cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80021da:	230a      	movs	r3, #10
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4619      	mov	r1, r3
 80021e4:	483d      	ldr	r0, [pc, #244]	; (80022dc <BSP_AUDIO_OUT_MspInit+0x19c>)
 80021e6:	f004 fa1f 	bl	8006628 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80021ea:	2340      	movs	r3, #64	; 0x40
 80021ec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80021fa:	230a      	movs	r3, #10
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	4619      	mov	r1, r3
 8002204:	4835      	ldr	r0, [pc, #212]	; (80022dc <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002206:	f004 fa0f 	bl	8006628 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800220a:	2310      	movs	r3, #16
 800220c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800221a:	230a      	movs	r3, #10
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800221e:	f107 031c 	add.w	r3, r7, #28
 8002222:	4619      	mov	r1, r3
 8002224:	482d      	ldr	r0, [pc, #180]	; (80022dc <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002226:	f004 f9ff 	bl	8006628 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800222a:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d138      	bne.n	80022be <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800224e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002252:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002256:	2240      	movs	r2, #64	; 0x40
 8002258:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002266:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800226a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800226e:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002276:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800227a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800227e:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002286:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800228a:	2204      	movs	r2, #4
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002290:	2203      	movs	r2, #3
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002296:	2200      	movs	r2, #0
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80022a2:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 80022a4:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80022aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80022b2:	480c      	ldr	r0, [pc, #48]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80022b4:	f003 fbd6 	bl	8005a64 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 80022b8:	480a      	ldr	r0, [pc, #40]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80022ba:	f003 fb25 	bl	8005908 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	210e      	movs	r1, #14
 80022c2:	203c      	movs	r0, #60	; 0x3c
 80022c4:	f003 faf6 	bl	80058b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80022c8:	203c      	movs	r0, #60	; 0x3c
 80022ca:	f003 fb0f 	bl	80058ec <HAL_NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40022000 	.word	0x40022000
 80022e0:	40015c04 	.word	0x40015c04
 80022e4:	20000450 	.word	0x20000450
 80022e8:	40026470 	.word	0x40026470

080022ec <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b0a6      	sub	sp, #152	; 0x98
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4618      	mov	r0, r3
 80022fe:	f006 fe1d 	bl	8008f3c <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002308:	4293      	cmp	r3, r2
 800230a:	d009      	beq.n	8002320 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f245 6222 	movw	r2, #22050	; 0x5622
 8002312:	4293      	cmp	r3, r2
 8002314:	d004      	beq.n	8002320 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f64a 4244 	movw	r2, #44100	; 0xac44
 800231c:	4293      	cmp	r3, r2
 800231e:	d112      	bne.n	8002346 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002320:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002324:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8002326:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800232a:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800232c:	f240 13ad 	movw	r3, #429	; 0x1ad
 8002330:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8002332:	2302      	movs	r3, #2
 8002334:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8002336:	2313      	movs	r3, #19
 8002338:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4618      	mov	r0, r3
 8002340:	f006 fa0c 	bl	800875c <HAL_RCCEx_PeriphCLKConfig>
 8002344:	e012      	b.n	800236c <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002346:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800234a:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800234c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002350:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8002352:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8002356:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8002358:	2307      	movs	r3, #7
 800235a:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800235c:	2301      	movs	r3, #1
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4618      	mov	r0, r3
 8002366:	f006 f9f9 	bl	800875c <HAL_RCCEx_PeriphCLKConfig>
  }
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3798      	adds	r7, #152	; 0x98
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <SAIx_Out_DeInit+0x24>)
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <SAIx_Out_DeInit+0x28>)
 800237c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <SAIx_Out_DeInit+0x24>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SAIx_Out_DeInit+0x24>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800238c:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 800238e:	4802      	ldr	r0, [pc, #8]	; (8002398 <SAIx_Out_DeInit+0x24>)
 8002390:	f007 f9a2 	bl	80096d8 <HAL_SAI_DeInit>
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000348 	.word	0x20000348
 800239c:	40015c04 	.word	0x40015c04

080023a0 <BSP_AUDIO_IN_OUT_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60ba      	str	r2, [r7, #8]
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	4603      	mov	r3, r0
 80023ac:	81fb      	strh	r3, [r7, #14]
 80023ae:	460b      	mov	r3, r1
 80023b0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = AUDIO_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c0:	d002      	beq.n	80023c8 <BSP_AUDIO_IN_OUT_Init+0x28>
  {
    ret = AUDIO_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	77fb      	strb	r3, [r7, #31]
 80023c6:	e054      	b.n	8002472 <BSP_AUDIO_IN_OUT_Init+0xd2>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80023c8:	f000 fa1e 	bl	8002808 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 80023cc:	f7ff ffd2 	bl	8002374 <SAIx_Out_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80023d0:	2200      	movs	r2, #0
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	4829      	ldr	r0, [pc, #164]	; (800247c <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80023d6:	f7ff ff89 	bl	80022ec <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80023dc:	4a28      	ldr	r2, [pc, #160]	; (8002480 <BSP_AUDIO_IN_OUT_Init+0xe0>)
 80023de:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80023e0:	4826      	ldr	r0, [pc, #152]	; (800247c <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80023e2:	f007 faed 	bl	80099c0 <HAL_SAI_GetState>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <BSP_AUDIO_IN_OUT_Init+0x54>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80023ec:	2100      	movs	r1, #0
 80023ee:	4823      	ldr	r0, [pc, #140]	; (800247c <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80023f0:	f000 f8a2 	bl	8002538 <BSP_AUDIO_IN_MspInit>
    }

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80023f6:	4a24      	ldr	r2, [pc, #144]	; (8002488 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 80023f8:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80023fa:	4822      	ldr	r0, [pc, #136]	; (8002484 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80023fc:	f007 fae0 	bl	80099c0 <HAL_SAI_GetState>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d103      	bne.n	800240e <BSP_AUDIO_IN_OUT_Init+0x6e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8002406:	2100      	movs	r1, #0
 8002408:	481e      	ldr	r0, [pc, #120]	; (8002484 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 800240a:	f7ff fe99 	bl	8002140 <BSP_AUDIO_OUT_MspInit>

    /* Configure SAI in master mode :
     *   - SAI2_block_A in master TX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 800240e:	89fb      	ldrh	r3, [r7, #14]
 8002410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002414:	d102      	bne.n	800241c <BSP_AUDIO_IN_OUT_Init+0x7c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8002416:	230a      	movs	r3, #10
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	e001      	b.n	8002420 <BSP_AUDIO_IN_OUT_Init+0x80>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 800241c:	2305      	movs	r3, #5
 800241e:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	2000      	movs	r0, #0
 8002426:	f000 f939 	bl	800269c <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <BSP_AUDIO_IN_OUT_Init+0xec>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2034      	movs	r0, #52	; 0x34
 8002430:	4798      	blx	r3
 8002432:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f648 1294 	movw	r2, #35220	; 0x8994
 800243a:	4293      	cmp	r3, r2
 800243c:	d109      	bne.n	8002452 <BSP_AUDIO_IN_OUT_Init+0xb2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <BSP_AUDIO_IN_OUT_Init+0xec>)
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	2034      	movs	r0, #52	; 0x34
 8002444:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8002448:	4a10      	ldr	r2, [pc, #64]	; (800248c <BSP_AUDIO_IN_OUT_Init+0xec>)
 800244a:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	77fb      	strb	r3, [r7, #31]
 8002450:	e001      	b.n	8002456 <BSP_AUDIO_IN_OUT_Init+0xb6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8002456:	7ffb      	ldrb	r3, [r7, #31]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <BSP_AUDIO_IN_OUT_Init+0xd2>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681c      	ldr	r4, [r3, #0]
 8002462:	89fa      	ldrh	r2, [r7, #14]
 8002464:	89bb      	ldrh	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	b299      	uxth	r1, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2264      	movs	r2, #100	; 0x64
 800246e:	2034      	movs	r0, #52	; 0x34
 8002470:	47a0      	blx	r4
    }
  }
  return ret;
 8002472:	7ffb      	ldrb	r3, [r7, #31]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3724      	adds	r7, #36	; 0x24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	200003cc 	.word	0x200003cc
 8002480:	40015c24 	.word	0x40015c24
 8002484:	20000348 	.word	0x20000348
 8002488:	40015c04 	.word	0x40015c04
 800248c:	20000044 	.word	0x20000044
 8002490:	20009124 	.word	0x20009124

08002494 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <BSP_AUDIO_IN_Record+0x2c>)
 80024ac:	f007 f9fa 	bl	80098a4 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	b2db      	uxtb	r3, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200003cc 	.word	0x200003cc

080024c4 <BSP_AUDIO_IN_SetVolume>:
  * @brief  Controls the audio in volume level. 
  * @param  Volume: Volume level in range 0(Mute)..80(+0dB)..100(+17.625dB)
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_SetVolume(uint8_t Volume)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <BSP_AUDIO_IN_SetVolume+0x34>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	79fa      	ldrb	r2, [r7, #7]
 80024d6:	4611      	mov	r1, r2
 80024d8:	2034      	movs	r0, #52	; 0x34
 80024da:	4798      	blx	r3
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <BSP_AUDIO_IN_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e004      	b.n	80024f0 <BSP_AUDIO_IN_SetVolume+0x2c>
  }
  else
  {
    /* Set the Global variable AudioInVolume  */
    AudioInVolume = Volume;
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <BSP_AUDIO_IN_SetVolume+0x38>)
 80024ec:	801a      	strh	r2, [r3, #0]
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80024ee:	2300      	movs	r3, #0
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20009124 	.word	0x20009124
 80024fc:	20000028 	.word	0x20000028

08002500 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002508:	f7ff fa4c 	bl	80019a4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800251c:	f7ff fa4e 	bl	80019bc <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002542:	4b50      	ldr	r3, [pc, #320]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	4a4f      	ldr	r2, [pc, #316]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800254c:	6453      	str	r3, [r2, #68]	; 0x44
 800254e:	4b4d      	ldr	r3, [pc, #308]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 800255a:	4b4a      	ldr	r3, [pc, #296]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a49      	ldr	r2, [pc, #292]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8002572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002576:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002580:	2302      	movs	r3, #2
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8002584:	230a      	movs	r3, #10
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4619      	mov	r1, r3
 800258e:	483e      	ldr	r0, [pc, #248]	; (8002688 <BSP_AUDIO_IN_MspInit+0x150>)
 8002590:	f004 f84a 	bl	8006628 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8002594:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	4a3a      	ldr	r2, [pc, #232]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 800259a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259e:	6313      	str	r3, [r2, #48]	; 0x30
 80025a0:	4b38      	ldr	r3, [pc, #224]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80025ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025b0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025ba:	2302      	movs	r3, #2
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80025be:	f107 031c 	add.w	r3, r7, #28
 80025c2:	4619      	mov	r1, r3
 80025c4:	4831      	ldr	r0, [pc, #196]	; (800268c <BSP_AUDIO_IN_MspInit+0x154>)
 80025c6:	f004 f82f 	bl	8006628 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80025ca:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 80025d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <BSP_AUDIO_IN_MspInit+0x14c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <BSP_AUDIO_IN_MspInit+0x158>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d137      	bne.n	800265c <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80025ec:	4b29      	ldr	r3, [pc, #164]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80025f8:	4b26      	ldr	r3, [pc, #152]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80025fe:	4b25      	ldr	r3, [pc, #148]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002604:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800260c:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002614:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261c:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002620:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002624:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002628:	2200      	movs	r2, #0
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 800262e:	2203      	movs	r2, #3
 8002630:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002634:	2200      	movs	r2, #0
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 800263a:	2200      	movs	r2, #0
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002640:	4a15      	ldr	r2, [pc, #84]	; (8002698 <BSP_AUDIO_IN_MspInit+0x160>)
 8002642:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002648:	671a      	str	r2, [r3, #112]	; 0x70
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002650:	4810      	ldr	r0, [pc, #64]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002652:	f003 fa07 	bl	8005a64 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8002656:	480f      	ldr	r0, [pc, #60]	; (8002694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002658:	f003 f956 	bl	8005908 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	210f      	movs	r1, #15
 8002660:	2046      	movs	r0, #70	; 0x46
 8002662:	f003 f927 	bl	80058b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8002666:	2046      	movs	r0, #70	; 0x46
 8002668:	f003 f940 	bl	80058ec <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800266c:	2200      	movs	r2, #0
 800266e:	210f      	movs	r1, #15
 8002670:	2028      	movs	r0, #40	; 0x28
 8002672:	f003 f91f 	bl	80058b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8002676:	2028      	movs	r0, #40	; 0x28
 8002678:	f003 f938 	bl	80058ec <HAL_NVIC_EnableIRQ>
}
 800267c:	bf00      	nop
 800267e:	3730      	adds	r7, #48	; 0x30
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	40021800 	.word	0x40021800
 800268c:	40021c00 	.word	0x40021c00
 8002690:	40015c24 	.word	0x40015c24
 8002694:	200004b0 	.word	0x200004b0
 8002698:	400264b8 	.word	0x400264b8

0800269c <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80026a8:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026aa:	4a54      	ldr	r2, [pc, #336]	; (80027fc <SAIx_In_Init+0x160>)
 80026ac:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80026ae:	4b52      	ldr	r3, [pc, #328]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026bc:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80026be:	4a4e      	ldr	r2, [pc, #312]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80026ca:	4b4b      	ldr	r3, [pc, #300]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80026d0:	4b49      	ldr	r3, [pc, #292]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80026d6:	4b48      	ldr	r3, [pc, #288]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80026dc:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80026e2:	4b45      	ldr	r3, [pc, #276]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80026e8:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80026ee:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026f4:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 80026fc:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <SAIx_In_Init+0x15c>)
 80026fe:	2240      	movs	r2, #64	; 0x40
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <SAIx_In_Init+0x15c>)
 8002704:	2220      	movs	r2, #32
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002708:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <SAIx_In_Init+0x15c>)
 800270a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800270e:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002710:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <SAIx_In_Init+0x15c>)
 8002712:	2200      	movs	r2, #0
 8002714:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <SAIx_In_Init+0x15c>)
 8002718:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800271c:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800271e:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <SAIx_In_Init+0x15c>)
 8002720:	2200      	movs	r2, #0
 8002722:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002724:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <SAIx_In_Init+0x15c>)
 8002726:	2200      	movs	r2, #0
 8002728:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <SAIx_In_Init+0x15c>)
 800272c:	2204      	movs	r2, #4
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8002730:	4a31      	ldr	r2, [pc, #196]	; (80027f8 <SAIx_In_Init+0x15c>)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8002736:	4830      	ldr	r0, [pc, #192]	; (80027f8 <SAIx_In_Init+0x15c>)
 8002738:	f006 fe50 	bl	80093dc <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800273c:	4b30      	ldr	r3, [pc, #192]	; (8002800 <SAIx_In_Init+0x164>)
 800273e:	4a31      	ldr	r2, [pc, #196]	; (8002804 <SAIx_In_Init+0x168>)
 8002740:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002742:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <SAIx_In_Init+0x164>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <SAIx_In_Init+0x164>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002750:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002752:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <SAIx_In_Init+0x164>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8002758:	4b29      	ldr	r3, [pc, #164]	; (8002800 <SAIx_In_Init+0x164>)
 800275a:	2203      	movs	r2, #3
 800275c:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <SAIx_In_Init+0x164>)
 8002760:	2200      	movs	r2, #0
 8002762:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <SAIx_In_Init+0x164>)
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <SAIx_In_Init+0x164>)
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002770:	4b23      	ldr	r3, [pc, #140]	; (8002800 <SAIx_In_Init+0x164>)
 8002772:	2200      	movs	r2, #0
 8002774:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <SAIx_In_Init+0x164>)
 8002778:	2201      	movs	r2, #1
 800277a:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <SAIx_In_Init+0x164>)
 800277e:	2201      	movs	r2, #1
 8002780:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8002782:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <SAIx_In_Init+0x164>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <SAIx_In_Init+0x164>)
 800278a:	2201      	movs	r2, #1
 800278c:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <SAIx_In_Init+0x164>)
 8002790:	2240      	movs	r2, #64	; 0x40
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <SAIx_In_Init+0x164>)
 8002796:	2220      	movs	r2, #32
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <SAIx_In_Init+0x164>)
 800279c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027a0:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <SAIx_In_Init+0x164>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <SAIx_In_Init+0x164>)
 80027aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80027ae:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <SAIx_In_Init+0x164>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <SAIx_In_Init+0x164>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 80027bc:	4b10      	ldr	r3, [pc, #64]	; (8002800 <SAIx_In_Init+0x164>)
 80027be:	2204      	movs	r2, #4
 80027c0:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80027c2:	4a0f      	ldr	r2, [pc, #60]	; (8002800 <SAIx_In_Init+0x164>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 80027c8:	480d      	ldr	r0, [pc, #52]	; (8002800 <SAIx_In_Init+0x164>)
 80027ca:	f006 fe07 	bl	80093dc <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <SAIx_In_Init+0x15c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <SAIx_In_Init+0x15c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027dc:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <SAIx_In_Init+0x164>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <SAIx_In_Init+0x164>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000348 	.word	0x20000348
 80027fc:	40015c04 	.word	0x40015c04
 8002800:	200003cc 	.word	0x200003cc
 8002804:	40015c24 	.word	0x40015c24

08002808 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <SAIx_In_DeInit+0x24>)
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <SAIx_In_DeInit+0x28>)
 8002810:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <SAIx_In_DeInit+0x24>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <SAIx_In_DeInit+0x24>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002820:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8002822:	4802      	ldr	r0, [pc, #8]	; (800282c <SAIx_In_DeInit+0x24>)
 8002824:	f006 ff58 	bl	80096d8 <HAL_SAI_DeInit>
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200003cc 	.word	0x200003cc
 8002830:	40015c24 	.word	0x40015c24

08002834 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <BSP_LCD_Init+0xcc>)
 800283a:	2228      	movs	r2, #40	; 0x28
 800283c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <BSP_LCD_Init+0xcc>)
 8002840:	2209      	movs	r2, #9
 8002842:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002844:	4b2e      	ldr	r3, [pc, #184]	; (8002900 <BSP_LCD_Init+0xcc>)
 8002846:	2235      	movs	r2, #53	; 0x35
 8002848:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <BSP_LCD_Init+0xcc>)
 800284c:	220b      	movs	r2, #11
 800284e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <BSP_LCD_Init+0xcc>)
 8002852:	f240 121b 	movw	r2, #283	; 0x11b
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002858:	4b29      	ldr	r3, [pc, #164]	; (8002900 <BSP_LCD_Init+0xcc>)
 800285a:	f240 2215 	movw	r2, #533	; 0x215
 800285e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002860:	4b27      	ldr	r3, [pc, #156]	; (8002900 <BSP_LCD_Init+0xcc>)
 8002862:	f240 121d 	movw	r2, #285	; 0x11d
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <BSP_LCD_Init+0xcc>)
 800286a:	f240 2235 	movw	r2, #565	; 0x235
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002870:	2100      	movs	r1, #0
 8002872:	4823      	ldr	r0, [pc, #140]	; (8002900 <BSP_LCD_Init+0xcc>)
 8002874:	f000 fba6 	bl	8002fc4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <BSP_LCD_Init+0xcc>)
 800287a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800287e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002880:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <BSP_LCD_Init+0xcc>)
 8002882:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002886:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <BSP_LCD_Init+0xcc>)
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <BSP_LCD_Init+0xcc>)
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <BSP_LCD_Init+0xcc>)
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <BSP_LCD_Init+0xcc>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <BSP_LCD_Init+0xcc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <BSP_LCD_Init+0xcc>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <BSP_LCD_Init+0xcc>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <BSP_LCD_Init+0xcc>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <BSP_LCD_Init+0xd0>)
 80028bc:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80028be:	4810      	ldr	r0, [pc, #64]	; (8002900 <BSP_LCD_Init+0xcc>)
 80028c0:	f005 f898 	bl	80079f4 <HAL_LTDC_GetState>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80028ca:	2100      	movs	r1, #0
 80028cc:	480c      	ldr	r0, [pc, #48]	; (8002900 <BSP_LCD_Init+0xcc>)
 80028ce:	f000 fa9f 	bl	8002e10 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80028d2:	480b      	ldr	r0, [pc, #44]	; (8002900 <BSP_LCD_Init+0xcc>)
 80028d4:	f004 febe 	bl	8007654 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80028d8:	2201      	movs	r2, #1
 80028da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028de:	480a      	ldr	r0, [pc, #40]	; (8002908 <BSP_LCD_Init+0xd4>)
 80028e0:	f004 f972 	bl	8006bc8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80028e4:	2201      	movs	r2, #1
 80028e6:	2108      	movs	r1, #8
 80028e8:	4808      	ldr	r0, [pc, #32]	; (800290c <BSP_LCD_Init+0xd8>)
 80028ea:	f004 f96d 	bl	8006bc8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80028ee:	f000 fc89 	bl	8003204 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80028f2:	4807      	ldr	r0, [pc, #28]	; (8002910 <BSP_LCD_Init+0xdc>)
 80028f4:	f000 f8d8 	bl	8002aa8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20009128 	.word	0x20009128
 8002904:	40016800 	.word	0x40016800
 8002908:	40022000 	.word	0x40022000
 800290c:	40022800 	.word	0x40022800
 8002910:	2000002c 	.word	0x2000002c

08002914 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <BSP_LCD_GetXSize+0x20>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <BSP_LCD_GetXSize+0x24>)
 800291e:	2134      	movs	r1, #52	; 0x34
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3360      	adds	r3, #96	; 0x60
 8002928:	681b      	ldr	r3, [r3, #0]
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	20000550 	.word	0x20000550
 8002938:	20009128 	.word	0x20009128

0800293c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <BSP_LCD_GetYSize+0x20>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a06      	ldr	r2, [pc, #24]	; (8002960 <BSP_LCD_GetYSize+0x24>)
 8002946:	2134      	movs	r1, #52	; 0x34
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3364      	adds	r3, #100	; 0x64
 8002950:	681b      	ldr	r3, [r3, #0]
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	20000550 	.word	0x20000550
 8002960:	20009128 	.word	0x20009128

08002964 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002964:	b580      	push	{r7, lr}
 8002966:	b090      	sub	sp, #64	; 0x40
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002974:	f7ff ffce 	bl	8002914 <BSP_LCD_GetXSize>
 8002978:	4603      	mov	r3, r0
 800297a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002980:	f7ff ffdc 	bl	800293c <BSP_LCD_GetYSize>
 8002984:	4603      	mov	r3, r0
 8002986:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002990:	23ff      	movs	r3, #255	; 0xff
 8002992:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80029aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80029b0:	2307      	movs	r3, #7
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80029b4:	f7ff ffae 	bl	8002914 <BSP_LCD_GetXSize>
 80029b8:	4603      	mov	r3, r0
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80029bc:	f7ff ffbe 	bl	800293c <BSP_LCD_GetYSize>
 80029c0:	4603      	mov	r3, r0
 80029c2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	f107 030c 	add.w	r3, r7, #12
 80029ca:	4619      	mov	r1, r3
 80029cc:	4812      	ldr	r0, [pc, #72]	; (8002a18 <BSP_LCD_LayerDefaultInit+0xb4>)
 80029ce:	f004 ffd3 	bl	8007978 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	4911      	ldr	r1, [pc, #68]	; (8002a1c <BSP_LCD_LayerDefaultInit+0xb8>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	3304      	adds	r3, #4
 80029e2:	f04f 32ff 	mov.w	r2, #4294967295
 80029e6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80029e8:	88fa      	ldrh	r2, [r7, #6]
 80029ea:	490c      	ldr	r1, [pc, #48]	; (8002a1c <BSP_LCD_LayerDefaultInit+0xb8>)
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3308      	adds	r3, #8
 80029f8:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <BSP_LCD_LayerDefaultInit+0xbc>)
 80029fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	4907      	ldr	r1, [pc, #28]	; (8002a1c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002a0e:	601a      	str	r2, [r3, #0]
}
 8002a10:	bf00      	nop
 8002a12:	3740      	adds	r7, #64	; 0x40
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20009128 	.word	0x20009128
 8002a1c:	20000554 	.word	0x20000554
 8002a20:	2000002c 	.word	0x2000002c

08002a24 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <BSP_LCD_SelectLayer+0x1c>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6013      	str	r3, [r2, #0]
} 
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000550 	.word	0x20000550

08002a44 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <BSP_LCD_SetTextColor+0x28>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4907      	ldr	r1, [pc, #28]	; (8002a70 <BSP_LCD_SetTextColor+0x2c>)
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	601a      	str	r2, [r3, #0]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	20000550 	.word	0x20000550
 8002a70:	20000554 	.word	0x20000554

08002a74 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <BSP_LCD_SetBackColor+0x2c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <BSP_LCD_SetBackColor+0x30>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000550 	.word	0x20000550
 8002aa4:	20000554 	.word	0x20000554

08002aa8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <BSP_LCD_SetFont+0x2c>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <BSP_LCD_SetFont+0x30>)
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	601a      	str	r2, [r3, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000550 	.word	0x20000550
 8002ad8:	20000554 	.word	0x20000554

08002adc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <BSP_LCD_Clear+0x48>)
 8002ae6:	681c      	ldr	r4, [r3, #0]
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <BSP_LCD_Clear+0x48>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <BSP_LCD_Clear+0x4c>)
 8002aee:	2134      	movs	r1, #52	; 0x34
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	335c      	adds	r3, #92	; 0x5c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461e      	mov	r6, r3
 8002afc:	f7ff ff0a 	bl	8002914 <BSP_LCD_GetXSize>
 8002b00:	4605      	mov	r5, r0
 8002b02:	f7ff ff1b 	bl	800293c <BSP_LCD_GetYSize>
 8002b06:	4602      	mov	r2, r0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	462a      	mov	r2, r5
 8002b14:	4631      	mov	r1, r6
 8002b16:	4620      	mov	r0, r4
 8002b18:	f000 fb28 	bl	800316c <LL_FillBuffer>
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b24:	20000550 	.word	0x20000550
 8002b28:	20009128 	.word	0x20009128

08002b2c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	80fb      	strh	r3, [r7, #6]
 8002b36:	460b      	mov	r3, r1
 8002b38:	80bb      	strh	r3, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <BSP_LCD_DisplayChar+0x80>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	491b      	ldr	r1, [pc, #108]	; (8002bb0 <BSP_LCD_DisplayChar+0x84>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3308      	adds	r3, #8
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <BSP_LCD_DisplayChar+0x80>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4c14      	ldr	r4, [pc, #80]	; (8002bb0 <BSP_LCD_DisplayChar+0x84>)
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4423      	add	r3, r4
 8002b6a:	3308      	adds	r3, #8
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b70:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b74:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <BSP_LCD_DisplayChar+0x80>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4c0d      	ldr	r4, [pc, #52]	; (8002bb0 <BSP_LCD_DisplayChar+0x84>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4423      	add	r3, r4
 8002b84:	3308      	adds	r3, #8
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	889b      	ldrh	r3, [r3, #4]
 8002b8a:	3307      	adds	r3, #7
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	da00      	bge.n	8002b92 <BSP_LCD_DisplayChar+0x66>
 8002b90:	3307      	adds	r3, #7
 8002b92:	10db      	asrs	r3, r3, #3
 8002b94:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b98:	18ca      	adds	r2, r1, r3
 8002b9a:	88b9      	ldrh	r1, [r7, #4]
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fa2c 	bl	8002ffc <DrawChar>
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	20000550 	.word	0x20000550
 8002bb0:	20000554 	.word	0x20000554

08002bb4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002bb4:	b5b0      	push	{r4, r5, r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60ba      	str	r2, [r7, #8]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	81fb      	strh	r3, [r7, #14]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	81bb      	strh	r3, [r7, #12]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	83fb      	strh	r3, [r7, #30]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002bde:	e002      	b.n	8002be6 <BSP_LCD_DisplayStringAt+0x32>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	3301      	adds	r3, #1
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	617a      	str	r2, [r7, #20]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f6      	bne.n	8002be0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002bf2:	f7ff fe8f 	bl	8002914 <BSP_LCD_GetXSize>
 8002bf6:	4601      	mov	r1, r0
 8002bf8:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <BSP_LCD_DisplayStringAt+0x188>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4850      	ldr	r0, [pc, #320]	; (8002d40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4403      	add	r3, r0
 8002c08:	3308      	adds	r3, #8
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	889b      	ldrh	r3, [r3, #4]
 8002c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c12:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d01c      	beq.n	8002c54 <BSP_LCD_DisplayStringAt+0xa0>
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	dc33      	bgt.n	8002c86 <BSP_LCD_DisplayStringAt+0xd2>
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d002      	beq.n	8002c28 <BSP_LCD_DisplayStringAt+0x74>
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d019      	beq.n	8002c5a <BSP_LCD_DisplayStringAt+0xa6>
 8002c26:	e02e      	b.n	8002c86 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	1ad1      	subs	r1, r2, r3
 8002c2e:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <BSP_LCD_DisplayStringAt+0x188>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4843      	ldr	r0, [pc, #268]	; (8002d40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4403      	add	r3, r0
 8002c3e:	3308      	adds	r3, #8
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	889b      	ldrh	r3, [r3, #4]
 8002c44:	fb03 f301 	mul.w	r3, r3, r1
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	89fb      	ldrh	r3, [r7, #14]
 8002c4e:	4413      	add	r3, r2
 8002c50:	83fb      	strh	r3, [r7, #30]
      break;
 8002c52:	e01b      	b.n	8002c8c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002c54:	89fb      	ldrh	r3, [r7, #14]
 8002c56:	83fb      	strh	r3, [r7, #30]
      break;
 8002c58:	e018      	b.n	8002c8c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	b299      	uxth	r1, r3
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <BSP_LCD_DisplayStringAt+0x188>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4836      	ldr	r0, [pc, #216]	; (8002d40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4403      	add	r3, r0
 8002c72:	3308      	adds	r3, #8
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	889b      	ldrh	r3, [r3, #4]
 8002c78:	fb11 f303 	smulbb	r3, r1, r3
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	89fb      	ldrh	r3, [r7, #14]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	83fb      	strh	r3, [r7, #30]
      break;
 8002c84:	e002      	b.n	8002c8c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002c86:	89fb      	ldrh	r3, [r7, #14]
 8002c88:	83fb      	strh	r3, [r7, #30]
      break;
 8002c8a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002c8c:	8bfb      	ldrh	r3, [r7, #30]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <BSP_LCD_DisplayStringAt+0xe6>
 8002c92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da1d      	bge.n	8002cd6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002c9e:	e01a      	b.n	8002cd6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	89b9      	ldrh	r1, [r7, #12]
 8002ca6:	8bfb      	ldrh	r3, [r7, #30]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff3f 	bl	8002b2c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002cae:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <BSP_LCD_DisplayStringAt+0x188>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4923      	ldr	r1, [pc, #140]	; (8002d40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	889a      	ldrh	r2, [r3, #4]
 8002cc4:	8bfb      	ldrh	r3, [r7, #30]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
    i++;
 8002cd0:	8bbb      	ldrh	r3, [r7, #28]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf14      	ite	ne
 8002cde:	2301      	movne	r3, #1
 8002ce0:	2300      	moveq	r3, #0
 8002ce2:	b2dc      	uxtb	r4, r3
 8002ce4:	f7ff fe16 	bl	8002914 <BSP_LCD_GetXSize>
 8002ce8:	8bb9      	ldrh	r1, [r7, #28]
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <BSP_LCD_DisplayStringAt+0x188>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4d14      	ldr	r5, [pc, #80]	; (8002d40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	442b      	add	r3, r5
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	889b      	ldrh	r3, [r3, #4]
 8002d00:	fb03 f301 	mul.w	r3, r3, r1
 8002d04:	1ac3      	subs	r3, r0, r3
 8002d06:	b299      	uxth	r1, r3
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <BSP_LCD_DisplayStringAt+0x188>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	480c      	ldr	r0, [pc, #48]	; (8002d40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4403      	add	r3, r0
 8002d18:	3308      	adds	r3, #8
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	889b      	ldrh	r3, [r3, #4]
 8002d1e:	4299      	cmp	r1, r3
 8002d20:	bf2c      	ite	cs
 8002d22:	2301      	movcs	r3, #1
 8002d24:	2300      	movcc	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4023      	ands	r3, r4
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1b7      	bne.n	8002ca0 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bdb0      	pop	{r4, r5, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000550 	.word	0x20000550
 8002d40:	20000554 	.word	0x20000554

08002d44 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002d44:	b5b0      	push	{r4, r5, r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	603a      	str	r2, [r7, #0]
 8002d4e:	80fb      	strh	r3, [r7, #6]
 8002d50:	460b      	mov	r3, r1
 8002d52:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <BSP_LCD_DrawPixel+0x88>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1d      	ldr	r2, [pc, #116]	; (8002dd0 <BSP_LCD_DrawPixel+0x8c>)
 8002d5a:	2134      	movs	r1, #52	; 0x34
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3348      	adds	r3, #72	; 0x48
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d116      	bne.n	8002d98 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <BSP_LCD_DrawPixel+0x88>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <BSP_LCD_DrawPixel+0x8c>)
 8002d70:	2134      	movs	r1, #52	; 0x34
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	335c      	adds	r3, #92	; 0x5c
 8002d7a:	681c      	ldr	r4, [r3, #0]
 8002d7c:	88bd      	ldrh	r5, [r7, #4]
 8002d7e:	f7ff fdc9 	bl	8002914 <BSP_LCD_GetXSize>
 8002d82:	4603      	mov	r3, r0
 8002d84:	fb03 f205 	mul.w	r2, r3, r5
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4423      	add	r3, r4
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b292      	uxth	r2, r2
 8002d94:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002d96:	e015      	b.n	8002dc4 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <BSP_LCD_DrawPixel+0x88>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <BSP_LCD_DrawPixel+0x8c>)
 8002d9e:	2134      	movs	r1, #52	; 0x34
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	335c      	adds	r3, #92	; 0x5c
 8002da8:	681c      	ldr	r4, [r3, #0]
 8002daa:	88bd      	ldrh	r5, [r7, #4]
 8002dac:	f7ff fdb2 	bl	8002914 <BSP_LCD_GetXSize>
 8002db0:	4603      	mov	r3, r0
 8002db2:	fb03 f205 	mul.w	r2, r3, r5
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4423      	add	r3, r4
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bdb0      	pop	{r4, r5, r7, pc}
 8002dcc:	20000550 	.word	0x20000550
 8002dd0:	20009128 	.word	0x20009128

08002dd4 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <BSP_LCD_DisplayOn+0x30>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <BSP_LCD_DisplayOn+0x30>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002de8:	2201      	movs	r2, #1
 8002dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <BSP_LCD_DisplayOn+0x34>)
 8002df0:	f003 feea 	bl	8006bc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002df4:	2201      	movs	r2, #1
 8002df6:	2108      	movs	r1, #8
 8002df8:	4804      	ldr	r0, [pc, #16]	; (8002e0c <BSP_LCD_DisplayOn+0x38>)
 8002dfa:	f003 fee5 	bl	8006bc8 <HAL_GPIO_WritePin>
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20009128 	.word	0x20009128
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40022800 	.word	0x40022800

08002e10 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b090      	sub	sp, #64	; 0x40
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002e1a:	4b64      	ldr	r3, [pc, #400]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	4a63      	ldr	r2, [pc, #396]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e24:	6453      	str	r3, [r2, #68]	; 0x44
 8002e26:	4b61      	ldr	r3, [pc, #388]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e32:	4b5e      	ldr	r3, [pc, #376]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a5d      	ldr	r2, [pc, #372]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e4a:	4b58      	ldr	r3, [pc, #352]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a57      	ldr	r2, [pc, #348]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e50:	f043 0310 	orr.w	r3, r3, #16
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b55      	ldr	r3, [pc, #340]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e62:	4b52      	ldr	r3, [pc, #328]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a51      	ldr	r2, [pc, #324]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e7a:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a4b      	ldr	r2, [pc, #300]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b49      	ldr	r3, [pc, #292]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e92:	4b46      	ldr	r3, [pc, #280]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a45      	ldr	r2, [pc, #276]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002e98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b43      	ldr	r3, [pc, #268]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002eaa:	4b40      	ldr	r3, [pc, #256]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a3f      	ldr	r2, [pc, #252]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002eb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002ec2:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a39      	ldr	r2, [pc, #228]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002eda:	4b34      	ldr	r3, [pc, #208]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a33      	ldr	r2, [pc, #204]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002ee0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <BSP_LCD_MspInit+0x19c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002efe:	2302      	movs	r3, #2
 8002f00:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002f02:	230e      	movs	r3, #14
 8002f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4828      	ldr	r0, [pc, #160]	; (8002fb0 <BSP_LCD_MspInit+0x1a0>)
 8002f0e:	f003 fb8b 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002f1c:	2309      	movs	r3, #9
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f24:	4619      	mov	r1, r3
 8002f26:	4823      	ldr	r0, [pc, #140]	; (8002fb4 <BSP_LCD_MspInit+0x1a4>)
 8002f28:	f003 fb7e 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002f2c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f36:	230e      	movs	r3, #14
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f3e:	4619      	mov	r1, r3
 8002f40:	481d      	ldr	r0, [pc, #116]	; (8002fb8 <BSP_LCD_MspInit+0x1a8>)
 8002f42:	f003 fb71 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002f46:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f50:	230e      	movs	r3, #14
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4818      	ldr	r0, [pc, #96]	; (8002fbc <BSP_LCD_MspInit+0x1ac>)
 8002f5c:	f003 fb64 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002f60:	23f7      	movs	r3, #247	; 0xf7
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f68:	230e      	movs	r3, #14
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f70:	4619      	mov	r1, r3
 8002f72:	4813      	ldr	r0, [pc, #76]	; (8002fc0 <BSP_LCD_MspInit+0x1b0>)
 8002f74:	f003 fb58 	bl	8006628 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002f82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f86:	4619      	mov	r1, r3
 8002f88:	480b      	ldr	r0, [pc, #44]	; (8002fb8 <BSP_LCD_MspInit+0x1a8>)
 8002f8a:	f003 fb4d 	bl	8006628 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002f8e:	2308      	movs	r3, #8
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f92:	2301      	movs	r3, #1
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4808      	ldr	r0, [pc, #32]	; (8002fc0 <BSP_LCD_MspInit+0x1b0>)
 8002f9e:	f003 fb43 	bl	8006628 <HAL_GPIO_Init>
}
 8002fa2:	bf00      	nop
 8002fa4:	3740      	adds	r7, #64	; 0x40
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40021800 	.word	0x40021800
 8002fb8:	40022000 	.word	0x40022000
 8002fbc:	40022400 	.word	0x40022400
 8002fc0:	40022800 	.word	0x40022800

08002fc4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <BSP_LCD_ClockConfig+0x34>)
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <BSP_LCD_ClockConfig+0x34>)
 8002fd6:	22c0      	movs	r2, #192	; 0xc0
 8002fd8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <BSP_LCD_ClockConfig+0x34>)
 8002fdc:	2205      	movs	r2, #5
 8002fde:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <BSP_LCD_ClockConfig+0x34>)
 8002fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002fe8:	4803      	ldr	r0, [pc, #12]	; (8002ff8 <BSP_LCD_ClockConfig+0x34>)
 8002fea:	f005 fbb7 	bl	800875c <HAL_RCCEx_PeriphCLKConfig>
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000056c 	.word	0x2000056c

08002ffc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	603a      	str	r2, [r7, #0]
 8003006:	80fb      	strh	r3, [r7, #6]
 8003008:	460b      	mov	r3, r1
 800300a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	2300      	movs	r3, #0
 8003012:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <DrawChar+0x168>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4953      	ldr	r1, [pc, #332]	; (8003168 <DrawChar+0x16c>)
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3308      	adds	r3, #8
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	88db      	ldrh	r3, [r3, #6]
 800302a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800302c:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <DrawChar+0x168>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	494d      	ldr	r1, [pc, #308]	; (8003168 <DrawChar+0x16c>)
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3308      	adds	r3, #8
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	889b      	ldrh	r3, [r3, #4]
 8003042:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003044:	8a3b      	ldrh	r3, [r7, #16]
 8003046:	3307      	adds	r3, #7
 8003048:	2b00      	cmp	r3, #0
 800304a:	da00      	bge.n	800304e <DrawChar+0x52>
 800304c:	3307      	adds	r3, #7
 800304e:	10db      	asrs	r3, r3, #3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	b2da      	uxtb	r2, r3
 8003056:	8a3b      	ldrh	r3, [r7, #16]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e076      	b.n	8003152 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003064:	8a3b      	ldrh	r3, [r7, #16]
 8003066:	3307      	adds	r3, #7
 8003068:	2b00      	cmp	r3, #0
 800306a:	da00      	bge.n	800306e <DrawChar+0x72>
 800306c:	3307      	adds	r3, #7
 800306e:	10db      	asrs	r3, r3, #3
 8003070:	461a      	mov	r2, r3
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fb03 f302 	mul.w	r3, r3, r2
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	4413      	add	r3, r2
 800307c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800307e:	8a3b      	ldrh	r3, [r7, #16]
 8003080:	3307      	adds	r3, #7
 8003082:	2b00      	cmp	r3, #0
 8003084:	da00      	bge.n	8003088 <DrawChar+0x8c>
 8003086:	3307      	adds	r3, #7
 8003088:	10db      	asrs	r3, r3, #3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d002      	beq.n	8003094 <DrawChar+0x98>
 800308e:	2b02      	cmp	r3, #2
 8003090:	d004      	beq.n	800309c <DrawChar+0xa0>
 8003092:	e00c      	b.n	80030ae <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	617b      	str	r3, [r7, #20]
      break;
 800309a:	e016      	b.n	80030ca <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	3201      	adds	r2, #1
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
      break;
 80030ac:	e00d      	b.n	80030ca <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	041a      	lsls	r2, r3, #16
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	3301      	adds	r3, #1
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	4313      	orrs	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	3202      	adds	r2, #2
 80030c2:	7812      	ldrb	r2, [r2, #0]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
      break;
 80030c8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	e036      	b.n	800313e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80030d0:	8a3a      	ldrh	r2, [r7, #16]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	1ad2      	subs	r2, r2, r3
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	4413      	add	r3, r2
 80030da:	3b01      	subs	r3, #1
 80030dc:	2201      	movs	r2, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d012      	beq.n	8003112 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	4413      	add	r3, r2
 80030f4:	b298      	uxth	r0, r3
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <DrawChar+0x168>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	491b      	ldr	r1, [pc, #108]	; (8003168 <DrawChar+0x16c>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	88bb      	ldrh	r3, [r7, #4]
 800310a:	4619      	mov	r1, r3
 800310c:	f7ff fe1a 	bl	8002d44 <BSP_LCD_DrawPixel>
 8003110:	e012      	b.n	8003138 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	b29a      	uxth	r2, r3
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	4413      	add	r3, r2
 800311a:	b298      	uxth	r0, r3
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <DrawChar+0x168>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4911      	ldr	r1, [pc, #68]	; (8003168 <DrawChar+0x16c>)
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	3304      	adds	r3, #4
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	88bb      	ldrh	r3, [r7, #4]
 8003132:	4619      	mov	r1, r3
 8003134:	f7ff fe06 	bl	8002d44 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	3301      	adds	r3, #1
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	8a3b      	ldrh	r3, [r7, #16]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	429a      	cmp	r2, r3
 8003144:	d3c4      	bcc.n	80030d0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003146:	88bb      	ldrh	r3, [r7, #4]
 8003148:	3301      	adds	r3, #1
 800314a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	3301      	adds	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	8a7b      	ldrh	r3, [r7, #18]
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	429a      	cmp	r2, r3
 8003158:	d384      	bcc.n	8003064 <DrawChar+0x68>
  }
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000550 	.word	0x20000550
 8003168:	20000554 	.word	0x20000554

0800316c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <LL_FillBuffer+0x88>)
 800317c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003180:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003182:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <LL_FillBuffer+0x8c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <LL_FillBuffer+0x90>)
 8003188:	2134      	movs	r1, #52	; 0x34
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3348      	adds	r3, #72	; 0x48
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d103      	bne.n	80031a0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003198:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <LL_FillBuffer+0x88>)
 800319a:	2202      	movs	r2, #2
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	e002      	b.n	80031a6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <LL_FillBuffer+0x88>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80031a6:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <LL_FillBuffer+0x88>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <LL_FillBuffer+0x88>)
 80031ae:	4a14      	ldr	r2, [pc, #80]	; (8003200 <LL_FillBuffer+0x94>)
 80031b0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80031b2:	4810      	ldr	r0, [pc, #64]	; (80031f4 <LL_FillBuffer+0x88>)
 80031b4:	f002 ffac 	bl	8006110 <HAL_DMA2D_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d115      	bne.n	80031ea <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	480c      	ldr	r0, [pc, #48]	; (80031f4 <LL_FillBuffer+0x88>)
 80031c2:	f003 f903 	bl	80063cc <HAL_DMA2D_ConfigLayer>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10e      	bne.n	80031ea <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69f9      	ldr	r1, [r7, #28]
 80031d6:	4807      	ldr	r0, [pc, #28]	; (80031f4 <LL_FillBuffer+0x88>)
 80031d8:	f002 ffe4 	bl	80061a4 <HAL_DMA2D_Start>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80031e2:	210a      	movs	r1, #10
 80031e4:	4803      	ldr	r0, [pc, #12]	; (80031f4 <LL_FillBuffer+0x88>)
 80031e6:	f003 f808 	bl	80061fa <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80031ea:	bf00      	nop
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000510 	.word	0x20000510
 80031f8:	20000550 	.word	0x20000550
 80031fc:	20009128 	.word	0x20009128
 8003200:	4002b000 	.word	0x4002b000

08003204 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003208:	4b29      	ldr	r3, [pc, #164]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 800320a:	4a2a      	ldr	r2, [pc, #168]	; (80032b4 <BSP_SDRAM_Init+0xb0>)
 800320c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <BSP_SDRAM_Init+0xb4>)
 8003210:	2202      	movs	r2, #2
 8003212:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <BSP_SDRAM_Init+0xb4>)
 8003216:	2207      	movs	r2, #7
 8003218:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <BSP_SDRAM_Init+0xb4>)
 800321c:	2204      	movs	r2, #4
 800321e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003220:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <BSP_SDRAM_Init+0xb4>)
 8003222:	2207      	movs	r2, #7
 8003224:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003226:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <BSP_SDRAM_Init+0xb4>)
 8003228:	2202      	movs	r2, #2
 800322a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800322c:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <BSP_SDRAM_Init+0xb4>)
 800322e:	2202      	movs	r2, #2
 8003230:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003232:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <BSP_SDRAM_Init+0xb4>)
 8003234:	2202      	movs	r2, #2
 8003236:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003238:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 800323a:	2200      	movs	r2, #0
 800323c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800323e:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003244:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 8003246:	2204      	movs	r2, #4
 8003248:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 800324c:	2210      	movs	r2, #16
 800324e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003250:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 8003252:	2240      	movs	r2, #64	; 0x40
 8003254:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003256:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 8003258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800325c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800325e:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 8003260:	2200      	movs	r2, #0
 8003262:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 8003266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800326a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800326c:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 800326e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003272:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 8003276:	2200      	movs	r2, #0
 8003278:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800327a:	2100      	movs	r1, #0
 800327c:	480c      	ldr	r0, [pc, #48]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 800327e:	f000 f87f 	bl	8003380 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003282:	490d      	ldr	r1, [pc, #52]	; (80032b8 <BSP_SDRAM_Init+0xb4>)
 8003284:	480a      	ldr	r0, [pc, #40]	; (80032b0 <BSP_SDRAM_Init+0xac>)
 8003286:	f007 ffee 	bl	800b266 <HAL_SDRAM_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <BSP_SDRAM_Init+0xb8>)
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e002      	b.n	800329e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <BSP_SDRAM_Init+0xb8>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800329e:	f240 6003 	movw	r0, #1539	; 0x603
 80032a2:	f000 f80d 	bl	80032c0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <BSP_SDRAM_Init+0xb8>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200091d0 	.word	0x200091d0
 80032b4:	a0000140 	.word	0xa0000140
 80032b8:	200005f0 	.word	0x200005f0
 80032bc:	2000003c 	.word	0x2000003c

080032c0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80032d2:	4b29      	ldr	r3, [pc, #164]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032d4:	2210      	movs	r2, #16
 80032d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032da:	2201      	movs	r2, #1
 80032dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80032de:	4b26      	ldr	r3, [pc, #152]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80032e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e8:	4923      	ldr	r1, [pc, #140]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032ea:	4824      	ldr	r0, [pc, #144]	; (800337c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032ec:	f007 ffef 	bl	800b2ce <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80032f0:	2001      	movs	r0, #1
 80032f2:	f002 fa03 	bl	80056fc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032f8:	2202      	movs	r2, #2
 80032fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80032fc:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032fe:	2210      	movs	r2, #16
 8003300:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003304:	2201      	movs	r2, #1
 8003306:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800330a:	2200      	movs	r2, #0
 800330c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800330e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003312:	4919      	ldr	r1, [pc, #100]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003314:	4819      	ldr	r0, [pc, #100]	; (800337c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003316:	f007 ffda 	bl	800b2ce <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800331a:	4b17      	ldr	r3, [pc, #92]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800331c:	2203      	movs	r2, #3
 800331e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003320:	4b15      	ldr	r3, [pc, #84]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003322:	2210      	movs	r2, #16
 8003324:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003328:	2208      	movs	r2, #8
 800332a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800332c:	4b12      	ldr	r3, [pc, #72]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003336:	4910      	ldr	r1, [pc, #64]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003338:	4810      	ldr	r0, [pc, #64]	; (800337c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800333a:	f007 ffc8 	bl	800b2ce <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800333e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003342:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003346:	2204      	movs	r2, #4
 8003348:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800334c:	2210      	movs	r2, #16
 800334e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003352:	2201      	movs	r2, #1
 8003354:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a07      	ldr	r2, [pc, #28]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800335a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800335c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003360:	4905      	ldr	r1, [pc, #20]	; (8003378 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003362:	4806      	ldr	r0, [pc, #24]	; (800337c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003364:	f007 ffb3 	bl	800b2ce <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4804      	ldr	r0, [pc, #16]	; (800337c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800336c:	f007 ffda 	bl	800b324 <HAL_SDRAM_ProgramRefreshRate>
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	2000060c 	.word	0x2000060c
 800337c:	200091d0 	.word	0x200091d0

08003380 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003380:	b580      	push	{r7, lr}
 8003382:	b090      	sub	sp, #64	; 0x40
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800338a:	4b70      	ldr	r3, [pc, #448]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	4a6f      	ldr	r2, [pc, #444]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6393      	str	r3, [r2, #56]	; 0x38
 8003396:	4b6d      	ldr	r3, [pc, #436]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80033a2:	4b6a      	ldr	r3, [pc, #424]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a69      	ldr	r2, [pc, #420]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b67      	ldr	r3, [pc, #412]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ba:	4b64      	ldr	r3, [pc, #400]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a63      	ldr	r2, [pc, #396]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b61      	ldr	r3, [pc, #388]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	623b      	str	r3, [r7, #32]
 80033d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033d2:	4b5e      	ldr	r3, [pc, #376]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a5d      	ldr	r2, [pc, #372]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033d8:	f043 0308 	orr.w	r3, r3, #8
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b5b      	ldr	r3, [pc, #364]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ea:	4b58      	ldr	r3, [pc, #352]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a57      	ldr	r2, [pc, #348]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033f0:	f043 0310 	orr.w	r3, r3, #16
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b55      	ldr	r3, [pc, #340]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003402:	4b52      	ldr	r3, [pc, #328]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a51      	ldr	r2, [pc, #324]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 8003408:	f043 0320 	orr.w	r3, r3, #32
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b4f      	ldr	r3, [pc, #316]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800341a:	4b4c      	ldr	r3, [pc, #304]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a4b      	ldr	r2, [pc, #300]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 8003420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b49      	ldr	r3, [pc, #292]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003432:	4b46      	ldr	r3, [pc, #280]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a45      	ldr	r2, [pc, #276]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 8003438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b43      	ldr	r3, [pc, #268]	; (800354c <BSP_SDRAM_MspInit+0x1cc>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800344e:	2301      	movs	r3, #1
 8003450:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003452:	2302      	movs	r3, #2
 8003454:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003456:	230c      	movs	r3, #12
 8003458:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800345a:	2308      	movs	r3, #8
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800345e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003462:	4619      	mov	r1, r3
 8003464:	483a      	ldr	r0, [pc, #232]	; (8003550 <BSP_SDRAM_MspInit+0x1d0>)
 8003466:	f003 f8df 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800346a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003474:	4619      	mov	r1, r3
 8003476:	4837      	ldr	r0, [pc, #220]	; (8003554 <BSP_SDRAM_MspInit+0x1d4>)
 8003478:	f003 f8d6 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800347c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003486:	4619      	mov	r1, r3
 8003488:	4833      	ldr	r0, [pc, #204]	; (8003558 <BSP_SDRAM_MspInit+0x1d8>)
 800348a:	f003 f8cd 	bl	8006628 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800348e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003498:	4619      	mov	r1, r3
 800349a:	4830      	ldr	r0, [pc, #192]	; (800355c <BSP_SDRAM_MspInit+0x1dc>)
 800349c:	f003 f8c4 	bl	8006628 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80034a0:	f248 1333 	movw	r3, #33075	; 0x8133
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80034a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034aa:	4619      	mov	r1, r3
 80034ac:	482c      	ldr	r0, [pc, #176]	; (8003560 <BSP_SDRAM_MspInit+0x1e0>)
 80034ae:	f003 f8bb 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80034b2:	2328      	movs	r3, #40	; 0x28
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80034b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ba:	4619      	mov	r1, r3
 80034bc:	4829      	ldr	r0, [pc, #164]	; (8003564 <BSP_SDRAM_MspInit+0x1e4>)
 80034be:	f003 f8b3 	bl	8006628 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80034c8:	4b27      	ldr	r3, [pc, #156]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 80034d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 80034d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034dc:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034de:	4b22      	ldr	r3, [pc, #136]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 80034e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034e4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 80034e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034ec:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80034f4:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 80034f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034fa:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 80034fe:	2200      	movs	r2, #0
 8003500:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003502:	4b19      	ldr	r3, [pc, #100]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 8003504:	2203      	movs	r2, #3
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003508:	4b17      	ldr	r3, [pc, #92]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 800350a:	2200      	movs	r2, #0
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800350e:	4b16      	ldr	r3, [pc, #88]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003514:	4b14      	ldr	r3, [pc, #80]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 8003516:	4a15      	ldr	r2, [pc, #84]	; (800356c <BSP_SDRAM_MspInit+0x1ec>)
 8003518:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a12      	ldr	r2, [pc, #72]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
 8003520:	4a11      	ldr	r2, [pc, #68]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003526:	4810      	ldr	r0, [pc, #64]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 8003528:	f002 fa9c 	bl	8005a64 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800352c:	480e      	ldr	r0, [pc, #56]	; (8003568 <BSP_SDRAM_MspInit+0x1e8>)
 800352e:	f002 f9eb 	bl	8005908 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	210f      	movs	r1, #15
 8003536:	2038      	movs	r0, #56	; 0x38
 8003538:	f002 f9bc 	bl	80058b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800353c:	2038      	movs	r0, #56	; 0x38
 800353e:	f002 f9d5 	bl	80058ec <HAL_NVIC_EnableIRQ>
}
 8003542:	bf00      	nop
 8003544:	3740      	adds	r7, #64	; 0x40
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	40020800 	.word	0x40020800
 8003554:	40020c00 	.word	0x40020c00
 8003558:	40021000 	.word	0x40021000
 800355c:	40021400 	.word	0x40021400
 8003560:	40021800 	.word	0x40021800
 8003564:	40021c00 	.word	0x40021c00
 8003568:	2000061c 	.word	0x2000061c
 800356c:	40026410 	.word	0x40026410

08003570 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	460a      	mov	r2, r1
 800357a:	80fb      	strh	r3, [r7, #6]
 800357c:	4613      	mov	r3, r2
 800357e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <BSP_TS_Init+0x68>)
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800358a:	4a14      	ldr	r2, [pc, #80]	; (80035dc <BSP_TS_Init+0x6c>)
 800358c:	88bb      	ldrh	r3, [r7, #4]
 800358e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <BSP_TS_Init+0x70>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2070      	movs	r0, #112	; 0x70
 8003596:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <BSP_TS_Init+0x70>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2070      	movs	r0, #112	; 0x70
 800359e:	4798      	blx	r3
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b51      	cmp	r3, #81	; 0x51
 80035a4:	d111      	bne.n	80035ca <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80035a6:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <BSP_TS_Init+0x74>)
 80035a8:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <BSP_TS_Init+0x70>)
 80035aa:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <BSP_TS_Init+0x78>)
 80035ae:	2270      	movs	r2, #112	; 0x70
 80035b0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <BSP_TS_Init+0x7c>)
 80035b4:	2208      	movs	r2, #8
 80035b6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <BSP_TS_Init+0x74>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <BSP_TS_Init+0x78>)
 80035c0:	7812      	ldrb	r2, [r2, #0]
 80035c2:	b292      	uxth	r2, r2
 80035c4:	4610      	mov	r0, r2
 80035c6:	4798      	blx	r3
 80035c8:	e001      	b.n	80035ce <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80035ca:	2303      	movs	r3, #3
 80035cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000680 	.word	0x20000680
 80035dc:	20000682 	.word	0x20000682
 80035e0:	20000000 	.word	0x20000000
 80035e4:	2000067c 	.word	0x2000067c
 80035e8:	20000685 	.word	0x20000685
 80035ec:	20000684 	.word	0x20000684

080035f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_MspInit+0x4c>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_MspInit+0x4c>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <HAL_MspInit+0x4c>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_MspInit+0x4c>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	4a0a      	ldr	r2, [pc, #40]	; (800363c <HAL_MspInit+0x4c>)
 8003614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003618:	6453      	str	r3, [r2, #68]	; 0x44
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <HAL_MspInit+0x4c>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003626:	2200      	movs	r2, #0
 8003628:	210f      	movs	r1, #15
 800362a:	f06f 0001 	mvn.w	r0, #1
 800362e:	f002 f941 	bl	80058b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800

08003640 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <HAL_DMA2D_MspInit+0x38>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d10b      	bne.n	800366a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_DMA2D_MspInit+0x3c>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_DMA2D_MspInit+0x3c>)
 8003658:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_DMA2D_MspInit+0x3c>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	4002b000 	.word	0x4002b000
 800367c:	40023800 	.word	0x40023800

08003680 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	; 0x38
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a55      	ldr	r2, [pc, #340]	; (80037f4 <HAL_LTDC_MspInit+0x174>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	f040 80a3 	bne.w	80037ea <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80036a4:	4b54      	ldr	r3, [pc, #336]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	4a53      	ldr	r2, [pc, #332]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036ae:	6453      	str	r3, [r2, #68]	; 0x44
 80036b0:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036bc:	4b4e      	ldr	r3, [pc, #312]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	4a4d      	ldr	r2, [pc, #308]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036c2:	f043 0310 	orr.w	r3, r3, #16
 80036c6:	6313      	str	r3, [r2, #48]	; 0x30
 80036c8:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80036d4:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	4a47      	ldr	r2, [pc, #284]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036de:	6313      	str	r3, [r2, #48]	; 0x30
 80036e0:	4b45      	ldr	r3, [pc, #276]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80036ec:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	4a41      	ldr	r2, [pc, #260]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036f6:	6313      	str	r3, [r2, #48]	; 0x30
 80036f8:	4b3f      	ldr	r3, [pc, #252]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003704:	4b3c      	ldr	r3, [pc, #240]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	4a3b      	ldr	r2, [pc, #236]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 800370a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800370e:	6313      	str	r3, [r2, #48]	; 0x30
 8003710:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800371c:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	4a35      	ldr	r2, [pc, #212]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 8003722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003726:	6313      	str	r3, [r2, #48]	; 0x30
 8003728:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <HAL_LTDC_MspInit+0x178>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003734:	2310      	movs	r3, #16
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	2302      	movs	r3, #2
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003740:	2300      	movs	r3, #0
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003744:	230e      	movs	r3, #14
 8003746:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374c:	4619      	mov	r1, r3
 800374e:	482b      	ldr	r0, [pc, #172]	; (80037fc <HAL_LTDC_MspInit+0x17c>)
 8003750:	f002 ff6a 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003754:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375a:	2302      	movs	r3, #2
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003762:	2300      	movs	r3, #0
 8003764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003766:	230e      	movs	r3, #14
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800376a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376e:	4619      	mov	r1, r3
 8003770:	4823      	ldr	r0, [pc, #140]	; (8003800 <HAL_LTDC_MspInit+0x180>)
 8003772:	f002 ff59 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003776:	23f7      	movs	r3, #247	; 0xf7
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377a:	2302      	movs	r3, #2
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003782:	2300      	movs	r3, #0
 8003784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003786:	230e      	movs	r3, #14
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800378a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378e:	4619      	mov	r1, r3
 8003790:	481c      	ldr	r0, [pc, #112]	; (8003804 <HAL_LTDC_MspInit+0x184>)
 8003792:	f002 ff49 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80037a8:	2309      	movs	r3, #9
 80037aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80037ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037b0:	4619      	mov	r1, r3
 80037b2:	4815      	ldr	r0, [pc, #84]	; (8003808 <HAL_LTDC_MspInit+0x188>)
 80037b4:	f002 ff38 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80037b8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	2300      	movs	r3, #0
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037ca:	230e      	movs	r3, #14
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80037ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d2:	4619      	mov	r1, r3
 80037d4:	480d      	ldr	r0, [pc, #52]	; (800380c <HAL_LTDC_MspInit+0x18c>)
 80037d6:	f002 ff27 	bl	8006628 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	2105      	movs	r1, #5
 80037de:	2058      	movs	r0, #88	; 0x58
 80037e0:	f002 f868 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80037e4:	2058      	movs	r0, #88	; 0x58
 80037e6:	f002 f881 	bl	80058ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80037ea:	bf00      	nop
 80037ec:	3738      	adds	r7, #56	; 0x38
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40016800 	.word	0x40016800
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40021000 	.word	0x40021000
 8003800:	40022400 	.word	0x40022400
 8003804:	40022800 	.word	0x40022800
 8003808:	40021800 	.word	0x40021800
 800380c:	40022000 	.word	0x40022000

08003810 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a65      	ldr	r2, [pc, #404]	; (80039c4 <HAL_SD_MspInit+0x1b4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	f040 80c3 	bne.w	80039ba <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003834:	4b64      	ldr	r3, [pc, #400]	; (80039c8 <HAL_SD_MspInit+0x1b8>)
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	4a63      	ldr	r2, [pc, #396]	; (80039c8 <HAL_SD_MspInit+0x1b8>)
 800383a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800383e:	6453      	str	r3, [r2, #68]	; 0x44
 8003840:	4b61      	ldr	r3, [pc, #388]	; (80039c8 <HAL_SD_MspInit+0x1b8>)
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800384c:	4b5e      	ldr	r3, [pc, #376]	; (80039c8 <HAL_SD_MspInit+0x1b8>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	4a5d      	ldr	r2, [pc, #372]	; (80039c8 <HAL_SD_MspInit+0x1b8>)
 8003852:	f043 0304 	orr.w	r3, r3, #4
 8003856:	6313      	str	r3, [r2, #48]	; 0x30
 8003858:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <HAL_SD_MspInit+0x1b8>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003864:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <HAL_SD_MspInit+0x1b8>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	4a57      	ldr	r2, [pc, #348]	; (80039c8 <HAL_SD_MspInit+0x1b8>)
 800386a:	f043 0308 	orr.w	r3, r3, #8
 800386e:	6313      	str	r3, [r2, #48]	; 0x30
 8003870:	4b55      	ldr	r3, [pc, #340]	; (80039c8 <HAL_SD_MspInit+0x1b8>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800387c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003880:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003882:	2302      	movs	r3, #2
 8003884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800388a:	2303      	movs	r3, #3
 800388c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800388e:	230c      	movs	r3, #12
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003892:	f107 0314 	add.w	r3, r7, #20
 8003896:	4619      	mov	r1, r3
 8003898:	484c      	ldr	r0, [pc, #304]	; (80039cc <HAL_SD_MspInit+0x1bc>)
 800389a:	f002 fec5 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800389e:	2304      	movs	r3, #4
 80038a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a2:	2302      	movs	r3, #2
 80038a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038aa:	2303      	movs	r3, #3
 80038ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80038ae:	230c      	movs	r3, #12
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	4619      	mov	r1, r3
 80038b8:	4845      	ldr	r0, [pc, #276]	; (80039d0 <HAL_SD_MspInit+0x1c0>)
 80038ba:	f002 feb5 	bl	8006628 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80038be:	4b45      	ldr	r3, [pc, #276]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 80038c0:	4a45      	ldr	r2, [pc, #276]	; (80039d8 <HAL_SD_MspInit+0x1c8>)
 80038c2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80038c4:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 80038c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038ca:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038cc:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038d2:	4b40      	ldr	r3, [pc, #256]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038d8:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 80038da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038de:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038e0:	4b3c      	ldr	r3, [pc, #240]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 80038e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038e6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038e8:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 80038ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038ee:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80038f0:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 80038f2:	2220      	movs	r2, #32
 80038f4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038f6:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80038fc:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 80038fe:	2204      	movs	r2, #4
 8003900:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003902:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 8003904:	2203      	movs	r2, #3
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003908:	4b32      	ldr	r3, [pc, #200]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 800390a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003910:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 8003912:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003918:	482e      	ldr	r0, [pc, #184]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 800391a:	f001 fff5 	bl	8005908 <HAL_DMA_Init>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8003924:	f7fe f954 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 800392c:	641a      	str	r2, [r3, #64]	; 0x40
 800392e:	4a29      	ldr	r2, [pc, #164]	; (80039d4 <HAL_SD_MspInit+0x1c4>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 8003936:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <HAL_SD_MspInit+0x1d0>)
 8003938:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800393a:	4b28      	ldr	r3, [pc, #160]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 800393c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003940:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 8003944:	2240      	movs	r2, #64	; 0x40
 8003946:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003948:	4b24      	ldr	r3, [pc, #144]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 800394a:	2200      	movs	r2, #0
 800394c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800394e:	4b23      	ldr	r3, [pc, #140]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 8003950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003954:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003956:	4b21      	ldr	r3, [pc, #132]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 8003958:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800395c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800395e:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 8003960:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003964:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 8003968:	2220      	movs	r2, #32
 800396a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 800396e:	2200      	movs	r2, #0
 8003970:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003972:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 8003974:	2204      	movs	r2, #4
 8003976:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003978:	4b18      	ldr	r3, [pc, #96]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 800397a:	2203      	movs	r2, #3
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 8003980:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003984:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 8003988:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800398e:	4813      	ldr	r0, [pc, #76]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 8003990:	f001 ffba 	bl	8005908 <HAL_DMA_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800399a:	f7fe f919 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 80039a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_SD_MspInit+0x1cc>)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	2105      	movs	r1, #5
 80039ae:	2031      	movs	r0, #49	; 0x31
 80039b0:	f001 ff80 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80039b4:	2031      	movs	r0, #49	; 0x31
 80039b6:	f001 ff99 	bl	80058ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80039ba:	bf00      	nop
 80039bc:	3728      	adds	r7, #40	; 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020800 	.word	0x40020800
 80039d0:	40020c00 	.word	0x40020c00
 80039d4:	20008f40 	.word	0x20008f40
 80039d8:	40026458 	.word	0x40026458
 80039dc:	20009074 	.word	0x20009074
 80039e0:	400264a0 	.word	0x400264a0

080039e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	f107 0314 	add.w	r3, r7, #20
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <HAL_UART_MspInit+0xb4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d144      	bne.n	8003a90 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a06:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_UART_MspInit+0xb8>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <HAL_UART_MspInit+0xb8>)
 8003a0c:	f043 0310 	orr.w	r3, r3, #16
 8003a10:	6453      	str	r3, [r2, #68]	; 0x44
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_UART_MspInit+0xb8>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1e:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <HAL_UART_MspInit+0xb8>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_UART_MspInit+0xb8>)
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <HAL_UART_MspInit+0xb8>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a36:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_UART_MspInit+0xb8>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_UART_MspInit+0xb8>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_UART_MspInit+0xb8>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a5e:	2307      	movs	r3, #7
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003a62:	f107 0314 	add.w	r3, r7, #20
 8003a66:	4619      	mov	r1, r3
 8003a68:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <HAL_UART_MspInit+0xbc>)
 8003a6a:	f002 fddd 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a80:	2307      	movs	r3, #7
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4806      	ldr	r0, [pc, #24]	; (8003aa4 <HAL_UART_MspInit+0xc0>)
 8003a8c:	f002 fdcc 	bl	8006628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a90:	bf00      	nop
 8003a92:	3728      	adds	r7, #40	; 0x28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40011000 	.word	0x40011000
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40020400 	.word	0x40020400
 8003aa4:	40020000 	.word	0x40020000

08003aa8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003abc:	4b3a      	ldr	r3, [pc, #232]	; (8003ba8 <HAL_FMC_MspInit+0x100>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d16d      	bne.n	8003ba0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003ac4:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_FMC_MspInit+0x100>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003aca:	4b38      	ldr	r3, [pc, #224]	; (8003bac <HAL_FMC_MspInit+0x104>)
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	4a37      	ldr	r2, [pc, #220]	; (8003bac <HAL_FMC_MspInit+0x104>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6393      	str	r3, [r2, #56]	; 0x38
 8003ad6:	4b35      	ldr	r3, [pc, #212]	; (8003bac <HAL_FMC_MspInit+0x104>)
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003ae2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003ae6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af0:	2303      	movs	r3, #3
 8003af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003af4:	230c      	movs	r3, #12
 8003af6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003af8:	1d3b      	adds	r3, r7, #4
 8003afa:	4619      	mov	r1, r3
 8003afc:	482c      	ldr	r0, [pc, #176]	; (8003bb0 <HAL_FMC_MspInit+0x108>)
 8003afe:	f002 fd93 	bl	8006628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003b02:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b06:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b10:	2303      	movs	r3, #3
 8003b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b14:	230c      	movs	r3, #12
 8003b16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b18:	1d3b      	adds	r3, r7, #4
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4825      	ldr	r0, [pc, #148]	; (8003bb4 <HAL_FMC_MspInit+0x10c>)
 8003b1e:	f002 fd83 	bl	8006628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003b22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b26:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b30:	2303      	movs	r3, #3
 8003b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b34:	230c      	movs	r3, #12
 8003b36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	481e      	ldr	r0, [pc, #120]	; (8003bb8 <HAL_FMC_MspInit+0x110>)
 8003b3e:	f002 fd73 	bl	8006628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003b42:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b46:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b50:	2303      	movs	r3, #3
 8003b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b54:	230c      	movs	r3, #12
 8003b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b58:	1d3b      	adds	r3, r7, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4817      	ldr	r0, [pc, #92]	; (8003bbc <HAL_FMC_MspInit+0x114>)
 8003b5e:	f002 fd63 	bl	8006628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003b62:	2328      	movs	r3, #40	; 0x28
 8003b64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b72:	230c      	movs	r3, #12
 8003b74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4811      	ldr	r0, [pc, #68]	; (8003bc0 <HAL_FMC_MspInit+0x118>)
 8003b7c:	f002 fd54 	bl	8006628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003b80:	2308      	movs	r3, #8
 8003b82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b90:	230c      	movs	r3, #12
 8003b92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003b94:	1d3b      	adds	r3, r7, #4
 8003b96:	4619      	mov	r1, r3
 8003b98:	480a      	ldr	r0, [pc, #40]	; (8003bc4 <HAL_FMC_MspInit+0x11c>)
 8003b9a:	f002 fd45 	bl	8006628 <HAL_GPIO_Init>
 8003b9e:	e000      	b.n	8003ba2 <HAL_FMC_MspInit+0xfa>
    return;
 8003ba0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000688 	.word	0x20000688
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40021800 	.word	0x40021800
 8003bb8:	40020c00 	.word	0x40020c00
 8003bbc:	40021400 	.word	0x40021400
 8003bc0:	40021c00 	.word	0x40021c00
 8003bc4:	40020800 	.word	0x40020800

08003bc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003bd0:	f7ff ff6a 	bl	8003aa8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	; 0x28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a61      	ldr	r2, [pc, #388]	; (8003d70 <HAL_SAI_MspInit+0x194>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d15b      	bne.n	8003ca6 <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003bee:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <HAL_SAI_MspInit+0x198>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003bf6:	4b60      	ldr	r3, [pc, #384]	; (8003d78 <HAL_SAI_MspInit+0x19c>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	4a5f      	ldr	r2, [pc, #380]	; (8003d78 <HAL_SAI_MspInit+0x19c>)
 8003bfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c00:	6453      	str	r3, [r2, #68]	; 0x44
 8003c02:	4b5d      	ldr	r3, [pc, #372]	; (8003d78 <HAL_SAI_MspInit+0x19c>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003c0e:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <HAL_SAI_MspInit+0x198>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	4a57      	ldr	r2, [pc, #348]	; (8003d74 <HAL_SAI_MspInit+0x198>)
 8003c16:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003c18:	23f0      	movs	r3, #240	; 0xf0
 8003c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c24:	2300      	movs	r3, #0
 8003c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003c28:	230a      	movs	r3, #10
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	4619      	mov	r1, r3
 8003c32:	4852      	ldr	r0, [pc, #328]	; (8003d7c <HAL_SAI_MspInit+0x1a0>)
 8003c34:	f002 fcf8 	bl	8006628 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003c38:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c3a:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <HAL_SAI_MspInit+0x1a8>)
 8003c3c:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003c3e:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c40:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003c44:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c46:	4b4e      	ldr	r3, [pc, #312]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c4c:	4b4c      	ldr	r3, [pc, #304]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003c52:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c58:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c5a:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c60:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c68:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003c6a:	4b45      	ldr	r3, [pc, #276]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c70:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8003c72:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c78:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003c7e:	4840      	ldr	r0, [pc, #256]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c80:	f001 fe42 	bl	8005908 <HAL_DMA_Init>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 8003c8a:	f7fd ffa1 	bl	8001bd0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a3b      	ldr	r2, [pc, #236]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c92:	671a      	str	r2, [r3, #112]	; 0x70
 8003c94:	4a3a      	ldr	r2, [pc, #232]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a38      	ldr	r2, [pc, #224]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003c9e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ca0:	4a37      	ldr	r2, [pc, #220]	; (8003d80 <HAL_SAI_MspInit+0x1a4>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a37      	ldr	r2, [pc, #220]	; (8003d88 <HAL_SAI_MspInit+0x1ac>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d15b      	bne.n	8003d68 <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003cb0:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <HAL_SAI_MspInit+0x198>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003cb8:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_SAI_MspInit+0x19c>)
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	4a2e      	ldr	r2, [pc, #184]	; (8003d78 <HAL_SAI_MspInit+0x19c>)
 8003cbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc2:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc4:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <HAL_SAI_MspInit+0x19c>)
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003cd0:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <HAL_SAI_MspInit+0x198>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <HAL_SAI_MspInit+0x198>)
 8003cd8:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003cec:	230a      	movs	r3, #10
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4825      	ldr	r0, [pc, #148]	; (8003d8c <HAL_SAI_MspInit+0x1b0>)
 8003cf8:	f002 fc96 	bl	8006628 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003cfe:	4a25      	ldr	r2, [pc, #148]	; (8003d94 <HAL_SAI_MspInit+0x1b8>)
 8003d00:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d0e:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d1a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d22:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d2a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d32:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8003d34:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003d40:	4813      	ldr	r0, [pc, #76]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d42:	f001 fde1 	bl	8005908 <HAL_DMA_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 8003d4c:	f7fd ff40 	bl	8001bd0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a0f      	ldr	r2, [pc, #60]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d54:	671a      	str	r2, [r3, #112]	; 0x70
 8003d56:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d60:	66da      	str	r2, [r3, #108]	; 0x6c
 8003d62:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <HAL_SAI_MspInit+0x1b4>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003d68:	bf00      	nop
 8003d6a:	3728      	adds	r7, #40	; 0x28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40015c04 	.word	0x40015c04
 8003d74:	2000068c 	.word	0x2000068c
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	20008fa0 	.word	0x20008fa0
 8003d84:	40026470 	.word	0x40026470
 8003d88:	40015c24 	.word	0x40015c24
 8003d8c:	40021800 	.word	0x40021800
 8003d90:	200088a4 	.word	0x200088a4
 8003d94:	400264b8 	.word	0x400264b8

08003d98 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <HAL_SAI_MspDeInit+0x9c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d11c      	bne.n	8003de4 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <HAL_SAI_MspDeInit+0xa0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <HAL_SAI_MspDeInit+0xa0>)
 8003db2:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8003db4:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_SAI_MspDeInit+0xa0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <HAL_SAI_MspDeInit+0xa4>)
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_SAI_MspDeInit+0xa4>)
 8003dc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dc6:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8003dc8:	21f0      	movs	r1, #240	; 0xf0
 8003dca:	481d      	ldr	r0, [pc, #116]	; (8003e40 <HAL_SAI_MspDeInit+0xa8>)
 8003dcc:	f002 fdd8 	bl	8006980 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hsai->hdmarx);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 fe45 	bl	8005a64 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 fe40 	bl	8005a64 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <HAL_SAI_MspDeInit+0xac>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d11d      	bne.n	8003e2a <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_SAI_MspDeInit+0xa0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <HAL_SAI_MspDeInit+0xa0>)
 8003df6:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <HAL_SAI_MspDeInit+0xa0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_SAI_MspDeInit+0xa4>)
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e04:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <HAL_SAI_MspDeInit+0xa4>)
 8003e06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e0a:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8003e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e10:	480d      	ldr	r0, [pc, #52]	; (8003e48 <HAL_SAI_MspDeInit+0xb0>)
 8003e12:	f002 fdb5 	bl	8006980 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hsai->hdmarx);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 fe22 	bl	8005a64 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 fe1d 	bl	8005a64 <HAL_DMA_DeInit>
    }
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40015c04 	.word	0x40015c04
 8003e38:	2000068c 	.word	0x2000068c
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40022000 	.word	0x40022000
 8003e44:	40015c24 	.word	0x40015c24
 8003e48:	40021800 	.word	0x40021800

08003e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08c      	sub	sp, #48	; 0x30
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	2036      	movs	r0, #54	; 0x36
 8003e62:	f001 fd27 	bl	80058b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e66:	2036      	movs	r0, #54	; 0x36
 8003e68:	f001 fd40 	bl	80058ec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003e6c:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <HAL_InitTick+0xa0>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <HAL_InitTick+0xa0>)
 8003e72:	f043 0310 	orr.w	r3, r3, #16
 8003e76:	6413      	str	r3, [r2, #64]	; 0x40
 8003e78:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <HAL_InitTick+0xa0>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e84:	f107 0210 	add.w	r2, r7, #16
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 fc32 	bl	80086f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003e94:	f004 fc08 	bl	80086a8 <HAL_RCC_GetPCLK1Freq>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <HAL_InitTick+0xa4>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	0c9b      	lsrs	r3, r3, #18
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <HAL_InitTick+0xa8>)
 8003eae:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <HAL_InitTick+0xac>)
 8003eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <HAL_InitTick+0xa8>)
 8003eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003eb8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003eba:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <HAL_InitTick+0xa8>)
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <HAL_InitTick+0xa8>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_InitTick+0xa8>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003ecc:	4809      	ldr	r0, [pc, #36]	; (8003ef4 <HAL_InitTick+0xa8>)
 8003ece:	f007 fa49 	bl	800b364 <HAL_TIM_Base_Init>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003ed8:	4806      	ldr	r0, [pc, #24]	; (8003ef4 <HAL_InitTick+0xa8>)
 8003eda:	f007 faa5 	bl	800b428 <HAL_TIM_Base_Start_IT>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	e000      	b.n	8003ee4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3730      	adds	r7, #48	; 0x30
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	431bde83 	.word	0x431bde83
 8003ef4:	20009204 	.word	0x20009204
 8003ef8:	40001000 	.word	0x40001000

08003efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f00:	e7fe      	b.n	8003f00 <NMI_Handler+0x4>

08003f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f02:	b480      	push	{r7}
 8003f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f06:	e7fe      	b.n	8003f06 <HardFault_Handler+0x4>

08003f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f0c:	e7fe      	b.n	8003f0c <MemManage_Handler+0x4>

08003f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f12:	e7fe      	b.n	8003f12 <BusFault_Handler+0x4>

08003f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f18:	e7fe      	b.n	8003f18 <UsageFault_Handler+0x4>

08003f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <SDMMC1_IRQHandler+0x10>)
 8003f2e:	f006 f8f1 	bl	800a114 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20008988 	.word	0x20008988

08003f3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <TIM6_DAC_IRQHandler+0x10>)
 8003f42:	f007 fae9 	bl	800b518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20009204 	.word	0x20009204

08003f50 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <DMA2_Stream3_IRQHandler+0x10>)
 8003f56:	f001 fe65 	bl	8005c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20008f40 	.word	0x20008f40

08003f64 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <DMA2_Stream4_IRQHandler+0x10>)
 8003f6a:	f001 fe5b 	bl	8005c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20008fa0 	.word	0x20008fa0

08003f78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8003f7c:	4802      	ldr	r0, [pc, #8]	; (8003f88 <DMA2_Stream6_IRQHandler+0x10>)
 8003f7e:	f001 fe51 	bl	8005c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20009074 	.word	0x20009074

08003f8c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003f90:	4802      	ldr	r0, [pc, #8]	; (8003f9c <DMA2_Stream7_IRQHandler+0x10>)
 8003f92:	f001 fe47 	bl	8005c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200088a4 	.word	0x200088a4

08003fa0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003fa4:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <LTDC_IRQHandler+0x10>)
 8003fa6:	f003 fc25 	bl	80077f4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20008a10 	.word	0x20008a10

08003fb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <SystemInit+0x20>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <SystemInit+0x20>)
 8003fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	81fb      	strh	r3, [r7, #14]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	81bb      	strh	r3, [r7, #12]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8003ff0:	89bb      	ldrh	r3, [r7, #12]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8003ff6:	89bb      	ldrh	r3, [r7, #12]
 8003ff8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ffc:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8004002:	f7fd ff41 	bl	8001e88 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8004006:	89fb      	ldrh	r3, [r7, #14]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2203      	movs	r2, #3
 800400c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004010:	4618      	mov	r0, r3
 8004012:	f001 fafb 	bl	800560c <CODEC_IO_Write>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004020:	89fb      	ldrh	r3, [r7, #14]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2200      	movs	r2, #0
 8004026:	f640 0117 	movw	r1, #2071	; 0x817
 800402a:	4618      	mov	r0, r3
 800402c:	f001 faee 	bl	800560c <CODEC_IO_Write>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800403a:	89fb      	ldrh	r3, [r7, #14]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2200      	movs	r2, #0
 8004040:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fae1 	bl	800560c <CODEC_IO_Write>
 800404a:	4603      	mov	r3, r0
 800404c:	461a      	mov	r2, r3
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8004054:	89fb      	ldrh	r3, [r7, #14]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	226c      	movs	r2, #108	; 0x6c
 800405a:	2139      	movs	r1, #57	; 0x39
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fad5 	bl	800560c <CODEC_IO_Write>
 8004062:	4603      	mov	r3, r0
 8004064:	461a      	mov	r2, r3
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800406c:	8afb      	ldrh	r3, [r7, #22]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8004072:	89fb      	ldrh	r3, [r7, #14]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2213      	movs	r2, #19
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f001 fac6 	bl	800560c <CODEC_IO_Write>
 8004080:	4603      	mov	r3, r0
 8004082:	461a      	mov	r2, r3
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	4413      	add	r3, r2
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	e00b      	b.n	80040a4 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2203      	movs	r2, #3
 8004092:	2101      	movs	r1, #1
 8004094:	4618      	mov	r0, r3
 8004096:	f001 fab9 	bl	800560c <CODEC_IO_Write>
 800409a:	4603      	mov	r3, r0
 800409c:	461a      	mov	r2, r3
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80040a4:	2032      	movs	r0, #50	; 0x32
 80040a6:	f7fd ff57 	bl	8001f58 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80040aa:	8b3b      	ldrh	r3, [r7, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 815f 	beq.w	8004370 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80040b2:	4bae      	ldr	r3, [pc, #696]	; (800436c <wm8994_Init+0x394>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80040b8:	8b3b      	ldrh	r3, [r7, #24]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	f000 808c 	beq.w	80041d8 <wm8994_Init+0x200>
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	f300 8111 	bgt.w	80042e8 <wm8994_Init+0x310>
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d002      	beq.n	80040d0 <wm8994_Init+0xf8>
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d042      	beq.n	8004154 <wm8994_Init+0x17c>
 80040ce:	e10b      	b.n	80042e8 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80040d0:	89fb      	ldrh	r3, [r7, #14]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f640 420c 	movw	r2, #3084	; 0xc0c
 80040d8:	2105      	movs	r1, #5
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 fa96 	bl	800560c <CODEC_IO_Write>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80040ea:	89fb      	ldrh	r3, [r7, #14]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2200      	movs	r2, #0
 80040f0:	f240 6101 	movw	r1, #1537	; 0x601
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fa89 	bl	800560c <CODEC_IO_Write>
 80040fa:	4603      	mov	r3, r0
 80040fc:	461a      	mov	r2, r3
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004104:	89fb      	ldrh	r3, [r7, #14]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2200      	movs	r2, #0
 800410a:	f240 6102 	movw	r1, #1538	; 0x602
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fa7c 	bl	800560c <CODEC_IO_Write>
 8004114:	4603      	mov	r3, r0
 8004116:	461a      	mov	r2, r3
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800411e:	89fb      	ldrh	r3, [r7, #14]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2202      	movs	r2, #2
 8004124:	f240 6104 	movw	r1, #1540	; 0x604
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fa6f 	bl	800560c <CODEC_IO_Write>
 800412e:	4603      	mov	r3, r0
 8004130:	461a      	mov	r2, r3
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004138:	89fb      	ldrh	r3, [r7, #14]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2202      	movs	r2, #2
 800413e:	f240 6105 	movw	r1, #1541	; 0x605
 8004142:	4618      	mov	r0, r3
 8004144:	f001 fa62 	bl	800560c <CODEC_IO_Write>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	61fb      	str	r3, [r7, #28]
      break;
 8004152:	e110      	b.n	8004376 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004154:	89fb      	ldrh	r3, [r7, #14]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f240 3203 	movw	r2, #771	; 0x303
 800415c:	2105      	movs	r1, #5
 800415e:	4618      	mov	r0, r3
 8004160:	f001 fa54 	bl	800560c <CODEC_IO_Write>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	4413      	add	r3, r2
 800416c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800416e:	89fb      	ldrh	r3, [r7, #14]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2201      	movs	r2, #1
 8004174:	f240 6101 	movw	r1, #1537	; 0x601
 8004178:	4618      	mov	r0, r3
 800417a:	f001 fa47 	bl	800560c <CODEC_IO_Write>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004188:	89fb      	ldrh	r3, [r7, #14]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2201      	movs	r2, #1
 800418e:	f240 6102 	movw	r1, #1538	; 0x602
 8004192:	4618      	mov	r0, r3
 8004194:	f001 fa3a 	bl	800560c <CODEC_IO_Write>
 8004198:	4603      	mov	r3, r0
 800419a:	461a      	mov	r2, r3
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80041a2:	89fb      	ldrh	r3, [r7, #14]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2200      	movs	r2, #0
 80041a8:	f240 6104 	movw	r1, #1540	; 0x604
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 fa2d 	bl	800560c <CODEC_IO_Write>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	4413      	add	r3, r2
 80041ba:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2200      	movs	r2, #0
 80041c2:	f240 6105 	movw	r1, #1541	; 0x605
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 fa20 	bl	800560c <CODEC_IO_Write>
 80041cc:	4603      	mov	r3, r0
 80041ce:	461a      	mov	r2, r3
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	61fb      	str	r3, [r7, #28]
      break;
 80041d6:	e0ce      	b.n	8004376 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80041d8:	8afb      	ldrh	r3, [r7, #22]
 80041da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041de:	d141      	bne.n	8004264 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80041e0:	89fb      	ldrh	r3, [r7, #14]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f640 720f 	movw	r2, #3855	; 0xf0f
 80041e8:	2105      	movs	r1, #5
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 fa0e 	bl	800560c <CODEC_IO_Write>
 80041f0:	4603      	mov	r3, r0
 80041f2:	461a      	mov	r2, r3
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80041fa:	89fb      	ldrh	r3, [r7, #14]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2203      	movs	r2, #3
 8004200:	f240 6101 	movw	r1, #1537	; 0x601
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fa01 	bl	800560c <CODEC_IO_Write>
 800420a:	4603      	mov	r3, r0
 800420c:	461a      	mov	r2, r3
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4413      	add	r3, r2
 8004212:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8004214:	89fb      	ldrh	r3, [r7, #14]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2203      	movs	r2, #3
 800421a:	f240 6102 	movw	r1, #1538	; 0x602
 800421e:	4618      	mov	r0, r3
 8004220:	f001 f9f4 	bl	800560c <CODEC_IO_Write>
 8004224:	4603      	mov	r3, r0
 8004226:	461a      	mov	r2, r3
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800422e:	89fb      	ldrh	r3, [r7, #14]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2203      	movs	r2, #3
 8004234:	f240 6104 	movw	r1, #1540	; 0x604
 8004238:	4618      	mov	r0, r3
 800423a:	f001 f9e7 	bl	800560c <CODEC_IO_Write>
 800423e:	4603      	mov	r3, r0
 8004240:	461a      	mov	r2, r3
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8004248:	89fb      	ldrh	r3, [r7, #14]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2203      	movs	r2, #3
 800424e:	f240 6105 	movw	r1, #1541	; 0x605
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f9da 	bl	800560c <CODEC_IO_Write>
 8004258:	4603      	mov	r3, r0
 800425a:	461a      	mov	r2, r3
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8004262:	e088      	b.n	8004376 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004264:	89fb      	ldrh	r3, [r7, #14]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f640 720f 	movw	r2, #3855	; 0xf0f
 800426c:	2105      	movs	r1, #5
 800426e:	4618      	mov	r0, r3
 8004270:	f001 f9cc 	bl	800560c <CODEC_IO_Write>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800427e:	89fb      	ldrh	r3, [r7, #14]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2201      	movs	r2, #1
 8004284:	f240 6101 	movw	r1, #1537	; 0x601
 8004288:	4618      	mov	r0, r3
 800428a:	f001 f9bf 	bl	800560c <CODEC_IO_Write>
 800428e:	4603      	mov	r3, r0
 8004290:	461a      	mov	r2, r3
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004298:	89fb      	ldrh	r3, [r7, #14]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2201      	movs	r2, #1
 800429e:	f240 6102 	movw	r1, #1538	; 0x602
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 f9b2 	bl	800560c <CODEC_IO_Write>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80042b2:	89fb      	ldrh	r3, [r7, #14]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2202      	movs	r2, #2
 80042b8:	f240 6104 	movw	r1, #1540	; 0x604
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 f9a5 	bl	800560c <CODEC_IO_Write>
 80042c2:	4603      	mov	r3, r0
 80042c4:	461a      	mov	r2, r3
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4413      	add	r3, r2
 80042ca:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80042cc:	89fb      	ldrh	r3, [r7, #14]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2202      	movs	r2, #2
 80042d2:	f240 6105 	movw	r1, #1541	; 0x605
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 f998 	bl	800560c <CODEC_IO_Write>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	4413      	add	r3, r2
 80042e4:	61fb      	str	r3, [r7, #28]
      break;
 80042e6:	e046      	b.n	8004376 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f240 3203 	movw	r2, #771	; 0x303
 80042f0:	2105      	movs	r1, #5
 80042f2:	4618      	mov	r0, r3
 80042f4:	f001 f98a 	bl	800560c <CODEC_IO_Write>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	4413      	add	r3, r2
 8004300:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004302:	89fb      	ldrh	r3, [r7, #14]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2201      	movs	r2, #1
 8004308:	f240 6101 	movw	r1, #1537	; 0x601
 800430c:	4618      	mov	r0, r3
 800430e:	f001 f97d 	bl	800560c <CODEC_IO_Write>
 8004312:	4603      	mov	r3, r0
 8004314:	461a      	mov	r2, r3
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800431c:	89fb      	ldrh	r3, [r7, #14]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2201      	movs	r2, #1
 8004322:	f240 6102 	movw	r1, #1538	; 0x602
 8004326:	4618      	mov	r0, r3
 8004328:	f001 f970 	bl	800560c <CODEC_IO_Write>
 800432c:	4603      	mov	r3, r0
 800432e:	461a      	mov	r2, r3
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	4413      	add	r3, r2
 8004334:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004336:	89fb      	ldrh	r3, [r7, #14]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2200      	movs	r2, #0
 800433c:	f240 6104 	movw	r1, #1540	; 0x604
 8004340:	4618      	mov	r0, r3
 8004342:	f001 f963 	bl	800560c <CODEC_IO_Write>
 8004346:	4603      	mov	r3, r0
 8004348:	461a      	mov	r2, r3
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004350:	89fb      	ldrh	r3, [r7, #14]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2200      	movs	r2, #0
 8004356:	f240 6105 	movw	r1, #1541	; 0x605
 800435a:	4618      	mov	r0, r3
 800435c:	f001 f956 	bl	800560c <CODEC_IO_Write>
 8004360:	4603      	mov	r3, r0
 8004362:	461a      	mov	r2, r3
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	4413      	add	r3, r2
 8004368:	61fb      	str	r3, [r7, #28]
      break;
 800436a:	e004      	b.n	8004376 <wm8994_Init+0x39e>
 800436c:	20000690 	.word	0x20000690
    }
  }
  else
  {
    outputEnabled = 0;
 8004370:	4b99      	ldr	r3, [pc, #612]	; (80045d8 <wm8994_Init+0x600>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8004376:	8afb      	ldrh	r3, [r7, #22]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 81ab 	beq.w	80046d4 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800437e:	4b97      	ldr	r3, [pc, #604]	; (80045dc <wm8994_Init+0x604>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8004384:	8afb      	ldrh	r3, [r7, #22]
 8004386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438a:	f000 8129 	beq.w	80045e0 <wm8994_Init+0x608>
 800438e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004392:	f300 819b 	bgt.w	80046cc <wm8994_Init+0x6f4>
 8004396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439a:	d05a      	beq.n	8004452 <wm8994_Init+0x47a>
 800439c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a0:	f300 8194 	bgt.w	80046cc <wm8994_Init+0x6f4>
 80043a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a8:	f000 80c6 	beq.w	8004538 <wm8994_Init+0x560>
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b0:	f040 818c 	bne.w	80046cc <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80043b4:	89fb      	ldrh	r3, [r7, #14]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80043bc:	2104      	movs	r1, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 f924 	bl	800560c <CODEC_IO_Write>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80043ce:	89fb      	ldrh	r3, [r7, #14]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	22db      	movs	r2, #219	; 0xdb
 80043d4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 f917 	bl	800560c <CODEC_IO_Write>
 80043de:	4603      	mov	r3, r0
 80043e0:	461a      	mov	r2, r3
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80043e8:	89fb      	ldrh	r3, [r7, #14]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80043f0:	2102      	movs	r1, #2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 f90a 	bl	800560c <CODEC_IO_Write>
 80043f8:	4603      	mov	r3, r0
 80043fa:	461a      	mov	r2, r3
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004402:	89fb      	ldrh	r3, [r7, #14]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2202      	movs	r2, #2
 8004408:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f8fd 	bl	800560c <CODEC_IO_Write>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800441c:	89fb      	ldrh	r3, [r7, #14]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2202      	movs	r2, #2
 8004422:	f240 6109 	movw	r1, #1545	; 0x609
 8004426:	4618      	mov	r0, r3
 8004428:	f001 f8f0 	bl	800560c <CODEC_IO_Write>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8004436:	89fb      	ldrh	r3, [r7, #14]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	220e      	movs	r2, #14
 800443c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004440:	4618      	mov	r0, r3
 8004442:	f001 f8e3 	bl	800560c <CODEC_IO_Write>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	4413      	add	r3, r2
 800444e:	61fb      	str	r3, [r7, #28]
      break;
 8004450:	e143      	b.n	80046da <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8004452:	89fb      	ldrh	r3, [r7, #14]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2211      	movs	r2, #17
 8004458:	2128      	movs	r1, #40	; 0x28
 800445a:	4618      	mov	r0, r3
 800445c:	f001 f8d6 	bl	800560c <CODEC_IO_Write>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800446a:	89fb      	ldrh	r3, [r7, #14]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2235      	movs	r2, #53	; 0x35
 8004470:	2129      	movs	r1, #41	; 0x29
 8004472:	4618      	mov	r0, r3
 8004474:	f001 f8ca 	bl	800560c <CODEC_IO_Write>
 8004478:	4603      	mov	r3, r0
 800447a:	461a      	mov	r2, r3
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8004482:	89fb      	ldrh	r3, [r7, #14]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2235      	movs	r2, #53	; 0x35
 8004488:	212a      	movs	r1, #42	; 0x2a
 800448a:	4618      	mov	r0, r3
 800448c:	f001 f8be 	bl	800560c <CODEC_IO_Write>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800449a:	89fb      	ldrh	r3, [r7, #14]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f240 3203 	movw	r2, #771	; 0x303
 80044a2:	2104      	movs	r1, #4
 80044a4:	4618      	mov	r0, r3
 80044a6:	f001 f8b1 	bl	800560c <CODEC_IO_Write>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	4413      	add	r3, r2
 80044b2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80044b4:	89fb      	ldrh	r3, [r7, #14]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	22db      	movs	r2, #219	; 0xdb
 80044ba:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 f8a4 	bl	800560c <CODEC_IO_Write>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80044ce:	89fb      	ldrh	r3, [r7, #14]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f246 3250 	movw	r2, #25424	; 0x6350
 80044d6:	2102      	movs	r1, #2
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 f897 	bl	800560c <CODEC_IO_Write>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80044e8:	89fb      	ldrh	r3, [r7, #14]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2202      	movs	r2, #2
 80044ee:	f240 6106 	movw	r1, #1542	; 0x606
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 f88a 	bl	800560c <CODEC_IO_Write>
 80044f8:	4603      	mov	r3, r0
 80044fa:	461a      	mov	r2, r3
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004502:	89fb      	ldrh	r3, [r7, #14]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2202      	movs	r2, #2
 8004508:	f240 6107 	movw	r1, #1543	; 0x607
 800450c:	4618      	mov	r0, r3
 800450e:	f001 f87d 	bl	800560c <CODEC_IO_Write>
 8004512:	4603      	mov	r3, r0
 8004514:	461a      	mov	r2, r3
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800451c:	89fb      	ldrh	r3, [r7, #14]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	220d      	movs	r2, #13
 8004522:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004526:	4618      	mov	r0, r3
 8004528:	f001 f870 	bl	800560c <CODEC_IO_Write>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	61fb      	str	r3, [r7, #28]
      break;
 8004536:	e0d0      	b.n	80046da <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8004538:	89fb      	ldrh	r3, [r7, #14]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8004540:	2104      	movs	r1, #4
 8004542:	4618      	mov	r0, r3
 8004544:	f001 f862 	bl	800560c <CODEC_IO_Write>
 8004548:	4603      	mov	r3, r0
 800454a:	461a      	mov	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	4413      	add	r3, r2
 8004550:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004552:	89fb      	ldrh	r3, [r7, #14]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	22db      	movs	r2, #219	; 0xdb
 8004558:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800455c:	4618      	mov	r0, r3
 800455e:	f001 f855 	bl	800560c <CODEC_IO_Write>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800456c:	89fb      	ldrh	r3, [r7, #14]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f246 3250 	movw	r2, #25424	; 0x6350
 8004574:	2102      	movs	r1, #2
 8004576:	4618      	mov	r0, r3
 8004578:	f001 f848 	bl	800560c <CODEC_IO_Write>
 800457c:	4603      	mov	r3, r0
 800457e:	461a      	mov	r2, r3
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	4413      	add	r3, r2
 8004584:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004586:	89fb      	ldrh	r3, [r7, #14]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2202      	movs	r2, #2
 800458c:	f240 6106 	movw	r1, #1542	; 0x606
 8004590:	4618      	mov	r0, r3
 8004592:	f001 f83b 	bl	800560c <CODEC_IO_Write>
 8004596:	4603      	mov	r3, r0
 8004598:	461a      	mov	r2, r3
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80045a0:	89fb      	ldrh	r3, [r7, #14]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2202      	movs	r2, #2
 80045a6:	f240 6107 	movw	r1, #1543	; 0x607
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 f82e 	bl	800560c <CODEC_IO_Write>
 80045b0:	4603      	mov	r3, r0
 80045b2:	461a      	mov	r2, r3
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80045ba:	89fb      	ldrh	r3, [r7, #14]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	220d      	movs	r2, #13
 80045c0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 f821 	bl	800560c <CODEC_IO_Write>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461a      	mov	r2, r3
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	4413      	add	r3, r2
 80045d2:	61fb      	str	r3, [r7, #28]
      break; 
 80045d4:	e081      	b.n	80046da <wm8994_Init+0x702>
 80045d6:	bf00      	nop
 80045d8:	20000690 	.word	0x20000690
 80045dc:	20000694 	.word	0x20000694
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80045e0:	89fb      	ldrh	r3, [r7, #14]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f640 723c 	movw	r2, #3900	; 0xf3c
 80045e8:	2104      	movs	r1, #4
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 f80e 	bl	800560c <CODEC_IO_Write>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80045fa:	89fb      	ldrh	r3, [r7, #14]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	22db      	movs	r2, #219	; 0xdb
 8004600:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8004604:	4618      	mov	r0, r3
 8004606:	f001 f801 	bl	800560c <CODEC_IO_Write>
 800460a:	4603      	mov	r3, r0
 800460c:	461a      	mov	r2, r3
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	4413      	add	r3, r2
 8004612:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004614:	89fb      	ldrh	r3, [r7, #14]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	22db      	movs	r2, #219	; 0xdb
 800461a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fff4 	bl	800560c <CODEC_IO_Write>
 8004624:	4603      	mov	r3, r0
 8004626:	461a      	mov	r2, r3
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800462e:	89fb      	ldrh	r3, [r7, #14]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8004636:	2102      	movs	r1, #2
 8004638:	4618      	mov	r0, r3
 800463a:	f000 ffe7 	bl	800560c <CODEC_IO_Write>
 800463e:	4603      	mov	r3, r0
 8004640:	461a      	mov	r2, r3
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2202      	movs	r2, #2
 800464e:	f240 6106 	movw	r1, #1542	; 0x606
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ffda 	bl	800560c <CODEC_IO_Write>
 8004658:	4603      	mov	r3, r0
 800465a:	461a      	mov	r2, r3
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	4413      	add	r3, r2
 8004660:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004662:	89fb      	ldrh	r3, [r7, #14]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2202      	movs	r2, #2
 8004668:	f240 6107 	movw	r1, #1543	; 0x607
 800466c:	4618      	mov	r0, r3
 800466e:	f000 ffcd 	bl	800560c <CODEC_IO_Write>
 8004672:	4603      	mov	r3, r0
 8004674:	461a      	mov	r2, r3
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800467c:	89fb      	ldrh	r3, [r7, #14]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2202      	movs	r2, #2
 8004682:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004686:	4618      	mov	r0, r3
 8004688:	f000 ffc0 	bl	800560c <CODEC_IO_Write>
 800468c:	4603      	mov	r3, r0
 800468e:	461a      	mov	r2, r3
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	4413      	add	r3, r2
 8004694:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004696:	89fb      	ldrh	r3, [r7, #14]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2202      	movs	r2, #2
 800469c:	f240 6109 	movw	r1, #1545	; 0x609
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 ffb3 	bl	800560c <CODEC_IO_Write>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80046b0:	89fb      	ldrh	r3, [r7, #14]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	220d      	movs	r2, #13
 80046b6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 ffa6 	bl	800560c <CODEC_IO_Write>
 80046c0:	4603      	mov	r3, r0
 80046c2:	461a      	mov	r2, r3
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	4413      	add	r3, r2
 80046c8:	61fb      	str	r3, [r7, #28]
      break;    
 80046ca:	e006      	b.n	80046da <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	3301      	adds	r3, #1
 80046d0:	61fb      	str	r3, [r7, #28]
      break;
 80046d2:	e002      	b.n	80046da <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 80046d4:	4ba4      	ldr	r3, [pc, #656]	; (8004968 <wm8994_Init+0x990>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4aa3      	ldr	r2, [pc, #652]	; (800496c <wm8994_Init+0x994>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d079      	beq.n	80047d6 <wm8994_Init+0x7fe>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4aa1      	ldr	r2, [pc, #644]	; (800496c <wm8994_Init+0x994>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	f200 80ad 	bhi.w	8004846 <wm8994_Init+0x86e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d061      	beq.n	80047ba <wm8994_Init+0x7e2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80046fc:	4293      	cmp	r3, r2
 80046fe:	f200 80a2 	bhi.w	8004846 <wm8994_Init+0x86e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004708:	4293      	cmp	r3, r2
 800470a:	f000 808e 	beq.w	800482a <wm8994_Init+0x852>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004714:	4293      	cmp	r3, r2
 8004716:	f200 8096 	bhi.w	8004846 <wm8994_Init+0x86e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004720:	d03d      	beq.n	800479e <wm8994_Init+0x7c6>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004728:	f200 808d 	bhi.w	8004846 <wm8994_Init+0x86e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f245 6222 	movw	r2, #22050	; 0x5622
 8004732:	4293      	cmp	r3, r2
 8004734:	d06b      	beq.n	800480e <wm8994_Init+0x836>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f245 6222 	movw	r2, #22050	; 0x5622
 800473c:	4293      	cmp	r3, r2
 800473e:	f200 8082 	bhi.w	8004846 <wm8994_Init+0x86e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004748:	d01b      	beq.n	8004782 <wm8994_Init+0x7aa>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004750:	d879      	bhi.n	8004846 <wm8994_Init+0x86e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004758:	d005      	beq.n	8004766 <wm8994_Init+0x78e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004760:	4293      	cmp	r3, r2
 8004762:	d046      	beq.n	80047f2 <wm8994_Init+0x81a>
 8004764:	e06f      	b.n	8004846 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8004766:	89fb      	ldrh	r3, [r7, #14]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2203      	movs	r2, #3
 800476c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004770:	4618      	mov	r0, r3
 8004772:	f000 ff4b 	bl	800560c <CODEC_IO_Write>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	61fb      	str	r3, [r7, #28]
    break;
 8004780:	e06f      	b.n	8004862 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004782:	89fb      	ldrh	r3, [r7, #14]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2233      	movs	r2, #51	; 0x33
 8004788:	f44f 7104 	mov.w	r1, #528	; 0x210
 800478c:	4618      	mov	r0, r3
 800478e:	f000 ff3d 	bl	800560c <CODEC_IO_Write>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	61fb      	str	r3, [r7, #28]
    break;
 800479c:	e061      	b.n	8004862 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800479e:	89fb      	ldrh	r3, [r7, #14]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2263      	movs	r2, #99	; 0x63
 80047a4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 ff2f 	bl	800560c <CODEC_IO_Write>
 80047ae:	4603      	mov	r3, r0
 80047b0:	461a      	mov	r2, r3
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	61fb      	str	r3, [r7, #28]
    break;
 80047b8:	e053      	b.n	8004862 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80047ba:	89fb      	ldrh	r3, [r7, #14]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2283      	movs	r2, #131	; 0x83
 80047c0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 ff21 	bl	800560c <CODEC_IO_Write>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	61fb      	str	r3, [r7, #28]
    break;
 80047d4:	e045      	b.n	8004862 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80047d6:	89fb      	ldrh	r3, [r7, #14]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	22a3      	movs	r2, #163	; 0xa3
 80047dc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 ff13 	bl	800560c <CODEC_IO_Write>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461a      	mov	r2, r3
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	61fb      	str	r3, [r7, #28]
    break;
 80047f0:	e037      	b.n	8004862 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80047f2:	89fb      	ldrh	r3, [r7, #14]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2213      	movs	r2, #19
 80047f8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 ff05 	bl	800560c <CODEC_IO_Write>
 8004802:	4603      	mov	r3, r0
 8004804:	461a      	mov	r2, r3
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	61fb      	str	r3, [r7, #28]
    break;
 800480c:	e029      	b.n	8004862 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800480e:	89fb      	ldrh	r3, [r7, #14]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2243      	movs	r2, #67	; 0x43
 8004814:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fef7 	bl	800560c <CODEC_IO_Write>
 800481e:	4603      	mov	r3, r0
 8004820:	461a      	mov	r2, r3
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	61fb      	str	r3, [r7, #28]
    break;
 8004828:	e01b      	b.n	8004862 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800482a:	89fb      	ldrh	r3, [r7, #14]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2273      	movs	r2, #115	; 0x73
 8004830:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fee9 	bl	800560c <CODEC_IO_Write>
 800483a:	4603      	mov	r3, r0
 800483c:	461a      	mov	r2, r3
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	61fb      	str	r3, [r7, #28]
    break; 
 8004844:	e00d      	b.n	8004862 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004846:	89fb      	ldrh	r3, [r7, #14]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2283      	movs	r2, #131	; 0x83
 800484c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fedb 	bl	800560c <CODEC_IO_Write>
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	61fb      	str	r3, [r7, #28]
    break; 
 8004860:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004862:	8afb      	ldrh	r3, [r7, #22]
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004868:	d10e      	bne.n	8004888 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800486a:	89fb      	ldrh	r3, [r7, #14]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f244 0218 	movw	r2, #16408	; 0x4018
 8004872:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fec8 	bl	800560c <CODEC_IO_Write>
 800487c:	4603      	mov	r3, r0
 800487e:	461a      	mov	r2, r3
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4413      	add	r3, r2
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	e00d      	b.n	80048a4 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8004888:	89fb      	ldrh	r3, [r7, #14]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f244 0210 	movw	r2, #16400	; 0x4010
 8004890:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004894:	4618      	mov	r0, r3
 8004896:	f000 feb9 	bl	800560c <CODEC_IO_Write>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	4413      	add	r3, r2
 80048a2:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80048a4:	89fb      	ldrh	r3, [r7, #14]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2200      	movs	r2, #0
 80048aa:	f240 3102 	movw	r1, #770	; 0x302
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 feac 	bl	800560c <CODEC_IO_Write>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80048be:	89fb      	ldrh	r3, [r7, #14]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	220a      	movs	r2, #10
 80048c4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fe9f 	bl	800560c <CODEC_IO_Write>
 80048ce:	4603      	mov	r3, r0
 80048d0:	461a      	mov	r2, r3
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80048d8:	89fb      	ldrh	r3, [r7, #14]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2201      	movs	r2, #1
 80048de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fe92 	bl	800560c <CODEC_IO_Write>
 80048e8:	4603      	mov	r3, r0
 80048ea:	461a      	mov	r2, r3
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	4413      	add	r3, r2
 80048f0:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80048f2:	8b3b      	ldrh	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 817b 	beq.w	8004bf0 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80048fa:	8b3b      	ldrh	r3, [r7, #24]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d157      	bne.n	80049b0 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8004900:	89fb      	ldrh	r3, [r7, #14]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004908:	212d      	movs	r1, #45	; 0x2d
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fe7e 	bl	800560c <CODEC_IO_Write>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800491a:	89fb      	ldrh	r3, [r7, #14]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004922:	212e      	movs	r1, #46	; 0x2e
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fe71 	bl	800560c <CODEC_IO_Write>
 800492a:	4603      	mov	r3, r0
 800492c:	461a      	mov	r2, r3
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8004934:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <wm8994_Init+0x998>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 800493c:	89fb      	ldrh	r3, [r7, #14]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8004944:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fe5f 	bl	800560c <CODEC_IO_Write>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <wm8994_Init+0x998>)
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800495e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004962:	f7fd faf9 	bl	8001f58 <AUDIO_IO_Delay>
 8004966:	e016      	b.n	8004996 <wm8994_Init+0x9be>
 8004968:	20000694 	.word	0x20000694
 800496c:	00017700 	.word	0x00017700
 8004970:	20000074 	.word	0x20000074
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8004974:	89fb      	ldrh	r3, [r7, #14]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f248 1208 	movw	r2, #33032	; 0x8108
 800497c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fe43 	bl	800560c <CODEC_IO_Write>
 8004986:	4603      	mov	r3, r0
 8004988:	461a      	mov	r2, r3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8004990:	2032      	movs	r0, #50	; 0x32
 8004992:	f7fd fae1 	bl	8001f58 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8004996:	89fb      	ldrh	r3, [r7, #14]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2200      	movs	r2, #0
 800499c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fe33 	bl	800560c <CODEC_IO_Write>
 80049a6:	4603      	mov	r3, r0
 80049a8:	461a      	mov	r2, r3
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80049b0:	89fb      	ldrh	r3, [r7, #14]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80049b8:	2103      	movs	r1, #3
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fe26 	bl	800560c <CODEC_IO_Write>
 80049c0:	4603      	mov	r3, r0
 80049c2:	461a      	mov	r2, r3
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80049ca:	89fb      	ldrh	r3, [r7, #14]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2200      	movs	r2, #0
 80049d0:	2122      	movs	r1, #34	; 0x22
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fe1a 	bl	800560c <CODEC_IO_Write>
 80049d8:	4603      	mov	r3, r0
 80049da:	461a      	mov	r2, r3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80049e2:	89fb      	ldrh	r3, [r7, #14]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2200      	movs	r2, #0
 80049e8:	2123      	movs	r1, #35	; 0x23
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fe0e 	bl	800560c <CODEC_IO_Write>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80049fa:	89fb      	ldrh	r3, [r7, #14]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004a02:	2136      	movs	r1, #54	; 0x36
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fe01 	bl	800560c <CODEC_IO_Write>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8004a14:	89fb      	ldrh	r3, [r7, #14]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f243 0203 	movw	r2, #12291	; 0x3003
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fdf4 	bl	800560c <CODEC_IO_Write>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461a      	mov	r2, r3
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004a2e:	8afb      	ldrh	r3, [r7, #22]
 8004a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a34:	d10d      	bne.n	8004a52 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8004a36:	89fb      	ldrh	r3, [r7, #14]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	f240 2205 	movw	r2, #517	; 0x205
 8004a3e:	2151      	movs	r1, #81	; 0x51
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fde3 	bl	800560c <CODEC_IO_Write>
 8004a46:	4603      	mov	r3, r0
 8004a48:	461a      	mov	r2, r3
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	e00b      	b.n	8004a6a <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8004a52:	89fb      	ldrh	r3, [r7, #14]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2205      	movs	r2, #5
 8004a58:	2151      	movs	r1, #81	; 0x51
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fdd6 	bl	800560c <CODEC_IO_Write>
 8004a60:	4603      	mov	r3, r0
 8004a62:	461a      	mov	r2, r3
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8004a6a:	8b7b      	ldrh	r3, [r7, #26]
 8004a6c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8004a70:	f043 0303 	orr.w	r3, r3, #3
 8004a74:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	8b7a      	ldrh	r2, [r7, #26]
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fdc4 	bl	800560c <CODEC_IO_Write>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461a      	mov	r2, r3
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8004a8e:	89fb      	ldrh	r3, [r7, #14]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2222      	movs	r2, #34	; 0x22
 8004a94:	2160      	movs	r1, #96	; 0x60
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fdb8 	bl	800560c <CODEC_IO_Write>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8004aa6:	89fb      	ldrh	r3, [r7, #14]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f649 7225 	movw	r2, #40741	; 0x9f25
 8004aae:	214c      	movs	r1, #76	; 0x4c
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fdab 	bl	800560c <CODEC_IO_Write>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	461a      	mov	r2, r3
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8004ac0:	200f      	movs	r0, #15
 8004ac2:	f7fd fa49 	bl	8001f58 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8004ac6:	89fb      	ldrh	r3, [r7, #14]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2201      	movs	r2, #1
 8004acc:	212d      	movs	r1, #45	; 0x2d
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fd9c 	bl	800560c <CODEC_IO_Write>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	4413      	add	r3, r2
 8004adc:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8004ade:	89fb      	ldrh	r3, [r7, #14]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	212e      	movs	r1, #46	; 0x2e
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fd90 	bl	800560c <CODEC_IO_Write>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	4413      	add	r3, r2
 8004af4:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8004af6:	89fb      	ldrh	r3, [r7, #14]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004afe:	2103      	movs	r1, #3
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fd83 	bl	800560c <CODEC_IO_Write>
 8004b06:	4603      	mov	r3, r0
 8004b08:	461a      	mov	r2, r3
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8004b10:	89fb      	ldrh	r3, [r7, #14]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2233      	movs	r2, #51	; 0x33
 8004b16:	2154      	movs	r1, #84	; 0x54
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fd77 	bl	800560c <CODEC_IO_Write>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	461a      	mov	r2, r3
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8004b28:	f240 1001 	movw	r0, #257	; 0x101
 8004b2c:	f7fd fa14 	bl	8001f58 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8004b30:	89fb      	ldrh	r3, [r7, #14]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	22ee      	movs	r2, #238	; 0xee
 8004b36:	2160      	movs	r1, #96	; 0x60
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fd67 	bl	800560c <CODEC_IO_Write>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	461a      	mov	r2, r3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8004b48:	89fb      	ldrh	r3, [r7, #14]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	22c0      	movs	r2, #192	; 0xc0
 8004b4e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fd5a 	bl	800560c <CODEC_IO_Write>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8004b62:	89fb      	ldrh	r3, [r7, #14]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	22c0      	movs	r2, #192	; 0xc0
 8004b68:	f240 6111 	movw	r1, #1553	; 0x611
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fd4d 	bl	800560c <CODEC_IO_Write>
 8004b72:	4603      	mov	r3, r0
 8004b74:	461a      	mov	r2, r3
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8004b7c:	89fb      	ldrh	r3, [r7, #14]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2210      	movs	r2, #16
 8004b82:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fd40 	bl	800560c <CODEC_IO_Write>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	4413      	add	r3, r2
 8004b94:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8004b96:	89fb      	ldrh	r3, [r7, #14]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	22c0      	movs	r2, #192	; 0xc0
 8004b9c:	f240 6112 	movw	r1, #1554	; 0x612
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fd33 	bl	800560c <CODEC_IO_Write>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461a      	mov	r2, r3
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8004bb0:	89fb      	ldrh	r3, [r7, #14]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	22c0      	movs	r2, #192	; 0xc0
 8004bb6:	f240 6113 	movw	r1, #1555	; 0x613
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fd26 	bl	800560c <CODEC_IO_Write>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8004bca:	89fb      	ldrh	r3, [r7, #14]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2210      	movs	r2, #16
 8004bd0:	f240 4122 	movw	r1, #1058	; 0x422
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fd19 	bl	800560c <CODEC_IO_Write>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	461a      	mov	r2, r3
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004be4:	7afa      	ldrb	r2, [r7, #11]
 8004be6:	89fb      	ldrh	r3, [r7, #14]
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f984 	bl	8004ef8 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8004bf0:	8afb      	ldrh	r3, [r7, #22]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80a6 	beq.w	8004d44 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004bf8:	8afb      	ldrh	r3, [r7, #22]
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d003      	beq.n	8004c08 <wm8994_Init+0xc30>
 8004c00:	8afb      	ldrh	r3, [r7, #22]
 8004c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c06:	d12b      	bne.n	8004c60 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004c08:	8b7b      	ldrh	r3, [r7, #26]
 8004c0a:	f043 0313 	orr.w	r3, r3, #19
 8004c0e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004c10:	89fb      	ldrh	r3, [r7, #14]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	8b7a      	ldrh	r2, [r7, #26]
 8004c16:	2101      	movs	r1, #1
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fcf7 	bl	800560c <CODEC_IO_Write>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	461a      	mov	r2, r3
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4413      	add	r3, r2
 8004c26:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004c28:	89fb      	ldrh	r3, [r7, #14]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fcea 	bl	800560c <CODEC_IO_Write>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8004c42:	89fb      	ldrh	r3, [r7, #14]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004c4a:	f240 4111 	movw	r1, #1041	; 0x411
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fcdc 	bl	800560c <CODEC_IO_Write>
 8004c54:	4603      	mov	r3, r0
 8004c56:	461a      	mov	r2, r3
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	e06b      	b.n	8004d38 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004c60:	8afb      	ldrh	r3, [r7, #22]
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c66:	d139      	bne.n	8004cdc <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004c68:	8b7b      	ldrh	r3, [r7, #26]
 8004c6a:	f043 0313 	orr.w	r3, r3, #19
 8004c6e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004c70:	89fb      	ldrh	r3, [r7, #14]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	8b7a      	ldrh	r2, [r7, #26]
 8004c76:	2101      	movs	r1, #1
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fcc7 	bl	800560c <CODEC_IO_Write>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	461a      	mov	r2, r3
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004c88:	89fb      	ldrh	r3, [r7, #14]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fcba 	bl	800560c <CODEC_IO_Write>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004ca2:	89fb      	ldrh	r3, [r7, #14]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004caa:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fcac 	bl	800560c <CODEC_IO_Write>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	4413      	add	r3, r2
 8004cbc:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8004cbe:	89fb      	ldrh	r3, [r7, #14]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004cc6:	f240 4111 	movw	r1, #1041	; 0x411
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fc9e 	bl	800560c <CODEC_IO_Write>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	e02d      	b.n	8004d38 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8004cdc:	8afb      	ldrh	r3, [r7, #22]
 8004cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce2:	d003      	beq.n	8004cec <wm8994_Init+0xd14>
 8004ce4:	8afb      	ldrh	r3, [r7, #22]
 8004ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cea:	d125      	bne.n	8004d38 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8004cec:	89fb      	ldrh	r3, [r7, #14]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	220b      	movs	r2, #11
 8004cf2:	2118      	movs	r1, #24
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fc89 	bl	800560c <CODEC_IO_Write>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8004d04:	89fb      	ldrh	r3, [r7, #14]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	220b      	movs	r2, #11
 8004d0a:	211a      	movs	r1, #26
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fc7d 	bl	800560c <CODEC_IO_Write>
 8004d12:	4603      	mov	r3, r0
 8004d14:	461a      	mov	r2, r3
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004d1c:	89fb      	ldrh	r3, [r7, #14]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004d24:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fc6f 	bl	800560c <CODEC_IO_Write>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004d38:	7afa      	ldrb	r2, [r7, #11]
 8004d3a:	89fb      	ldrh	r3, [r7, #14]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f8da 	bl	8004ef8 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8004d44:	69fb      	ldr	r3, [r7, #28]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop

08004d50 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8004d54:	f7fd f8a2 	bl	8001e9c <AUDIO_IO_DeInit>
}
 8004d58:	bf00      	nop
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8004d66:	f7fd f88f 	bl	8001e88 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fd f8c5 	bl	8001f00 <AUDIO_IO_Read>
 8004d76:	4603      	mov	r3, r0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	6039      	str	r1, [r7, #0]
 8004d8a:	80fb      	strh	r3, [r7, #6]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 f9d1 	bl	8005140 <wm8994_SetMute>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004da6:	68fb      	ldr	r3, [r7, #12]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f9bc 	bl	8005140 <wm8994_SetMute>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	2102      	movs	r1, #2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fc17 	bl	800560c <CODEC_IO_Write>
 8004dde:	4603      	mov	r3, r0
 8004de0:	461a      	mov	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8004de8:	68fb      	ldr	r3, [r7, #12]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	4603      	mov	r3, r0
 8004dfa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f99b 	bl	8005140 <wm8994_SetMute>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004e12:	68fb      	ldr	r3, [r7, #12]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	6039      	str	r1, [r7, #0]
 8004e26:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8004e2c:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <wm8994_Stop+0xd8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05a      	beq.n	8004eea <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	2101      	movs	r1, #1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f981 	bl	8005140 <wm8994_SetMute>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d04e      	beq.n	8004eea <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e54:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fbd7 	bl	800560c <CODEC_IO_Write>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	461a      	mov	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e70:	f240 4122 	movw	r1, #1058	; 0x422
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fbc9 	bl	800560c <CODEC_IO_Write>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2200      	movs	r2, #0
 8004e8a:	212d      	movs	r1, #45	; 0x2d
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fbbd 	bl	800560c <CODEC_IO_Write>
 8004e92:	4603      	mov	r3, r0
 8004e94:	461a      	mov	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	212e      	movs	r1, #46	; 0x2e
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fbb1 	bl	800560c <CODEC_IO_Write>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	461a      	mov	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8004eb4:	88fb      	ldrh	r3, [r7, #6]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2105      	movs	r1, #5
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fba5 	bl	800560c <CODEC_IO_Write>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fb99 	bl	800560c <CODEC_IO_Write>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8004ee4:	4b03      	ldr	r3, [pc, #12]	; (8004ef4 <wm8994_Stop+0xd8>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8004eea:	68fb      	ldr	r3, [r7, #12]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000690 	.word	0x20000690

08004ef8 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	460a      	mov	r2, r1
 8004f02:	80fb      	strh	r3, [r7, #6]
 8004f04:	4613      	mov	r3, r2
 8004f06:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004f0c:	797b      	ldrb	r3, [r7, #5]
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d80b      	bhi.n	8004f2a <wm8994_SetVolume+0x32>
 8004f12:	797a      	ldrb	r2, [r7, #5]
 8004f14:	4613      	mov	r3, r2
 8004f16:	019b      	lsls	r3, r3, #6
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	4a86      	ldr	r2, [pc, #536]	; (8005134 <wm8994_SetVolume+0x23c>)
 8004f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8004f20:	1152      	asrs	r2, r2, #5
 8004f22:	17db      	asrs	r3, r3, #31
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	e000      	b.n	8004f2c <wm8994_SetVolume+0x34>
 8004f2a:	2364      	movs	r3, #100	; 0x64
 8004f2c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004f2e:	4b82      	ldr	r3, [pc, #520]	; (8005138 <wm8994_SetVolume+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 809b 	beq.w	800506e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8004f38:	7afb      	ldrb	r3, [r7, #11]
 8004f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f3c:	d93d      	bls.n	8004fba <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2100      	movs	r1, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f8fc 	bl	8005140 <wm8994_SetMute>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f240 127f 	movw	r2, #383	; 0x17f
 8004f58:	211c      	movs	r1, #28
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fb56 	bl	800560c <CODEC_IO_Write>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461a      	mov	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f240 127f 	movw	r2, #383	; 0x17f
 8004f72:	211d      	movs	r1, #29
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fb49 	bl	800560c <CODEC_IO_Write>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4413      	add	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f240 127f 	movw	r2, #383	; 0x17f
 8004f8c:	2126      	movs	r1, #38	; 0x26
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fb3c 	bl	800560c <CODEC_IO_Write>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	f240 127f 	movw	r2, #383	; 0x17f
 8004fa6:	2127      	movs	r1, #39	; 0x27
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fb2f 	bl	800560c <CODEC_IO_Write>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e059      	b.n	800506e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8004fba:	797b      	ldrb	r3, [r7, #5]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 f8bb 	bl	8005140 <wm8994_SetMute>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e04c      	b.n	800506e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f8b1 	bl	8005140 <wm8994_SetMute>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	b2d8      	uxtb	r0, r3
 8004fea:	7afb      	ldrb	r3, [r7, #11]
 8004fec:	b21b      	sxth	r3, r3
 8004fee:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004ff2:	b21b      	sxth	r3, r3
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	211c      	movs	r1, #28
 8004ffa:	f000 fb07 	bl	800560c <CODEC_IO_Write>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461a      	mov	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	b2d8      	uxtb	r0, r3
 800500c:	7afb      	ldrb	r3, [r7, #11]
 800500e:	b21b      	sxth	r3, r3
 8005010:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005014:	b21b      	sxth	r3, r3
 8005016:	b29b      	uxth	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	211d      	movs	r1, #29
 800501c:	f000 faf6 	bl	800560c <CODEC_IO_Write>
 8005020:	4603      	mov	r3, r0
 8005022:	461a      	mov	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	b2d8      	uxtb	r0, r3
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	b21b      	sxth	r3, r3
 8005032:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005036:	b21b      	sxth	r3, r3
 8005038:	b29b      	uxth	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	2126      	movs	r1, #38	; 0x26
 800503e:	f000 fae5 	bl	800560c <CODEC_IO_Write>
 8005042:	4603      	mov	r3, r0
 8005044:	461a      	mov	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	b2d8      	uxtb	r0, r3
 8005050:	7afb      	ldrb	r3, [r7, #11]
 8005052:	b21b      	sxth	r3, r3
 8005054:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005058:	b21b      	sxth	r3, r3
 800505a:	b29b      	uxth	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	2127      	movs	r1, #39	; 0x27
 8005060:	f000 fad4 	bl	800560c <CODEC_IO_Write>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800506e:	4b33      	ldr	r3, [pc, #204]	; (800513c <wm8994_SetVolume+0x244>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d059      	beq.n	800512a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8005076:	797b      	ldrb	r3, [r7, #5]
 8005078:	2b63      	cmp	r3, #99	; 0x63
 800507a:	d80c      	bhi.n	8005096 <wm8994_SetVolume+0x19e>
 800507c:	797a      	ldrb	r2, [r7, #5]
 800507e:	4613      	mov	r3, r2
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	4a2b      	ldr	r2, [pc, #172]	; (8005134 <wm8994_SetVolume+0x23c>)
 8005088:	fb82 1203 	smull	r1, r2, r2, r3
 800508c:	1152      	asrs	r2, r2, #5
 800508e:	17db      	asrs	r3, r3, #31
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	b2db      	uxtb	r3, r3
 8005094:	e000      	b.n	8005098 <wm8994_SetVolume+0x1a0>
 8005096:	23ef      	movs	r3, #239	; 0xef
 8005098:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	b2d8      	uxtb	r0, r3
 800509e:	7afb      	ldrb	r3, [r7, #11]
 80050a0:	b21b      	sxth	r3, r3
 80050a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a6:	b21b      	sxth	r3, r3
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050b0:	f000 faac 	bl	800560c <CODEC_IO_Write>
 80050b4:	4603      	mov	r3, r0
 80050b6:	461a      	mov	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	b2d8      	uxtb	r0, r3
 80050c2:	7afb      	ldrb	r3, [r7, #11]
 80050c4:	b21b      	sxth	r3, r3
 80050c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ca:	b21b      	sxth	r3, r3
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	f240 4101 	movw	r1, #1025	; 0x401
 80050d4:	f000 fa9a 	bl	800560c <CODEC_IO_Write>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	b2d8      	uxtb	r0, r3
 80050e6:	7afb      	ldrb	r3, [r7, #11]
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ee:	b21b      	sxth	r3, r3
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	f240 4104 	movw	r1, #1028	; 0x404
 80050f8:	f000 fa88 	bl	800560c <CODEC_IO_Write>
 80050fc:	4603      	mov	r3, r0
 80050fe:	461a      	mov	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	b2d8      	uxtb	r0, r3
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	b21b      	sxth	r3, r3
 800510e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005112:	b21b      	sxth	r3, r3
 8005114:	b29b      	uxth	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	f240 4105 	movw	r1, #1029	; 0x405
 800511c:	f000 fa76 	bl	800560c <CODEC_IO_Write>
 8005120:	4603      	mov	r3, r0
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800512a:	68fb      	ldr	r3, [r7, #12]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	51eb851f 	.word	0x51eb851f
 8005138:	20000690 	.word	0x20000690
 800513c:	20000694 	.word	0x20000694

08005140 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	6039      	str	r1, [r7, #0]
 800514a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8005150:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <wm8994_SetMute+0x98>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d039      	beq.n	80051cc <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d11c      	bne.n	8005198 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005166:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fa4e 	bl	800560c <CODEC_IO_Write>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005182:	f240 4122 	movw	r1, #1058	; 0x422
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fa40 	bl	800560c <CODEC_IO_Write>
 800518c:	4603      	mov	r3, r0
 800518e:	461a      	mov	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e019      	b.n	80051cc <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2210      	movs	r2, #16
 800519e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fa32 	bl	800560c <CODEC_IO_Write>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461a      	mov	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2210      	movs	r2, #16
 80051b8:	f240 4122 	movw	r1, #1058	; 0x422
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fa25 	bl	800560c <CODEC_IO_Write>
 80051c2:	4603      	mov	r3, r0
 80051c4:	461a      	mov	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80051cc:	68fb      	ldr	r3, [r7, #12]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000690 	.word	0x20000690

080051dc <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	460a      	mov	r2, r1
 80051e6:	80fb      	strh	r3, [r7, #6]
 80051e8:	4613      	mov	r3, r2
 80051ea:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80051f0:	797b      	ldrb	r3, [r7, #5]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	f000 808c 	beq.w	8005310 <wm8994_SetOutputMode+0x134>
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	f300 80cb 	bgt.w	8005394 <wm8994_SetOutputMode+0x1b8>
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d002      	beq.n	8005208 <wm8994_SetOutputMode+0x2c>
 8005202:	2b02      	cmp	r3, #2
 8005204:	d042      	beq.n	800528c <wm8994_SetOutputMode+0xb0>
 8005206:	e0c5      	b.n	8005394 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005210:	2105      	movs	r1, #5
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f9fa 	bl	800560c <CODEC_IO_Write>
 8005218:	4603      	mov	r3, r0
 800521a:	461a      	mov	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2200      	movs	r2, #0
 8005228:	f240 6101 	movw	r1, #1537	; 0x601
 800522c:	4618      	mov	r0, r3
 800522e:	f000 f9ed 	bl	800560c <CODEC_IO_Write>
 8005232:	4603      	mov	r3, r0
 8005234:	461a      	mov	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2200      	movs	r2, #0
 8005242:	f240 6102 	movw	r1, #1538	; 0x602
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f9e0 	bl	800560c <CODEC_IO_Write>
 800524c:	4603      	mov	r3, r0
 800524e:	461a      	mov	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2202      	movs	r2, #2
 800525c:	f240 6104 	movw	r1, #1540	; 0x604
 8005260:	4618      	mov	r0, r3
 8005262:	f000 f9d3 	bl	800560c <CODEC_IO_Write>
 8005266:	4603      	mov	r3, r0
 8005268:	461a      	mov	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2202      	movs	r2, #2
 8005276:	f240 6105 	movw	r1, #1541	; 0x605
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f9c6 	bl	800560c <CODEC_IO_Write>
 8005280:	4603      	mov	r3, r0
 8005282:	461a      	mov	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
    break;
 800528a:	e0c5      	b.n	8005418 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f240 3203 	movw	r2, #771	; 0x303
 8005294:	2105      	movs	r1, #5
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f9b8 	bl	800560c <CODEC_IO_Write>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2201      	movs	r2, #1
 80052ac:	f240 6101 	movw	r1, #1537	; 0x601
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 f9ab 	bl	800560c <CODEC_IO_Write>
 80052b6:	4603      	mov	r3, r0
 80052b8:	461a      	mov	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2201      	movs	r2, #1
 80052c6:	f240 6102 	movw	r1, #1538	; 0x602
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f99e 	bl	800560c <CODEC_IO_Write>
 80052d0:	4603      	mov	r3, r0
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2200      	movs	r2, #0
 80052e0:	f240 6104 	movw	r1, #1540	; 0x604
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f991 	bl	800560c <CODEC_IO_Write>
 80052ea:	4603      	mov	r3, r0
 80052ec:	461a      	mov	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2200      	movs	r2, #0
 80052fa:	f240 6105 	movw	r1, #1541	; 0x605
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f984 	bl	800560c <CODEC_IO_Write>
 8005304:	4603      	mov	r3, r0
 8005306:	461a      	mov	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
    break;
 800530e:	e083      	b.n	8005418 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005318:	2105      	movs	r1, #5
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f976 	bl	800560c <CODEC_IO_Write>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2201      	movs	r2, #1
 8005330:	f240 6101 	movw	r1, #1537	; 0x601
 8005334:	4618      	mov	r0, r3
 8005336:	f000 f969 	bl	800560c <CODEC_IO_Write>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2201      	movs	r2, #1
 800534a:	f240 6102 	movw	r1, #1538	; 0x602
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f95c 	bl	800560c <CODEC_IO_Write>
 8005354:	4603      	mov	r3, r0
 8005356:	461a      	mov	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2202      	movs	r2, #2
 8005364:	f240 6104 	movw	r1, #1540	; 0x604
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f94f 	bl	800560c <CODEC_IO_Write>
 800536e:	4603      	mov	r3, r0
 8005370:	461a      	mov	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2202      	movs	r2, #2
 800537e:	f240 6105 	movw	r1, #1541	; 0x605
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f942 	bl	800560c <CODEC_IO_Write>
 8005388:	4603      	mov	r3, r0
 800538a:	461a      	mov	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
    break;
 8005392:	e041      	b.n	8005418 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f240 3203 	movw	r2, #771	; 0x303
 800539c:	2105      	movs	r1, #5
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f934 	bl	800560c <CODEC_IO_Write>
 80053a4:	4603      	mov	r3, r0
 80053a6:	461a      	mov	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2201      	movs	r2, #1
 80053b4:	f240 6101 	movw	r1, #1537	; 0x601
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 f927 	bl	800560c <CODEC_IO_Write>
 80053be:	4603      	mov	r3, r0
 80053c0:	461a      	mov	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2201      	movs	r2, #1
 80053ce:	f240 6102 	movw	r1, #1538	; 0x602
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 f91a 	bl	800560c <CODEC_IO_Write>
 80053d8:	4603      	mov	r3, r0
 80053da:	461a      	mov	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2200      	movs	r2, #0
 80053e8:	f240 6104 	movw	r1, #1540	; 0x604
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f90d 	bl	800560c <CODEC_IO_Write>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2200      	movs	r2, #0
 8005402:	f240 6105 	movw	r1, #1541	; 0x605
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f900 	bl	800560c <CODEC_IO_Write>
 800540c:	4603      	mov	r3, r0
 800540e:	461a      	mov	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
    break;    
 8005416:	bf00      	nop
  }  
  return counter;
 8005418:	68fb      	ldr	r3, [r7, #12]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	6039      	str	r1, [r7, #0]
 800542e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	4a64      	ldr	r2, [pc, #400]	; (80055c8 <wm8994_SetFrequency+0x1a4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d079      	beq.n	8005530 <wm8994_SetFrequency+0x10c>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	4a62      	ldr	r2, [pc, #392]	; (80055c8 <wm8994_SetFrequency+0x1a4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	f200 80ad 	bhi.w	80055a0 <wm8994_SetFrequency+0x17c>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800544c:	4293      	cmp	r3, r2
 800544e:	d061      	beq.n	8005514 <wm8994_SetFrequency+0xf0>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005456:	4293      	cmp	r3, r2
 8005458:	f200 80a2 	bhi.w	80055a0 <wm8994_SetFrequency+0x17c>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005462:	4293      	cmp	r3, r2
 8005464:	f000 808e 	beq.w	8005584 <wm8994_SetFrequency+0x160>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800546e:	4293      	cmp	r3, r2
 8005470:	f200 8096 	bhi.w	80055a0 <wm8994_SetFrequency+0x17c>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800547a:	d03d      	beq.n	80054f8 <wm8994_SetFrequency+0xd4>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005482:	f200 808d 	bhi.w	80055a0 <wm8994_SetFrequency+0x17c>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f245 6222 	movw	r2, #22050	; 0x5622
 800548c:	4293      	cmp	r3, r2
 800548e:	d06b      	beq.n	8005568 <wm8994_SetFrequency+0x144>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	f245 6222 	movw	r2, #22050	; 0x5622
 8005496:	4293      	cmp	r3, r2
 8005498:	f200 8082 	bhi.w	80055a0 <wm8994_SetFrequency+0x17c>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80054a2:	d01b      	beq.n	80054dc <wm8994_SetFrequency+0xb8>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80054aa:	d879      	bhi.n	80055a0 <wm8994_SetFrequency+0x17c>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80054b2:	d005      	beq.n	80054c0 <wm8994_SetFrequency+0x9c>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d046      	beq.n	800554c <wm8994_SetFrequency+0x128>
 80054be:	e06f      	b.n	80055a0 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2203      	movs	r2, #3
 80054c6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 f89e 	bl	800560c <CODEC_IO_Write>
 80054d0:	4603      	mov	r3, r0
 80054d2:	461a      	mov	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
    break;
 80054da:	e06f      	b.n	80055bc <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2233      	movs	r2, #51	; 0x33
 80054e2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f890 	bl	800560c <CODEC_IO_Write>
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
    break;
 80054f6:	e061      	b.n	80055bc <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2263      	movs	r2, #99	; 0x63
 80054fe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f882 	bl	800560c <CODEC_IO_Write>
 8005508:	4603      	mov	r3, r0
 800550a:	461a      	mov	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
    break;
 8005512:	e053      	b.n	80055bc <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005514:	88fb      	ldrh	r3, [r7, #6]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2283      	movs	r2, #131	; 0x83
 800551a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f874 	bl	800560c <CODEC_IO_Write>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
    break;
 800552e:	e045      	b.n	80055bc <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	22a3      	movs	r2, #163	; 0xa3
 8005536:	f44f 7104 	mov.w	r1, #528	; 0x210
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f866 	bl	800560c <CODEC_IO_Write>
 8005540:	4603      	mov	r3, r0
 8005542:	461a      	mov	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
    break;
 800554a:	e037      	b.n	80055bc <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2213      	movs	r2, #19
 8005552:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005556:	4618      	mov	r0, r3
 8005558:	f000 f858 	bl	800560c <CODEC_IO_Write>
 800555c:	4603      	mov	r3, r0
 800555e:	461a      	mov	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
    break;
 8005566:	e029      	b.n	80055bc <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2243      	movs	r2, #67	; 0x43
 800556e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f84a 	bl	800560c <CODEC_IO_Write>
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
    break;
 8005582:	e01b      	b.n	80055bc <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8005584:	88fb      	ldrh	r3, [r7, #6]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2273      	movs	r2, #115	; 0x73
 800558a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f83c 	bl	800560c <CODEC_IO_Write>
 8005594:	4603      	mov	r3, r0
 8005596:	461a      	mov	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
    break; 
 800559e:	e00d      	b.n	80055bc <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2283      	movs	r2, #131	; 0x83
 80055a6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f82e 	bl	800560c <CODEC_IO_Write>
 80055b0:	4603      	mov	r3, r0
 80055b2:	461a      	mov	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
    break; 
 80055ba:	bf00      	nop
  }
  return counter;
 80055bc:	68fb      	ldr	r3, [r7, #12]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	00017700 	.word	0x00017700

080055cc <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2200      	movs	r2, #0
 80055e0:	2100      	movs	r1, #0
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f812 	bl	800560c <CODEC_IO_Write>
 80055e8:	4603      	mov	r3, r0
 80055ea:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <wm8994_Reset+0x38>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80055f2:	4b05      	ldr	r3, [pc, #20]	; (8005608 <wm8994_Reset+0x3c>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

  return counter;
 80055f8:	68fb      	ldr	r3, [r7, #12]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000690 	.word	0x20000690
 8005608:	20000694 	.word	0x20000694

0800560c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	71fb      	strb	r3, [r7, #7]
 8005616:	460b      	mov	r3, r1
 8005618:	80bb      	strh	r3, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8005622:	887a      	ldrh	r2, [r7, #2]
 8005624:	88b9      	ldrh	r1, [r7, #4]
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	4618      	mov	r0, r3
 800562a:	f7fc fc3f 	bl	8001eac <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	b2db      	uxtb	r3, r3
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800563c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005674 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005640:	480d      	ldr	r0, [pc, #52]	; (8005678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005642:	490e      	ldr	r1, [pc, #56]	; (800567c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005644:	4a0e      	ldr	r2, [pc, #56]	; (8005680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005648:	e002      	b.n	8005650 <LoopCopyDataInit>

0800564a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800564a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800564c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800564e:	3304      	adds	r3, #4

08005650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005654:	d3f9      	bcc.n	800564a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005656:	4a0b      	ldr	r2, [pc, #44]	; (8005684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005658:	4c0b      	ldr	r4, [pc, #44]	; (8005688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800565a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800565c:	e001      	b.n	8005662 <LoopFillZerobss>

0800565e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800565e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005660:	3204      	adds	r2, #4

08005662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005664:	d3fb      	bcc.n	800565e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005666:	f7fe fca5 	bl	8003fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800566a:	f00d fc85 	bl	8012f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800566e:	f7fb fa75 	bl	8000b5c <main>
  bx  lr    
 8005672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005674:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800567c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8005680:	08015178 	.word	0x08015178
  ldr r2, =_sbss
 8005684:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8005688:	20009700 	.word	0x20009700

0800568c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800568c:	e7fe      	b.n	800568c <ADC_IRQHandler>
	...

08005690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8005694:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <HAL_Init+0x28>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <HAL_Init+0x28>)
 800569a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800569e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056a0:	2003      	movs	r0, #3
 80056a2:	f000 f8fc 	bl	800589e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056a6:	2000      	movs	r0, #0
 80056a8:	f7fe fbd0 	bl	8003e4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80056ac:	f7fd ffa0 	bl	80035f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40023c00 	.word	0x40023c00

080056bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_IncTick+0x20>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_IncTick+0x24>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4413      	add	r3, r2
 80056cc:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <HAL_IncTick+0x24>)
 80056ce:	6013      	str	r3, [r2, #0]
}
 80056d0:	bf00      	nop
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	2000007c 	.word	0x2000007c
 80056e0:	20009250 	.word	0x20009250

080056e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  return uwTick;
 80056e8:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <HAL_GetTick+0x14>)
 80056ea:	681b      	ldr	r3, [r3, #0]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20009250 	.word	0x20009250

080056fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005704:	f7ff ffee 	bl	80056e4 <HAL_GetTick>
 8005708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d005      	beq.n	8005722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <HAL_Delay+0x44>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005722:	bf00      	nop
 8005724:	f7ff ffde 	bl	80056e4 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	429a      	cmp	r2, r3
 8005732:	d8f7      	bhi.n	8005724 <HAL_Delay+0x28>
  {
  }
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	2000007c 	.word	0x2000007c

08005744 <__NVIC_SetPriorityGrouping>:
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005754:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <__NVIC_SetPriorityGrouping+0x40>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005760:	4013      	ands	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <__NVIC_SetPriorityGrouping+0x44>)
 800576e:	4313      	orrs	r3, r2
 8005770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005772:	4a04      	ldr	r2, [pc, #16]	; (8005784 <__NVIC_SetPriorityGrouping+0x40>)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	60d3      	str	r3, [r2, #12]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	e000ed00 	.word	0xe000ed00
 8005788:	05fa0000 	.word	0x05fa0000

0800578c <__NVIC_GetPriorityGrouping>:
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005790:	4b04      	ldr	r3, [pc, #16]	; (80057a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	f003 0307 	and.w	r3, r3, #7
}
 800579a:	4618      	mov	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	e000ed00 	.word	0xe000ed00

080057a8 <__NVIC_EnableIRQ>:
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	db0b      	blt.n	80057d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	f003 021f 	and.w	r2, r3, #31
 80057c0:	4907      	ldr	r1, [pc, #28]	; (80057e0 <__NVIC_EnableIRQ+0x38>)
 80057c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2001      	movs	r0, #1
 80057ca:	fa00 f202 	lsl.w	r2, r0, r2
 80057ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	e000e100 	.word	0xe000e100

080057e4 <__NVIC_SetPriority>:
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	6039      	str	r1, [r7, #0]
 80057ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	db0a      	blt.n	800580e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	490c      	ldr	r1, [pc, #48]	; (8005830 <__NVIC_SetPriority+0x4c>)
 80057fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005802:	0112      	lsls	r2, r2, #4
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	440b      	add	r3, r1
 8005808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800580c:	e00a      	b.n	8005824 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4908      	ldr	r1, [pc, #32]	; (8005834 <__NVIC_SetPriority+0x50>)
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	3b04      	subs	r3, #4
 800581c:	0112      	lsls	r2, r2, #4
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	440b      	add	r3, r1
 8005822:	761a      	strb	r2, [r3, #24]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	e000e100 	.word	0xe000e100
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <NVIC_EncodePriority>:
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f1c3 0307 	rsb	r3, r3, #7
 8005852:	2b04      	cmp	r3, #4
 8005854:	bf28      	it	cs
 8005856:	2304      	movcs	r3, #4
 8005858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	3304      	adds	r3, #4
 800585e:	2b06      	cmp	r3, #6
 8005860:	d902      	bls.n	8005868 <NVIC_EncodePriority+0x30>
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3b03      	subs	r3, #3
 8005866:	e000      	b.n	800586a <NVIC_EncodePriority+0x32>
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800586c:	f04f 32ff 	mov.w	r2, #4294967295
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43da      	mvns	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	401a      	ands	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005880:	f04f 31ff 	mov.w	r1, #4294967295
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	fa01 f303 	lsl.w	r3, r1, r3
 800588a:	43d9      	mvns	r1, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005890:	4313      	orrs	r3, r2
}
 8005892:	4618      	mov	r0, r3
 8005894:	3724      	adds	r7, #36	; 0x24
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff ff4c 	bl	8005744 <__NVIC_SetPriorityGrouping>
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058c6:	f7ff ff61 	bl	800578c <__NVIC_GetPriorityGrouping>
 80058ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	6978      	ldr	r0, [r7, #20]
 80058d2:	f7ff ffb1 	bl	8005838 <NVIC_EncodePriority>
 80058d6:	4602      	mov	r2, r0
 80058d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058dc:	4611      	mov	r1, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ff80 	bl	80057e4 <__NVIC_SetPriority>
}
 80058e4:	bf00      	nop
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff54 	bl	80057a8 <__NVIC_EnableIRQ>
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005914:	f7ff fee6 	bl	80056e4 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e099      	b.n	8005a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005944:	e00f      	b.n	8005966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005946:	f7ff fecd 	bl	80056e4 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b05      	cmp	r3, #5
 8005952:	d908      	bls.n	8005966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2203      	movs	r2, #3
 800595e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e078      	b.n	8005a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e8      	bne.n	8005946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4b38      	ldr	r3, [pc, #224]	; (8005a60 <HAL_DMA_Init+0x158>)
 8005980:	4013      	ands	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800599e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d107      	bne.n	80059d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	4313      	orrs	r3, r2
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f023 0307 	bic.w	r3, r3, #7
 80059e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d117      	bne.n	8005a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00e      	beq.n	8005a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fb03 	bl	8006018 <DMA_CheckFifoParam>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2240      	movs	r2, #64	; 0x40
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a26:	2301      	movs	r3, #1
 8005a28:	e016      	b.n	8005a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 faba 	bl	8005fac <DMA_CalcBaseAndBitshift>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a40:	223f      	movs	r2, #63	; 0x3f
 8005a42:	409a      	lsls	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	f010803f 	.word	0xf010803f

08005a64 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e050      	b.n	8005b18 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d101      	bne.n	8005a86 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
 8005a84:	e048      	b.n	8005b18 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2221      	movs	r2, #33	; 0x21
 8005ac4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa70 	bl	8005fac <DMA_CalcBaseAndBitshift>
 8005acc:	4603      	mov	r3, r0
 8005ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad4:	223f      	movs	r2, #63	; 0x3f
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_DMA_Start_IT+0x26>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e048      	b.n	8005bd8 <HAL_DMA_Start_IT+0xb8>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d137      	bne.n	8005bca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f9ee 	bl	8005f50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b78:	223f      	movs	r2, #63	; 0x3f
 8005b7a:	409a      	lsls	r2, r3
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0216 	orr.w	r2, r2, #22
 8005b8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b9e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0208 	orr.w	r2, r2, #8
 8005bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	e005      	b.n	8005bd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d004      	beq.n	8005bfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2280      	movs	r2, #128	; 0x80
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e00c      	b.n	8005c18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2205      	movs	r2, #5
 8005c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0201 	bic.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005c30:	4b92      	ldr	r3, [pc, #584]	; (8005e7c <HAL_DMA_IRQHandler+0x258>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a92      	ldr	r2, [pc, #584]	; (8005e80 <HAL_DMA_IRQHandler+0x25c>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	0a9b      	lsrs	r3, r3, #10
 8005c3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4e:	2208      	movs	r2, #8
 8005c50:	409a      	lsls	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4013      	ands	r3, r2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01a      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d013      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0204 	bic.w	r2, r2, #4
 8005c76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	f043 0201 	orr.w	r2, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c94:	2201      	movs	r2, #1
 8005c96:	409a      	lsls	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d012      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	409a      	lsls	r2, r3
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f043 0202 	orr.w	r2, r3, #2
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	2204      	movs	r2, #4
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d012      	beq.n	8005cfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce8:	2204      	movs	r2, #4
 8005cea:	409a      	lsls	r2, r3
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf4:	f043 0204 	orr.w	r2, r3, #4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d00:	2210      	movs	r2, #16
 8005d02:	409a      	lsls	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d043      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d03c      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1e:	2210      	movs	r2, #16
 8005d20:	409a      	lsls	r2, r3
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d018      	beq.n	8005d66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d108      	bne.n	8005d54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d024      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
 8005d52:	e01f      	b.n	8005d94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01b      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3
 8005d64:	e016      	b.n	8005d94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d107      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0208 	bic.w	r2, r2, #8
 8005d82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	2220      	movs	r2, #32
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 808e 	beq.w	8005ec2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8086 	beq.w	8005ec2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dba:	2220      	movs	r2, #32
 8005dbc:	409a      	lsls	r2, r3
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d136      	bne.n	8005e3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0216 	bic.w	r2, r2, #22
 8005ddc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695a      	ldr	r2, [r3, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d103      	bne.n	8005dfe <HAL_DMA_IRQHandler+0x1da>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0208 	bic.w	r2, r2, #8
 8005e0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e12:	223f      	movs	r2, #63	; 0x3f
 8005e14:	409a      	lsls	r2, r3
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d07d      	beq.n	8005f2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
        }
        return;
 8005e3a:	e078      	b.n	8005f2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01c      	beq.n	8005e84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d108      	bne.n	8005e6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d030      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4798      	blx	r3
 8005e68:	e02b      	b.n	8005ec2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d027      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
 8005e7a:	e022      	b.n	8005ec2 <HAL_DMA_IRQHandler+0x29e>
 8005e7c:	20000040 	.word	0x20000040
 8005e80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10f      	bne.n	8005eb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0210 	bic.w	r2, r2, #16
 8005ea0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d032      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d022      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2205      	movs	r2, #5
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d307      	bcc.n	8005f0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f2      	bne.n	8005eee <HAL_DMA_IRQHandler+0x2ca>
 8005f08:	e000      	b.n	8005f0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005f0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
 8005f2c:	e000      	b.n	8005f30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005f2e:	bf00      	nop
    }
  }
}
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop

08005f38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d108      	bne.n	8005f90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f8e:	e007      	b.n	8005fa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	60da      	str	r2, [r3, #12]
}
 8005fa0:	bf00      	nop
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	3b10      	subs	r3, #16
 8005fbc:	4a13      	ldr	r2, [pc, #76]	; (800600c <DMA_CalcBaseAndBitshift+0x60>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005fc6:	4a12      	ldr	r2, [pc, #72]	; (8006010 <DMA_CalcBaseAndBitshift+0x64>)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d908      	bls.n	8005fec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <DMA_CalcBaseAndBitshift+0x68>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	1d1a      	adds	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	659a      	str	r2, [r3, #88]	; 0x58
 8005fea:	e006      	b.n	8005ffa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4b08      	ldr	r3, [pc, #32]	; (8006014 <DMA_CalcBaseAndBitshift+0x68>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	aaaaaaab 	.word	0xaaaaaaab
 8006010:	080150ac 	.word	0x080150ac
 8006014:	fffffc00 	.word	0xfffffc00

08006018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d11f      	bne.n	8006072 <DMA_CheckFifoParam+0x5a>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b03      	cmp	r3, #3
 8006036:	d856      	bhi.n	80060e6 <DMA_CheckFifoParam+0xce>
 8006038:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <DMA_CheckFifoParam+0x28>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	08006051 	.word	0x08006051
 8006044:	08006063 	.word	0x08006063
 8006048:	08006051 	.word	0x08006051
 800604c:	080060e7 	.word	0x080060e7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d046      	beq.n	80060ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006060:	e043      	b.n	80060ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800606a:	d140      	bne.n	80060ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006070:	e03d      	b.n	80060ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800607a:	d121      	bne.n	80060c0 <DMA_CheckFifoParam+0xa8>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d837      	bhi.n	80060f2 <DMA_CheckFifoParam+0xda>
 8006082:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <DMA_CheckFifoParam+0x70>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	08006099 	.word	0x08006099
 800608c:	0800609f 	.word	0x0800609f
 8006090:	08006099 	.word	0x08006099
 8006094:	080060b1 	.word	0x080060b1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	73fb      	strb	r3, [r7, #15]
      break;
 800609c:	e030      	b.n	8006100 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d025      	beq.n	80060f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ae:	e022      	b.n	80060f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060b8:	d11f      	bne.n	80060fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060be:	e01c      	b.n	80060fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d903      	bls.n	80060ce <DMA_CheckFifoParam+0xb6>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d003      	beq.n	80060d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060cc:	e018      	b.n	8006100 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	73fb      	strb	r3, [r7, #15]
      break;
 80060d2:	e015      	b.n	8006100 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00e      	beq.n	80060fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	73fb      	strb	r3, [r7, #15]
      break;
 80060e4:	e00b      	b.n	80060fe <DMA_CheckFifoParam+0xe6>
      break;
 80060e6:	bf00      	nop
 80060e8:	e00a      	b.n	8006100 <DMA_CheckFifoParam+0xe8>
      break;
 80060ea:	bf00      	nop
 80060ec:	e008      	b.n	8006100 <DMA_CheckFifoParam+0xe8>
      break;
 80060ee:	bf00      	nop
 80060f0:	e006      	b.n	8006100 <DMA_CheckFifoParam+0xe8>
      break;
 80060f2:	bf00      	nop
 80060f4:	e004      	b.n	8006100 <DMA_CheckFifoParam+0xe8>
      break;
 80060f6:	bf00      	nop
 80060f8:	e002      	b.n	8006100 <DMA_CheckFifoParam+0xe8>
      break;   
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <DMA_CheckFifoParam+0xe8>
      break;
 80060fe:	bf00      	nop
    }
  } 
  
  return status; 
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop

08006110 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e039      	b.n	8006196 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fd fa82 	bl	8003640 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006160:	f023 0107 	bic.w	r1, r3, #7
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006176:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <HAL_DMA2D_Init+0x90>)
 8006178:	4013      	ands	r3, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68d1      	ldr	r1, [r2, #12]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	430b      	orrs	r3, r1
 8006184:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	ffffc000 	.word	0xffffc000

080061a4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_DMA2D_Start+0x1c>
 80061bc:	2302      	movs	r3, #2
 80061be:	e018      	b.n	80061f2 <HAL_DMA2D_Start+0x4e>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f988 	bl	80064f0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b086      	sub	sp, #24
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d056      	beq.n	80062c4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006216:	f7ff fa65 	bl	80056e4 <HAL_GetTick>
 800621a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800621c:	e04b      	b.n	80062b6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800622c:	2b00      	cmp	r3, #0
 800622e:	d023      	beq.n	8006278 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623e:	f043 0202 	orr.w	r2, r3, #2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006254:	f043 0201 	orr.w	r2, r3, #1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2221      	movs	r2, #33	; 0x21
 8006262:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2204      	movs	r2, #4
 8006268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e0a5      	b.n	80063c4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627e:	d01a      	beq.n	80062b6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006280:	f7ff fa30 	bl	80056e4 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d302      	bcc.n	8006296 <HAL_DMA2D_PollForTransfer+0x9c>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10f      	bne.n	80062b6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	f043 0220 	orr.w	r2, r3, #32
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2203      	movs	r2, #3
 80062a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e086      	b.n	80063c4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0ac      	beq.n	800621e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d061      	beq.n	80063aa <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80062e6:	f7ff f9fd 	bl	80056e4 <HAL_GetTick>
 80062ea:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80062ec:	e056      	b.n	800639c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d02e      	beq.n	800635e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630e:	f043 0204 	orr.w	r2, r3, #4
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006324:	f043 0202 	orr.w	r2, r3, #2
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633a:	f043 0201 	orr.w	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2229      	movs	r2, #41	; 0x29
 8006348:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2204      	movs	r2, #4
 800634e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e032      	b.n	80063c4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d01a      	beq.n	800639c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006366:	f7ff f9bd 	bl	80056e4 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d302      	bcc.n	800637c <HAL_DMA2D_PollForTransfer+0x182>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10f      	bne.n	800639c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2203      	movs	r2, #3
 800638c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e013      	b.n	80063c4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0a1      	beq.n	80062ee <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2212      	movs	r2, #18
 80063b0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_DMA2D_ConfigLayer+0x20>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e079      	b.n	80064e0 <HAL_DMA2D_ConfigLayer+0x114>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	3318      	adds	r3, #24
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4413      	add	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	041b      	lsls	r3, r3, #16
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006416:	4b35      	ldr	r3, [pc, #212]	; (80064ec <HAL_DMA2D_ConfigLayer+0x120>)
 8006418:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b0a      	cmp	r3, #10
 8006420:	d003      	beq.n	800642a <HAL_DMA2D_ConfigLayer+0x5e>
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b09      	cmp	r3, #9
 8006428:	d107      	bne.n	800643a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e005      	b.n	8006446 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	061b      	lsls	r3, r3, #24
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d120      	bne.n	800648e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	43db      	mvns	r3, r3
 8006456:	ea02 0103 	and.w	r1, r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	430a      	orrs	r2, r1
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	6812      	ldr	r2, [r2, #0]
 800646c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b0a      	cmp	r3, #10
 8006474:	d003      	beq.n	800647e <HAL_DMA2D_ConfigLayer+0xb2>
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b09      	cmp	r3, #9
 800647c:	d127      	bne.n	80064ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800648a:	629a      	str	r2, [r3, #40]	; 0x28
 800648c:	e01f      	b.n	80064ce <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	43db      	mvns	r3, r3
 8006498:	ea02 0103 	and.w	r1, r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b0a      	cmp	r3, #10
 80064b6:	d003      	beq.n	80064c0 <HAL_DMA2D_ConfigLayer+0xf4>
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b09      	cmp	r3, #9
 80064be:	d106      	bne.n	80064ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80064cc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	ff03000f 	.word	0xff03000f

080064f0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b08b      	sub	sp, #44	; 0x2c
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006504:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	041a      	lsls	r2, r3, #16
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	431a      	orrs	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006528:	d174      	bne.n	8006614 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006530:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006538:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006540:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d108      	bne.n	8006562 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	431a      	orrs	r2, r3
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	4313      	orrs	r3, r2
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
 8006560:	e053      	b.n	800660a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d106      	bne.n	8006578 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4313      	orrs	r3, r2
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
 8006576:	e048      	b.n	800660a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d111      	bne.n	80065a4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	0cdb      	lsrs	r3, r3, #19
 8006584:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	0a9b      	lsrs	r3, r3, #10
 800658a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	08db      	lsrs	r3, r3, #3
 8006590:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	02db      	lsls	r3, r3, #11
 800659a:	4313      	orrs	r3, r2
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	e032      	b.n	800660a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d117      	bne.n	80065dc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	0fdb      	lsrs	r3, r3, #31
 80065b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	0cdb      	lsrs	r3, r3, #19
 80065b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	0adb      	lsrs	r3, r3, #11
 80065bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	08db      	lsrs	r3, r3, #3
 80065c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	029b      	lsls	r3, r3, #10
 80065cc:	431a      	orrs	r2, r3
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	03db      	lsls	r3, r3, #15
 80065d2:	4313      	orrs	r3, r2
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
 80065da:	e016      	b.n	800660a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	0f1b      	lsrs	r3, r3, #28
 80065e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	0d1b      	lsrs	r3, r3, #20
 80065e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	0b1b      	lsrs	r3, r3, #12
 80065ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	011a      	lsls	r2, r3, #4
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	431a      	orrs	r2, r3
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	031b      	lsls	r3, r3, #12
 8006602:	4313      	orrs	r3, r2
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006610:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006612:	e003      	b.n	800661c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	60da      	str	r2, [r3, #12]
}
 800661c:	bf00      	nop
 800661e:	372c      	adds	r7, #44	; 0x2c
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006628:	b480      	push	{r7}
 800662a:	b089      	sub	sp, #36	; 0x24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800663e:	2300      	movs	r3, #0
 8006640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	e175      	b.n	8006934 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006648:	2201      	movs	r2, #1
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4013      	ands	r3, r2
 800665a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	f040 8164 	bne.w	800692e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d00b      	beq.n	8006686 <HAL_GPIO_Init+0x5e>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d007      	beq.n	8006686 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800667a:	2b11      	cmp	r3, #17
 800667c:	d003      	beq.n	8006686 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b12      	cmp	r3, #18
 8006684:	d130      	bne.n	80066e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	2203      	movs	r2, #3
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	43db      	mvns	r3, r3
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	4013      	ands	r3, r2
 800669c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066bc:	2201      	movs	r2, #1
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	43db      	mvns	r3, r3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4013      	ands	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	091b      	lsrs	r3, r3, #4
 80066d2:	f003 0201 	and.w	r2, r3, #1
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4313      	orrs	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	2203      	movs	r2, #3
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	43db      	mvns	r3, r3
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	4013      	ands	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4313      	orrs	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d003      	beq.n	8006728 <HAL_GPIO_Init+0x100>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b12      	cmp	r3, #18
 8006726:	d123      	bne.n	8006770 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	08da      	lsrs	r2, r3, #3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3208      	adds	r2, #8
 8006730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	220f      	movs	r2, #15
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	43db      	mvns	r3, r3
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	4013      	ands	r3, r2
 800674a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	4313      	orrs	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	08da      	lsrs	r2, r3, #3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3208      	adds	r2, #8
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	2203      	movs	r2, #3
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	43db      	mvns	r3, r3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	4013      	ands	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 0203 	and.w	r2, r3, #3
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	4313      	orrs	r3, r2
 800679c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80be 	beq.w	800692e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067b2:	4b66      	ldr	r3, [pc, #408]	; (800694c <HAL_GPIO_Init+0x324>)
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	4a65      	ldr	r2, [pc, #404]	; (800694c <HAL_GPIO_Init+0x324>)
 80067b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067bc:	6453      	str	r3, [r2, #68]	; 0x44
 80067be:	4b63      	ldr	r3, [pc, #396]	; (800694c <HAL_GPIO_Init+0x324>)
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80067ca:	4a61      	ldr	r2, [pc, #388]	; (8006950 <HAL_GPIO_Init+0x328>)
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	089b      	lsrs	r3, r3, #2
 80067d0:	3302      	adds	r3, #2
 80067d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	220f      	movs	r2, #15
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43db      	mvns	r3, r3
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	4013      	ands	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a58      	ldr	r2, [pc, #352]	; (8006954 <HAL_GPIO_Init+0x32c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d037      	beq.n	8006866 <HAL_GPIO_Init+0x23e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a57      	ldr	r2, [pc, #348]	; (8006958 <HAL_GPIO_Init+0x330>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d031      	beq.n	8006862 <HAL_GPIO_Init+0x23a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a56      	ldr	r2, [pc, #344]	; (800695c <HAL_GPIO_Init+0x334>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02b      	beq.n	800685e <HAL_GPIO_Init+0x236>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a55      	ldr	r2, [pc, #340]	; (8006960 <HAL_GPIO_Init+0x338>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d025      	beq.n	800685a <HAL_GPIO_Init+0x232>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a54      	ldr	r2, [pc, #336]	; (8006964 <HAL_GPIO_Init+0x33c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01f      	beq.n	8006856 <HAL_GPIO_Init+0x22e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a53      	ldr	r2, [pc, #332]	; (8006968 <HAL_GPIO_Init+0x340>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d019      	beq.n	8006852 <HAL_GPIO_Init+0x22a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a52      	ldr	r2, [pc, #328]	; (800696c <HAL_GPIO_Init+0x344>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <HAL_GPIO_Init+0x226>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a51      	ldr	r2, [pc, #324]	; (8006970 <HAL_GPIO_Init+0x348>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00d      	beq.n	800684a <HAL_GPIO_Init+0x222>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a50      	ldr	r2, [pc, #320]	; (8006974 <HAL_GPIO_Init+0x34c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d007      	beq.n	8006846 <HAL_GPIO_Init+0x21e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a4f      	ldr	r2, [pc, #316]	; (8006978 <HAL_GPIO_Init+0x350>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d101      	bne.n	8006842 <HAL_GPIO_Init+0x21a>
 800683e:	2309      	movs	r3, #9
 8006840:	e012      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006842:	230a      	movs	r3, #10
 8006844:	e010      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006846:	2308      	movs	r3, #8
 8006848:	e00e      	b.n	8006868 <HAL_GPIO_Init+0x240>
 800684a:	2307      	movs	r3, #7
 800684c:	e00c      	b.n	8006868 <HAL_GPIO_Init+0x240>
 800684e:	2306      	movs	r3, #6
 8006850:	e00a      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006852:	2305      	movs	r3, #5
 8006854:	e008      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006856:	2304      	movs	r3, #4
 8006858:	e006      	b.n	8006868 <HAL_GPIO_Init+0x240>
 800685a:	2303      	movs	r3, #3
 800685c:	e004      	b.n	8006868 <HAL_GPIO_Init+0x240>
 800685e:	2302      	movs	r3, #2
 8006860:	e002      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006866:	2300      	movs	r3, #0
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	f002 0203 	and.w	r2, r2, #3
 800686e:	0092      	lsls	r2, r2, #2
 8006870:	4093      	lsls	r3, r2
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	4313      	orrs	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006878:	4935      	ldr	r1, [pc, #212]	; (8006950 <HAL_GPIO_Init+0x328>)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	089b      	lsrs	r3, r3, #2
 800687e:	3302      	adds	r3, #2
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006886:	4b3d      	ldr	r3, [pc, #244]	; (800697c <HAL_GPIO_Init+0x354>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	43db      	mvns	r3, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	4013      	ands	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068aa:	4a34      	ldr	r2, [pc, #208]	; (800697c <HAL_GPIO_Init+0x354>)
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80068b0:	4b32      	ldr	r3, [pc, #200]	; (800697c <HAL_GPIO_Init+0x354>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	43db      	mvns	r3, r3
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	4013      	ands	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068d4:	4a29      	ldr	r2, [pc, #164]	; (800697c <HAL_GPIO_Init+0x354>)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068da:	4b28      	ldr	r3, [pc, #160]	; (800697c <HAL_GPIO_Init+0x354>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	43db      	mvns	r3, r3
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	4013      	ands	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068fe:	4a1f      	ldr	r2, [pc, #124]	; (800697c <HAL_GPIO_Init+0x354>)
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <HAL_GPIO_Init+0x354>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	43db      	mvns	r3, r3
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	4013      	ands	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <HAL_GPIO_Init+0x354>)
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3301      	adds	r3, #1
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b0f      	cmp	r3, #15
 8006938:	f67f ae86 	bls.w	8006648 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	3724      	adds	r7, #36	; 0x24
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40023800 	.word	0x40023800
 8006950:	40013800 	.word	0x40013800
 8006954:	40020000 	.word	0x40020000
 8006958:	40020400 	.word	0x40020400
 800695c:	40020800 	.word	0x40020800
 8006960:	40020c00 	.word	0x40020c00
 8006964:	40021000 	.word	0x40021000
 8006968:	40021400 	.word	0x40021400
 800696c:	40021800 	.word	0x40021800
 8006970:	40021c00 	.word	0x40021c00
 8006974:	40022000 	.word	0x40022000
 8006978:	40022400 	.word	0x40022400
 800697c:	40013c00 	.word	0x40013c00

08006980 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800698a:	2300      	movs	r3, #0
 800698c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	e0d9      	b.n	8006b50 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800699c:	2201      	movs	r2, #1
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	4013      	ands	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	f040 80c9 	bne.w	8006b4a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80069b8:	4a6b      	ldr	r2, [pc, #428]	; (8006b68 <HAL_GPIO_DeInit+0x1e8>)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	089b      	lsrs	r3, r3, #2
 80069be:	3302      	adds	r3, #2
 80069c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	220f      	movs	r2, #15
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	4013      	ands	r3, r2
 80069d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a63      	ldr	r2, [pc, #396]	; (8006b6c <HAL_GPIO_DeInit+0x1ec>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d037      	beq.n	8006a52 <HAL_GPIO_DeInit+0xd2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a62      	ldr	r2, [pc, #392]	; (8006b70 <HAL_GPIO_DeInit+0x1f0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d031      	beq.n	8006a4e <HAL_GPIO_DeInit+0xce>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a61      	ldr	r2, [pc, #388]	; (8006b74 <HAL_GPIO_DeInit+0x1f4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d02b      	beq.n	8006a4a <HAL_GPIO_DeInit+0xca>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a60      	ldr	r2, [pc, #384]	; (8006b78 <HAL_GPIO_DeInit+0x1f8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d025      	beq.n	8006a46 <HAL_GPIO_DeInit+0xc6>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a5f      	ldr	r2, [pc, #380]	; (8006b7c <HAL_GPIO_DeInit+0x1fc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d01f      	beq.n	8006a42 <HAL_GPIO_DeInit+0xc2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a5e      	ldr	r2, [pc, #376]	; (8006b80 <HAL_GPIO_DeInit+0x200>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d019      	beq.n	8006a3e <HAL_GPIO_DeInit+0xbe>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a5d      	ldr	r2, [pc, #372]	; (8006b84 <HAL_GPIO_DeInit+0x204>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d013      	beq.n	8006a3a <HAL_GPIO_DeInit+0xba>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a5c      	ldr	r2, [pc, #368]	; (8006b88 <HAL_GPIO_DeInit+0x208>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00d      	beq.n	8006a36 <HAL_GPIO_DeInit+0xb6>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a5b      	ldr	r2, [pc, #364]	; (8006b8c <HAL_GPIO_DeInit+0x20c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d007      	beq.n	8006a32 <HAL_GPIO_DeInit+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a5a      	ldr	r2, [pc, #360]	; (8006b90 <HAL_GPIO_DeInit+0x210>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d101      	bne.n	8006a2e <HAL_GPIO_DeInit+0xae>
 8006a2a:	2309      	movs	r3, #9
 8006a2c:	e012      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a2e:	230a      	movs	r3, #10
 8006a30:	e010      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a32:	2308      	movs	r3, #8
 8006a34:	e00e      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a36:	2307      	movs	r3, #7
 8006a38:	e00c      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a3a:	2306      	movs	r3, #6
 8006a3c:	e00a      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a3e:	2305      	movs	r3, #5
 8006a40:	e008      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a42:	2304      	movs	r3, #4
 8006a44:	e006      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a46:	2303      	movs	r3, #3
 8006a48:	e004      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e002      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a52:	2300      	movs	r3, #0
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	f002 0203 	and.w	r2, r2, #3
 8006a5a:	0092      	lsls	r2, r2, #2
 8006a5c:	4093      	lsls	r3, r2
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d132      	bne.n	8006aca <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006a64:	4b4b      	ldr	r3, [pc, #300]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	4949      	ldr	r1, [pc, #292]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006a72:	4b48      	ldr	r3, [pc, #288]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	4946      	ldr	r1, [pc, #280]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006a80:	4b44      	ldr	r3, [pc, #272]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	43db      	mvns	r3, r3
 8006a88:	4942      	ldr	r1, [pc, #264]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006a8e:	4b41      	ldr	r3, [pc, #260]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	43db      	mvns	r3, r3
 8006a96:	493f      	ldr	r1, [pc, #252]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	220f      	movs	r2, #15
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006aac:	4a2e      	ldr	r2, [pc, #184]	; (8006b68 <HAL_GPIO_DeInit+0x1e8>)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	089b      	lsrs	r3, r3, #2
 8006ab2:	3302      	adds	r3, #2
 8006ab4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	43da      	mvns	r2, r3
 8006abc:	482a      	ldr	r0, [pc, #168]	; (8006b68 <HAL_GPIO_DeInit+0x1e8>)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	089b      	lsrs	r3, r3, #2
 8006ac2:	400a      	ands	r2, r1
 8006ac4:	3302      	adds	r3, #2
 8006ac6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	2103      	movs	r1, #3
 8006ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	401a      	ands	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	08da      	lsrs	r2, r3, #3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3208      	adds	r2, #8
 8006ae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	220f      	movs	r2, #15
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	43db      	mvns	r3, r3
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	08d2      	lsrs	r2, r2, #3
 8006b00:	4019      	ands	r1, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3208      	adds	r2, #8
 8006b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	2103      	movs	r1, #3
 8006b14:	fa01 f303 	lsl.w	r3, r1, r3
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	2101      	movs	r1, #1
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	2103      	movs	r1, #3
 8006b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b42:	43db      	mvns	r3, r3
 8006b44:	401a      	ands	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b0f      	cmp	r3, #15
 8006b54:	f67f af22 	bls.w	800699c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40013800 	.word	0x40013800
 8006b6c:	40020000 	.word	0x40020000
 8006b70:	40020400 	.word	0x40020400
 8006b74:	40020800 	.word	0x40020800
 8006b78:	40020c00 	.word	0x40020c00
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	40021400 	.word	0x40021400
 8006b84:	40021800 	.word	0x40021800
 8006b88:	40021c00 	.word	0x40021c00
 8006b8c:	40022000 	.word	0x40022000
 8006b90:	40022400 	.word	0x40022400
 8006b94:	40013c00 	.word	0x40013c00

08006b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	887b      	ldrh	r3, [r7, #2]
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	73fb      	strb	r3, [r7, #15]
 8006bb4:	e001      	b.n	8006bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	807b      	strh	r3, [r7, #2]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bd8:	787b      	ldrb	r3, [r7, #1]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bde:	887a      	ldrh	r2, [r7, #2]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006be4:	e003      	b.n	8006bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006be6:	887b      	ldrh	r3, [r7, #2]
 8006be8:	041a      	lsls	r2, r3, #16
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	619a      	str	r2, [r3, #24]
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
	...

08006bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e07f      	b.n	8006d0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f8a9 	bl	8006d7a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2224      	movs	r2, #36	; 0x24
 8006c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0201 	bic.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d107      	bne.n	8006c76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	e006      	b.n	8006c84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006c82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d104      	bne.n	8006c96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6859      	ldr	r1, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <HAL_I2C_Init+0x11c>)
 8006ca2:	430b      	orrs	r3, r1
 8006ca4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691a      	ldr	r2, [r3, #16]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	ea42 0103 	orr.w	r1, r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	021a      	lsls	r2, r3, #8
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	69d9      	ldr	r1, [r3, #28]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1a      	ldr	r2, [r3, #32]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	02008000 	.word	0x02008000

08006d1c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e021      	b.n	8006d72 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2224      	movs	r2, #36	; 0x24
 8006d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0201 	bic.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f821 	bl	8006d8e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	4608      	mov	r0, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	461a      	mov	r2, r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	817b      	strh	r3, [r7, #10]
 8006db6:	460b      	mov	r3, r1
 8006db8:	813b      	strh	r3, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	f040 80f9 	bne.w	8006fbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <HAL_I2C_Mem_Write+0x34>
 8006dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d105      	bne.n	8006de4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0ed      	b.n	8006fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_I2C_Mem_Write+0x4e>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e0e6      	b.n	8006fc0 <HAL_I2C_Mem_Write+0x21c>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006dfa:	f7fe fc73 	bl	80056e4 <HAL_GetTick>
 8006dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	2319      	movs	r3, #25
 8006e06:	2201      	movs	r2, #1
 8006e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fad1 	bl	80073b4 <I2C_WaitOnFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0d1      	b.n	8006fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2221      	movs	r2, #33	; 0x21
 8006e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2240      	movs	r2, #64	; 0x40
 8006e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e44:	88f8      	ldrh	r0, [r7, #6]
 8006e46:	893a      	ldrh	r2, [r7, #8]
 8006e48:	8979      	ldrh	r1, [r7, #10]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	4603      	mov	r3, r0
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f9e1 	bl	800721c <I2C_RequestMemoryWrite>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0a9      	b.n	8006fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	2bff      	cmp	r3, #255	; 0xff
 8006e74:	d90e      	bls.n	8006e94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	22ff      	movs	r2, #255	; 0xff
 8006e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	8979      	ldrh	r1, [r7, #10]
 8006e84:	2300      	movs	r3, #0
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 fbb3 	bl	80075f8 <I2C_TransferConfig>
 8006e92:	e00f      	b.n	8006eb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	8979      	ldrh	r1, [r7, #10]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fba2 	bl	80075f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fabb 	bl	8007434 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e07b      	b.n	8006fc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	781a      	ldrb	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d034      	beq.n	8006f6c <HAL_I2C_Mem_Write+0x1c8>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d130      	bne.n	8006f6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	2200      	movs	r2, #0
 8006f12:	2180      	movs	r1, #128	; 0x80
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fa4d 	bl	80073b4 <I2C_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e04d      	b.n	8006fc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	2bff      	cmp	r3, #255	; 0xff
 8006f2c:	d90e      	bls.n	8006f4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	22ff      	movs	r2, #255	; 0xff
 8006f32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	8979      	ldrh	r1, [r7, #10]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fb57 	bl	80075f8 <I2C_TransferConfig>
 8006f4a:	e00f      	b.n	8006f6c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	8979      	ldrh	r1, [r7, #10]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fb46 	bl	80075f8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d19e      	bne.n	8006eb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fa9a 	bl	80074b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e01a      	b.n	8006fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6859      	ldr	r1, [r3, #4]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <HAL_I2C_Mem_Write+0x224>)
 8006f9e:	400b      	ands	r3, r1
 8006fa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	e000      	b.n	8006fc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006fbe:	2302      	movs	r3, #2
  }
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	fe00e800 	.word	0xfe00e800

08006fcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af02      	add	r7, sp, #8
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4603      	mov	r3, r0
 8006fdc:	817b      	strh	r3, [r7, #10]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	813b      	strh	r3, [r7, #8]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	f040 80fd 	bne.w	80071ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <HAL_I2C_Mem_Read+0x34>
 8006ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d105      	bne.n	800700c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007006:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e0f1      	b.n	80071f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <HAL_I2C_Mem_Read+0x4e>
 8007016:	2302      	movs	r3, #2
 8007018:	e0ea      	b.n	80071f0 <HAL_I2C_Mem_Read+0x224>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007022:	f7fe fb5f 	bl	80056e4 <HAL_GetTick>
 8007026:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	2319      	movs	r3, #25
 800702e:	2201      	movs	r2, #1
 8007030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f9bd 	bl	80073b4 <I2C_WaitOnFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e0d5      	b.n	80071f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2222      	movs	r2, #34	; 0x22
 8007048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2240      	movs	r2, #64	; 0x40
 8007050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a3a      	ldr	r2, [r7, #32]
 800705e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800706c:	88f8      	ldrh	r0, [r7, #6]
 800706e:	893a      	ldrh	r2, [r7, #8]
 8007070:	8979      	ldrh	r1, [r7, #10]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	4603      	mov	r3, r0
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f921 	bl	80072c4 <I2C_RequestMemoryRead>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e0ad      	b.n	80071f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007098:	b29b      	uxth	r3, r3
 800709a:	2bff      	cmp	r3, #255	; 0xff
 800709c:	d90e      	bls.n	80070bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	22ff      	movs	r2, #255	; 0xff
 80070a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	8979      	ldrh	r1, [r7, #10]
 80070ac:	4b52      	ldr	r3, [pc, #328]	; (80071f8 <HAL_I2C_Mem_Read+0x22c>)
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 fa9f 	bl	80075f8 <I2C_TransferConfig>
 80070ba:	e00f      	b.n	80070dc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	8979      	ldrh	r1, [r7, #10]
 80070ce:	4b4a      	ldr	r3, [pc, #296]	; (80071f8 <HAL_I2C_Mem_Read+0x22c>)
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fa8e 	bl	80075f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	2200      	movs	r2, #0
 80070e4:	2104      	movs	r1, #4
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 f964 	bl	80073b4 <I2C_WaitOnFlagUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e07c      	b.n	80071f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d034      	beq.n	800719c <HAL_I2C_Mem_Read+0x1d0>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d130      	bne.n	800719c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	2200      	movs	r2, #0
 8007142:	2180      	movs	r1, #128	; 0x80
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 f935 	bl	80073b4 <I2C_WaitOnFlagUntilTimeout>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e04d      	b.n	80071f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007158:	b29b      	uxth	r3, r3
 800715a:	2bff      	cmp	r3, #255	; 0xff
 800715c:	d90e      	bls.n	800717c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	22ff      	movs	r2, #255	; 0xff
 8007162:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007168:	b2da      	uxtb	r2, r3
 800716a:	8979      	ldrh	r1, [r7, #10]
 800716c:	2300      	movs	r3, #0
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fa3f 	bl	80075f8 <I2C_TransferConfig>
 800717a:	e00f      	b.n	800719c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718a:	b2da      	uxtb	r2, r3
 800718c:	8979      	ldrh	r1, [r7, #10]
 800718e:	2300      	movs	r3, #0
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fa2e 	bl	80075f8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d19a      	bne.n	80070dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f982 	bl	80074b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e01a      	b.n	80071f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2220      	movs	r2, #32
 80071c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6859      	ldr	r1, [r3, #4]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <HAL_I2C_Mem_Read+0x230>)
 80071ce:	400b      	ands	r3, r1
 80071d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e000      	b.n	80071f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80071ee:	2302      	movs	r3, #2
  }
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	80002400 	.word	0x80002400
 80071fc:	fe00e800 	.word	0xfe00e800

08007200 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800720e:	b2db      	uxtb	r3, r3
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	4608      	mov	r0, r1
 8007226:	4611      	mov	r1, r2
 8007228:	461a      	mov	r2, r3
 800722a:	4603      	mov	r3, r0
 800722c:	817b      	strh	r3, [r7, #10]
 800722e:	460b      	mov	r3, r1
 8007230:	813b      	strh	r3, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	b2da      	uxtb	r2, r3
 800723a:	8979      	ldrh	r1, [r7, #10]
 800723c:	4b20      	ldr	r3, [pc, #128]	; (80072c0 <I2C_RequestMemoryWrite+0xa4>)
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f9d7 	bl	80075f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	69b9      	ldr	r1, [r7, #24]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f8f0 	bl	8007434 <I2C_WaitOnTXISFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e02c      	b.n	80072b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d105      	bne.n	8007270 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007264:	893b      	ldrh	r3, [r7, #8]
 8007266:	b2da      	uxtb	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	629a      	str	r2, [r3, #40]	; 0x28
 800726e:	e015      	b.n	800729c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007270:	893b      	ldrh	r3, [r7, #8]
 8007272:	0a1b      	lsrs	r3, r3, #8
 8007274:	b29b      	uxth	r3, r3
 8007276:	b2da      	uxtb	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800727e:	69fa      	ldr	r2, [r7, #28]
 8007280:	69b9      	ldr	r1, [r7, #24]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 f8d6 	bl	8007434 <I2C_WaitOnTXISFlagUntilTimeout>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e012      	b.n	80072b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007292:	893b      	ldrh	r3, [r7, #8]
 8007294:	b2da      	uxtb	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2200      	movs	r2, #0
 80072a4:	2180      	movs	r1, #128	; 0x80
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f884 	bl	80073b4 <I2C_WaitOnFlagUntilTimeout>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	80002000 	.word	0x80002000

080072c4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	4608      	mov	r0, r1
 80072ce:	4611      	mov	r1, r2
 80072d0:	461a      	mov	r2, r3
 80072d2:	4603      	mov	r3, r0
 80072d4:	817b      	strh	r3, [r7, #10]
 80072d6:	460b      	mov	r3, r1
 80072d8:	813b      	strh	r3, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	8979      	ldrh	r1, [r7, #10]
 80072e4:	4b20      	ldr	r3, [pc, #128]	; (8007368 <I2C_RequestMemoryRead+0xa4>)
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	2300      	movs	r3, #0
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 f984 	bl	80075f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	69b9      	ldr	r1, [r7, #24]
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f89d 	bl	8007434 <I2C_WaitOnTXISFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e02c      	b.n	800735e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007304:	88fb      	ldrh	r3, [r7, #6]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d105      	bne.n	8007316 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800730a:	893b      	ldrh	r3, [r7, #8]
 800730c:	b2da      	uxtb	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	629a      	str	r2, [r3, #40]	; 0x28
 8007314:	e015      	b.n	8007342 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007316:	893b      	ldrh	r3, [r7, #8]
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	b29b      	uxth	r3, r3
 800731c:	b2da      	uxtb	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007324:	69fa      	ldr	r2, [r7, #28]
 8007326:	69b9      	ldr	r1, [r7, #24]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f883 	bl	8007434 <I2C_WaitOnTXISFlagUntilTimeout>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e012      	b.n	800735e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007338:	893b      	ldrh	r3, [r7, #8]
 800733a:	b2da      	uxtb	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	2200      	movs	r2, #0
 800734a:	2140      	movs	r1, #64	; 0x40
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f831 	bl	80073b4 <I2C_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e000      	b.n	800735e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	80002000 	.word	0x80002000

0800736c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b02      	cmp	r3, #2
 8007380:	d103      	bne.n	800738a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2200      	movs	r2, #0
 8007388:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b01      	cmp	r3, #1
 8007396:	d007      	beq.n	80073a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	619a      	str	r2, [r3, #24]
  }
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	4613      	mov	r3, r2
 80073c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073c4:	e022      	b.n	800740c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073cc:	d01e      	beq.n	800740c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ce:	f7fe f989 	bl	80056e4 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d302      	bcc.n	80073e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d113      	bne.n	800740c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e8:	f043 0220 	orr.w	r2, r3, #32
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e00f      	b.n	800742c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699a      	ldr	r2, [r3, #24]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	4013      	ands	r3, r2
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	429a      	cmp	r2, r3
 800741a:	bf0c      	ite	eq
 800741c:	2301      	moveq	r3, #1
 800741e:	2300      	movne	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	429a      	cmp	r2, r3
 8007428:	d0cd      	beq.n	80073c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007440:	e02c      	b.n	800749c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	68b9      	ldr	r1, [r7, #8]
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 f870 	bl	800752c <I2C_IsAcknowledgeFailed>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e02a      	b.n	80074ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d01e      	beq.n	800749c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745e:	f7fe f941 	bl	80056e4 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	d302      	bcc.n	8007474 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d113      	bne.n	800749c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007478:	f043 0220 	orr.w	r2, r3, #32
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e007      	b.n	80074ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d1cb      	bne.n	8007442 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074c0:	e028      	b.n	8007514 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 f830 	bl	800752c <I2C_IsAcknowledgeFailed>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e026      	b.n	8007524 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d6:	f7fe f905 	bl	80056e4 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d302      	bcc.n	80074ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d113      	bne.n	8007514 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f0:	f043 0220 	orr.w	r2, r3, #32
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e007      	b.n	8007524 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b20      	cmp	r3, #32
 8007520:	d1cf      	bne.n	80074c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b10      	cmp	r3, #16
 8007544:	d151      	bne.n	80075ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007546:	e022      	b.n	800758e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d01e      	beq.n	800758e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007550:	f7fe f8c8 	bl	80056e4 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	429a      	cmp	r2, r3
 800755e:	d302      	bcc.n	8007566 <I2C_IsAcknowledgeFailed+0x3a>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d113      	bne.n	800758e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	f043 0220 	orr.w	r2, r3, #32
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e02e      	b.n	80075ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b20      	cmp	r3, #32
 800759a:	d1d5      	bne.n	8007548 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2210      	movs	r2, #16
 80075a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2220      	movs	r2, #32
 80075aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f7ff fedd 	bl	800736c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6859      	ldr	r1, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	4b0d      	ldr	r3, [pc, #52]	; (80075f4 <I2C_IsAcknowledgeFailed+0xc8>)
 80075be:	400b      	ands	r3, r1
 80075c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c6:	f043 0204 	orr.w	r2, r3, #4
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	fe00e800 	.word	0xfe00e800

080075f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	607b      	str	r3, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	817b      	strh	r3, [r7, #10]
 8007606:	4613      	mov	r3, r2
 8007608:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	0d5b      	lsrs	r3, r3, #21
 8007614:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007618:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <I2C_TransferConfig+0x58>)
 800761a:	430b      	orrs	r3, r1
 800761c:	43db      	mvns	r3, r3
 800761e:	ea02 0103 	and.w	r1, r2, r3
 8007622:	897b      	ldrh	r3, [r7, #10]
 8007624:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007628:	7a7b      	ldrb	r3, [r7, #9]
 800762a:	041b      	lsls	r3, r3, #16
 800762c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007630:	431a      	orrs	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	431a      	orrs	r2, r3
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	431a      	orrs	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	03ff63ff 	.word	0x03ff63ff

08007654 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e0bf      	b.n	80077e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d106      	bne.n	8007680 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7fc f800 	bl	8003680 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007696:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6999      	ldr	r1, [r3, #24]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80076ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6899      	ldr	r1, [r3, #8]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4b4a      	ldr	r3, [pc, #296]	; (80077f0 <HAL_LTDC_Init+0x19c>)
 80076c8:	400b      	ands	r3, r1
 80076ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6899      	ldr	r1, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68d9      	ldr	r1, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	4b3e      	ldr	r3, [pc, #248]	; (80077f0 <HAL_LTDC_Init+0x19c>)
 80076f6:	400b      	ands	r3, r1
 80076f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	041b      	lsls	r3, r3, #16
 8007700:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68d9      	ldr	r1, [r3, #12]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a1a      	ldr	r2, [r3, #32]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6919      	ldr	r1, [r3, #16]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b33      	ldr	r3, [pc, #204]	; (80077f0 <HAL_LTDC_Init+0x19c>)
 8007724:	400b      	ands	r3, r1
 8007726:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	041b      	lsls	r3, r3, #16
 800772e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6919      	ldr	r1, [r3, #16]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6959      	ldr	r1, [r3, #20]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	4b27      	ldr	r3, [pc, #156]	; (80077f0 <HAL_LTDC_Init+0x19c>)
 8007752:	400b      	ands	r3, r1
 8007754:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6959      	ldr	r1, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800777a:	021b      	lsls	r3, r3, #8
 800777c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007784:	041b      	lsls	r3, r3, #16
 8007786:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007796:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0206 	orr.w	r2, r2, #6
 80077c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	f000f800 	.word	0xf000f800

080077f4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	d023      	beq.n	800785e <HAL_LTDC_IRQHandler+0x6a>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01e      	beq.n	800785e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0204 	bic.w	r2, r2, #4
 800782e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2204      	movs	r2, #4
 8007836:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800783e:	f043 0201 	orr.w	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2204      	movs	r2, #4
 800784c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f86f 	bl	800793c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d023      	beq.n	80078b0 <HAL_LTDC_IRQHandler+0xbc>
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01e      	beq.n	80078b0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0202 	bic.w	r2, r2, #2
 8007880:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2202      	movs	r2, #2
 8007888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007890:	f043 0202 	orr.w	r2, r3, #2
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2204      	movs	r2, #4
 800789e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f846 	bl	800793c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01b      	beq.n	80078f2 <HAL_LTDC_IRQHandler+0xfe>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d016      	beq.n	80078f2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2201      	movs	r2, #1
 80078da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f82f 	bl	8007950 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01b      	beq.n	8007934 <HAL_LTDC_IRQHandler+0x140>
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f003 0308 	and.w	r3, r3, #8
 8007902:	2b00      	cmp	r3, #0
 8007904:	d016      	beq.n	8007934 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0208 	bic.w	r2, r2, #8
 8007914:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2208      	movs	r2, #8
 800791c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f818 	bl	8007964 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007934:	bf00      	nop
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007978:	b5b0      	push	{r4, r5, r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_LTDC_ConfigLayer+0x1a>
 800798e:	2302      	movs	r3, #2
 8007990:	e02c      	b.n	80079ec <HAL_LTDC_ConfigLayer+0x74>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2202      	movs	r2, #2
 800799e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2134      	movs	r1, #52	; 0x34
 80079a8:	fb01 f303 	mul.w	r3, r1, r3
 80079ac:	4413      	add	r3, r2
 80079ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4614      	mov	r4, r2
 80079b6:	461d      	mov	r5, r3
 80079b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f81f 	bl	8007a10 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2201      	movs	r2, #1
 80079d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bdb0      	pop	{r4, r5, r7, pc}

080079f4 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007a02:	b2db      	uxtb	r3, r3
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b089      	sub	sp, #36	; 0x24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	0c1b      	lsrs	r3, r3, #16
 8007a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a2c:	4413      	add	r3, r2
 8007a2e:	041b      	lsls	r3, r3, #16
 8007a30:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	01db      	lsls	r3, r3, #7
 8007a3c:	4413      	add	r3, r2
 8007a3e:	3384      	adds	r3, #132	; 0x84
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	4611      	mov	r1, r2
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	01d2      	lsls	r2, r2, #7
 8007a4c:	440a      	add	r2, r1
 8007a4e:	3284      	adds	r2, #132	; 0x84
 8007a50:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007a54:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a66:	4413      	add	r3, r2
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	01db      	lsls	r3, r3, #7
 8007a74:	440b      	add	r3, r1
 8007a76:	3384      	adds	r3, #132	; 0x84
 8007a78:	4619      	mov	r1, r3
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a8e:	4413      	add	r3, r2
 8007a90:	041b      	lsls	r3, r3, #16
 8007a92:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	01db      	lsls	r3, r3, #7
 8007a9e:	4413      	add	r3, r2
 8007aa0:	3384      	adds	r3, #132	; 0x84
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	01d2      	lsls	r2, r2, #7
 8007aae:	440a      	add	r2, r1
 8007ab0:	3284      	adds	r2, #132	; 0x84
 8007ab2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ab6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ac6:	4413      	add	r3, r2
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	01db      	lsls	r3, r3, #7
 8007ad4:	440b      	add	r3, r1
 8007ad6:	3384      	adds	r3, #132	; 0x84
 8007ad8:	4619      	mov	r1, r3
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	01db      	lsls	r3, r3, #7
 8007aea:	4413      	add	r3, r2
 8007aec:	3384      	adds	r3, #132	; 0x84
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	4611      	mov	r1, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	01d2      	lsls	r2, r2, #7
 8007afa:	440a      	add	r2, r1
 8007afc:	3284      	adds	r2, #132	; 0x84
 8007afe:	f023 0307 	bic.w	r3, r3, #7
 8007b02:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	01db      	lsls	r3, r3, #7
 8007b0e:	4413      	add	r3, r2
 8007b10:	3384      	adds	r3, #132	; 0x84
 8007b12:	461a      	mov	r2, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b20:	021b      	lsls	r3, r3, #8
 8007b22:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007b2a:	041b      	lsls	r3, r3, #16
 8007b2c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	061b      	lsls	r3, r3, #24
 8007b34:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	01db      	lsls	r3, r3, #7
 8007b40:	4413      	add	r3, r2
 8007b42:	3384      	adds	r3, #132	; 0x84
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	01db      	lsls	r3, r3, #7
 8007b50:	4413      	add	r3, r2
 8007b52:	3384      	adds	r3, #132	; 0x84
 8007b54:	461a      	mov	r2, r3
 8007b56:	2300      	movs	r3, #0
 8007b58:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b60:	461a      	mov	r2, r3
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	431a      	orrs	r2, r3
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	01db      	lsls	r3, r3, #7
 8007b74:	440b      	add	r3, r1
 8007b76:	3384      	adds	r3, #132	; 0x84
 8007b78:	4619      	mov	r1, r3
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	01db      	lsls	r3, r3, #7
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3384      	adds	r3, #132	; 0x84
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	6812      	ldr	r2, [r2, #0]
 8007b94:	4611      	mov	r1, r2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	01d2      	lsls	r2, r2, #7
 8007b9a:	440a      	add	r2, r1
 8007b9c:	3284      	adds	r2, #132	; 0x84
 8007b9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ba2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	01db      	lsls	r3, r3, #7
 8007bae:	4413      	add	r3, r2
 8007bb0:	3384      	adds	r3, #132	; 0x84
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	01db      	lsls	r3, r3, #7
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3384      	adds	r3, #132	; 0x84
 8007bc8:	69da      	ldr	r2, [r3, #28]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	01db      	lsls	r3, r3, #7
 8007bd4:	440b      	add	r3, r1
 8007bd6:	3384      	adds	r3, #132	; 0x84
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4b58      	ldr	r3, [pc, #352]	; (8007d3c <LTDC_SetConfig+0x32c>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	69da      	ldr	r2, [r3, #28]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	68f9      	ldr	r1, [r7, #12]
 8007bea:	6809      	ldr	r1, [r1, #0]
 8007bec:	4608      	mov	r0, r1
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	01c9      	lsls	r1, r1, #7
 8007bf2:	4401      	add	r1, r0
 8007bf4:	3184      	adds	r1, #132	; 0x84
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	01db      	lsls	r3, r3, #7
 8007c04:	4413      	add	r3, r2
 8007c06:	3384      	adds	r3, #132	; 0x84
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	01db      	lsls	r3, r3, #7
 8007c14:	4413      	add	r3, r2
 8007c16:	3384      	adds	r3, #132	; 0x84
 8007c18:	461a      	mov	r2, r3
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	01db      	lsls	r3, r3, #7
 8007c28:	4413      	add	r3, r2
 8007c2a:	3384      	adds	r3, #132	; 0x84
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d102      	bne.n	8007c42 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007c3c:	2304      	movs	r3, #4
 8007c3e:	61fb      	str	r3, [r7, #28]
 8007c40:	e01b      	b.n	8007c7a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d102      	bne.n	8007c50 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	e014      	b.n	8007c7a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d00b      	beq.n	8007c70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d007      	beq.n	8007c70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d003      	beq.n	8007c70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007c6c:	2b07      	cmp	r3, #7
 8007c6e:	d102      	bne.n	8007c76 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007c70:	2302      	movs	r3, #2
 8007c72:	61fb      	str	r3, [r7, #28]
 8007c74:	e001      	b.n	8007c7a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007c76:	2301      	movs	r3, #1
 8007c78:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	01db      	lsls	r3, r3, #7
 8007c84:	4413      	add	r3, r2
 8007c86:	3384      	adds	r3, #132	; 0x84
 8007c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	01d2      	lsls	r2, r2, #7
 8007c94:	440a      	add	r2, r1
 8007c96:	3284      	adds	r2, #132	; 0x84
 8007c98:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	fb02 f303 	mul.w	r3, r2, r3
 8007ca8:	041a      	lsls	r2, r3, #16
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	6859      	ldr	r1, [r3, #4]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	1acb      	subs	r3, r1, r3
 8007cb4:	69f9      	ldr	r1, [r7, #28]
 8007cb6:	fb01 f303 	mul.w	r3, r1, r3
 8007cba:	3303      	adds	r3, #3
 8007cbc:	68f9      	ldr	r1, [r7, #12]
 8007cbe:	6809      	ldr	r1, [r1, #0]
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	01c9      	lsls	r1, r1, #7
 8007cc6:	4401      	add	r1, r0
 8007cc8:	3184      	adds	r1, #132	; 0x84
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	01db      	lsls	r3, r3, #7
 8007cd8:	4413      	add	r3, r2
 8007cda:	3384      	adds	r3, #132	; 0x84
 8007cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	01db      	lsls	r3, r3, #7
 8007ce8:	440b      	add	r3, r1
 8007cea:	3384      	adds	r3, #132	; 0x84
 8007cec:	4619      	mov	r1, r3
 8007cee:	4b14      	ldr	r3, [pc, #80]	; (8007d40 <LTDC_SetConfig+0x330>)
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	01db      	lsls	r3, r3, #7
 8007cfe:	4413      	add	r3, r2
 8007d00:	3384      	adds	r3, #132	; 0x84
 8007d02:	461a      	mov	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	01db      	lsls	r3, r3, #7
 8007d14:	4413      	add	r3, r2
 8007d16:	3384      	adds	r3, #132	; 0x84
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	01d2      	lsls	r2, r2, #7
 8007d24:	440a      	add	r2, r1
 8007d26:	3284      	adds	r2, #132	; 0x84
 8007d28:	f043 0301 	orr.w	r3, r3, #1
 8007d2c:	6013      	str	r3, [r2, #0]
}
 8007d2e:	bf00      	nop
 8007d30:	3724      	adds	r7, #36	; 0x24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	fffff8f8 	.word	0xfffff8f8
 8007d40:	fffff800 	.word	0xfffff800

08007d44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a04      	ldr	r2, [pc, #16]	; (8007d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d52:	6013      	str	r3, [r2, #0]
}
 8007d54:	bf00      	nop
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40007000 	.word	0x40007000

08007d64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007d6e:	4b23      	ldr	r3, [pc, #140]	; (8007dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	4a22      	ldr	r2, [pc, #136]	; (8007dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8007d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d78:	6413      	str	r3, [r2, #64]	; 0x40
 8007d7a:	4b20      	ldr	r3, [pc, #128]	; (8007dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007d86:	4b1e      	ldr	r3, [pc, #120]	; (8007e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a1d      	ldr	r2, [pc, #116]	; (8007e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d92:	f7fd fca7 	bl	80056e4 <HAL_GetTick>
 8007d96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007d98:	e009      	b.n	8007dae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d9a:	f7fd fca3 	bl	80056e4 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007da8:	d901      	bls.n	8007dae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e022      	b.n	8007df4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007dae:	4b14      	ldr	r3, [pc, #80]	; (8007e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dba:	d1ee      	bne.n	8007d9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007dbc:	4b10      	ldr	r3, [pc, #64]	; (8007e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a0f      	ldr	r2, [pc, #60]	; (8007e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007dc8:	f7fd fc8c 	bl	80056e4 <HAL_GetTick>
 8007dcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007dce:	e009      	b.n	8007de4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007dd0:	f7fd fc88 	bl	80056e4 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dde:	d901      	bls.n	8007de4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e007      	b.n	8007df4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007de4:	4b06      	ldr	r3, [pc, #24]	; (8007e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df0:	d1ee      	bne.n	8007dd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	40007000 	.word	0x40007000

08007e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e291      	b.n	800833e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 8087 	beq.w	8007f36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e28:	4b96      	ldr	r3, [pc, #600]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 030c 	and.w	r3, r3, #12
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d00c      	beq.n	8007e4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e34:	4b93      	ldr	r3, [pc, #588]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f003 030c 	and.w	r3, r3, #12
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d112      	bne.n	8007e66 <HAL_RCC_OscConfig+0x62>
 8007e40:	4b90      	ldr	r3, [pc, #576]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e4c:	d10b      	bne.n	8007e66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e4e:	4b8d      	ldr	r3, [pc, #564]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d06c      	beq.n	8007f34 <HAL_RCC_OscConfig+0x130>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d168      	bne.n	8007f34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e26b      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e6e:	d106      	bne.n	8007e7e <HAL_RCC_OscConfig+0x7a>
 8007e70:	4b84      	ldr	r3, [pc, #528]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a83      	ldr	r2, [pc, #524]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	e02e      	b.n	8007edc <HAL_RCC_OscConfig+0xd8>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10c      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x9c>
 8007e86:	4b7f      	ldr	r3, [pc, #508]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a7e      	ldr	r2, [pc, #504]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	4b7c      	ldr	r3, [pc, #496]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a7b      	ldr	r2, [pc, #492]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	e01d      	b.n	8007edc <HAL_RCC_OscConfig+0xd8>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ea8:	d10c      	bne.n	8007ec4 <HAL_RCC_OscConfig+0xc0>
 8007eaa:	4b76      	ldr	r3, [pc, #472]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a75      	ldr	r2, [pc, #468]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	4b73      	ldr	r3, [pc, #460]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a72      	ldr	r2, [pc, #456]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	e00b      	b.n	8007edc <HAL_RCC_OscConfig+0xd8>
 8007ec4:	4b6f      	ldr	r3, [pc, #444]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a6e      	ldr	r2, [pc, #440]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	4b6c      	ldr	r3, [pc, #432]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a6b      	ldr	r2, [pc, #428]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d013      	beq.n	8007f0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fd fbfe 	bl	80056e4 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eec:	f7fd fbfa 	bl	80056e4 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b64      	cmp	r3, #100	; 0x64
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e21f      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007efe:	4b61      	ldr	r3, [pc, #388]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0xe8>
 8007f0a:	e014      	b.n	8007f36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0c:	f7fd fbea 	bl	80056e4 <HAL_GetTick>
 8007f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f12:	e008      	b.n	8007f26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f14:	f7fd fbe6 	bl	80056e4 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b64      	cmp	r3, #100	; 0x64
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e20b      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f26:	4b57      	ldr	r3, [pc, #348]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f0      	bne.n	8007f14 <HAL_RCC_OscConfig+0x110>
 8007f32:	e000      	b.n	8007f36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d069      	beq.n	8008016 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f42:	4b50      	ldr	r3, [pc, #320]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 030c 	and.w	r3, r3, #12
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f4e:	4b4d      	ldr	r3, [pc, #308]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 030c 	and.w	r3, r3, #12
 8007f56:	2b08      	cmp	r3, #8
 8007f58:	d11c      	bne.n	8007f94 <HAL_RCC_OscConfig+0x190>
 8007f5a:	4b4a      	ldr	r3, [pc, #296]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d116      	bne.n	8007f94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f66:	4b47      	ldr	r3, [pc, #284]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d005      	beq.n	8007f7e <HAL_RCC_OscConfig+0x17a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d001      	beq.n	8007f7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e1df      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f7e:	4b41      	ldr	r3, [pc, #260]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	493d      	ldr	r1, [pc, #244]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f92:	e040      	b.n	8008016 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d023      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f9c:	4b39      	ldr	r3, [pc, #228]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a38      	ldr	r2, [pc, #224]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa8:	f7fd fb9c 	bl	80056e4 <HAL_GetTick>
 8007fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fae:	e008      	b.n	8007fc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fb0:	f7fd fb98 	bl	80056e4 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d901      	bls.n	8007fc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e1bd      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fc2:	4b30      	ldr	r3, [pc, #192]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0f0      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fce:	4b2d      	ldr	r3, [pc, #180]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	4929      	ldr	r1, [pc, #164]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	600b      	str	r3, [r1, #0]
 8007fe2:	e018      	b.n	8008016 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fe4:	4b27      	ldr	r3, [pc, #156]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a26      	ldr	r2, [pc, #152]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007fea:	f023 0301 	bic.w	r3, r3, #1
 8007fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff0:	f7fd fb78 	bl	80056e4 <HAL_GetTick>
 8007ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ff6:	e008      	b.n	800800a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ff8:	f7fd fb74 	bl	80056e4 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b02      	cmp	r3, #2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e199      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800800a:	4b1e      	ldr	r3, [pc, #120]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f0      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b00      	cmp	r3, #0
 8008020:	d038      	beq.n	8008094 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d019      	beq.n	800805e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800802a:	4b16      	ldr	r3, [pc, #88]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 800802c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800802e:	4a15      	ldr	r2, [pc, #84]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8008030:	f043 0301 	orr.w	r3, r3, #1
 8008034:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008036:	f7fd fb55 	bl	80056e4 <HAL_GetTick>
 800803a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800803c:	e008      	b.n	8008050 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800803e:	f7fd fb51 	bl	80056e4 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e176      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008050:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8008052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0f0      	beq.n	800803e <HAL_RCC_OscConfig+0x23a>
 800805c:	e01a      	b.n	8008094 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800805e:	4b09      	ldr	r3, [pc, #36]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8008060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008062:	4a08      	ldr	r2, [pc, #32]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8008064:	f023 0301 	bic.w	r3, r3, #1
 8008068:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800806a:	f7fd fb3b 	bl	80056e4 <HAL_GetTick>
 800806e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008070:	e00a      	b.n	8008088 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008072:	f7fd fb37 	bl	80056e4 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	d903      	bls.n	8008088 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e15c      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
 8008084:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008088:	4b91      	ldr	r3, [pc, #580]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 800808a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1ee      	bne.n	8008072 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 80a4 	beq.w	80081ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080a2:	4b8b      	ldr	r3, [pc, #556]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10d      	bne.n	80080ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80080ae:	4b88      	ldr	r3, [pc, #544]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	4a87      	ldr	r2, [pc, #540]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80080b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b8:	6413      	str	r3, [r2, #64]	; 0x40
 80080ba:	4b85      	ldr	r3, [pc, #532]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c2:	60bb      	str	r3, [r7, #8]
 80080c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080c6:	2301      	movs	r3, #1
 80080c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080ca:	4b82      	ldr	r3, [pc, #520]	; (80082d4 <HAL_RCC_OscConfig+0x4d0>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d118      	bne.n	8008108 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80080d6:	4b7f      	ldr	r3, [pc, #508]	; (80082d4 <HAL_RCC_OscConfig+0x4d0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a7e      	ldr	r2, [pc, #504]	; (80082d4 <HAL_RCC_OscConfig+0x4d0>)
 80080dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080e2:	f7fd faff 	bl	80056e4 <HAL_GetTick>
 80080e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080e8:	e008      	b.n	80080fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080ea:	f7fd fafb 	bl	80056e4 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b64      	cmp	r3, #100	; 0x64
 80080f6:	d901      	bls.n	80080fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e120      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080fc:	4b75      	ldr	r3, [pc, #468]	; (80082d4 <HAL_RCC_OscConfig+0x4d0>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0f0      	beq.n	80080ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d106      	bne.n	800811e <HAL_RCC_OscConfig+0x31a>
 8008110:	4b6f      	ldr	r3, [pc, #444]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008114:	4a6e      	ldr	r2, [pc, #440]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008116:	f043 0301 	orr.w	r3, r3, #1
 800811a:	6713      	str	r3, [r2, #112]	; 0x70
 800811c:	e02d      	b.n	800817a <HAL_RCC_OscConfig+0x376>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10c      	bne.n	8008140 <HAL_RCC_OscConfig+0x33c>
 8008126:	4b6a      	ldr	r3, [pc, #424]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812a:	4a69      	ldr	r2, [pc, #420]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 800812c:	f023 0301 	bic.w	r3, r3, #1
 8008130:	6713      	str	r3, [r2, #112]	; 0x70
 8008132:	4b67      	ldr	r3, [pc, #412]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008136:	4a66      	ldr	r2, [pc, #408]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008138:	f023 0304 	bic.w	r3, r3, #4
 800813c:	6713      	str	r3, [r2, #112]	; 0x70
 800813e:	e01c      	b.n	800817a <HAL_RCC_OscConfig+0x376>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	2b05      	cmp	r3, #5
 8008146:	d10c      	bne.n	8008162 <HAL_RCC_OscConfig+0x35e>
 8008148:	4b61      	ldr	r3, [pc, #388]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 800814a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814c:	4a60      	ldr	r2, [pc, #384]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 800814e:	f043 0304 	orr.w	r3, r3, #4
 8008152:	6713      	str	r3, [r2, #112]	; 0x70
 8008154:	4b5e      	ldr	r3, [pc, #376]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008158:	4a5d      	ldr	r2, [pc, #372]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 800815a:	f043 0301 	orr.w	r3, r3, #1
 800815e:	6713      	str	r3, [r2, #112]	; 0x70
 8008160:	e00b      	b.n	800817a <HAL_RCC_OscConfig+0x376>
 8008162:	4b5b      	ldr	r3, [pc, #364]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008166:	4a5a      	ldr	r2, [pc, #360]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008168:	f023 0301 	bic.w	r3, r3, #1
 800816c:	6713      	str	r3, [r2, #112]	; 0x70
 800816e:	4b58      	ldr	r3, [pc, #352]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008172:	4a57      	ldr	r2, [pc, #348]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008174:	f023 0304 	bic.w	r3, r3, #4
 8008178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d015      	beq.n	80081ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008182:	f7fd faaf 	bl	80056e4 <HAL_GetTick>
 8008186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008188:	e00a      	b.n	80081a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800818a:	f7fd faab 	bl	80056e4 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	f241 3288 	movw	r2, #5000	; 0x1388
 8008198:	4293      	cmp	r3, r2
 800819a:	d901      	bls.n	80081a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e0ce      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081a0:	4b4b      	ldr	r3, [pc, #300]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80081a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0ee      	beq.n	800818a <HAL_RCC_OscConfig+0x386>
 80081ac:	e014      	b.n	80081d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ae:	f7fd fa99 	bl	80056e4 <HAL_GetTick>
 80081b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081b4:	e00a      	b.n	80081cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081b6:	f7fd fa95 	bl	80056e4 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e0b8      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081cc:	4b40      	ldr	r3, [pc, #256]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80081ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1ee      	bne.n	80081b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d105      	bne.n	80081ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081de:	4b3c      	ldr	r3, [pc, #240]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	4a3b      	ldr	r2, [pc, #236]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80081e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80a4 	beq.w	800833c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80081f4:	4b36      	ldr	r3, [pc, #216]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f003 030c 	and.w	r3, r3, #12
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d06b      	beq.n	80082d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	2b02      	cmp	r3, #2
 8008206:	d149      	bne.n	800829c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008208:	4b31      	ldr	r3, [pc, #196]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a30      	ldr	r2, [pc, #192]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 800820e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008214:	f7fd fa66 	bl	80056e4 <HAL_GetTick>
 8008218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800821c:	f7fd fa62 	bl	80056e4 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e087      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800822e:	4b28      	ldr	r3, [pc, #160]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1f0      	bne.n	800821c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	69da      	ldr	r2, [r3, #28]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	019b      	lsls	r3, r3, #6
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	3b01      	subs	r3, #1
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	061b      	lsls	r3, r3, #24
 800825e:	4313      	orrs	r3, r2
 8008260:	4a1b      	ldr	r2, [pc, #108]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008266:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008268:	4b19      	ldr	r3, [pc, #100]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a18      	ldr	r2, [pc, #96]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 800826e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008274:	f7fd fa36 	bl	80056e4 <HAL_GetTick>
 8008278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800827a:	e008      	b.n	800828e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800827c:	f7fd fa32 	bl	80056e4 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e057      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800828e:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0f0      	beq.n	800827c <HAL_RCC_OscConfig+0x478>
 800829a:	e04f      	b.n	800833c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800829c:	4b0c      	ldr	r3, [pc, #48]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a0b      	ldr	r2, [pc, #44]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80082a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a8:	f7fd fa1c 	bl	80056e4 <HAL_GetTick>
 80082ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082b0:	f7fd fa18 	bl	80056e4 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e03d      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082c2:	4b03      	ldr	r3, [pc, #12]	; (80082d0 <HAL_RCC_OscConfig+0x4cc>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1f0      	bne.n	80082b0 <HAL_RCC_OscConfig+0x4ac>
 80082ce:	e035      	b.n	800833c <HAL_RCC_OscConfig+0x538>
 80082d0:	40023800 	.word	0x40023800
 80082d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80082d8:	4b1b      	ldr	r3, [pc, #108]	; (8008348 <HAL_RCC_OscConfig+0x544>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d028      	beq.n	8008338 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d121      	bne.n	8008338 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082fe:	429a      	cmp	r2, r3
 8008300:	d11a      	bne.n	8008338 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008308:	4013      	ands	r3, r2
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800830e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008310:	4293      	cmp	r3, r2
 8008312:	d111      	bne.n	8008338 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831e:	085b      	lsrs	r3, r3, #1
 8008320:	3b01      	subs	r3, #1
 8008322:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008324:	429a      	cmp	r2, r3
 8008326:	d107      	bne.n	8008338 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008332:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008334:	429a      	cmp	r2, r3
 8008336:	d001      	beq.n	800833c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e000      	b.n	800833e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40023800 	.word	0x40023800

0800834c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e0d0      	b.n	8008506 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008364:	4b6a      	ldr	r3, [pc, #424]	; (8008510 <HAL_RCC_ClockConfig+0x1c4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	429a      	cmp	r2, r3
 8008370:	d910      	bls.n	8008394 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008372:	4b67      	ldr	r3, [pc, #412]	; (8008510 <HAL_RCC_ClockConfig+0x1c4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f023 020f 	bic.w	r2, r3, #15
 800837a:	4965      	ldr	r1, [pc, #404]	; (8008510 <HAL_RCC_ClockConfig+0x1c4>)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	4313      	orrs	r3, r2
 8008380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008382:	4b63      	ldr	r3, [pc, #396]	; (8008510 <HAL_RCC_ClockConfig+0x1c4>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 030f 	and.w	r3, r3, #15
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d001      	beq.n	8008394 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e0b8      	b.n	8008506 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d020      	beq.n	80083e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083ac:	4b59      	ldr	r3, [pc, #356]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	4a58      	ldr	r2, [pc, #352]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80083b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80083b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083c4:	4b53      	ldr	r3, [pc, #332]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	4a52      	ldr	r2, [pc, #328]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80083ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80083ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083d0:	4b50      	ldr	r3, [pc, #320]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	494d      	ldr	r1, [pc, #308]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d040      	beq.n	8008470 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d107      	bne.n	8008406 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083f6:	4b47      	ldr	r3, [pc, #284]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d115      	bne.n	800842e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e07f      	b.n	8008506 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d107      	bne.n	800841e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800840e:	4b41      	ldr	r3, [pc, #260]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d109      	bne.n	800842e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e073      	b.n	8008506 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800841e:	4b3d      	ldr	r3, [pc, #244]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0302 	and.w	r3, r3, #2
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e06b      	b.n	8008506 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800842e:	4b39      	ldr	r3, [pc, #228]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f023 0203 	bic.w	r2, r3, #3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	4936      	ldr	r1, [pc, #216]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 800843c:	4313      	orrs	r3, r2
 800843e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008440:	f7fd f950 	bl	80056e4 <HAL_GetTick>
 8008444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008446:	e00a      	b.n	800845e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008448:	f7fd f94c 	bl	80056e4 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	f241 3288 	movw	r2, #5000	; 0x1388
 8008456:	4293      	cmp	r3, r2
 8008458:	d901      	bls.n	800845e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e053      	b.n	8008506 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800845e:	4b2d      	ldr	r3, [pc, #180]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 020c 	and.w	r2, r3, #12
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	429a      	cmp	r2, r3
 800846e:	d1eb      	bne.n	8008448 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008470:	4b27      	ldr	r3, [pc, #156]	; (8008510 <HAL_RCC_ClockConfig+0x1c4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 030f 	and.w	r3, r3, #15
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	429a      	cmp	r2, r3
 800847c:	d210      	bcs.n	80084a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800847e:	4b24      	ldr	r3, [pc, #144]	; (8008510 <HAL_RCC_ClockConfig+0x1c4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f023 020f 	bic.w	r2, r3, #15
 8008486:	4922      	ldr	r1, [pc, #136]	; (8008510 <HAL_RCC_ClockConfig+0x1c4>)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	4313      	orrs	r3, r2
 800848c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800848e:	4b20      	ldr	r3, [pc, #128]	; (8008510 <HAL_RCC_ClockConfig+0x1c4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d001      	beq.n	80084a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e032      	b.n	8008506 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d008      	beq.n	80084be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084ac:	4b19      	ldr	r3, [pc, #100]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	4916      	ldr	r1, [pc, #88]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0308 	and.w	r3, r3, #8
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d009      	beq.n	80084de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80084ca:	4b12      	ldr	r3, [pc, #72]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	490e      	ldr	r1, [pc, #56]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80084de:	f000 f821 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 80084e2:	4602      	mov	r2, r0
 80084e4:	4b0b      	ldr	r3, [pc, #44]	; (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	091b      	lsrs	r3, r3, #4
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	490a      	ldr	r1, [pc, #40]	; (8008518 <HAL_RCC_ClockConfig+0x1cc>)
 80084f0:	5ccb      	ldrb	r3, [r1, r3]
 80084f2:	fa22 f303 	lsr.w	r3, r2, r3
 80084f6:	4a09      	ldr	r2, [pc, #36]	; (800851c <HAL_RCC_ClockConfig+0x1d0>)
 80084f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80084fa:	4b09      	ldr	r3, [pc, #36]	; (8008520 <HAL_RCC_ClockConfig+0x1d4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fb fca4 	bl	8003e4c <HAL_InitTick>

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40023c00 	.word	0x40023c00
 8008514:	40023800 	.word	0x40023800
 8008518:	08015094 	.word	0x08015094
 800851c:	20000040 	.word	0x20000040
 8008520:	20000078 	.word	0x20000078

08008524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008524:	b5b0      	push	{r4, r5, r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800852a:	2100      	movs	r1, #0
 800852c:	6079      	str	r1, [r7, #4]
 800852e:	2100      	movs	r1, #0
 8008530:	60f9      	str	r1, [r7, #12]
 8008532:	2100      	movs	r1, #0
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008536:	2100      	movs	r1, #0
 8008538:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800853a:	4952      	ldr	r1, [pc, #328]	; (8008684 <HAL_RCC_GetSysClockFreq+0x160>)
 800853c:	6889      	ldr	r1, [r1, #8]
 800853e:	f001 010c 	and.w	r1, r1, #12
 8008542:	2908      	cmp	r1, #8
 8008544:	d00d      	beq.n	8008562 <HAL_RCC_GetSysClockFreq+0x3e>
 8008546:	2908      	cmp	r1, #8
 8008548:	f200 8094 	bhi.w	8008674 <HAL_RCC_GetSysClockFreq+0x150>
 800854c:	2900      	cmp	r1, #0
 800854e:	d002      	beq.n	8008556 <HAL_RCC_GetSysClockFreq+0x32>
 8008550:	2904      	cmp	r1, #4
 8008552:	d003      	beq.n	800855c <HAL_RCC_GetSysClockFreq+0x38>
 8008554:	e08e      	b.n	8008674 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008556:	4b4c      	ldr	r3, [pc, #304]	; (8008688 <HAL_RCC_GetSysClockFreq+0x164>)
 8008558:	60bb      	str	r3, [r7, #8]
      break;
 800855a:	e08e      	b.n	800867a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800855c:	4b4b      	ldr	r3, [pc, #300]	; (800868c <HAL_RCC_GetSysClockFreq+0x168>)
 800855e:	60bb      	str	r3, [r7, #8]
      break;
 8008560:	e08b      	b.n	800867a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008562:	4948      	ldr	r1, [pc, #288]	; (8008684 <HAL_RCC_GetSysClockFreq+0x160>)
 8008564:	6849      	ldr	r1, [r1, #4]
 8008566:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800856a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800856c:	4945      	ldr	r1, [pc, #276]	; (8008684 <HAL_RCC_GetSysClockFreq+0x160>)
 800856e:	6849      	ldr	r1, [r1, #4]
 8008570:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008574:	2900      	cmp	r1, #0
 8008576:	d024      	beq.n	80085c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008578:	4942      	ldr	r1, [pc, #264]	; (8008684 <HAL_RCC_GetSysClockFreq+0x160>)
 800857a:	6849      	ldr	r1, [r1, #4]
 800857c:	0989      	lsrs	r1, r1, #6
 800857e:	4608      	mov	r0, r1
 8008580:	f04f 0100 	mov.w	r1, #0
 8008584:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008588:	f04f 0500 	mov.w	r5, #0
 800858c:	ea00 0204 	and.w	r2, r0, r4
 8008590:	ea01 0305 	and.w	r3, r1, r5
 8008594:	493d      	ldr	r1, [pc, #244]	; (800868c <HAL_RCC_GetSysClockFreq+0x168>)
 8008596:	fb01 f003 	mul.w	r0, r1, r3
 800859a:	2100      	movs	r1, #0
 800859c:	fb01 f102 	mul.w	r1, r1, r2
 80085a0:	1844      	adds	r4, r0, r1
 80085a2:	493a      	ldr	r1, [pc, #232]	; (800868c <HAL_RCC_GetSysClockFreq+0x168>)
 80085a4:	fba2 0101 	umull	r0, r1, r2, r1
 80085a8:	1863      	adds	r3, r4, r1
 80085aa:	4619      	mov	r1, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	461a      	mov	r2, r3
 80085b0:	f04f 0300 	mov.w	r3, #0
 80085b4:	f7f7 fe34 	bl	8000220 <__aeabi_uldivmod>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4613      	mov	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	e04a      	b.n	8008658 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085c2:	4b30      	ldr	r3, [pc, #192]	; (8008684 <HAL_RCC_GetSysClockFreq+0x160>)
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	099b      	lsrs	r3, r3, #6
 80085c8:	461a      	mov	r2, r3
 80085ca:	f04f 0300 	mov.w	r3, #0
 80085ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80085d2:	f04f 0100 	mov.w	r1, #0
 80085d6:	ea02 0400 	and.w	r4, r2, r0
 80085da:	ea03 0501 	and.w	r5, r3, r1
 80085de:	4620      	mov	r0, r4
 80085e0:	4629      	mov	r1, r5
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	014b      	lsls	r3, r1, #5
 80085ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80085f0:	0142      	lsls	r2, r0, #5
 80085f2:	4610      	mov	r0, r2
 80085f4:	4619      	mov	r1, r3
 80085f6:	1b00      	subs	r0, r0, r4
 80085f8:	eb61 0105 	sbc.w	r1, r1, r5
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	018b      	lsls	r3, r1, #6
 8008606:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800860a:	0182      	lsls	r2, r0, #6
 800860c:	1a12      	subs	r2, r2, r0
 800860e:	eb63 0301 	sbc.w	r3, r3, r1
 8008612:	f04f 0000 	mov.w	r0, #0
 8008616:	f04f 0100 	mov.w	r1, #0
 800861a:	00d9      	lsls	r1, r3, #3
 800861c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008620:	00d0      	lsls	r0, r2, #3
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	1912      	adds	r2, r2, r4
 8008628:	eb45 0303 	adc.w	r3, r5, r3
 800862c:	f04f 0000 	mov.w	r0, #0
 8008630:	f04f 0100 	mov.w	r1, #0
 8008634:	0299      	lsls	r1, r3, #10
 8008636:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800863a:	0290      	lsls	r0, r2, #10
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4610      	mov	r0, r2
 8008642:	4619      	mov	r1, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	461a      	mov	r2, r3
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	f7f7 fde8 	bl	8000220 <__aeabi_uldivmod>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4613      	mov	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008658:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <HAL_RCC_GetSysClockFreq+0x160>)
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	0c1b      	lsrs	r3, r3, #16
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	3301      	adds	r3, #1
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008670:	60bb      	str	r3, [r7, #8]
      break;
 8008672:	e002      	b.n	800867a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008674:	4b04      	ldr	r3, [pc, #16]	; (8008688 <HAL_RCC_GetSysClockFreq+0x164>)
 8008676:	60bb      	str	r3, [r7, #8]
      break;
 8008678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800867a:	68bb      	ldr	r3, [r7, #8]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bdb0      	pop	{r4, r5, r7, pc}
 8008684:	40023800 	.word	0x40023800
 8008688:	00f42400 	.word	0x00f42400
 800868c:	017d7840 	.word	0x017d7840

08008690 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008694:	4b03      	ldr	r3, [pc, #12]	; (80086a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008696:	681b      	ldr	r3, [r3, #0]
}
 8008698:	4618      	mov	r0, r3
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	20000040 	.word	0x20000040

080086a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80086ac:	f7ff fff0 	bl	8008690 <HAL_RCC_GetHCLKFreq>
 80086b0:	4602      	mov	r2, r0
 80086b2:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	0a9b      	lsrs	r3, r3, #10
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	4903      	ldr	r1, [pc, #12]	; (80086cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80086be:	5ccb      	ldrb	r3, [r1, r3]
 80086c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	40023800 	.word	0x40023800
 80086cc:	080150a4 	.word	0x080150a4

080086d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80086d4:	f7ff ffdc 	bl	8008690 <HAL_RCC_GetHCLKFreq>
 80086d8:	4602      	mov	r2, r0
 80086da:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	0b5b      	lsrs	r3, r3, #13
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	4903      	ldr	r1, [pc, #12]	; (80086f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086e6:	5ccb      	ldrb	r3, [r1, r3]
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	40023800 	.word	0x40023800
 80086f4:	080150a4 	.word	0x080150a4

080086f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	220f      	movs	r2, #15
 8008706:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008708:	4b12      	ldr	r3, [pc, #72]	; (8008754 <HAL_RCC_GetClockConfig+0x5c>)
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f003 0203 	and.w	r2, r3, #3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008714:	4b0f      	ldr	r3, [pc, #60]	; (8008754 <HAL_RCC_GetClockConfig+0x5c>)
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008720:	4b0c      	ldr	r3, [pc, #48]	; (8008754 <HAL_RCC_GetClockConfig+0x5c>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800872c:	4b09      	ldr	r3, [pc, #36]	; (8008754 <HAL_RCC_GetClockConfig+0x5c>)
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	08db      	lsrs	r3, r3, #3
 8008732:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800873a:	4b07      	ldr	r3, [pc, #28]	; (8008758 <HAL_RCC_GetClockConfig+0x60>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 020f 	and.w	r2, r3, #15
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	601a      	str	r2, [r3, #0]
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40023800 	.word	0x40023800
 8008758:	40023c00 	.word	0x40023c00

0800875c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0301 	and.w	r3, r3, #1
 8008780:	2b00      	cmp	r3, #0
 8008782:	d012      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008784:	4b69      	ldr	r3, [pc, #420]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	4a68      	ldr	r2, [pc, #416]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800878a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800878e:	6093      	str	r3, [r2, #8]
 8008790:	4b66      	ldr	r3, [pc, #408]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008798:	4964      	ldr	r1, [pc, #400]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800879a:	4313      	orrs	r3, r2
 800879c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80087a6:	2301      	movs	r3, #1
 80087a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d017      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087b6:	4b5d      	ldr	r3, [pc, #372]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c4:	4959      	ldr	r1, [pc, #356]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087d4:	d101      	bne.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80087d6:	2301      	movs	r3, #1
 80087d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80087e2:	2301      	movs	r3, #1
 80087e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d017      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80087f2:	4b4e      	ldr	r3, [pc, #312]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008800:	494a      	ldr	r1, [pc, #296]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008802:	4313      	orrs	r3, r2
 8008804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008810:	d101      	bne.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008812:	2301      	movs	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800881e:	2301      	movs	r3, #1
 8008820:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800882e:	2301      	movs	r3, #1
 8008830:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 808b 	beq.w	8008956 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008840:	4b3a      	ldr	r3, [pc, #232]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008844:	4a39      	ldr	r2, [pc, #228]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800884a:	6413      	str	r3, [r2, #64]	; 0x40
 800884c:	4b37      	ldr	r3, [pc, #220]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800884e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008854:	60bb      	str	r3, [r7, #8]
 8008856:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008858:	4b35      	ldr	r3, [pc, #212]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a34      	ldr	r2, [pc, #208]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800885e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008864:	f7fc ff3e 	bl	80056e4 <HAL_GetTick>
 8008868:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800886a:	e008      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800886c:	f7fc ff3a 	bl	80056e4 <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b64      	cmp	r3, #100	; 0x64
 8008878:	d901      	bls.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e357      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800887e:	4b2c      	ldr	r3, [pc, #176]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0f0      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800888a:	4b28      	ldr	r3, [pc, #160]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800888c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008892:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d035      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d02e      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088a8:	4b20      	ldr	r3, [pc, #128]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80088b2:	4b1e      	ldr	r3, [pc, #120]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b6:	4a1d      	ldr	r2, [pc, #116]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80088be:	4b1b      	ldr	r3, [pc, #108]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c2:	4a1a      	ldr	r2, [pc, #104]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80088ca:	4a18      	ldr	r2, [pc, #96]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80088d0:	4b16      	ldr	r3, [pc, #88]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d114      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088dc:	f7fc ff02 	bl	80056e4 <HAL_GetTick>
 80088e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088e2:	e00a      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088e4:	f7fc fefe 	bl	80056e4 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d901      	bls.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e319      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088fa:	4b0c      	ldr	r3, [pc, #48]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0ee      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800890e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008912:	d111      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008920:	4b04      	ldr	r3, [pc, #16]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008922:	400b      	ands	r3, r1
 8008924:	4901      	ldr	r1, [pc, #4]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008926:	4313      	orrs	r3, r2
 8008928:	608b      	str	r3, [r1, #8]
 800892a:	e00b      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800892c:	40023800 	.word	0x40023800
 8008930:	40007000 	.word	0x40007000
 8008934:	0ffffcff 	.word	0x0ffffcff
 8008938:	4bb1      	ldr	r3, [pc, #708]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	4ab0      	ldr	r2, [pc, #704]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800893e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008942:	6093      	str	r3, [r2, #8]
 8008944:	4bae      	ldr	r3, [pc, #696]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008946:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008950:	49ab      	ldr	r1, [pc, #684]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008952:	4313      	orrs	r3, r2
 8008954:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0310 	and.w	r3, r3, #16
 800895e:	2b00      	cmp	r3, #0
 8008960:	d010      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008962:	4ba7      	ldr	r3, [pc, #668]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008968:	4aa5      	ldr	r2, [pc, #660]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800896a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800896e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008972:	4ba3      	ldr	r3, [pc, #652]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008974:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897c:	49a0      	ldr	r1, [pc, #640]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800897e:	4313      	orrs	r3, r2
 8008980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00a      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008990:	4b9b      	ldr	r3, [pc, #620]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008996:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800899e:	4998      	ldr	r1, [pc, #608]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80089b2:	4b93      	ldr	r3, [pc, #588]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c0:	498f      	ldr	r1, [pc, #572]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00a      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80089d4:	4b8a      	ldr	r3, [pc, #552]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089e2:	4987      	ldr	r1, [pc, #540]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089f6:	4b82      	ldr	r3, [pc, #520]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	497e      	ldr	r1, [pc, #504]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00a      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a18:	4b79      	ldr	r3, [pc, #484]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1e:	f023 0203 	bic.w	r2, r3, #3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a26:	4976      	ldr	r1, [pc, #472]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a3a:	4b71      	ldr	r3, [pc, #452]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a40:	f023 020c 	bic.w	r2, r3, #12
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a48:	496d      	ldr	r1, [pc, #436]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00a      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a5c:	4b68      	ldr	r3, [pc, #416]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a6a:	4965      	ldr	r1, [pc, #404]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008a7e:	4b60      	ldr	r3, [pc, #384]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a8c:	495c      	ldr	r1, [pc, #368]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00a      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008aa0:	4b57      	ldr	r3, [pc, #348]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aae:	4954      	ldr	r1, [pc, #336]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008ac2:	4b4f      	ldr	r3, [pc, #316]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad0:	494b      	ldr	r1, [pc, #300]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00a      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008ae4:	4b46      	ldr	r3, [pc, #280]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af2:	4943      	ldr	r1, [pc, #268]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008b06:	4b3e      	ldr	r3, [pc, #248]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b14:	493a      	ldr	r1, [pc, #232]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00a      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b28:	4b35      	ldr	r3, [pc, #212]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b36:	4932      	ldr	r1, [pc, #200]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d011      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008b4a:	4b2d      	ldr	r3, [pc, #180]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b58:	4929      	ldr	r1, [pc, #164]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b68:	d101      	bne.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b8a:	4b1d      	ldr	r3, [pc, #116]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b98:	4919      	ldr	r1, [pc, #100]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008bac:	4b14      	ldr	r3, [pc, #80]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bbc:	4910      	ldr	r1, [pc, #64]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d006      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 80d9 	beq.w	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008bd8:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a08      	ldr	r2, [pc, #32]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008be4:	f7fc fd7e 	bl	80056e4 <HAL_GetTick>
 8008be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008bea:	e00b      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008bec:	f7fc fd7a 	bl	80056e4 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b64      	cmp	r3, #100	; 0x64
 8008bf8:	d904      	bls.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e197      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008bfe:	bf00      	nop
 8008c00:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c04:	4b6c      	ldr	r3, [pc, #432]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1ed      	bne.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d021      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d11d      	bne.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008c24:	4b64      	ldr	r3, [pc, #400]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c2a:	0c1b      	lsrs	r3, r3, #16
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008c32:	4b61      	ldr	r3, [pc, #388]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c38:	0e1b      	lsrs	r3, r3, #24
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	019a      	lsls	r2, r3, #6
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	041b      	lsls	r3, r3, #16
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	061b      	lsls	r3, r3, #24
 8008c50:	431a      	orrs	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	071b      	lsls	r3, r3, #28
 8008c58:	4957      	ldr	r1, [pc, #348]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c74:	d00a      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d02e      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c8a:	d129      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008c8c:	4b4a      	ldr	r3, [pc, #296]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c92:	0c1b      	lsrs	r3, r3, #16
 8008c94:	f003 0303 	and.w	r3, r3, #3
 8008c98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c9a:	4b47      	ldr	r3, [pc, #284]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ca0:	0f1b      	lsrs	r3, r3, #28
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	019a      	lsls	r2, r3, #6
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	061b      	lsls	r3, r3, #24
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	071b      	lsls	r3, r3, #28
 8008cc0:	493d      	ldr	r1, [pc, #244]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008cc8:	4b3b      	ldr	r3, [pc, #236]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cce:	f023 021f 	bic.w	r2, r3, #31
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	4937      	ldr	r1, [pc, #220]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01d      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008cec:	4b32      	ldr	r3, [pc, #200]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cf2:	0e1b      	lsrs	r3, r3, #24
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008cfa:	4b2f      	ldr	r3, [pc, #188]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d00:	0f1b      	lsrs	r3, r3, #28
 8008d02:	f003 0307 	and.w	r3, r3, #7
 8008d06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	019a      	lsls	r2, r3, #6
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	041b      	lsls	r3, r3, #16
 8008d14:	431a      	orrs	r2, r3
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	061b      	lsls	r3, r3, #24
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	071b      	lsls	r3, r3, #28
 8008d20:	4925      	ldr	r1, [pc, #148]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d011      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	019a      	lsls	r2, r3, #6
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	041b      	lsls	r3, r3, #16
 8008d40:	431a      	orrs	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	061b      	lsls	r3, r3, #24
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	071b      	lsls	r3, r3, #28
 8008d50:	4919      	ldr	r1, [pc, #100]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008d58:	4b17      	ldr	r3, [pc, #92]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a16      	ldr	r2, [pc, #88]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d64:	f7fc fcbe 	bl	80056e4 <HAL_GetTick>
 8008d68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008d6c:	f7fc fcba 	bl	80056e4 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b64      	cmp	r3, #100	; 0x64
 8008d78:	d901      	bls.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e0d7      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d7e:	4b0e      	ldr	r3, [pc, #56]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0f0      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	f040 80cd 	bne.w	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008d92:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a08      	ldr	r2, [pc, #32]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d9e:	f7fc fca1 	bl	80056e4 <HAL_GetTick>
 8008da2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008da4:	e00a      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008da6:	f7fc fc9d 	bl	80056e4 <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	2b64      	cmp	r3, #100	; 0x64
 8008db2:	d903      	bls.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e0ba      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008db8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008dbc:	4b5e      	ldr	r3, [pc, #376]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dc8:	d0ed      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d009      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d02e      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d12a      	bne.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008df2:	4b51      	ldr	r3, [pc, #324]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df8:	0c1b      	lsrs	r3, r3, #16
 8008dfa:	f003 0303 	and.w	r3, r3, #3
 8008dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e00:	4b4d      	ldr	r3, [pc, #308]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e06:	0f1b      	lsrs	r3, r3, #28
 8008e08:	f003 0307 	and.w	r3, r3, #7
 8008e0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	019a      	lsls	r2, r3, #6
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	041b      	lsls	r3, r3, #16
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	061b      	lsls	r3, r3, #24
 8008e20:	431a      	orrs	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	071b      	lsls	r3, r3, #28
 8008e26:	4944      	ldr	r1, [pc, #272]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008e2e:	4b42      	ldr	r3, [pc, #264]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	021b      	lsls	r3, r3, #8
 8008e40:	493d      	ldr	r1, [pc, #244]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d022      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e5c:	d11d      	bne.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e5e:	4b36      	ldr	r3, [pc, #216]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e64:	0e1b      	lsrs	r3, r3, #24
 8008e66:	f003 030f 	and.w	r3, r3, #15
 8008e6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e6c:	4b32      	ldr	r3, [pc, #200]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e72:	0f1b      	lsrs	r3, r3, #28
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	019a      	lsls	r2, r3, #6
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	041b      	lsls	r3, r3, #16
 8008e86:	431a      	orrs	r2, r3
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	061b      	lsls	r3, r3, #24
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	071b      	lsls	r3, r3, #28
 8008e92:	4929      	ldr	r1, [pc, #164]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0308 	and.w	r3, r3, #8
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d028      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ea6:	4b24      	ldr	r3, [pc, #144]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eac:	0e1b      	lsrs	r3, r3, #24
 8008eae:	f003 030f 	and.w	r3, r3, #15
 8008eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008eb4:	4b20      	ldr	r3, [pc, #128]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eba:	0c1b      	lsrs	r3, r3, #16
 8008ebc:	f003 0303 	and.w	r3, r3, #3
 8008ec0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	019a      	lsls	r2, r3, #6
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	041b      	lsls	r3, r3, #16
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	061b      	lsls	r3, r3, #24
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	071b      	lsls	r3, r3, #28
 8008eda:	4917      	ldr	r1, [pc, #92]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008ee2:	4b15      	ldr	r3, [pc, #84]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	4911      	ldr	r1, [pc, #68]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008ef8:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a0e      	ldr	r2, [pc, #56]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f04:	f7fc fbee 	bl	80056e4 <HAL_GetTick>
 8008f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f0a:	e008      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008f0c:	f7fc fbea 	bl	80056e4 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	2b64      	cmp	r3, #100	; 0x64
 8008f18:	d901      	bls.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e007      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f1e:	4b06      	ldr	r3, [pc, #24]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f2a:	d1ef      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3720      	adds	r7, #32
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	40023800 	.word	0x40023800

08008f3c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a80      	ldr	r2, [pc, #512]	; (800914c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8008f4c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008f4e:	4b80      	ldr	r3, [pc, #512]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f54:	099b      	lsrs	r3, r3, #6
 8008f56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008f5e:	4b7c      	ldr	r3, [pc, #496]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f64:	0c1b      	lsrs	r3, r3, #16
 8008f66:	f003 0203 	and.w	r2, r3, #3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008f6e:	4b78      	ldr	r3, [pc, #480]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f74:	0e1b      	lsrs	r3, r3, #24
 8008f76:	f003 020f 	and.w	r2, r3, #15
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f7e:	4b74      	ldr	r3, [pc, #464]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f84:	0f1b      	lsrs	r3, r3, #28
 8008f86:	f003 0207 	and.w	r2, r3, #7
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8008f8e:	4b70      	ldr	r3, [pc, #448]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f94:	099b      	lsrs	r3, r3, #6
 8008f96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008f9e:	4b6c      	ldr	r3, [pc, #432]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa4:	0c1b      	lsrs	r3, r3, #16
 8008fa6:	f003 0203 	and.w	r2, r3, #3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008fae:	4b68      	ldr	r3, [pc, #416]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fb4:	0e1b      	lsrs	r3, r3, #24
 8008fb6:	f003 020f 	and.w	r2, r3, #15
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008fbe:	4b64      	ldr	r3, [pc, #400]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fc4:	0f1b      	lsrs	r3, r3, #28
 8008fc6:	f003 0207 	and.w	r2, r3, #7
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8008fce:	4b60      	ldr	r3, [pc, #384]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fd4:	f003 021f 	and.w	r2, r3, #31
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8008fdc:	4b5c      	ldr	r3, [pc, #368]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe2:	0a1b      	lsrs	r3, r3, #8
 8008fe4:	f003 021f 	and.w	r2, r3, #31
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8008fec:	4b58      	ldr	r3, [pc, #352]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ff2:	0c1b      	lsrs	r3, r3, #16
 8008ff4:	f003 0203 	and.w	r2, r3, #3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8008ffc:	4b54      	ldr	r3, [pc, #336]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009002:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800900a:	4b51      	ldr	r3, [pc, #324]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800900c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009010:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8009018:	4b4d      	ldr	r3, [pc, #308]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8009024:	4b4a      	ldr	r3, [pc, #296]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800902a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8009032:	4b47      	ldr	r3, [pc, #284]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009038:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8009040:	4b43      	ldr	r3, [pc, #268]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009046:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800904e:	4b40      	ldr	r3, [pc, #256]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009054:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800905c:	4b3c      	ldr	r3, [pc, #240]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800905e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009062:	f003 0203 	and.w	r2, r3, #3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800906a:	4b39      	ldr	r3, [pc, #228]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800906c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009070:	f003 020c 	and.w	r2, r3, #12
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8009078:	4b35      	ldr	r3, [pc, #212]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800907a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800907e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8009086:	4b32      	ldr	r3, [pc, #200]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800908c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8009094:	4b2e      	ldr	r3, [pc, #184]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80090a2:	4b2b      	ldr	r3, [pc, #172]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80090a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a8:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80090b0:	4b27      	ldr	r3, [pc, #156]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80090b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b6:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80090be:	4b24      	ldr	r3, [pc, #144]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80090c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c4:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80090cc:	4b20      	ldr	r3, [pc, #128]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80090ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090d2:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80090da:	4b1d      	ldr	r3, [pc, #116]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80090dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e0:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80090e8:	4b19      	ldr	r3, [pc, #100]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80090ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ee:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80090f6:	4b16      	ldr	r3, [pc, #88]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80090f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8009106:	4b12      	ldr	r3, [pc, #72]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800910e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8009110:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009114:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	431a      	orrs	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8009120:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d103      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8009134:	e003      	b.n	800913e <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800913c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800913e:	bf00      	nop
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	00fffff1 	.word	0x00fffff1
 8009150:	40023800 	.word	0x40023800

08009154 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009172:	f040 808c 	bne.w	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009176:	4b95      	ldr	r3, [pc, #596]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800917c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009184:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800918c:	d07c      	beq.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009194:	d87d      	bhi.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091a2:	d039      	beq.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80091a4:	e075      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80091a6:	4b89      	ldr	r3, [pc, #548]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d108      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80091b2:	4b86      	ldr	r3, [pc, #536]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091ba:	4a85      	ldr	r2, [pc, #532]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80091bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	e007      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80091c4:	4b81      	ldr	r3, [pc, #516]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091cc:	4a81      	ldr	r2, [pc, #516]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80091ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80091d4:	4b7d      	ldr	r3, [pc, #500]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091da:	0e1b      	lsrs	r3, r3, #24
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80091e2:	4b7a      	ldr	r3, [pc, #488]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e8:	099b      	lsrs	r3, r3, #6
 80091ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	fb02 f203 	mul.w	r2, r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80091fc:	4b73      	ldr	r3, [pc, #460]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	f003 031f 	and.w	r3, r3, #31
 8009208:	3301      	adds	r3, #1
 800920a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	fbb2 f3f3 	udiv	r3, r2, r3
 8009214:	617b      	str	r3, [r7, #20]
        break;
 8009216:	e03d      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009218:	4b6c      	ldr	r3, [pc, #432]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d108      	bne.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009224:	4b69      	ldr	r3, [pc, #420]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800922c:	4a68      	ldr	r2, [pc, #416]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800922e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	e007      	b.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009236:	4b65      	ldr	r3, [pc, #404]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800923e:	4a65      	ldr	r2, [pc, #404]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009240:	fbb2 f3f3 	udiv	r3, r2, r3
 8009244:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009246:	4b61      	ldr	r3, [pc, #388]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800924c:	0e1b      	lsrs	r3, r3, #24
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009254:	4b5d      	ldr	r3, [pc, #372]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800925a:	099b      	lsrs	r3, r3, #6
 800925c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	fb02 f203 	mul.w	r2, r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	fbb2 f3f3 	udiv	r3, r2, r3
 800926c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800926e:	4b57      	ldr	r3, [pc, #348]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009274:	f003 031f 	and.w	r3, r3, #31
 8009278:	3301      	adds	r3, #1
 800927a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	fbb2 f3f3 	udiv	r3, r2, r3
 8009284:	617b      	str	r3, [r7, #20]
        break;
 8009286:	e005      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009288:	4b53      	ldr	r3, [pc, #332]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800928a:	617b      	str	r3, [r7, #20]
        break;
 800928c:	e002      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800928e:	bf00      	nop
 8009290:	e000      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8009292:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929a:	f040 808c 	bne.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800929e:	4b4b      	ldr	r3, [pc, #300]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80092ac:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092b4:	d07c      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092bc:	d87d      	bhi.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092ca:	d039      	beq.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80092cc:	e075      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80092ce:	4b3f      	ldr	r3, [pc, #252]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d108      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80092da:	4b3c      	ldr	r3, [pc, #240]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092e2:	4a3b      	ldr	r2, [pc, #236]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80092e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	e007      	b.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80092ec:	4b37      	ldr	r3, [pc, #220]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092f4:	4a37      	ldr	r2, [pc, #220]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80092f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fa:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80092fc:	4b33      	ldr	r3, [pc, #204]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009302:	0e1b      	lsrs	r3, r3, #24
 8009304:	f003 030f 	and.w	r3, r3, #15
 8009308:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800930a:	4b30      	ldr	r3, [pc, #192]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800930c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009310:	099b      	lsrs	r3, r3, #6
 8009312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	fb02 f203 	mul.w	r2, r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009322:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009324:	4b29      	ldr	r3, [pc, #164]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932a:	0a1b      	lsrs	r3, r3, #8
 800932c:	f003 031f 	and.w	r3, r3, #31
 8009330:	3301      	adds	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	fbb2 f3f3 	udiv	r3, r2, r3
 800933c:	617b      	str	r3, [r7, #20]
        break;
 800933e:	e03d      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009340:	4b22      	ldr	r3, [pc, #136]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d108      	bne.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800934c:	4b1f      	ldr	r3, [pc, #124]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009354:	4a1e      	ldr	r2, [pc, #120]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009356:	fbb2 f3f3 	udiv	r3, r2, r3
 800935a:	613b      	str	r3, [r7, #16]
 800935c:	e007      	b.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800935e:	4b1b      	ldr	r3, [pc, #108]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009366:	4a1b      	ldr	r2, [pc, #108]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009368:	fbb2 f3f3 	udiv	r3, r2, r3
 800936c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800936e:	4b17      	ldr	r3, [pc, #92]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009374:	0e1b      	lsrs	r3, r3, #24
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800937c:	4b13      	ldr	r3, [pc, #76]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800937e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009382:	099b      	lsrs	r3, r3, #6
 8009384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	fb02 f203 	mul.w	r2, r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	fbb2 f3f3 	udiv	r3, r2, r3
 8009394:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009396:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800939c:	f003 031f 	and.w	r3, r3, #31
 80093a0:	3301      	adds	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ac:	617b      	str	r3, [r7, #20]
        break;
 80093ae:	e005      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80093b0:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80093b2:	617b      	str	r3, [r7, #20]
        break;
 80093b4:	e002      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80093b6:	bf00      	nop
 80093b8:	e000      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80093ba:	bf00      	nop

  return frequency;
 80093bc:	697b      	ldr	r3, [r7, #20]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	40023800 	.word	0x40023800
 80093d0:	00f42400 	.word	0x00f42400
 80093d4:	017d7840 	.word	0x017d7840
 80093d8:	00bb8000 	.word	0x00bb8000

080093dc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e156      	b.n	80096a8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d106      	bne.n	8009414 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7fa fbe4 	bl	8003bdc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fb13 	bl	8009a48 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	2b02      	cmp	r3, #2
 8009428:	d00c      	beq.n	8009444 <HAL_SAI_Init+0x68>
 800942a:	2b02      	cmp	r3, #2
 800942c:	d80d      	bhi.n	800944a <HAL_SAI_Init+0x6e>
 800942e:	2b00      	cmp	r3, #0
 8009430:	d002      	beq.n	8009438 <HAL_SAI_Init+0x5c>
 8009432:	2b01      	cmp	r3, #1
 8009434:	d003      	beq.n	800943e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009436:	e008      	b.n	800944a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	61fb      	str	r3, [r7, #28]
      break;
 800943c:	e006      	b.n	800944c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800943e:	2310      	movs	r3, #16
 8009440:	61fb      	str	r3, [r7, #28]
      break;
 8009442:	e003      	b.n	800944c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009444:	2320      	movs	r3, #32
 8009446:	61fb      	str	r3, [r7, #28]
      break;
 8009448:	e000      	b.n	800944c <HAL_SAI_Init+0x70>
      break;
 800944a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	2b03      	cmp	r3, #3
 8009452:	d81e      	bhi.n	8009492 <HAL_SAI_Init+0xb6>
 8009454:	a201      	add	r2, pc, #4	; (adr r2, 800945c <HAL_SAI_Init+0x80>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	0800946d 	.word	0x0800946d
 8009460:	08009473 	.word	0x08009473
 8009464:	0800947b 	.word	0x0800947b
 8009468:	08009483 	.word	0x08009483
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009470:	e010      	b.n	8009494 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009476:	617b      	str	r3, [r7, #20]
    }
    break;
 8009478:	e00c      	b.n	8009494 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800947a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800947e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009480:	e008      	b.n	8009494 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009486:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	f043 0301 	orr.w	r3, r3, #1
 800948e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009490:	e000      	b.n	8009494 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009492:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a85      	ldr	r2, [pc, #532]	; (80096b0 <HAL_SAI_Init+0x2d4>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d004      	beq.n	80094a8 <HAL_SAI_Init+0xcc>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a84      	ldr	r2, [pc, #528]	; (80096b4 <HAL_SAI_Init+0x2d8>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d103      	bne.n	80094b0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80094a8:	4a83      	ldr	r2, [pc, #524]	; (80096b8 <HAL_SAI_Init+0x2dc>)
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	e002      	b.n	80094b6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80094b0:	4a82      	ldr	r2, [pc, #520]	; (80096bc <HAL_SAI_Init+0x2e0>)
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d04c      	beq.n	8009558 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a7a      	ldr	r2, [pc, #488]	; (80096b0 <HAL_SAI_Init+0x2d4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d004      	beq.n	80094d6 <HAL_SAI_Init+0xfa>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a78      	ldr	r2, [pc, #480]	; (80096b4 <HAL_SAI_Init+0x2d8>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d104      	bne.n	80094e0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80094d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80094da:	f7ff fe3b 	bl	8009154 <HAL_RCCEx_GetPeriphCLKFreq>
 80094de:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a76      	ldr	r2, [pc, #472]	; (80096c0 <HAL_SAI_Init+0x2e4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d004      	beq.n	80094f4 <HAL_SAI_Init+0x118>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a75      	ldr	r2, [pc, #468]	; (80096c4 <HAL_SAI_Init+0x2e8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d104      	bne.n	80094fe <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80094f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80094f8:	f7ff fe2c 	bl	8009154 <HAL_RCCEx_GetPeriphCLKFreq>
 80094fc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	4613      	mov	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	461a      	mov	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	025b      	lsls	r3, r3, #9
 8009510:	fbb2 f3f3 	udiv	r3, r2, r3
 8009514:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	4a6b      	ldr	r2, [pc, #428]	; (80096c8 <HAL_SAI_Init+0x2ec>)
 800951a:	fba2 2303 	umull	r2, r3, r2, r3
 800951e:	08da      	lsrs	r2, r3, #3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009524:	68f9      	ldr	r1, [r7, #12]
 8009526:	4b68      	ldr	r3, [pc, #416]	; (80096c8 <HAL_SAI_Init+0x2ec>)
 8009528:	fba3 2301 	umull	r2, r3, r3, r1
 800952c:	08da      	lsrs	r2, r3, #3
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	1aca      	subs	r2, r1, r3
 8009538:	2a08      	cmp	r2, #8
 800953a:	d904      	bls.n	8009546 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954a:	2b04      	cmp	r3, #4
 800954c:	d104      	bne.n	8009558 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	085a      	lsrs	r2, r3, #1
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <HAL_SAI_Init+0x18c>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	2b02      	cmp	r3, #2
 8009566:	d109      	bne.n	800957c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <HAL_SAI_Init+0x198>
 8009570:	2300      	movs	r3, #0
 8009572:	e001      	b.n	8009578 <HAL_SAI_Init+0x19c>
 8009574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009578:	61bb      	str	r3, [r7, #24]
 800957a:	e008      	b.n	800958e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009580:	2b01      	cmp	r3, #1
 8009582:	d102      	bne.n	800958a <HAL_SAI_Init+0x1ae>
 8009584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009588:	e000      	b.n	800958c <HAL_SAI_Init+0x1b0>
 800958a:	2300      	movs	r3, #0
 800958c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6819      	ldr	r1, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	4b4c      	ldr	r3, [pc, #304]	; (80096cc <HAL_SAI_Init+0x2f0>)
 800959a:	400b      	ands	r3, r1
 800959c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80095b2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b8:	431a      	orrs	r2, r3
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80095c6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80095d2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a1b      	ldr	r3, [r3, #32]
 80095d8:	051b      	lsls	r3, r3, #20
 80095da:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	430a      	orrs	r2, r1
 80095e2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6859      	ldr	r1, [r3, #4]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	4b38      	ldr	r3, [pc, #224]	; (80096d0 <HAL_SAI_Init+0x2f4>)
 80095f0:	400b      	ands	r3, r1
 80095f2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6859      	ldr	r1, [r3, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	431a      	orrs	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	431a      	orrs	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6899      	ldr	r1, [r3, #8]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	4b2d      	ldr	r3, [pc, #180]	; (80096d4 <HAL_SAI_Init+0x2f8>)
 800961e:	400b      	ands	r3, r1
 8009620:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6899      	ldr	r1, [r3, #8]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009632:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009638:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800963e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009644:	3b01      	subs	r3, #1
 8009646:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009648:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68d9      	ldr	r1, [r3, #12]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009660:	400b      	ands	r3, r1
 8009662:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68d9      	ldr	r1, [r3, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009672:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009678:	041b      	lsls	r3, r3, #16
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009680:	3b01      	subs	r3, #1
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3720      	adds	r7, #32
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	40015804 	.word	0x40015804
 80096b4:	40015824 	.word	0x40015824
 80096b8:	40015800 	.word	0x40015800
 80096bc:	40015c00 	.word	0x40015c00
 80096c0:	40015c04 	.word	0x40015c04
 80096c4:	40015c24 	.word	0x40015c24
 80096c8:	cccccccd 	.word	0xcccccccd
 80096cc:	ff05c010 	.word	0xff05c010
 80096d0:	ffff1ff0 	.word	0xffff1ff0
 80096d4:	fff88000 	.word	0xfff88000

080096d8 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e027      	b.n	800973a <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2202      	movs	r2, #2
 80096ee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2200      	movs	r2, #0
 80096f8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009702:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f99f 	bl	8009a48 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f042 0208 	orr.w	r2, r2, #8
 8009718:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7fa fb3c 	bl	8003d98 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	4613      	mov	r3, r2
 8009750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009752:	f7fb ffc7 	bl	80056e4 <HAL_GetTick>
 8009756:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <HAL_SAI_Transmit_DMA+0x20>
 800975e:	88fb      	ldrh	r3, [r7, #6]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e093      	b.n	8009890 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b01      	cmp	r3, #1
 8009772:	f040 808c 	bne.w	800988e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_SAI_Transmit_DMA+0x40>
 8009780:	2302      	movs	r3, #2
 8009782:	e085      	b.n	8009890 <HAL_SAI_Transmit_DMA+0x14c>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	88fa      	ldrh	r2, [r7, #6]
 8009796:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	88fa      	ldrh	r2, [r7, #6]
 800979e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2212      	movs	r2, #18
 80097ae:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b6:	4a38      	ldr	r2, [pc, #224]	; (8009898 <HAL_SAI_Transmit_DMA+0x154>)
 80097b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097be:	4a37      	ldr	r2, [pc, #220]	; (800989c <HAL_SAI_Transmit_DMA+0x158>)
 80097c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097c6:	4a36      	ldr	r2, [pc, #216]	; (80098a0 <HAL_SAI_Transmit_DMA+0x15c>)
 80097c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ce:	2200      	movs	r2, #0
 80097d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097da:	4619      	mov	r1, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	331c      	adds	r3, #28
 80097e2:	461a      	mov	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097ea:	f7fc f999 	bl	8005b20 <HAL_DMA_Start_IT>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e047      	b.n	8009890 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009800:	2100      	movs	r1, #0
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 f8ea 	bl	80099dc <SAI_InterruptFlag>
 8009808:	4601      	mov	r1, r0
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	691a      	ldr	r2, [r3, #16]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	430a      	orrs	r2, r1
 8009816:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009826:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009828:	e015      	b.n	8009856 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800982a:	f7fb ff5b 	bl	80056e4 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009838:	d90d      	bls.n	8009856 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009840:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e01c      	b.n	8009890 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d0e2      	beq.n	800982a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d107      	bne.n	8009882 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009880:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	e000      	b.n	8009890 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800988e:	2302      	movs	r3, #2
  }
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	08009b19 	.word	0x08009b19
 800989c:	08009ab9 	.word	0x08009ab9
 80098a0:	08009bb1 	.word	0x08009bb1

080098a4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <HAL_SAI_Receive_DMA+0x1a>
 80098b8:	88fb      	ldrh	r3, [r7, #6]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e074      	b.n	80099ac <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d16d      	bne.n	80099aa <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d101      	bne.n	80098dc <HAL_SAI_Receive_DMA+0x38>
 80098d8:	2302      	movs	r3, #2
 80098da:	e067      	b.n	80099ac <HAL_SAI_Receive_DMA+0x108>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	88fa      	ldrh	r2, [r7, #6]
 80098ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	88fa      	ldrh	r2, [r7, #6]
 80098f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2222      	movs	r2, #34	; 0x22
 8009906:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990e:	4a29      	ldr	r2, [pc, #164]	; (80099b4 <HAL_SAI_Receive_DMA+0x110>)
 8009910:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009916:	4a28      	ldr	r2, [pc, #160]	; (80099b8 <HAL_SAI_Receive_DMA+0x114>)
 8009918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991e:	4a27      	ldr	r2, [pc, #156]	; (80099bc <HAL_SAI_Receive_DMA+0x118>)
 8009920:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009926:	2200      	movs	r2, #0
 8009928:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	331c      	adds	r3, #28
 8009934:	4619      	mov	r1, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800993a:	461a      	mov	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009942:	f7fc f8ed 	bl	8005b20 <HAL_DMA_Start_IT>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d005      	beq.n	8009958 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e029      	b.n	80099ac <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009958:	2100      	movs	r1, #0
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 f83e 	bl	80099dc <SAI_InterruptFlag>
 8009960:	4601      	mov	r1, r0
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	691a      	ldr	r2, [r3, #16]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	430a      	orrs	r2, r1
 800996e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800997e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d107      	bne.n	800999e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800999c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	e000      	b.n	80099ac <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80099aa:	2302      	movs	r3, #2
  }
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	08009b95 	.word	0x08009b95
 80099b8:	08009b35 	.word	0x08009b35
 80099bc:	08009bb1 	.word	0x08009bb1

080099c0 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  return hsai->State;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80099ce:	b2db      	uxtb	r3, r3
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d103      	bne.n	80099f8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f043 0308 	orr.w	r3, r3, #8
 80099f6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d10b      	bne.n	8009a18 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d003      	beq.n	8009a10 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d103      	bne.n	8009a18 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f043 0310 	orr.w	r3, r3, #16
 8009a16:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d003      	beq.n	8009a28 <SAI_InterruptFlag+0x4c>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d104      	bne.n	8009a32 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009a2e:	60fb      	str	r3, [r7, #12]
 8009a30:	e003      	b.n	8009a3a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f043 0304 	orr.w	r3, r3, #4
 8009a38:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009a50:	4b17      	ldr	r3, [pc, #92]	; (8009ab0 <SAI_Disable+0x68>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a17      	ldr	r2, [pc, #92]	; (8009ab4 <SAI_Disable+0x6c>)
 8009a56:	fba2 2303 	umull	r2, r3, r2, r3
 8009a5a:	0b1b      	lsrs	r3, r3, #12
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a72:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	1e5a      	subs	r2, r3, #1
 8009a78:	60fa      	str	r2, [r7, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	72fb      	strb	r3, [r7, #11]
      break;
 8009a92:	e006      	b.n	8009aa2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e8      	bne.n	8009a74 <SAI_Disable+0x2c>

  return status;
 8009aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	20000040 	.word	0x20000040
 8009ab4:	95cbec1b 	.word	0x95cbec1b

08009ab8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	69db      	ldr	r3, [r3, #28]
 8009aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ace:	d01c      	beq.n	8009b0a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009ae6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009ae8:	2100      	movs	r1, #0
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7ff ff76 	bl	80099dc <SAI_InterruptFlag>
 8009af0:	4603      	mov	r3, r0
 8009af2:	43d9      	mvns	r1, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691a      	ldr	r2, [r3, #16]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	400a      	ands	r2, r1
 8009b00:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f7f8 fac8 	bl	80020a0 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009b10:	bf00      	nop
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7f8 fac4 	bl	80020b4 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009b2c:	bf00      	nop
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b40:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	69db      	ldr	r3, [r3, #28]
 8009b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b4a:	d01c      	beq.n	8009b86 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009b5a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009b64:	2100      	movs	r1, #0
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7ff ff38 	bl	80099dc <SAI_InterruptFlag>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	43d9      	mvns	r1, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	691a      	ldr	r2, [r3, #16]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	400a      	ands	r2, r1
 8009b7c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f7f8 fcba 	bl	8002500 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009b8c:	bf00      	nop
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f7f8 fcb6 	bl	8002514 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009ba8:	bf00      	nop
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d004      	beq.n	8009be2 <SAI_DMAError+0x32>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d112      	bne.n	8009c08 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009bf0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7ff ff28 	bl	8009a48 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7f8 fa5d 	bl	80020c8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e022      	b.n	8009c6e <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d105      	bne.n	8009c40 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7f9 fde8 	bl	8003810 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2203      	movs	r2, #3
 8009c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f815 	bl	8009c78 <HAL_SD_InitCard>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e00a      	b.n	8009c6e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
	...

08009c78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009c78:	b5b0      	push	{r4, r5, r7, lr}
 8009c7a:	b08e      	sub	sp, #56	; 0x38
 8009c7c:	af04      	add	r7, sp, #16
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009c80:	2300      	movs	r3, #0
 8009c82:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009c94:	2376      	movs	r3, #118	; 0x76
 8009c96:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681d      	ldr	r5, [r3, #0]
 8009c9c:	466c      	mov	r4, sp
 8009c9e:	f107 0314 	add.w	r3, r7, #20
 8009ca2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ca6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009caa:	f107 0308 	add.w	r3, r7, #8
 8009cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	f002 fb63 	bl	800c37c <SDMMC_Init>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e056      	b.n	8009d76 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cd6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f002 fb97 	bl	800c410 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cf0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fff2 	bl	800acdc <SD_PowerON>
 8009cf8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00b      	beq.n	8009d18 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e02e      	b.n	8009d76 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 ff13 	bl	800ab44 <SD_InitCard>
 8009d1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00b      	beq.n	8009d3e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	431a      	orrs	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e01b      	b.n	8009d76 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d46:	4618      	mov	r0, r3
 8009d48:	f002 fbf6 	bl	800c538 <SDMMC_CmdBlockLength>
 8009d4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00f      	beq.n	8009d74 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a09      	ldr	r2, [pc, #36]	; (8009d80 <HAL_SD_InitCard+0x108>)
 8009d5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	431a      	orrs	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e000      	b.n	8009d76 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3728      	adds	r7, #40	; 0x28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	004005ff 	.word	0x004005ff

08009d84 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b08c      	sub	sp, #48	; 0x30
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d107      	bne.n	8009dac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e0c3      	b.n	8009f34 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	f040 80bc 	bne.w	8009f32 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	441a      	add	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d907      	bls.n	8009dde <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e0aa      	b.n	8009f34 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2203      	movs	r2, #3
 8009de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2200      	movs	r2, #0
 8009dec:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	4a4e      	ldr	r2, [pc, #312]	; (8009f3c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009e04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	4a4d      	ldr	r2, [pc, #308]	; (8009f40 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009e0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e12:	2200      	movs	r2, #0
 8009e14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	689a      	ldr	r2, [r3, #8]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3380      	adds	r3, #128	; 0x80
 8009e44:	4619      	mov	r1, r3
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	025b      	lsls	r3, r3, #9
 8009e4c:	089b      	lsrs	r3, r3, #2
 8009e4e:	f7fb fe67 	bl	8005b20 <HAL_DMA_Start_IT>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d017      	beq.n	8009e88 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009e66:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a35      	ldr	r2, [pc, #212]	; (8009f44 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e055      	b.n	8009f34 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0208 	orr.w	r2, r2, #8
 8009e96:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d002      	beq.n	8009ea6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8009ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea2:	025b      	lsls	r3, r3, #9
 8009ea4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eaa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	025b      	lsls	r3, r3, #9
 8009eb0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009eb2:	2390      	movs	r3, #144	; 0x90
 8009eb4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f107 0210 	add.w	r2, r7, #16
 8009eca:	4611      	mov	r1, r2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f002 fb07 	bl	800c4e0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d90a      	bls.n	8009eee <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2282      	movs	r2, #130	; 0x82
 8009edc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f002 fb6b 	bl	800c5c0 <SDMMC_CmdReadMultiBlock>
 8009eea:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009eec:	e009      	b.n	8009f02 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2281      	movs	r2, #129	; 0x81
 8009ef2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009efa:	4618      	mov	r0, r3
 8009efc:	f002 fb3e 	bl	800c57c <SDMMC_CmdReadSingleBlock>
 8009f00:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d012      	beq.n	8009f2e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a0d      	ldr	r2, [pc, #52]	; (8009f44 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f16:	431a      	orrs	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e002      	b.n	8009f34 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e000      	b.n	8009f34 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009f32:	2302      	movs	r3, #2
  }
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3730      	adds	r7, #48	; 0x30
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	0800a953 	.word	0x0800a953
 8009f40:	0800a9c5 	.word	0x0800a9c5
 8009f44:	004005ff 	.word	0x004005ff

08009f48 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b08c      	sub	sp, #48	; 0x30
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
 8009f54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d107      	bne.n	8009f70 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e0c6      	b.n	800a0fe <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	f040 80bf 	bne.w	800a0fc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	441a      	add	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d907      	bls.n	8009fa2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e0ad      	b.n	800a0fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2203      	movs	r2, #3
 8009fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f042 021a 	orr.w	r2, r2, #26
 8009fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc6:	4a50      	ldr	r2, [pc, #320]	; (800a108 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fce:	4a4f      	ldr	r2, [pc, #316]	; (800a10c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009fd0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d002      	beq.n	8009fe8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe4:	025b      	lsls	r3, r3, #9
 8009fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d90a      	bls.n	800a004 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	22a0      	movs	r2, #160	; 0xa0
 8009ff2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f002 fb24 	bl	800c648 <SDMMC_CmdWriteMultiBlock>
 800a000:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a002:	e009      	b.n	800a018 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2290      	movs	r2, #144	; 0x90
 800a008:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a010:	4618      	mov	r0, r3
 800a012:	f002 faf7 	bl	800c604 <SDMMC_CmdWriteSingleBlock>
 800a016:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d012      	beq.n	800a044 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a3b      	ldr	r2, [pc, #236]	; (800a110 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a024:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02c:	431a      	orrs	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e05c      	b.n	800a0fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f042 0208 	orr.w	r2, r2, #8
 800a052:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a058:	2240      	movs	r2, #64	; 0x40
 800a05a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	430a      	orrs	r2, r1
 800a076:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a07c:	68b9      	ldr	r1, [r7, #8]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3380      	adds	r3, #128	; 0x80
 800a084:	461a      	mov	r2, r3
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	025b      	lsls	r3, r3, #9
 800a08a:	089b      	lsrs	r3, r3, #2
 800a08c:	f7fb fd48 	bl	8005b20 <HAL_DMA_Start_IT>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d01a      	beq.n	800a0cc <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f022 021a 	bic.w	r2, r2, #26
 800a0a4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a19      	ldr	r2, [pc, #100]	; (800a110 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a0ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e018      	b.n	800a0fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	025b      	lsls	r3, r3, #9
 800a0d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a0d8:	2390      	movs	r3, #144	; 0x90
 800a0da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f107 0210 	add.w	r2, r7, #16
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f002 f9f4 	bl	800c4e0 <SDMMC_ConfigData>

      return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	e000      	b.n	800a0fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a0fc:	2302      	movs	r3, #2
  }
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3730      	adds	r7, #48	; 0x30
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	0800a929 	.word	0x0800a929
 800a10c:	0800a9c5 	.word	0x0800a9c5
 800a110:	004005ff 	.word	0x004005ff

0800a114 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a120:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d008      	beq.n	800a142 <HAL_SD_IRQHandler+0x2e>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f003 0308 	and.w	r3, r3, #8
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 ffed 	bl	800b11a <SD_Read_IT>
 800a140:	e153      	b.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 808d 	beq.w	800a26c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a15a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	4ba3      	ldr	r3, [pc, #652]	; (800a3f4 <HAL_SD_IRQHandler+0x2e0>)
 800a168:	400b      	ands	r3, r1
 800a16a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f022 0201 	bic.w	r2, r2, #1
 800a17a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f003 0308 	and.w	r3, r3, #8
 800a182:	2b00      	cmp	r3, #0
 800a184:	d039      	beq.n	800a1fa <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f003 0302 	and.w	r3, r3, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d104      	bne.n	800a19a <HAL_SD_IRQHandler+0x86>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f003 0320 	and.w	r3, r3, #32
 800a196:	2b00      	cmp	r3, #0
 800a198:	d011      	beq.n	800a1be <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f002 fa74 	bl	800c68c <SDMMC_CmdStopTransfer>
 800a1a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d008      	beq.n	800a1be <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f921 	bl	800a400 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f240 523a 	movw	r2, #1338	; 0x53a
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d104      	bne.n	800a1ea <HAL_SD_IRQHandler+0xd6>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f002 fee4 	bl	800cfb8 <HAL_SD_RxCpltCallback>
 800a1f0:	e0fb      	b.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f002 fed6 	bl	800cfa4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a1f8:	e0f7      	b.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 80f2 	beq.w	800a3ea <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d011      	beq.n	800a234 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4618      	mov	r0, r3
 800a216:	f002 fa39 	bl	800c68c <SDMMC_CmdStopTransfer>
 800a21a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d008      	beq.n	800a234 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	431a      	orrs	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f8e6 	bl	800a400 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f040 80d5 	bne.w	800a3ea <HAL_SD_IRQHandler+0x2d6>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b00      	cmp	r3, #0
 800a248:	f040 80cf 	bne.w	800a3ea <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f022 0208 	bic.w	r2, r2, #8
 800a25a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f002 fe9d 	bl	800cfa4 <HAL_SD_TxCpltCallback>
}
 800a26a:	e0be      	b.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a276:	2b00      	cmp	r3, #0
 800a278:	d008      	beq.n	800a28c <HAL_SD_IRQHandler+0x178>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f003 0308 	and.w	r3, r3, #8
 800a280:	2b00      	cmp	r3, #0
 800a282:	d003      	beq.n	800a28c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 ff99 	bl	800b1bc <SD_Write_IT>
 800a28a:	e0ae      	b.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a292:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 80a7 	beq.w	800a3ea <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a2:	f003 0302 	and.w	r3, r3, #2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d005      	beq.n	800a2b6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ae:	f043 0202 	orr.w	r2, r3, #2
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2bc:	f003 0308 	and.w	r3, r3, #8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d005      	beq.n	800a2d0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c8:	f043 0208 	orr.w	r2, r3, #8
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d6:	f003 0320 	and.w	r3, r3, #32
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d005      	beq.n	800a2ea <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e2:	f043 0220 	orr.w	r2, r3, #32
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f0:	f003 0310 	and.w	r3, r3, #16
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fc:	f043 0210 	orr.w	r2, r3, #16
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f240 523a 	movw	r2, #1338	; 0x53a
 800a30c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a31c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4618      	mov	r0, r3
 800a324:	f002 f9b2 	bl	800c68c <SDMMC_CmdStopTransfer>
 800a328:	4602      	mov	r2, r0
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	431a      	orrs	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f003 0308 	and.w	r3, r3, #8
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00a      	beq.n	800a354 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 f857 	bl	800a400 <HAL_SD_ErrorCallback>
}
 800a352:	e04a      	b.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d045      	beq.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f003 0310 	and.w	r3, r3, #16
 800a364:	2b00      	cmp	r3, #0
 800a366:	d104      	bne.n	800a372 <HAL_SD_IRQHandler+0x25e>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d011      	beq.n	800a396 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a376:	4a20      	ldr	r2, [pc, #128]	; (800a3f8 <HAL_SD_IRQHandler+0x2e4>)
 800a378:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fb fc2e 	bl	8005be0 <HAL_DMA_Abort_IT>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d02f      	beq.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 fb6a 	bl	800aa68 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a394:	e029      	b.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d104      	bne.n	800a3aa <HAL_SD_IRQHandler+0x296>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f003 0302 	and.w	r3, r3, #2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d011      	beq.n	800a3ce <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ae:	4a13      	ldr	r2, [pc, #76]	; (800a3fc <HAL_SD_IRQHandler+0x2e8>)
 800a3b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fb fc12 	bl	8005be0 <HAL_DMA_Abort_IT>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d013      	beq.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f000 fb85 	bl	800aad6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a3cc:	e00d      	b.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f002 fdd4 	bl	800cf90 <HAL_SD_AbortCallback>
}
 800a3e8:	e7ff      	b.n	800a3ea <HAL_SD_IRQHandler+0x2d6>
 800a3ea:	bf00      	nop
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	ffff3ec5 	.word	0xffff3ec5
 800a3f8:	0800aa69 	.word	0x0800aa69
 800a3fc:	0800aad7 	.word	0x0800aad7

0800a400 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a422:	0f9b      	lsrs	r3, r3, #30
 800a424:	b2da      	uxtb	r2, r3
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a42e:	0e9b      	lsrs	r3, r3, #26
 800a430:	b2db      	uxtb	r3, r3
 800a432:	f003 030f 	and.w	r3, r3, #15
 800a436:	b2da      	uxtb	r2, r3
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a440:	0e1b      	lsrs	r3, r3, #24
 800a442:	b2db      	uxtb	r3, r3
 800a444:	f003 0303 	and.w	r3, r3, #3
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a452:	0c1b      	lsrs	r3, r3, #16
 800a454:	b2da      	uxtb	r2, r3
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a45e:	0a1b      	lsrs	r3, r3, #8
 800a460:	b2da      	uxtb	r2, r3
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a474:	0d1b      	lsrs	r3, r3, #20
 800a476:	b29a      	uxth	r2, r3
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a480:	0c1b      	lsrs	r3, r3, #16
 800a482:	b2db      	uxtb	r3, r3
 800a484:	f003 030f 	and.w	r3, r3, #15
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a492:	0bdb      	lsrs	r3, r3, #15
 800a494:	b2db      	uxtb	r3, r3
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4a4:	0b9b      	lsrs	r3, r3, #14
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4b6:	0b5b      	lsrs	r3, r3, #13
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4c8:	0b1b      	lsrs	r3, r3, #12
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d163      	bne.n	800a5ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4e8:	009a      	lsls	r2, r3, #2
 800a4ea:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a4f4:	0f92      	lsrs	r2, r2, #30
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a500:	0edb      	lsrs	r3, r3, #27
 800a502:	b2db      	uxtb	r3, r3
 800a504:	f003 0307 	and.w	r3, r3, #7
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a512:	0e1b      	lsrs	r3, r3, #24
 800a514:	b2db      	uxtb	r3, r3
 800a516:	f003 0307 	and.w	r3, r3, #7
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a524:	0d5b      	lsrs	r3, r3, #21
 800a526:	b2db      	uxtb	r3, r3
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a536:	0c9b      	lsrs	r3, r3, #18
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	f003 0307 	and.w	r3, r3, #7
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a548:	0bdb      	lsrs	r3, r3, #15
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f003 0307 	and.w	r3, r3, #7
 800a550:	b2da      	uxtb	r2, r3
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	1c5a      	adds	r2, r3, #1
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	7e1b      	ldrb	r3, [r3, #24]
 800a564:	b2db      	uxtb	r3, r3
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	3302      	adds	r3, #2
 800a56c:	2201      	movs	r2, #1
 800a56e:	fa02 f303 	lsl.w	r3, r2, r3
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a576:	fb02 f203 	mul.w	r2, r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	7a1b      	ldrb	r3, [r3, #8]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	f003 030f 	and.w	r3, r3, #15
 800a588:	2201      	movs	r2, #1
 800a58a:	409a      	lsls	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a598:	0a52      	lsrs	r2, r2, #9
 800a59a:	fb02 f203 	mul.w	r2, r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5a8:	661a      	str	r2, [r3, #96]	; 0x60
 800a5aa:	e031      	b.n	800a610 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d11d      	bne.n	800a5f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5b8:	041b      	lsls	r3, r3, #16
 800a5ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c2:	0c1b      	lsrs	r3, r3, #16
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	029a      	lsls	r2, r3, #10
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	661a      	str	r2, [r3, #96]	; 0x60
 800a5ee:	e00f      	b.n	800a610 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a58      	ldr	r2, [pc, #352]	; (800a758 <HAL_SD_GetCardCSD+0x344>)
 800a5f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e09d      	b.n	800a74c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a614:	0b9b      	lsrs	r3, r3, #14
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a626:	09db      	lsrs	r3, r3, #7
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a63e:	b2da      	uxtb	r2, r3
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a648:	0fdb      	lsrs	r3, r3, #31
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a654:	0f5b      	lsrs	r3, r3, #29
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f003 0303 	and.w	r3, r3, #3
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a666:	0e9b      	lsrs	r3, r3, #26
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	f003 0307 	and.w	r3, r3, #7
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a678:	0d9b      	lsrs	r3, r3, #22
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	f003 030f 	and.w	r3, r3, #15
 800a680:	b2da      	uxtb	r2, r3
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a68a:	0d5b      	lsrs	r3, r3, #21
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	b2da      	uxtb	r2, r3
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6a6:	0c1b      	lsrs	r3, r3, #16
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ba:	0bdb      	lsrs	r3, r3, #15
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ce:	0b9b      	lsrs	r3, r3, #14
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e2:	0b5b      	lsrs	r3, r3, #13
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f6:	0b1b      	lsrs	r3, r3, #12
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a70a:	0a9b      	lsrs	r3, r3, #10
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	b2da      	uxtb	r2, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a71e:	0a1b      	lsrs	r3, r3, #8
 800a720:	b2db      	uxtb	r3, r3
 800a722:	f003 0303 	and.w	r3, r3, #3
 800a726:	b2da      	uxtb	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a732:	085b      	lsrs	r3, r3, #1
 800a734:	b2db      	uxtb	r3, r3
 800a736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	004005ff 	.word	0x004005ff

0800a75c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a7b4:	b5b0      	push	{r4, r5, r7, lr}
 800a7b6:	b08e      	sub	sp, #56	; 0x38
 800a7b8:	af04      	add	r7, sp, #16
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2203      	movs	r2, #3
 800a7c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7d0:	2b03      	cmp	r3, #3
 800a7d2:	d02e      	beq.n	800a832 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7da:	d106      	bne.n	800a7ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	639a      	str	r2, [r3, #56]	; 0x38
 800a7e8:	e029      	b.n	800a83e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f0:	d10a      	bne.n	800a808 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fb28 	bl	800ae48 <SD_WideBus_Enable>
 800a7f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	431a      	orrs	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	639a      	str	r2, [r3, #56]	; 0x38
 800a806:	e01a      	b.n	800a83e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10a      	bne.n	800a824 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fb65 	bl	800aede <SD_WideBus_Disable>
 800a814:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a81a:	6a3b      	ldr	r3, [r7, #32]
 800a81c:	431a      	orrs	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	639a      	str	r2, [r3, #56]	; 0x38
 800a822:	e00c      	b.n	800a83e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a828:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	639a      	str	r2, [r3, #56]	; 0x38
 800a830:	e005      	b.n	800a83e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a836:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00b      	beq.n	800a85e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a26      	ldr	r2, [pc, #152]	; (800a8e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a84c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a85c:	e01f      	b.n	800a89e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681d      	ldr	r5, [r3, #0]
 800a884:	466c      	mov	r4, sp
 800a886:	f107 0314 	add.w	r3, r7, #20
 800a88a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a88e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a892:	f107 0308 	add.w	r3, r7, #8
 800a896:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a898:	4628      	mov	r0, r5
 800a89a:	f001 fd6f 	bl	800c37c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f001 fe46 	bl	800c538 <SDMMC_CmdBlockLength>
 800a8ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00c      	beq.n	800a8ce <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a0a      	ldr	r2, [pc, #40]	; (800a8e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a8ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a8d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3728      	adds	r7, #40	; 0x28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bdb0      	pop	{r4, r5, r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	004005ff 	.word	0x004005ff

0800a8e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a8f4:	f107 030c 	add.w	r3, r7, #12
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fa7c 	bl	800adf8 <SD_SendStatus>
 800a900:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d005      	beq.n	800a914 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	431a      	orrs	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	0a5b      	lsrs	r3, r3, #9
 800a918:	f003 030f 	and.w	r3, r3, #15
 800a91c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a91e:	693b      	ldr	r3, [r7, #16]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a934:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a944:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a946:	bf00      	nop
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b084      	sub	sp, #16
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a964:	2b82      	cmp	r3, #130	; 0x82
 800a966:	d111      	bne.n	800a98c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f001 fe8d 	bl	800c68c <SDMMC_CmdStopTransfer>
 800a972:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d008      	beq.n	800a98c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	431a      	orrs	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fd3a 	bl	800a400 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f022 0208 	bic.w	r2, r2, #8
 800a99a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f240 523a 	movw	r2, #1338	; 0x53a
 800a9a4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f002 faff 	bl	800cfb8 <HAL_SD_RxCpltCallback>
#endif
}
 800a9ba:	bf00      	nop
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
	...

0800a9c4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7fb fab0 	bl	8005f38 <HAL_DMA_GetError>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d03e      	beq.n	800aa5c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d002      	beq.n	800a9fa <SD_DMAError+0x36>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d12d      	bne.n	800aa56 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a19      	ldr	r2, [pc, #100]	; (800aa64 <SD_DMAError+0xa0>)
 800aa00:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800aa10:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800aa1e:	6978      	ldr	r0, [r7, #20]
 800aa20:	f7ff ff62 	bl	800a8e8 <HAL_SD_GetCardState>
 800aa24:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2b06      	cmp	r3, #6
 800aa2a:	d002      	beq.n	800aa32 <SD_DMAError+0x6e>
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2b05      	cmp	r3, #5
 800aa30:	d10a      	bne.n	800aa48 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f001 fe28 	bl	800c68c <SDMMC_CmdStopTransfer>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa42:	431a      	orrs	r2, r3
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2200      	movs	r2, #0
 800aa54:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800aa56:	6978      	ldr	r0, [r7, #20]
 800aa58:	f7ff fcd2 	bl	800a400 <HAL_SD_ErrorCallback>
#endif
  }
}
 800aa5c:	bf00      	nop
 800aa5e:	3718      	adds	r7, #24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	004005ff 	.word	0x004005ff

0800aa68 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa74:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f240 523a 	movw	r2, #1338	; 0x53a
 800aa7e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7ff ff31 	bl	800a8e8 <HAL_SD_GetCardState>
 800aa86:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2b06      	cmp	r3, #6
 800aa9a:	d002      	beq.n	800aaa2 <SD_DMATxAbort+0x3a>
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b05      	cmp	r3, #5
 800aaa0:	d10a      	bne.n	800aab8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f001 fdf0 	bl	800c68c <SDMMC_CmdStopTransfer>
 800aaac:	4602      	mov	r2, r0
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab2:	431a      	orrs	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d103      	bne.n	800aac8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f002 fa65 	bl	800cf90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800aac6:	e002      	b.n	800aace <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff fc99 	bl	800a400 <HAL_SD_ErrorCallback>
}
 800aace:	bf00      	nop
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f240 523a 	movw	r2, #1338	; 0x53a
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f7ff fefa 	bl	800a8e8 <HAL_SD_GetCardState>
 800aaf4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2b06      	cmp	r3, #6
 800ab08:	d002      	beq.n	800ab10 <SD_DMARxAbort+0x3a>
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b05      	cmp	r3, #5
 800ab0e:	d10a      	bne.n	800ab26 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f001 fdb9 	bl	800c68c <SDMMC_CmdStopTransfer>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	431a      	orrs	r2, r3
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d103      	bne.n	800ab36 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f002 fa2e 	bl	800cf90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ab34:	e002      	b.n	800ab3c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f7ff fc62 	bl	800a400 <HAL_SD_ErrorCallback>
}
 800ab3c:	bf00      	nop
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ab44:	b5b0      	push	{r4, r5, r7, lr}
 800ab46:	b094      	sub	sp, #80	; 0x50
 800ab48:	af04      	add	r7, sp, #16
 800ab4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f001 fc6a 	bl	800c42e <SDMMC_GetPowerState>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d102      	bne.n	800ab66 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ab64:	e0b6      	b.n	800acd4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d02f      	beq.n	800abce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f001 fe95 	bl	800c8a2 <SDMMC_CmdSendCID>
 800ab78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <SD_InitCard+0x40>
    {
      return errorstate;
 800ab80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab82:	e0a7      	b.n	800acd4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2100      	movs	r1, #0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f001 fc95 	bl	800c4ba <SDMMC_GetResponse>
 800ab90:	4602      	mov	r2, r0
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2104      	movs	r1, #4
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f001 fc8c 	bl	800c4ba <SDMMC_GetResponse>
 800aba2:	4602      	mov	r2, r0
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2108      	movs	r1, #8
 800abae:	4618      	mov	r0, r3
 800abb0:	f001 fc83 	bl	800c4ba <SDMMC_GetResponse>
 800abb4:	4602      	mov	r2, r0
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	210c      	movs	r1, #12
 800abc0:	4618      	mov	r0, r3
 800abc2:	f001 fc7a 	bl	800c4ba <SDMMC_GetResponse>
 800abc6:	4602      	mov	r2, r0
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d00d      	beq.n	800abf2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f107 020e 	add.w	r2, r7, #14
 800abde:	4611      	mov	r1, r2
 800abe0:	4618      	mov	r0, r3
 800abe2:	f001 fe9b 	bl	800c91c <SDMMC_CmdSetRelAdd>
 800abe6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800abe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <SD_InitCard+0xae>
    {
      return errorstate;
 800abee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf0:	e070      	b.n	800acd4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d036      	beq.n	800ac68 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800abfa:	89fb      	ldrh	r3, [r7, #14]
 800abfc:	461a      	mov	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac0a:	041b      	lsls	r3, r3, #16
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	f001 fe65 	bl	800c8de <SDMMC_CmdSendCSD>
 800ac14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ac1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1e:	e059      	b.n	800acd4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2100      	movs	r1, #0
 800ac26:	4618      	mov	r0, r3
 800ac28:	f001 fc47 	bl	800c4ba <SDMMC_GetResponse>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2104      	movs	r1, #4
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f001 fc3e 	bl	800c4ba <SDMMC_GetResponse>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2108      	movs	r1, #8
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 fc35 	bl	800c4ba <SDMMC_GetResponse>
 800ac50:	4602      	mov	r2, r0
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	210c      	movs	r1, #12
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f001 fc2c 	bl	800c4ba <SDMMC_GetResponse>
 800ac62:	4602      	mov	r2, r0
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2104      	movs	r1, #4
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f001 fc23 	bl	800c4ba <SDMMC_GetResponse>
 800ac74:	4603      	mov	r3, r0
 800ac76:	0d1a      	lsrs	r2, r3, #20
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ac7c:	f107 0310 	add.w	r3, r7, #16
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff fbc6 	bl	800a414 <HAL_SD_GetCardCSD>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ac92:	e01f      	b.n	800acd4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6819      	ldr	r1, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac9c:	041b      	lsls	r3, r3, #16
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f04f 0300 	mov.w	r3, #0
 800aca4:	4608      	mov	r0, r1
 800aca6:	f001 fd13 	bl	800c6d0 <SDMMC_CmdSelDesel>
 800acaa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800acac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <SD_InitCard+0x172>
  {
    return errorstate;
 800acb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb4:	e00e      	b.n	800acd4 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681d      	ldr	r5, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	466c      	mov	r4, sp
 800acbe:	f103 0210 	add.w	r2, r3, #16
 800acc2:	ca07      	ldmia	r2, {r0, r1, r2}
 800acc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800acc8:	3304      	adds	r3, #4
 800acca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800accc:	4628      	mov	r0, r5
 800acce:	f001 fb55 	bl	800c37c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3740      	adds	r7, #64	; 0x40
 800acd8:	46bd      	mov	sp, r7
 800acda:	bdb0      	pop	{r4, r5, r7, pc}

0800acdc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ace8:	2300      	movs	r3, #0
 800acea:	617b      	str	r3, [r7, #20]
 800acec:	2300      	movs	r3, #0
 800acee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f001 fd0e 	bl	800c716 <SDMMC_CmdGoIdleState>
 800acfa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	e072      	b.n	800adec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 fd21 	bl	800c752 <SDMMC_CmdOperCond>
 800ad10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00d      	beq.n	800ad34 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f001 fcf7 	bl	800c716 <SDMMC_CmdGoIdleState>
 800ad28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d004      	beq.n	800ad3a <SD_PowerON+0x5e>
    {
      return errorstate;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	e05b      	b.n	800adec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d137      	bne.n	800adb2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2100      	movs	r1, #0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f001 fd21 	bl	800c790 <SDMMC_CmdAppCommand>
 800ad4e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d02d      	beq.n	800adb2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad5a:	e047      	b.n	800adec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2100      	movs	r1, #0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f001 fd14 	bl	800c790 <SDMMC_CmdAppCommand>
 800ad68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <SD_PowerON+0x98>
    {
      return errorstate;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	e03b      	b.n	800adec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	491e      	ldr	r1, [pc, #120]	; (800adf4 <SD_PowerON+0x118>)
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f001 fd2a 	bl	800c7d4 <SDMMC_CmdAppOperCommand>
 800ad80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad8c:	e02e      	b.n	800adec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2100      	movs	r1, #0
 800ad94:	4618      	mov	r0, r3
 800ad96:	f001 fb90 	bl	800c4ba <SDMMC_GetResponse>
 800ad9a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	0fdb      	lsrs	r3, r3, #31
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d101      	bne.n	800ada8 <SD_PowerON+0xcc>
 800ada4:	2301      	movs	r3, #1
 800ada6:	e000      	b.n	800adaa <SD_PowerON+0xce>
 800ada8:	2300      	movs	r3, #0
 800adaa:	613b      	str	r3, [r7, #16]

    count++;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	3301      	adds	r3, #1
 800adb0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800adb8:	4293      	cmp	r3, r2
 800adba:	d802      	bhi.n	800adc2 <SD_PowerON+0xe6>
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d0cc      	beq.n	800ad5c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800adc8:	4293      	cmp	r3, r2
 800adca:	d902      	bls.n	800add2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800adcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800add0:	e00c      	b.n	800adec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	645a      	str	r2, [r3, #68]	; 0x44
 800ade2:	e002      	b.n	800adea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3718      	adds	r7, #24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	c1100000 	.word	0xc1100000

0800adf8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d102      	bne.n	800ae0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ae08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae0c:	e018      	b.n	800ae40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae16:	041b      	lsls	r3, r3, #16
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	f001 fd9f 	bl	800c95e <SDMMC_CmdSendStatus>
 800ae20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	e009      	b.n	800ae40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2100      	movs	r1, #0
 800ae32:	4618      	mov	r0, r3
 800ae34:	f001 fb41 	bl	800c4ba <SDMMC_GetResponse>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ae50:	2300      	movs	r3, #0
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	2300      	movs	r3, #0
 800ae56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f001 fb2b 	bl	800c4ba <SDMMC_GetResponse>
 800ae64:	4603      	mov	r3, r0
 800ae66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae6e:	d102      	bne.n	800ae76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae74:	e02f      	b.n	800aed6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ae76:	f107 030c 	add.w	r3, r7, #12
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f879 	bl	800af74 <SD_FindSCR>
 800ae82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	e023      	b.n	800aed6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d01c      	beq.n	800aed2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea0:	041b      	lsls	r3, r3, #16
 800aea2:	4619      	mov	r1, r3
 800aea4:	4610      	mov	r0, r2
 800aea6:	f001 fc73 	bl	800c790 <SDMMC_CmdAppCommand>
 800aeaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	e00f      	b.n	800aed6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2102      	movs	r1, #2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 fcad 	bl	800c81c <SDMMC_CmdBusWidth>
 800aec2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	e003      	b.n	800aed6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aece:	2300      	movs	r3, #0
 800aed0:	e001      	b.n	800aed6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aed2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b086      	sub	sp, #24
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aee6:	2300      	movs	r3, #0
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	2300      	movs	r3, #0
 800aeec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2100      	movs	r1, #0
 800aef4:	4618      	mov	r0, r3
 800aef6:	f001 fae0 	bl	800c4ba <SDMMC_GetResponse>
 800aefa:	4603      	mov	r3, r0
 800aefc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af04:	d102      	bne.n	800af0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af0a:	e02f      	b.n	800af6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800af0c:	f107 030c 	add.w	r3, r7, #12
 800af10:	4619      	mov	r1, r3
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f82e 	bl	800af74 <SD_FindSCR>
 800af18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	e023      	b.n	800af6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d01c      	beq.n	800af68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af36:	041b      	lsls	r3, r3, #16
 800af38:	4619      	mov	r1, r3
 800af3a:	4610      	mov	r0, r2
 800af3c:	f001 fc28 	bl	800c790 <SDMMC_CmdAppCommand>
 800af40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	e00f      	b.n	800af6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2100      	movs	r1, #0
 800af52:	4618      	mov	r0, r3
 800af54:	f001 fc62 	bl	800c81c <SDMMC_CmdBusWidth>
 800af58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	e003      	b.n	800af6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800af64:	2300      	movs	r3, #0
 800af66:	e001      	b.n	800af6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800af74:	b590      	push	{r4, r7, lr}
 800af76:	b08f      	sub	sp, #60	; 0x3c
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800af7e:	f7fa fbb1 	bl	80056e4 <HAL_GetTick>
 800af82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800af84:	2300      	movs	r3, #0
 800af86:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800af88:	2300      	movs	r3, #0
 800af8a:	60bb      	str	r3, [r7, #8]
 800af8c:	2300      	movs	r3, #0
 800af8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2108      	movs	r1, #8
 800af9a:	4618      	mov	r0, r3
 800af9c:	f001 facc 	bl	800c538 <SDMMC_CmdBlockLength>
 800afa0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <SD_FindSCR+0x38>
  {
    return errorstate;
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	e0b2      	b.n	800b112 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afb4:	041b      	lsls	r3, r3, #16
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f001 fbe9 	bl	800c790 <SDMMC_CmdAppCommand>
 800afbe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <SD_FindSCR+0x56>
  {
    return errorstate;
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	e0a3      	b.n	800b112 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800afca:	f04f 33ff 	mov.w	r3, #4294967295
 800afce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800afd0:	2308      	movs	r3, #8
 800afd2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800afd4:	2330      	movs	r3, #48	; 0x30
 800afd6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800afd8:	2302      	movs	r3, #2
 800afda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800afdc:	2300      	movs	r3, #0
 800afde:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800afe0:	2301      	movs	r3, #1
 800afe2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f107 0210 	add.w	r2, r7, #16
 800afec:	4611      	mov	r1, r2
 800afee:	4618      	mov	r0, r3
 800aff0:	f001 fa76 	bl	800c4e0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4618      	mov	r0, r3
 800affa:	f001 fc31 	bl	800c860 <SDMMC_CmdSendSCR>
 800affe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	2b00      	cmp	r3, #0
 800b004:	d02a      	beq.n	800b05c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b008:	e083      	b.n	800b112 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00f      	beq.n	800b038 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6819      	ldr	r1, [r3, #0]
 800b01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	f107 0208 	add.w	r2, r7, #8
 800b024:	18d4      	adds	r4, r2, r3
 800b026:	4608      	mov	r0, r1
 800b028:	f001 f9d4 	bl	800c3d4 <SDMMC_ReadFIFO>
 800b02c:	4603      	mov	r3, r0
 800b02e:	6023      	str	r3, [r4, #0]
      index++;
 800b030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b032:	3301      	adds	r3, #1
 800b034:	637b      	str	r3, [r7, #52]	; 0x34
 800b036:	e006      	b.n	800b046 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d012      	beq.n	800b06c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b046:	f7fa fb4d 	bl	80056e4 <HAL_GetTick>
 800b04a:	4602      	mov	r2, r0
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b054:	d102      	bne.n	800b05c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b056:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b05a:	e05a      	b.n	800b112 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b062:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b066:	2b00      	cmp	r3, #0
 800b068:	d0cf      	beq.n	800b00a <SD_FindSCR+0x96>
 800b06a:	e000      	b.n	800b06e <SD_FindSCR+0xfa>
      break;
 800b06c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b074:	f003 0308 	and.w	r3, r3, #8
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d005      	beq.n	800b088 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2208      	movs	r2, #8
 800b082:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b084:	2308      	movs	r3, #8
 800b086:	e044      	b.n	800b112 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b08e:	f003 0302 	and.w	r3, r3, #2
 800b092:	2b00      	cmp	r3, #0
 800b094:	d005      	beq.n	800b0a2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2202      	movs	r2, #2
 800b09c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b09e:	2302      	movs	r3, #2
 800b0a0:	e037      	b.n	800b112 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a8:	f003 0320 	and.w	r3, r3, #32
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d005      	beq.n	800b0bc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b0b8:	2320      	movs	r3, #32
 800b0ba:	e02a      	b.n	800b112 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b0c4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	061a      	lsls	r2, r3, #24
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	021b      	lsls	r3, r3, #8
 800b0ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	0a1b      	lsrs	r3, r3, #8
 800b0d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b0dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	0e1b      	lsrs	r3, r3, #24
 800b0e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	601a      	str	r2, [r3, #0]
    scr++;
 800b0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	061a      	lsls	r2, r3, #24
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	021b      	lsls	r3, r3, #8
 800b0f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	0a1b      	lsrs	r3, r3, #8
 800b100:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b104:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	0e1b      	lsrs	r3, r3, #24
 800b10a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	373c      	adds	r7, #60	; 0x3c
 800b116:	46bd      	mov	sp, r7
 800b118:	bd90      	pop	{r4, r7, pc}

0800b11a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b086      	sub	sp, #24
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b126:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d03f      	beq.n	800b1b4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b134:	2300      	movs	r3, #0
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	e033      	b.n	800b1a2 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4618      	mov	r0, r3
 800b140:	f001 f948 	bl	800c3d4 <SDMMC_ReadFIFO>
 800b144:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	3301      	adds	r3, #1
 800b152:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	3b01      	subs	r3, #1
 800b158:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	0a1b      	lsrs	r3, r3, #8
 800b15e:	b2da      	uxtb	r2, r3
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3301      	adds	r3, #1
 800b168:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	0c1b      	lsrs	r3, r3, #16
 800b174:	b2da      	uxtb	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	3301      	adds	r3, #1
 800b17e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	3b01      	subs	r3, #1
 800b184:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	0e1b      	lsrs	r3, r3, #24
 800b18a:	b2da      	uxtb	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3301      	adds	r3, #1
 800b194:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	3b01      	subs	r3, #1
 800b19a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	617b      	str	r3, [r7, #20]
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b07      	cmp	r3, #7
 800b1a6:	d9c8      	bls.n	800b13a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b1b4:	bf00      	nop
 800b1b6:	3718      	adds	r7, #24
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a1b      	ldr	r3, [r3, #32]
 800b1c8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ce:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d043      	beq.n	800b25e <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	617b      	str	r3, [r7, #20]
 800b1da:	e037      	b.n	800b24c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	021a      	lsls	r2, r3, #8
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	3b01      	subs	r3, #1
 800b204:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	041a      	lsls	r2, r3, #16
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	3301      	adds	r3, #1
 800b216:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	3b01      	subs	r3, #1
 800b21c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	061a      	lsls	r2, r3, #24
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	4313      	orrs	r3, r2
 800b228:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3301      	adds	r3, #1
 800b22e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	3b01      	subs	r3, #1
 800b234:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f107 0208 	add.w	r2, r7, #8
 800b23e:	4611      	mov	r1, r2
 800b240:	4618      	mov	r0, r3
 800b242:	f001 f8d4 	bl	800c3ee <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	3301      	adds	r3, #1
 800b24a:	617b      	str	r3, [r7, #20]
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	2b07      	cmp	r3, #7
 800b250:	d9c4      	bls.n	800b1dc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b25e:	bf00      	nop
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d101      	bne.n	800b27a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e025      	b.n	800b2c6 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b280:	b2db      	uxtb	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	d106      	bne.n	800b294 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7f8 fc9a 	bl	8003bc8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2202      	movs	r2, #2
 800b298:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	f000 ff3e 	bl	800c128 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6818      	ldr	r0, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	f000 ffa8 	bl	800c20c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d101      	bne.n	800b2ea <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e018      	b.n	800b31c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	68b9      	ldr	r1, [r7, #8]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f001 f806 	bl	800c30c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b02      	cmp	r3, #2
 800b306:	d104      	bne.n	800b312 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2205      	movs	r2, #5
 800b30c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800b310:	e003      	b.n	800b31a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2201      	movs	r2, #1
 800b316:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b02      	cmp	r3, #2
 800b338:	d101      	bne.n	800b33e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b33a:	2302      	movs	r3, #2
 800b33c:	e00e      	b.n	800b35c <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2202      	movs	r2, #2
 800b342:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f001 f801 	bl	800c354 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e049      	b.n	800b40a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f841 	bl	800b412 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2202      	movs	r2, #2
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	4610      	mov	r0, r2
 800b3a4:	f000 fa00 	bl	800b7a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b41a:	bf00      	nop
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
	...

0800b428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d001      	beq.n	800b440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e054      	b.n	800b4ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f042 0201 	orr.w	r2, r2, #1
 800b456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a26      	ldr	r2, [pc, #152]	; (800b4f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d022      	beq.n	800b4a8 <HAL_TIM_Base_Start_IT+0x80>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b46a:	d01d      	beq.n	800b4a8 <HAL_TIM_Base_Start_IT+0x80>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a22      	ldr	r2, [pc, #136]	; (800b4fc <HAL_TIM_Base_Start_IT+0xd4>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d018      	beq.n	800b4a8 <HAL_TIM_Base_Start_IT+0x80>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a21      	ldr	r2, [pc, #132]	; (800b500 <HAL_TIM_Base_Start_IT+0xd8>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d013      	beq.n	800b4a8 <HAL_TIM_Base_Start_IT+0x80>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a1f      	ldr	r2, [pc, #124]	; (800b504 <HAL_TIM_Base_Start_IT+0xdc>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d00e      	beq.n	800b4a8 <HAL_TIM_Base_Start_IT+0x80>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a1e      	ldr	r2, [pc, #120]	; (800b508 <HAL_TIM_Base_Start_IT+0xe0>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d009      	beq.n	800b4a8 <HAL_TIM_Base_Start_IT+0x80>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a1c      	ldr	r2, [pc, #112]	; (800b50c <HAL_TIM_Base_Start_IT+0xe4>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d004      	beq.n	800b4a8 <HAL_TIM_Base_Start_IT+0x80>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a1b      	ldr	r2, [pc, #108]	; (800b510 <HAL_TIM_Base_Start_IT+0xe8>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d115      	bne.n	800b4d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	689a      	ldr	r2, [r3, #8]
 800b4ae:	4b19      	ldr	r3, [pc, #100]	; (800b514 <HAL_TIM_Base_Start_IT+0xec>)
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b06      	cmp	r3, #6
 800b4b8:	d015      	beq.n	800b4e6 <HAL_TIM_Base_Start_IT+0xbe>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4c0:	d011      	beq.n	800b4e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f042 0201 	orr.w	r2, r2, #1
 800b4d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d2:	e008      	b.n	800b4e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f042 0201 	orr.w	r2, r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	e000      	b.n	800b4e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	40010000 	.word	0x40010000
 800b4fc:	40000400 	.word	0x40000400
 800b500:	40000800 	.word	0x40000800
 800b504:	40000c00 	.word	0x40000c00
 800b508:	40010400 	.word	0x40010400
 800b50c:	40014000 	.word	0x40014000
 800b510:	40001800 	.word	0x40001800
 800b514:	00010007 	.word	0x00010007

0800b518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	f003 0302 	and.w	r3, r3, #2
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d122      	bne.n	800b574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	f003 0302 	and.w	r3, r3, #2
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d11b      	bne.n	800b574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f06f 0202 	mvn.w	r2, #2
 800b544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	f003 0303 	and.w	r3, r3, #3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 f905 	bl	800b76a <HAL_TIM_IC_CaptureCallback>
 800b560:	e005      	b.n	800b56e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f8f7 	bl	800b756 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f908 	bl	800b77e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	f003 0304 	and.w	r3, r3, #4
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d122      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	f003 0304 	and.w	r3, r3, #4
 800b58c:	2b04      	cmp	r3, #4
 800b58e:	d11b      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f06f 0204 	mvn.w	r2, #4
 800b598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f8db 	bl	800b76a <HAL_TIM_IC_CaptureCallback>
 800b5b4:	e005      	b.n	800b5c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f8cd 	bl	800b756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f8de 	bl	800b77e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	f003 0308 	and.w	r3, r3, #8
 800b5d2:	2b08      	cmp	r3, #8
 800b5d4:	d122      	bne.n	800b61c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f003 0308 	and.w	r3, r3, #8
 800b5e0:	2b08      	cmp	r3, #8
 800b5e2:	d11b      	bne.n	800b61c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f06f 0208 	mvn.w	r2, #8
 800b5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2204      	movs	r2, #4
 800b5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	f003 0303 	and.w	r3, r3, #3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f8b1 	bl	800b76a <HAL_TIM_IC_CaptureCallback>
 800b608:	e005      	b.n	800b616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f8a3 	bl	800b756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f8b4 	bl	800b77e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	f003 0310 	and.w	r3, r3, #16
 800b626:	2b10      	cmp	r3, #16
 800b628:	d122      	bne.n	800b670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	f003 0310 	and.w	r3, r3, #16
 800b634:	2b10      	cmp	r3, #16
 800b636:	d11b      	bne.n	800b670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f06f 0210 	mvn.w	r2, #16
 800b640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2208      	movs	r2, #8
 800b646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f887 	bl	800b76a <HAL_TIM_IC_CaptureCallback>
 800b65c:	e005      	b.n	800b66a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f879 	bl	800b756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f88a 	bl	800b77e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d10e      	bne.n	800b69c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d107      	bne.n	800b69c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f06f 0201 	mvn.w	r2, #1
 800b694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7f6 fa88 	bl	8001bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a6:	2b80      	cmp	r3, #128	; 0x80
 800b6a8:	d10e      	bne.n	800b6c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b4:	2b80      	cmp	r3, #128	; 0x80
 800b6b6:	d107      	bne.n	800b6c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f91a 	bl	800b8fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6d6:	d10e      	bne.n	800b6f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e2:	2b80      	cmp	r3, #128	; 0x80
 800b6e4:	d107      	bne.n	800b6f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b6ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f90d 	bl	800b910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b700:	2b40      	cmp	r3, #64	; 0x40
 800b702:	d10e      	bne.n	800b722 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b70e:	2b40      	cmp	r3, #64	; 0x40
 800b710:	d107      	bne.n	800b722 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b71a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f838 	bl	800b792 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	f003 0320 	and.w	r3, r3, #32
 800b72c:	2b20      	cmp	r3, #32
 800b72e:	d10e      	bne.n	800b74e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	f003 0320 	and.w	r3, r3, #32
 800b73a:	2b20      	cmp	r3, #32
 800b73c:	d107      	bne.n	800b74e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f06f 0220 	mvn.w	r2, #32
 800b746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f8cd 	bl	800b8e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b74e:	bf00      	nop
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b75e:	bf00      	nop
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b083      	sub	sp, #12
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b772:	bf00      	nop
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b77e:	b480      	push	{r7}
 800b780:	b083      	sub	sp, #12
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b792:	b480      	push	{r7}
 800b794:	b083      	sub	sp, #12
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b79a:	bf00      	nop
 800b79c:	370c      	adds	r7, #12
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
	...

0800b7a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a40      	ldr	r2, [pc, #256]	; (800b8bc <TIM_Base_SetConfig+0x114>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d013      	beq.n	800b7e8 <TIM_Base_SetConfig+0x40>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7c6:	d00f      	beq.n	800b7e8 <TIM_Base_SetConfig+0x40>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a3d      	ldr	r2, [pc, #244]	; (800b8c0 <TIM_Base_SetConfig+0x118>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d00b      	beq.n	800b7e8 <TIM_Base_SetConfig+0x40>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a3c      	ldr	r2, [pc, #240]	; (800b8c4 <TIM_Base_SetConfig+0x11c>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d007      	beq.n	800b7e8 <TIM_Base_SetConfig+0x40>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a3b      	ldr	r2, [pc, #236]	; (800b8c8 <TIM_Base_SetConfig+0x120>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d003      	beq.n	800b7e8 <TIM_Base_SetConfig+0x40>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a3a      	ldr	r2, [pc, #232]	; (800b8cc <TIM_Base_SetConfig+0x124>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d108      	bne.n	800b7fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a2f      	ldr	r2, [pc, #188]	; (800b8bc <TIM_Base_SetConfig+0x114>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d02b      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b808:	d027      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a2c      	ldr	r2, [pc, #176]	; (800b8c0 <TIM_Base_SetConfig+0x118>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d023      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a2b      	ldr	r2, [pc, #172]	; (800b8c4 <TIM_Base_SetConfig+0x11c>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d01f      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a2a      	ldr	r2, [pc, #168]	; (800b8c8 <TIM_Base_SetConfig+0x120>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d01b      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a29      	ldr	r2, [pc, #164]	; (800b8cc <TIM_Base_SetConfig+0x124>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d017      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a28      	ldr	r2, [pc, #160]	; (800b8d0 <TIM_Base_SetConfig+0x128>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d013      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a27      	ldr	r2, [pc, #156]	; (800b8d4 <TIM_Base_SetConfig+0x12c>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d00f      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a26      	ldr	r2, [pc, #152]	; (800b8d8 <TIM_Base_SetConfig+0x130>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d00b      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a25      	ldr	r2, [pc, #148]	; (800b8dc <TIM_Base_SetConfig+0x134>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d007      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a24      	ldr	r2, [pc, #144]	; (800b8e0 <TIM_Base_SetConfig+0x138>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d003      	beq.n	800b85a <TIM_Base_SetConfig+0xb2>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a23      	ldr	r2, [pc, #140]	; (800b8e4 <TIM_Base_SetConfig+0x13c>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d108      	bne.n	800b86c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	4313      	orrs	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	695b      	ldr	r3, [r3, #20]
 800b876:	4313      	orrs	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	689a      	ldr	r2, [r3, #8]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a0a      	ldr	r2, [pc, #40]	; (800b8bc <TIM_Base_SetConfig+0x114>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d003      	beq.n	800b8a0 <TIM_Base_SetConfig+0xf8>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a0c      	ldr	r2, [pc, #48]	; (800b8cc <TIM_Base_SetConfig+0x124>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d103      	bne.n	800b8a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	691a      	ldr	r2, [r3, #16]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	615a      	str	r2, [r3, #20]
}
 800b8ae:	bf00      	nop
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	40010000 	.word	0x40010000
 800b8c0:	40000400 	.word	0x40000400
 800b8c4:	40000800 	.word	0x40000800
 800b8c8:	40000c00 	.word	0x40000c00
 800b8cc:	40010400 	.word	0x40010400
 800b8d0:	40014000 	.word	0x40014000
 800b8d4:	40014400 	.word	0x40014400
 800b8d8:	40014800 	.word	0x40014800
 800b8dc:	40001800 	.word	0x40001800
 800b8e0:	40001c00 	.word	0x40001c00
 800b8e4:	40002000 	.word	0x40002000

0800b8e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e040      	b.n	800b9b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d106      	bne.n	800b94c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7f8 f84c 	bl	80039e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2224      	movs	r2, #36	; 0x24
 800b950:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f022 0201 	bic.w	r2, r2, #1
 800b960:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f82c 	bl	800b9c0 <UART_SetConfig>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d101      	bne.n	800b972 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	e022      	b.n	800b9b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 fa82 	bl	800be84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	685a      	ldr	r2, [r3, #4]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b98e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689a      	ldr	r2, [r3, #8]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b99e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f042 0201 	orr.w	r2, r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fb09 	bl	800bfc8 <UART_CheckIdleState>
 800b9b6:	4603      	mov	r3, r0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b088      	sub	sp, #32
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	431a      	orrs	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	431a      	orrs	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	69db      	ldr	r3, [r3, #28]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	4ba7      	ldr	r3, [pc, #668]	; (800bc88 <UART_SetConfig+0x2c8>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	6812      	ldr	r2, [r2, #0]
 800b9f2:	6979      	ldr	r1, [r7, #20]
 800b9f4:	430b      	orrs	r3, r1
 800b9f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68da      	ldr	r2, [r3, #12]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	699b      	ldr	r3, [r3, #24]
 800ba12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a1b      	ldr	r3, [r3, #32]
 800ba18:	697a      	ldr	r2, [r7, #20]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	430a      	orrs	r2, r1
 800ba30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a95      	ldr	r2, [pc, #596]	; (800bc8c <UART_SetConfig+0x2cc>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d120      	bne.n	800ba7e <UART_SetConfig+0xbe>
 800ba3c:	4b94      	ldr	r3, [pc, #592]	; (800bc90 <UART_SetConfig+0x2d0>)
 800ba3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba42:	f003 0303 	and.w	r3, r3, #3
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d816      	bhi.n	800ba78 <UART_SetConfig+0xb8>
 800ba4a:	a201      	add	r2, pc, #4	; (adr r2, 800ba50 <UART_SetConfig+0x90>)
 800ba4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba50:	0800ba61 	.word	0x0800ba61
 800ba54:	0800ba6d 	.word	0x0800ba6d
 800ba58:	0800ba67 	.word	0x0800ba67
 800ba5c:	0800ba73 	.word	0x0800ba73
 800ba60:	2301      	movs	r3, #1
 800ba62:	77fb      	strb	r3, [r7, #31]
 800ba64:	e14f      	b.n	800bd06 <UART_SetConfig+0x346>
 800ba66:	2302      	movs	r3, #2
 800ba68:	77fb      	strb	r3, [r7, #31]
 800ba6a:	e14c      	b.n	800bd06 <UART_SetConfig+0x346>
 800ba6c:	2304      	movs	r3, #4
 800ba6e:	77fb      	strb	r3, [r7, #31]
 800ba70:	e149      	b.n	800bd06 <UART_SetConfig+0x346>
 800ba72:	2308      	movs	r3, #8
 800ba74:	77fb      	strb	r3, [r7, #31]
 800ba76:	e146      	b.n	800bd06 <UART_SetConfig+0x346>
 800ba78:	2310      	movs	r3, #16
 800ba7a:	77fb      	strb	r3, [r7, #31]
 800ba7c:	e143      	b.n	800bd06 <UART_SetConfig+0x346>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a84      	ldr	r2, [pc, #528]	; (800bc94 <UART_SetConfig+0x2d4>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d132      	bne.n	800baee <UART_SetConfig+0x12e>
 800ba88:	4b81      	ldr	r3, [pc, #516]	; (800bc90 <UART_SetConfig+0x2d0>)
 800ba8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba8e:	f003 030c 	and.w	r3, r3, #12
 800ba92:	2b0c      	cmp	r3, #12
 800ba94:	d828      	bhi.n	800bae8 <UART_SetConfig+0x128>
 800ba96:	a201      	add	r2, pc, #4	; (adr r2, 800ba9c <UART_SetConfig+0xdc>)
 800ba98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9c:	0800bad1 	.word	0x0800bad1
 800baa0:	0800bae9 	.word	0x0800bae9
 800baa4:	0800bae9 	.word	0x0800bae9
 800baa8:	0800bae9 	.word	0x0800bae9
 800baac:	0800badd 	.word	0x0800badd
 800bab0:	0800bae9 	.word	0x0800bae9
 800bab4:	0800bae9 	.word	0x0800bae9
 800bab8:	0800bae9 	.word	0x0800bae9
 800babc:	0800bad7 	.word	0x0800bad7
 800bac0:	0800bae9 	.word	0x0800bae9
 800bac4:	0800bae9 	.word	0x0800bae9
 800bac8:	0800bae9 	.word	0x0800bae9
 800bacc:	0800bae3 	.word	0x0800bae3
 800bad0:	2300      	movs	r3, #0
 800bad2:	77fb      	strb	r3, [r7, #31]
 800bad4:	e117      	b.n	800bd06 <UART_SetConfig+0x346>
 800bad6:	2302      	movs	r3, #2
 800bad8:	77fb      	strb	r3, [r7, #31]
 800bada:	e114      	b.n	800bd06 <UART_SetConfig+0x346>
 800badc:	2304      	movs	r3, #4
 800bade:	77fb      	strb	r3, [r7, #31]
 800bae0:	e111      	b.n	800bd06 <UART_SetConfig+0x346>
 800bae2:	2308      	movs	r3, #8
 800bae4:	77fb      	strb	r3, [r7, #31]
 800bae6:	e10e      	b.n	800bd06 <UART_SetConfig+0x346>
 800bae8:	2310      	movs	r3, #16
 800baea:	77fb      	strb	r3, [r7, #31]
 800baec:	e10b      	b.n	800bd06 <UART_SetConfig+0x346>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a69      	ldr	r2, [pc, #420]	; (800bc98 <UART_SetConfig+0x2d8>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d120      	bne.n	800bb3a <UART_SetConfig+0x17a>
 800baf8:	4b65      	ldr	r3, [pc, #404]	; (800bc90 <UART_SetConfig+0x2d0>)
 800bafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bafe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bb02:	2b30      	cmp	r3, #48	; 0x30
 800bb04:	d013      	beq.n	800bb2e <UART_SetConfig+0x16e>
 800bb06:	2b30      	cmp	r3, #48	; 0x30
 800bb08:	d814      	bhi.n	800bb34 <UART_SetConfig+0x174>
 800bb0a:	2b20      	cmp	r3, #32
 800bb0c:	d009      	beq.n	800bb22 <UART_SetConfig+0x162>
 800bb0e:	2b20      	cmp	r3, #32
 800bb10:	d810      	bhi.n	800bb34 <UART_SetConfig+0x174>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <UART_SetConfig+0x15c>
 800bb16:	2b10      	cmp	r3, #16
 800bb18:	d006      	beq.n	800bb28 <UART_SetConfig+0x168>
 800bb1a:	e00b      	b.n	800bb34 <UART_SetConfig+0x174>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	77fb      	strb	r3, [r7, #31]
 800bb20:	e0f1      	b.n	800bd06 <UART_SetConfig+0x346>
 800bb22:	2302      	movs	r3, #2
 800bb24:	77fb      	strb	r3, [r7, #31]
 800bb26:	e0ee      	b.n	800bd06 <UART_SetConfig+0x346>
 800bb28:	2304      	movs	r3, #4
 800bb2a:	77fb      	strb	r3, [r7, #31]
 800bb2c:	e0eb      	b.n	800bd06 <UART_SetConfig+0x346>
 800bb2e:	2308      	movs	r3, #8
 800bb30:	77fb      	strb	r3, [r7, #31]
 800bb32:	e0e8      	b.n	800bd06 <UART_SetConfig+0x346>
 800bb34:	2310      	movs	r3, #16
 800bb36:	77fb      	strb	r3, [r7, #31]
 800bb38:	e0e5      	b.n	800bd06 <UART_SetConfig+0x346>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a57      	ldr	r2, [pc, #348]	; (800bc9c <UART_SetConfig+0x2dc>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d120      	bne.n	800bb86 <UART_SetConfig+0x1c6>
 800bb44:	4b52      	ldr	r3, [pc, #328]	; (800bc90 <UART_SetConfig+0x2d0>)
 800bb46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb4e:	2bc0      	cmp	r3, #192	; 0xc0
 800bb50:	d013      	beq.n	800bb7a <UART_SetConfig+0x1ba>
 800bb52:	2bc0      	cmp	r3, #192	; 0xc0
 800bb54:	d814      	bhi.n	800bb80 <UART_SetConfig+0x1c0>
 800bb56:	2b80      	cmp	r3, #128	; 0x80
 800bb58:	d009      	beq.n	800bb6e <UART_SetConfig+0x1ae>
 800bb5a:	2b80      	cmp	r3, #128	; 0x80
 800bb5c:	d810      	bhi.n	800bb80 <UART_SetConfig+0x1c0>
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d002      	beq.n	800bb68 <UART_SetConfig+0x1a8>
 800bb62:	2b40      	cmp	r3, #64	; 0x40
 800bb64:	d006      	beq.n	800bb74 <UART_SetConfig+0x1b4>
 800bb66:	e00b      	b.n	800bb80 <UART_SetConfig+0x1c0>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	77fb      	strb	r3, [r7, #31]
 800bb6c:	e0cb      	b.n	800bd06 <UART_SetConfig+0x346>
 800bb6e:	2302      	movs	r3, #2
 800bb70:	77fb      	strb	r3, [r7, #31]
 800bb72:	e0c8      	b.n	800bd06 <UART_SetConfig+0x346>
 800bb74:	2304      	movs	r3, #4
 800bb76:	77fb      	strb	r3, [r7, #31]
 800bb78:	e0c5      	b.n	800bd06 <UART_SetConfig+0x346>
 800bb7a:	2308      	movs	r3, #8
 800bb7c:	77fb      	strb	r3, [r7, #31]
 800bb7e:	e0c2      	b.n	800bd06 <UART_SetConfig+0x346>
 800bb80:	2310      	movs	r3, #16
 800bb82:	77fb      	strb	r3, [r7, #31]
 800bb84:	e0bf      	b.n	800bd06 <UART_SetConfig+0x346>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a45      	ldr	r2, [pc, #276]	; (800bca0 <UART_SetConfig+0x2e0>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d125      	bne.n	800bbdc <UART_SetConfig+0x21c>
 800bb90:	4b3f      	ldr	r3, [pc, #252]	; (800bc90 <UART_SetConfig+0x2d0>)
 800bb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb9e:	d017      	beq.n	800bbd0 <UART_SetConfig+0x210>
 800bba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bba4:	d817      	bhi.n	800bbd6 <UART_SetConfig+0x216>
 800bba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbaa:	d00b      	beq.n	800bbc4 <UART_SetConfig+0x204>
 800bbac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbb0:	d811      	bhi.n	800bbd6 <UART_SetConfig+0x216>
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d003      	beq.n	800bbbe <UART_SetConfig+0x1fe>
 800bbb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbba:	d006      	beq.n	800bbca <UART_SetConfig+0x20a>
 800bbbc:	e00b      	b.n	800bbd6 <UART_SetConfig+0x216>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	77fb      	strb	r3, [r7, #31]
 800bbc2:	e0a0      	b.n	800bd06 <UART_SetConfig+0x346>
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	77fb      	strb	r3, [r7, #31]
 800bbc8:	e09d      	b.n	800bd06 <UART_SetConfig+0x346>
 800bbca:	2304      	movs	r3, #4
 800bbcc:	77fb      	strb	r3, [r7, #31]
 800bbce:	e09a      	b.n	800bd06 <UART_SetConfig+0x346>
 800bbd0:	2308      	movs	r3, #8
 800bbd2:	77fb      	strb	r3, [r7, #31]
 800bbd4:	e097      	b.n	800bd06 <UART_SetConfig+0x346>
 800bbd6:	2310      	movs	r3, #16
 800bbd8:	77fb      	strb	r3, [r7, #31]
 800bbda:	e094      	b.n	800bd06 <UART_SetConfig+0x346>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a30      	ldr	r2, [pc, #192]	; (800bca4 <UART_SetConfig+0x2e4>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d125      	bne.n	800bc32 <UART_SetConfig+0x272>
 800bbe6:	4b2a      	ldr	r3, [pc, #168]	; (800bc90 <UART_SetConfig+0x2d0>)
 800bbe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bbf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbf4:	d017      	beq.n	800bc26 <UART_SetConfig+0x266>
 800bbf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbfa:	d817      	bhi.n	800bc2c <UART_SetConfig+0x26c>
 800bbfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc00:	d00b      	beq.n	800bc1a <UART_SetConfig+0x25a>
 800bc02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc06:	d811      	bhi.n	800bc2c <UART_SetConfig+0x26c>
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d003      	beq.n	800bc14 <UART_SetConfig+0x254>
 800bc0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc10:	d006      	beq.n	800bc20 <UART_SetConfig+0x260>
 800bc12:	e00b      	b.n	800bc2c <UART_SetConfig+0x26c>
 800bc14:	2301      	movs	r3, #1
 800bc16:	77fb      	strb	r3, [r7, #31]
 800bc18:	e075      	b.n	800bd06 <UART_SetConfig+0x346>
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	77fb      	strb	r3, [r7, #31]
 800bc1e:	e072      	b.n	800bd06 <UART_SetConfig+0x346>
 800bc20:	2304      	movs	r3, #4
 800bc22:	77fb      	strb	r3, [r7, #31]
 800bc24:	e06f      	b.n	800bd06 <UART_SetConfig+0x346>
 800bc26:	2308      	movs	r3, #8
 800bc28:	77fb      	strb	r3, [r7, #31]
 800bc2a:	e06c      	b.n	800bd06 <UART_SetConfig+0x346>
 800bc2c:	2310      	movs	r3, #16
 800bc2e:	77fb      	strb	r3, [r7, #31]
 800bc30:	e069      	b.n	800bd06 <UART_SetConfig+0x346>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a1c      	ldr	r2, [pc, #112]	; (800bca8 <UART_SetConfig+0x2e8>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d137      	bne.n	800bcac <UART_SetConfig+0x2ec>
 800bc3c:	4b14      	ldr	r3, [pc, #80]	; (800bc90 <UART_SetConfig+0x2d0>)
 800bc3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bc46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc4a:	d017      	beq.n	800bc7c <UART_SetConfig+0x2bc>
 800bc4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc50:	d817      	bhi.n	800bc82 <UART_SetConfig+0x2c2>
 800bc52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc56:	d00b      	beq.n	800bc70 <UART_SetConfig+0x2b0>
 800bc58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc5c:	d811      	bhi.n	800bc82 <UART_SetConfig+0x2c2>
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d003      	beq.n	800bc6a <UART_SetConfig+0x2aa>
 800bc62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc66:	d006      	beq.n	800bc76 <UART_SetConfig+0x2b6>
 800bc68:	e00b      	b.n	800bc82 <UART_SetConfig+0x2c2>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	77fb      	strb	r3, [r7, #31]
 800bc6e:	e04a      	b.n	800bd06 <UART_SetConfig+0x346>
 800bc70:	2302      	movs	r3, #2
 800bc72:	77fb      	strb	r3, [r7, #31]
 800bc74:	e047      	b.n	800bd06 <UART_SetConfig+0x346>
 800bc76:	2304      	movs	r3, #4
 800bc78:	77fb      	strb	r3, [r7, #31]
 800bc7a:	e044      	b.n	800bd06 <UART_SetConfig+0x346>
 800bc7c:	2308      	movs	r3, #8
 800bc7e:	77fb      	strb	r3, [r7, #31]
 800bc80:	e041      	b.n	800bd06 <UART_SetConfig+0x346>
 800bc82:	2310      	movs	r3, #16
 800bc84:	77fb      	strb	r3, [r7, #31]
 800bc86:	e03e      	b.n	800bd06 <UART_SetConfig+0x346>
 800bc88:	efff69f3 	.word	0xefff69f3
 800bc8c:	40011000 	.word	0x40011000
 800bc90:	40023800 	.word	0x40023800
 800bc94:	40004400 	.word	0x40004400
 800bc98:	40004800 	.word	0x40004800
 800bc9c:	40004c00 	.word	0x40004c00
 800bca0:	40005000 	.word	0x40005000
 800bca4:	40011400 	.word	0x40011400
 800bca8:	40007800 	.word	0x40007800
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a71      	ldr	r2, [pc, #452]	; (800be78 <UART_SetConfig+0x4b8>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d125      	bne.n	800bd02 <UART_SetConfig+0x342>
 800bcb6:	4b71      	ldr	r3, [pc, #452]	; (800be7c <UART_SetConfig+0x4bc>)
 800bcb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bcc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bcc4:	d017      	beq.n	800bcf6 <UART_SetConfig+0x336>
 800bcc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bcca:	d817      	bhi.n	800bcfc <UART_SetConfig+0x33c>
 800bccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcd0:	d00b      	beq.n	800bcea <UART_SetConfig+0x32a>
 800bcd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcd6:	d811      	bhi.n	800bcfc <UART_SetConfig+0x33c>
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d003      	beq.n	800bce4 <UART_SetConfig+0x324>
 800bcdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bce0:	d006      	beq.n	800bcf0 <UART_SetConfig+0x330>
 800bce2:	e00b      	b.n	800bcfc <UART_SetConfig+0x33c>
 800bce4:	2300      	movs	r3, #0
 800bce6:	77fb      	strb	r3, [r7, #31]
 800bce8:	e00d      	b.n	800bd06 <UART_SetConfig+0x346>
 800bcea:	2302      	movs	r3, #2
 800bcec:	77fb      	strb	r3, [r7, #31]
 800bcee:	e00a      	b.n	800bd06 <UART_SetConfig+0x346>
 800bcf0:	2304      	movs	r3, #4
 800bcf2:	77fb      	strb	r3, [r7, #31]
 800bcf4:	e007      	b.n	800bd06 <UART_SetConfig+0x346>
 800bcf6:	2308      	movs	r3, #8
 800bcf8:	77fb      	strb	r3, [r7, #31]
 800bcfa:	e004      	b.n	800bd06 <UART_SetConfig+0x346>
 800bcfc:	2310      	movs	r3, #16
 800bcfe:	77fb      	strb	r3, [r7, #31]
 800bd00:	e001      	b.n	800bd06 <UART_SetConfig+0x346>
 800bd02:	2310      	movs	r3, #16
 800bd04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	69db      	ldr	r3, [r3, #28]
 800bd0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd0e:	d15b      	bne.n	800bdc8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800bd10:	7ffb      	ldrb	r3, [r7, #31]
 800bd12:	2b08      	cmp	r3, #8
 800bd14:	d827      	bhi.n	800bd66 <UART_SetConfig+0x3a6>
 800bd16:	a201      	add	r2, pc, #4	; (adr r2, 800bd1c <UART_SetConfig+0x35c>)
 800bd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1c:	0800bd41 	.word	0x0800bd41
 800bd20:	0800bd49 	.word	0x0800bd49
 800bd24:	0800bd51 	.word	0x0800bd51
 800bd28:	0800bd67 	.word	0x0800bd67
 800bd2c:	0800bd57 	.word	0x0800bd57
 800bd30:	0800bd67 	.word	0x0800bd67
 800bd34:	0800bd67 	.word	0x0800bd67
 800bd38:	0800bd67 	.word	0x0800bd67
 800bd3c:	0800bd5f 	.word	0x0800bd5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd40:	f7fc fcb2 	bl	80086a8 <HAL_RCC_GetPCLK1Freq>
 800bd44:	61b8      	str	r0, [r7, #24]
        break;
 800bd46:	e013      	b.n	800bd70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd48:	f7fc fcc2 	bl	80086d0 <HAL_RCC_GetPCLK2Freq>
 800bd4c:	61b8      	str	r0, [r7, #24]
        break;
 800bd4e:	e00f      	b.n	800bd70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd50:	4b4b      	ldr	r3, [pc, #300]	; (800be80 <UART_SetConfig+0x4c0>)
 800bd52:	61bb      	str	r3, [r7, #24]
        break;
 800bd54:	e00c      	b.n	800bd70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd56:	f7fc fbe5 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 800bd5a:	61b8      	str	r0, [r7, #24]
        break;
 800bd5c:	e008      	b.n	800bd70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd62:	61bb      	str	r3, [r7, #24]
        break;
 800bd64:	e004      	b.n	800bd70 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800bd66:	2300      	movs	r3, #0
 800bd68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	77bb      	strb	r3, [r7, #30]
        break;
 800bd6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d074      	beq.n	800be60 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	005a      	lsls	r2, r3, #1
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	085b      	lsrs	r3, r3, #1
 800bd80:	441a      	add	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2b0f      	cmp	r3, #15
 800bd92:	d916      	bls.n	800bdc2 <UART_SetConfig+0x402>
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd9a:	d212      	bcs.n	800bdc2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	f023 030f 	bic.w	r3, r3, #15
 800bda4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	085b      	lsrs	r3, r3, #1
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	f003 0307 	and.w	r3, r3, #7
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	89fb      	ldrh	r3, [r7, #14]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	89fa      	ldrh	r2, [r7, #14]
 800bdbe:	60da      	str	r2, [r3, #12]
 800bdc0:	e04e      	b.n	800be60 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	77bb      	strb	r3, [r7, #30]
 800bdc6:	e04b      	b.n	800be60 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bdc8:	7ffb      	ldrb	r3, [r7, #31]
 800bdca:	2b08      	cmp	r3, #8
 800bdcc:	d827      	bhi.n	800be1e <UART_SetConfig+0x45e>
 800bdce:	a201      	add	r2, pc, #4	; (adr r2, 800bdd4 <UART_SetConfig+0x414>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800bdf9 	.word	0x0800bdf9
 800bdd8:	0800be01 	.word	0x0800be01
 800bddc:	0800be09 	.word	0x0800be09
 800bde0:	0800be1f 	.word	0x0800be1f
 800bde4:	0800be0f 	.word	0x0800be0f
 800bde8:	0800be1f 	.word	0x0800be1f
 800bdec:	0800be1f 	.word	0x0800be1f
 800bdf0:	0800be1f 	.word	0x0800be1f
 800bdf4:	0800be17 	.word	0x0800be17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdf8:	f7fc fc56 	bl	80086a8 <HAL_RCC_GetPCLK1Freq>
 800bdfc:	61b8      	str	r0, [r7, #24]
        break;
 800bdfe:	e013      	b.n	800be28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be00:	f7fc fc66 	bl	80086d0 <HAL_RCC_GetPCLK2Freq>
 800be04:	61b8      	str	r0, [r7, #24]
        break;
 800be06:	e00f      	b.n	800be28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be08:	4b1d      	ldr	r3, [pc, #116]	; (800be80 <UART_SetConfig+0x4c0>)
 800be0a:	61bb      	str	r3, [r7, #24]
        break;
 800be0c:	e00c      	b.n	800be28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be0e:	f7fc fb89 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 800be12:	61b8      	str	r0, [r7, #24]
        break;
 800be14:	e008      	b.n	800be28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be1a:	61bb      	str	r3, [r7, #24]
        break;
 800be1c:	e004      	b.n	800be28 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800be1e:	2300      	movs	r3, #0
 800be20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	77bb      	strb	r3, [r7, #30]
        break;
 800be26:	bf00      	nop
    }

    if (pclk != 0U)
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d018      	beq.n	800be60 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	085a      	lsrs	r2, r3, #1
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	441a      	add	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be40:	b29b      	uxth	r3, r3
 800be42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	2b0f      	cmp	r3, #15
 800be48:	d908      	bls.n	800be5c <UART_SetConfig+0x49c>
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be50:	d204      	bcs.n	800be5c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	60da      	str	r2, [r3, #12]
 800be5a:	e001      	b.n	800be60 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800be6c:	7fbb      	ldrb	r3, [r7, #30]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3720      	adds	r7, #32
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	40007c00 	.word	0x40007c00
 800be7c:	40023800 	.word	0x40023800
 800be80:	00f42400 	.word	0x00f42400

0800be84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00a      	beq.n	800beae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	430a      	orrs	r2, r1
 800beac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00a      	beq.n	800bed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	430a      	orrs	r2, r1
 800bece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed4:	f003 0304 	and.w	r3, r3, #4
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00a      	beq.n	800bef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	430a      	orrs	r2, r1
 800bef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef6:	f003 0308 	and.w	r3, r3, #8
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00a      	beq.n	800bf14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	430a      	orrs	r2, r1
 800bf12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf18:	f003 0310 	and.w	r3, r3, #16
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00a      	beq.n	800bf36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	430a      	orrs	r2, r1
 800bf34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3a:	f003 0320 	and.w	r3, r3, #32
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00a      	beq.n	800bf58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	430a      	orrs	r2, r1
 800bf56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d01a      	beq.n	800bf9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf82:	d10a      	bne.n	800bf9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	430a      	orrs	r2, r1
 800bf98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00a      	beq.n	800bfbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	430a      	orrs	r2, r1
 800bfba:	605a      	str	r2, [r3, #4]
  }
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af02      	add	r7, sp, #8
 800bfce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfd8:	f7f9 fb84 	bl	80056e4 <HAL_GetTick>
 800bfdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f003 0308 	and.w	r3, r3, #8
 800bfe8:	2b08      	cmp	r3, #8
 800bfea:	d10e      	bne.n	800c00a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f817 	bl	800c02e <UART_WaitOnFlagUntilTimeout>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d001      	beq.n	800c00a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e00d      	b.n	800c026 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2220      	movs	r2, #32
 800c00e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2220      	movs	r2, #32
 800c014:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b084      	sub	sp, #16
 800c032:	af00      	add	r7, sp, #0
 800c034:	60f8      	str	r0, [r7, #12]
 800c036:	60b9      	str	r1, [r7, #8]
 800c038:	603b      	str	r3, [r7, #0]
 800c03a:	4613      	mov	r3, r2
 800c03c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c03e:	e05e      	b.n	800c0fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c046:	d05a      	beq.n	800c0fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c048:	f7f9 fb4c 	bl	80056e4 <HAL_GetTick>
 800c04c:	4602      	mov	r2, r0
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	69ba      	ldr	r2, [r7, #24]
 800c054:	429a      	cmp	r2, r3
 800c056:	d302      	bcc.n	800c05e <UART_WaitOnFlagUntilTimeout+0x30>
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d11b      	bne.n	800c096 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c06c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	689a      	ldr	r2, [r3, #8]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f022 0201 	bic.w	r2, r2, #1
 800c07c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2220      	movs	r2, #32
 800c082:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2220      	movs	r2, #32
 800c088:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e043      	b.n	800c11e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 0304 	and.w	r3, r3, #4
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d02c      	beq.n	800c0fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	69db      	ldr	r3, [r3, #28]
 800c0aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0b2:	d124      	bne.n	800c0fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c0cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	689a      	ldr	r2, [r3, #8]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f022 0201 	bic.w	r2, r2, #1
 800c0dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2220      	movs	r2, #32
 800c0e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2220      	movs	r2, #32
 800c0e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	e00f      	b.n	800c11e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	69da      	ldr	r2, [r3, #28]
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	4013      	ands	r3, r2
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	bf0c      	ite	eq
 800c10e:	2301      	moveq	r3, #1
 800c110:	2300      	movne	r3, #0
 800c112:	b2db      	uxtb	r3, r3
 800c114:	461a      	mov	r2, r3
 800c116:	79fb      	ldrb	r3, [r7, #7]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d091      	beq.n	800c040 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
	...

0800c128 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c132:	2300      	movs	r3, #0
 800c134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c136:	2300      	movs	r3, #0
 800c138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d027      	beq.n	800c192 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	4b2f      	ldr	r3, [pc, #188]	; (800c208 <FMC_SDRAM_Init+0xe0>)
 800c14c:	4013      	ands	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c158:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c15e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c164:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c16a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c170:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c176:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c17c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c182:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	4313      	orrs	r3, r2
 800c188:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	e032      	b.n	800c1f8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c19e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c1a8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c1ae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	4b12      	ldr	r3, [pc, #72]	; (800c208 <FMC_SDRAM_Init+0xe0>)
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c1cc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c1d2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c1d8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c1de:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c1e4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	ffff8000 	.word	0xffff8000

0800c20c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c218:	2300      	movs	r3, #0
 800c21a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d02e      	beq.n	800c284 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c232:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	3b01      	subs	r3, #1
 800c240:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c242:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	3b01      	subs	r3, #1
 800c24a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c24c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	3b01      	subs	r3, #1
 800c254:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c256:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c260:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	3b01      	subs	r3, #1
 800c268:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c26a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	3b01      	subs	r3, #1
 800c272:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c274:	4313      	orrs	r3, r2
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	4313      	orrs	r3, r2
 800c27a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	609a      	str	r2, [r3, #8]
 800c282:	e039      	b.n	800c2f8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c28a:	697a      	ldr	r2, [r7, #20]
 800c28c:	4b1e      	ldr	r3, [pc, #120]	; (800c308 <FMC_SDRAM_Timing_Init+0xfc>)
 800c28e:	4013      	ands	r3, r2
 800c290:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	3b01      	subs	r3, #1
 800c298:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	695b      	ldr	r3, [r3, #20]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	697a      	ldr	r2, [r7, #20]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c2b6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c2c6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c2d0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c2da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	699b      	ldr	r3, [r3, #24]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	697a      	ldr	r2, [r7, #20]
 800c2f0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	693a      	ldr	r2, [r7, #16]
 800c2f6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	371c      	adds	r7, #28
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	ff0f0fff 	.word	0xff0f0fff

0800c30c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	691a      	ldr	r2, [r3, #16]
 800c31c:	4b0c      	ldr	r3, [pc, #48]	; (800c350 <FMC_SDRAM_SendCommand+0x44>)
 800c31e:	4013      	ands	r3, r2
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	6811      	ldr	r1, [r2, #0]
 800c324:	68ba      	ldr	r2, [r7, #8]
 800c326:	6852      	ldr	r2, [r2, #4]
 800c328:	4311      	orrs	r1, r2
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	6892      	ldr	r2, [r2, #8]
 800c32e:	3a01      	subs	r2, #1
 800c330:	0152      	lsls	r2, r2, #5
 800c332:	4311      	orrs	r1, r2
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	68d2      	ldr	r2, [r2, #12]
 800c338:	0252      	lsls	r2, r2, #9
 800c33a:	430a      	orrs	r2, r1
 800c33c:	431a      	orrs	r2, r3
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	ffc00000 	.word	0xffc00000

0800c354 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	695a      	ldr	r2, [r3, #20]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	431a      	orrs	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
	...

0800c37c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c37c:	b084      	sub	sp, #16
 800c37e:	b480      	push	{r7}
 800c380:	b085      	sub	sp, #20
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	f107 001c 	add.w	r0, r7, #28
 800c38a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c392:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c394:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c396:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c39a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c39e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c3a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c3a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685a      	ldr	r2, [r3, #4]
 800c3b2:	4b07      	ldr	r3, [pc, #28]	; (800c3d0 <SDMMC_Init+0x54>)
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	431a      	orrs	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	b004      	add	sp, #16
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	ffff8100 	.word	0xffff8100

0800c3d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	370c      	adds	r7, #12
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c3ee:	b480      	push	{r7}
 800c3f0:	b083      	sub	sp, #12
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2203      	movs	r2, #3
 800c41c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c41e:	2002      	movs	r0, #2
 800c420:	f7f9 f96c 	bl	80056fc <HAL_Delay>
  
  return HAL_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c42e:	b480      	push	{r7}
 800c430:	b083      	sub	sp, #12
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 0303 	and.w	r3, r3, #3
}
 800c43e:	4618      	mov	r0, r3
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
	...

0800c44c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c46a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c470:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c476:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	68da      	ldr	r2, [r3, #12]
 800c482:	4b06      	ldr	r3, [pc, #24]	; (800c49c <SDMMC_SendCommand+0x50>)
 800c484:	4013      	ands	r3, r2
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	431a      	orrs	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3714      	adds	r7, #20
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	fffff000 	.word	0xfffff000

0800c4a0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	b2db      	uxtb	r3, r3
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	370c      	adds	r7, #12
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b085      	sub	sp, #20
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	3314      	adds	r3, #20
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
}  
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c506:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c50c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c512:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4313      	orrs	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	431a      	orrs	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c52a:	2300      	movs	r3, #0

}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b088      	sub	sp, #32
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c546:	2310      	movs	r3, #16
 800c548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c54a:	2340      	movs	r3, #64	; 0x40
 800c54c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c54e:	2300      	movs	r3, #0
 800c550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c558:	f107 0308 	add.w	r3, r7, #8
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff ff74 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c564:	f241 3288 	movw	r2, #5000	; 0x1388
 800c568:	2110      	movs	r1, #16
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fa46 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c572:	69fb      	ldr	r3, [r7, #28]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3720      	adds	r7, #32
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b088      	sub	sp, #32
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c58a:	2311      	movs	r3, #17
 800c58c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c58e:	2340      	movs	r3, #64	; 0x40
 800c590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c592:	2300      	movs	r3, #0
 800c594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c59a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c59c:	f107 0308 	add.w	r3, r7, #8
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff ff52 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c5a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5ac:	2111      	movs	r1, #17
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa24 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c5b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5b6:	69fb      	ldr	r3, [r7, #28]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3720      	adds	r7, #32
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c5ce:	2312      	movs	r3, #18
 800c5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5d2:	2340      	movs	r3, #64	; 0x40
 800c5d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5e0:	f107 0308 	add.w	r3, r7, #8
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff ff30 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f0:	2112      	movs	r1, #18
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fa02 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c5f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5fa:	69fb      	ldr	r3, [r7, #28]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3720      	adds	r7, #32
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c612:	2318      	movs	r3, #24
 800c614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c616:	2340      	movs	r3, #64	; 0x40
 800c618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c61a:	2300      	movs	r3, #0
 800c61c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c61e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c622:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c624:	f107 0308 	add.w	r3, r7, #8
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff ff0e 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c630:	f241 3288 	movw	r2, #5000	; 0x1388
 800c634:	2118      	movs	r1, #24
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f9e0 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c63c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c63e:	69fb      	ldr	r3, [r7, #28]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3720      	adds	r7, #32
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b088      	sub	sp, #32
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c656:	2319      	movs	r3, #25
 800c658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c65a:	2340      	movs	r3, #64	; 0x40
 800c65c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c666:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c668:	f107 0308 	add.w	r3, r7, #8
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7ff feec 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c674:	f241 3288 	movw	r2, #5000	; 0x1388
 800c678:	2119      	movs	r1, #25
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f9be 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c682:	69fb      	ldr	r3, [r7, #28]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3720      	adds	r7, #32
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b088      	sub	sp, #32
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c694:	2300      	movs	r3, #0
 800c696:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c698:	230c      	movs	r3, #12
 800c69a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c69c:	2340      	movs	r3, #64	; 0x40
 800c69e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6aa:	f107 0308 	add.w	r3, r7, #8
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7ff fecb 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c6b6:	4a05      	ldr	r2, [pc, #20]	; (800c6cc <SDMMC_CmdStopTransfer+0x40>)
 800c6b8:	210c      	movs	r1, #12
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 f99e 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c6c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6c2:	69fb      	ldr	r3, [r7, #28]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3720      	adds	r7, #32
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	05f5e100 	.word	0x05f5e100

0800c6d0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b08a      	sub	sp, #40	; 0x28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c6e0:	2307      	movs	r3, #7
 800c6e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6e4:	2340      	movs	r3, #64	; 0x40
 800c6e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6f0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6f2:	f107 0310 	add.w	r3, r7, #16
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f7ff fea7 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c6fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800c702:	2107      	movs	r1, #7
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 f979 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c70a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3728      	adds	r7, #40	; 0x28
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b088      	sub	sp, #32
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c71e:	2300      	movs	r3, #0
 800c720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c722:	2300      	movs	r3, #0
 800c724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c726:	2300      	movs	r3, #0
 800c728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c72a:	2300      	movs	r3, #0
 800c72c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c72e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c732:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c734:	f107 0308 	add.w	r3, r7, #8
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7ff fe86 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f92f 	bl	800c9a4 <SDMMC_GetCmdError>
 800c746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c748:	69fb      	ldr	r3, [r7, #28]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3720      	adds	r7, #32
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b088      	sub	sp, #32
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c75a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c75e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c760:	2308      	movs	r3, #8
 800c762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c764:	2340      	movs	r3, #64	; 0x40
 800c766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c768:	2300      	movs	r3, #0
 800c76a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c76c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c770:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c772:	f107 0308 	add.w	r3, r7, #8
 800c776:	4619      	mov	r1, r3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f7ff fe67 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 fb26 	bl	800cdd0 <SDMMC_GetCmdResp7>
 800c784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c786:	69fb      	ldr	r3, [r7, #28]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3720      	adds	r7, #32
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b088      	sub	sp, #32
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c79e:	2337      	movs	r3, #55	; 0x37
 800c7a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7a2:	2340      	movs	r3, #64	; 0x40
 800c7a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7b0:	f107 0308 	add.w	r3, r7, #8
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7ff fe48 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7c0:	2137      	movs	r1, #55	; 0x37
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f91a 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c7c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7ca:	69fb      	ldr	r3, [r7, #28]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3720      	adds	r7, #32
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	4b0d      	ldr	r3, [pc, #52]	; (800c818 <SDMMC_CmdAppOperCommand+0x44>)
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c7e6:	2329      	movs	r3, #41	; 0x29
 800c7e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7ea:	2340      	movs	r3, #64	; 0x40
 800c7ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7f8:	f107 0308 	add.w	r3, r7, #8
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff fe24 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fa2f 	bl	800cc68 <SDMMC_GetCmdResp3>
 800c80a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c80c:	69fb      	ldr	r3, [r7, #28]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3720      	adds	r7, #32
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	80100000 	.word	0x80100000

0800c81c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c82a:	2306      	movs	r3, #6
 800c82c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c82e:	2340      	movs	r3, #64	; 0x40
 800c830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c832:	2300      	movs	r3, #0
 800c834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c83a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c83c:	f107 0308 	add.w	r3, r7, #8
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7ff fe02 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c848:	f241 3288 	movw	r2, #5000	; 0x1388
 800c84c:	2106      	movs	r1, #6
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f8d4 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c856:	69fb      	ldr	r3, [r7, #28]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3720      	adds	r7, #32
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b088      	sub	sp, #32
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c868:	2300      	movs	r3, #0
 800c86a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c86c:	2333      	movs	r3, #51	; 0x33
 800c86e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c870:	2340      	movs	r3, #64	; 0x40
 800c872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c874:	2300      	movs	r3, #0
 800c876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c87c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c87e:	f107 0308 	add.w	r3, r7, #8
 800c882:	4619      	mov	r1, r3
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f7ff fde1 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c88a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c88e:	2133      	movs	r1, #51	; 0x33
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 f8b3 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c898:	69fb      	ldr	r3, [r7, #28]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3720      	adds	r7, #32
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b088      	sub	sp, #32
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c8b2:	23c0      	movs	r3, #192	; 0xc0
 800c8b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8c0:	f107 0308 	add.w	r3, r7, #8
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7ff fdc0 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 f983 	bl	800cbd8 <SDMMC_GetCmdResp2>
 800c8d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8d4:	69fb      	ldr	r3, [r7, #28]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3720      	adds	r7, #32
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b088      	sub	sp, #32
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c8ec:	2309      	movs	r3, #9
 800c8ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c8f0:	23c0      	movs	r3, #192	; 0xc0
 800c8f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8fe:	f107 0308 	add.w	r3, r7, #8
 800c902:	4619      	mov	r1, r3
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7ff fda1 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f964 	bl	800cbd8 <SDMMC_GetCmdResp2>
 800c910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c912:	69fb      	ldr	r3, [r7, #28]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3720      	adds	r7, #32
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b088      	sub	sp, #32
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c926:	2300      	movs	r3, #0
 800c928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c92a:	2303      	movs	r3, #3
 800c92c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c92e:	2340      	movs	r3, #64	; 0x40
 800c930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c932:	2300      	movs	r3, #0
 800c934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c93a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c93c:	f107 0308 	add.w	r3, r7, #8
 800c940:	4619      	mov	r1, r3
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7ff fd82 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	2103      	movs	r1, #3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f9c9 	bl	800cce4 <SDMMC_GetCmdResp6>
 800c952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c954:	69fb      	ldr	r3, [r7, #28]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3720      	adds	r7, #32
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b088      	sub	sp, #32
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c96c:	230d      	movs	r3, #13
 800c96e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c970:	2340      	movs	r3, #64	; 0x40
 800c972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c974:	2300      	movs	r3, #0
 800c976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c97c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c97e:	f107 0308 	add.w	r3, r7, #8
 800c982:	4619      	mov	r1, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7ff fd61 	bl	800c44c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c98a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c98e:	210d      	movs	r1, #13
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f833 	bl	800c9fc <SDMMC_GetCmdResp1>
 800c996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c998:	69fb      	ldr	r3, [r7, #28]
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3720      	adds	r7, #32
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
	...

0800c9a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9ac:	4b11      	ldr	r3, [pc, #68]	; (800c9f4 <SDMMC_GetCmdError+0x50>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a11      	ldr	r2, [pc, #68]	; (800c9f8 <SDMMC_GetCmdError+0x54>)
 800c9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b6:	0a5b      	lsrs	r3, r3, #9
 800c9b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9bc:	fb02 f303 	mul.w	r3, r2, r3
 800c9c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	1e5a      	subs	r2, r3, #1
 800c9c6:	60fa      	str	r2, [r7, #12]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d102      	bne.n	800c9d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9d0:	e009      	b.n	800c9e6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d0f1      	beq.n	800c9c2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	22c5      	movs	r2, #197	; 0xc5
 800c9e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	20000040 	.word	0x20000040
 800c9f8:	10624dd3 	.word	0x10624dd3

0800c9fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b088      	sub	sp, #32
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	460b      	mov	r3, r1
 800ca06:	607a      	str	r2, [r7, #4]
 800ca08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ca0a:	4b70      	ldr	r3, [pc, #448]	; (800cbcc <SDMMC_GetCmdResp1+0x1d0>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a70      	ldr	r2, [pc, #448]	; (800cbd0 <SDMMC_GetCmdResp1+0x1d4>)
 800ca10:	fba2 2303 	umull	r2, r3, r2, r3
 800ca14:	0a5a      	lsrs	r2, r3, #9
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	fb02 f303 	mul.w	r3, r2, r3
 800ca1c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	1e5a      	subs	r2, r3, #1
 800ca22:	61fa      	str	r2, [r7, #28]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d102      	bne.n	800ca2e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca2c:	e0c9      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca32:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d0ef      	beq.n	800ca1e <SDMMC_GetCmdResp1+0x22>
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1ea      	bne.n	800ca1e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d004      	beq.n	800ca5e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2204      	movs	r2, #4
 800ca58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca5a:	2304      	movs	r3, #4
 800ca5c:	e0b1      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca62:	f003 0301 	and.w	r3, r3, #1
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d004      	beq.n	800ca74 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca70:	2301      	movs	r3, #1
 800ca72:	e0a6      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	22c5      	movs	r2, #197	; 0xc5
 800ca78:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ca7a:	68f8      	ldr	r0, [r7, #12]
 800ca7c:	f7ff fd10 	bl	800c4a0 <SDMMC_GetCommandResponse>
 800ca80:	4603      	mov	r3, r0
 800ca82:	461a      	mov	r2, r3
 800ca84:	7afb      	ldrb	r3, [r7, #11]
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d001      	beq.n	800ca8e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e099      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ca8e:	2100      	movs	r1, #0
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f7ff fd12 	bl	800c4ba <SDMMC_GetResponse>
 800ca96:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ca98:	697a      	ldr	r2, [r7, #20]
 800ca9a:	4b4e      	ldr	r3, [pc, #312]	; (800cbd4 <SDMMC_GetCmdResp1+0x1d8>)
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d101      	bne.n	800caa6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800caa2:	2300      	movs	r3, #0
 800caa4:	e08d      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	da02      	bge.n	800cab2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800caac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cab0:	e087      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d001      	beq.n	800cac0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cabc:	2340      	movs	r3, #64	; 0x40
 800cabe:	e080      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800caca:	2380      	movs	r3, #128	; 0x80
 800cacc:	e079      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d002      	beq.n	800cade <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cadc:	e071      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800caec:	e069      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800caf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cafc:	e061      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d002      	beq.n	800cb0e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb0c:	e059      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d002      	beq.n	800cb1e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb1c:	e051      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb2c:	e049      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d002      	beq.n	800cb3e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cb38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cb3c:	e041      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cb48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb4c:	e039      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cb58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cb5c:	e031      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d002      	beq.n	800cb6e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cb68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cb6c:	e029      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d002      	beq.n	800cb7e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cb78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb7c:	e021      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cb88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cb8c:	e019      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d002      	beq.n	800cb9e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cb98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb9c:	e011      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d002      	beq.n	800cbae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cbac:	e009      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	f003 0308 	and.w	r3, r3, #8
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d002      	beq.n	800cbbe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cbb8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cbbc:	e001      	b.n	800cbc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cbbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3720      	adds	r7, #32
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	20000040 	.word	0x20000040
 800cbd0:	10624dd3 	.word	0x10624dd3
 800cbd4:	fdffe008 	.word	0xfdffe008

0800cbd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbe0:	4b1f      	ldr	r3, [pc, #124]	; (800cc60 <SDMMC_GetCmdResp2+0x88>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a1f      	ldr	r2, [pc, #124]	; (800cc64 <SDMMC_GetCmdResp2+0x8c>)
 800cbe6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbea:	0a5b      	lsrs	r3, r3, #9
 800cbec:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbf0:	fb02 f303 	mul.w	r3, r2, r3
 800cbf4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	1e5a      	subs	r2, r3, #1
 800cbfa:	60fa      	str	r2, [r7, #12]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d102      	bne.n	800cc06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc04:	e026      	b.n	800cc54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d0ef      	beq.n	800cbf6 <SDMMC_GetCmdResp2+0x1e>
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1ea      	bne.n	800cbf6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc24:	f003 0304 	and.w	r3, r3, #4
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d004      	beq.n	800cc36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2204      	movs	r2, #4
 800cc30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc32:	2304      	movs	r3, #4
 800cc34:	e00e      	b.n	800cc54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d004      	beq.n	800cc4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2201      	movs	r2, #1
 800cc46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e003      	b.n	800cc54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	22c5      	movs	r2, #197	; 0xc5
 800cc50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3714      	adds	r7, #20
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	20000040 	.word	0x20000040
 800cc64:	10624dd3 	.word	0x10624dd3

0800cc68 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc70:	4b1a      	ldr	r3, [pc, #104]	; (800ccdc <SDMMC_GetCmdResp3+0x74>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a1a      	ldr	r2, [pc, #104]	; (800cce0 <SDMMC_GetCmdResp3+0x78>)
 800cc76:	fba2 2303 	umull	r2, r3, r2, r3
 800cc7a:	0a5b      	lsrs	r3, r3, #9
 800cc7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc80:	fb02 f303 	mul.w	r3, r2, r3
 800cc84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	1e5a      	subs	r2, r3, #1
 800cc8a:	60fa      	str	r2, [r7, #12]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d102      	bne.n	800cc96 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc94:	e01b      	b.n	800ccce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0ef      	beq.n	800cc86 <SDMMC_GetCmdResp3+0x1e>
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1ea      	bne.n	800cc86 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d004      	beq.n	800ccc6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2204      	movs	r2, #4
 800ccc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccc2:	2304      	movs	r3, #4
 800ccc4:	e003      	b.n	800ccce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	22c5      	movs	r2, #197	; 0xc5
 800ccca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	20000040 	.word	0x20000040
 800cce0:	10624dd3 	.word	0x10624dd3

0800cce4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b088      	sub	sp, #32
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	460b      	mov	r3, r1
 800ccee:	607a      	str	r2, [r7, #4]
 800ccf0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ccf2:	4b35      	ldr	r3, [pc, #212]	; (800cdc8 <SDMMC_GetCmdResp6+0xe4>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a35      	ldr	r2, [pc, #212]	; (800cdcc <SDMMC_GetCmdResp6+0xe8>)
 800ccf8:	fba2 2303 	umull	r2, r3, r2, r3
 800ccfc:	0a5b      	lsrs	r3, r3, #9
 800ccfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd02:	fb02 f303 	mul.w	r3, r2, r3
 800cd06:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	1e5a      	subs	r2, r3, #1
 800cd0c:	61fa      	str	r2, [r7, #28]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d102      	bne.n	800cd18 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd16:	e052      	b.n	800cdbe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd1c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0ef      	beq.n	800cd08 <SDMMC_GetCmdResp6+0x24>
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1ea      	bne.n	800cd08 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd36:	f003 0304 	and.w	r3, r3, #4
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d004      	beq.n	800cd48 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2204      	movs	r2, #4
 800cd42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd44:	2304      	movs	r3, #4
 800cd46:	e03a      	b.n	800cdbe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4c:	f003 0301 	and.w	r3, r3, #1
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d004      	beq.n	800cd5e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2201      	movs	r2, #1
 800cd58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e02f      	b.n	800cdbe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f7ff fb9e 	bl	800c4a0 <SDMMC_GetCommandResponse>
 800cd64:	4603      	mov	r3, r0
 800cd66:	461a      	mov	r2, r3
 800cd68:	7afb      	ldrb	r3, [r7, #11]
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d001      	beq.n	800cd72 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e025      	b.n	800cdbe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	22c5      	movs	r2, #197	; 0xc5
 800cd76:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cd78:	2100      	movs	r1, #0
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f7ff fb9d 	bl	800c4ba <SDMMC_GetResponse>
 800cd80:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d106      	bne.n	800cd9a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	0c1b      	lsrs	r3, r3, #16
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cd96:	2300      	movs	r3, #0
 800cd98:	e011      	b.n	800cdbe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d002      	beq.n	800cdaa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cda4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cda8:	e009      	b.n	800cdbe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d002      	beq.n	800cdba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cdb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdb8:	e001      	b.n	800cdbe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3720      	adds	r7, #32
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	20000040 	.word	0x20000040
 800cdcc:	10624dd3 	.word	0x10624dd3

0800cdd0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cdd8:	4b22      	ldr	r3, [pc, #136]	; (800ce64 <SDMMC_GetCmdResp7+0x94>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a22      	ldr	r2, [pc, #136]	; (800ce68 <SDMMC_GetCmdResp7+0x98>)
 800cdde:	fba2 2303 	umull	r2, r3, r2, r3
 800cde2:	0a5b      	lsrs	r3, r3, #9
 800cde4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde8:	fb02 f303 	mul.w	r3, r2, r3
 800cdec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	1e5a      	subs	r2, r3, #1
 800cdf2:	60fa      	str	r2, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d102      	bne.n	800cdfe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cdf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdfc:	e02c      	b.n	800ce58 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0ef      	beq.n	800cdee <SDMMC_GetCmdResp7+0x1e>
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1ea      	bne.n	800cdee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d004      	beq.n	800ce2e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2204      	movs	r2, #4
 800ce28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce2a:	2304      	movs	r3, #4
 800ce2c:	e014      	b.n	800ce58 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce32:	f003 0301 	and.w	r3, r3, #1
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d004      	beq.n	800ce44 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce40:	2301      	movs	r3, #1
 800ce42:	e009      	b.n	800ce58 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2240      	movs	r2, #64	; 0x40
 800ce54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ce56:	2300      	movs	r3, #0
  
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3714      	adds	r7, #20
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr
 800ce64:	20000040 	.word	0x20000040
 800ce68:	10624dd3 	.word	0x10624dd3

0800ce6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ce70:	4904      	ldr	r1, [pc, #16]	; (800ce84 <MX_FATFS_Init+0x18>)
 800ce72:	4805      	ldr	r0, [pc, #20]	; (800ce88 <MX_FATFS_Init+0x1c>)
 800ce74:	f003 f904 	bl	8010080 <FATFS_LinkDriver>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	4b03      	ldr	r3, [pc, #12]	; (800ce8c <MX_FATFS_Init+0x20>)
 800ce7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ce80:	bf00      	nop
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	20009258 	.word	0x20009258
 800ce88:	080150b4 	.word	0x080150b4
 800ce8c:	20009254 	.word	0x20009254

0800ce90 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ce90:	b480      	push	{r7}
 800ce92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ce94:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cea6:	2300      	movs	r3, #0
 800cea8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ceaa:	f000 f896 	bl	800cfda <BSP_SD_IsDetected>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d001      	beq.n	800ceb8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ceb4:	2302      	movs	r3, #2
 800ceb6:	e012      	b.n	800cede <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ceb8:	480b      	ldr	r0, [pc, #44]	; (800cee8 <BSP_SD_Init+0x48>)
 800ceba:	f7fc feac 	bl	8009c16 <HAL_SD_Init>
 800cebe:	4603      	mov	r3, r0
 800cec0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d109      	bne.n	800cedc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cec8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cecc:	4806      	ldr	r0, [pc, #24]	; (800cee8 <BSP_SD_Init+0x48>)
 800cece:	f7fd fc71 	bl	800a7b4 <HAL_SD_ConfigWideBusOperation>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ced8:	2301      	movs	r3, #1
 800ceda:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cedc:	79fb      	ldrb	r3, [r7, #7]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20008988 	.word	0x20008988

0800ceec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	68f9      	ldr	r1, [r7, #12]
 800cf02:	4806      	ldr	r0, [pc, #24]	; (800cf1c <BSP_SD_ReadBlocks_DMA+0x30>)
 800cf04:	f7fc ff3e 	bl	8009d84 <HAL_SD_ReadBlocks_DMA>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cf12:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	20008988 	.word	0x20008988

0800cf20 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	68f9      	ldr	r1, [r7, #12]
 800cf36:	4806      	ldr	r0, [pc, #24]	; (800cf50 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cf38:	f7fd f806 	bl	8009f48 <HAL_SD_WriteBlocks_DMA>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cf46:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3718      	adds	r7, #24
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20008988 	.word	0x20008988

0800cf54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cf58:	4805      	ldr	r0, [pc, #20]	; (800cf70 <BSP_SD_GetCardState+0x1c>)
 800cf5a:	f7fd fcc5 	bl	800a8e8 <HAL_SD_GetCardState>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b04      	cmp	r3, #4
 800cf62:	bf14      	ite	ne
 800cf64:	2301      	movne	r3, #1
 800cf66:	2300      	moveq	r3, #0
 800cf68:	b2db      	uxtb	r3, r3
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	20008988 	.word	0x20008988

0800cf74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cf7c:	6879      	ldr	r1, [r7, #4]
 800cf7e:	4803      	ldr	r0, [pc, #12]	; (800cf8c <BSP_SD_GetCardInfo+0x18>)
 800cf80:	f7fd fbec 	bl	800a75c <HAL_SD_GetCardInfo>
}
 800cf84:	bf00      	nop
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	20008988 	.word	0x20008988

0800cf90 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cf98:	f000 f818 	bl	800cfcc <BSP_SD_AbortCallback>
}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cfac:	f000 f9c4 	bl	800d338 <BSP_SD_WriteCpltCallback>
}
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cfc0:	f000 f9c8 	bl	800d354 <BSP_SD_ReadCpltCallback>
}
 800cfc4:	bf00      	nop
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	af00      	add	r7, sp, #0

}
 800cfd0:	bf00      	nop
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b082      	sub	sp, #8
 800cfde:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cfe4:	f000 f80c 	bl	800d000 <BSP_PlatformIsDetected>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cfee:	2300      	movs	r3, #0
 800cff0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cff2:	79fb      	ldrb	r3, [r7, #7]
 800cff4:	b2db      	uxtb	r3, r3
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
	...

0800d000 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d006:	2301      	movs	r3, #1
 800d008:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d00a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d00e:	4806      	ldr	r0, [pc, #24]	; (800d028 <BSP_PlatformIsDetected+0x28>)
 800d010:	f7f9 fdc2 	bl	8006b98 <HAL_GPIO_ReadPin>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d01a:	2300      	movs	r3, #0
 800d01c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d01e:	79fb      	ldrb	r3, [r7, #7]
}
 800d020:	4618      	mov	r0, r3
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	40020800 	.word	0x40020800

0800d02c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d034:	f003 f8bc 	bl	80101b0 <osKernelSysTick>
 800d038:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d03a:	e006      	b.n	800d04a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d03c:	f7ff ff8a 	bl	800cf54 <BSP_SD_GetCardState>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d046:	2300      	movs	r3, #0
 800d048:	e009      	b.n	800d05e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d04a:	f003 f8b1 	bl	80101b0 <osKernelSysTick>
 800d04e:	4602      	mov	r2, r0
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	1ad3      	subs	r3, r2, r3
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	429a      	cmp	r2, r3
 800d058:	d8f0      	bhi.n	800d03c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d05a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
	...

0800d068 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	4603      	mov	r3, r0
 800d070:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d072:	4b0b      	ldr	r3, [pc, #44]	; (800d0a0 <SD_CheckStatus+0x38>)
 800d074:	2201      	movs	r2, #1
 800d076:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d078:	f7ff ff6c 	bl	800cf54 <BSP_SD_GetCardState>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d107      	bne.n	800d092 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d082:	4b07      	ldr	r3, [pc, #28]	; (800d0a0 <SD_CheckStatus+0x38>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	b2db      	uxtb	r3, r3
 800d088:	f023 0301 	bic.w	r3, r3, #1
 800d08c:	b2da      	uxtb	r2, r3
 800d08e:	4b04      	ldr	r3, [pc, #16]	; (800d0a0 <SD_CheckStatus+0x38>)
 800d090:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d092:	4b03      	ldr	r3, [pc, #12]	; (800d0a0 <SD_CheckStatus+0x38>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	b2db      	uxtb	r3, r3
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	2000007d 	.word	0x2000007d

0800d0a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d0a4:	b590      	push	{r4, r7, lr}
 800d0a6:	b087      	sub	sp, #28
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d0ae:	4b20      	ldr	r3, [pc, #128]	; (800d130 <SD_initialize+0x8c>)
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d0b4:	f003 f870 	bl	8010198 <osKernelRunning>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d030      	beq.n	800d120 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d0be:	f7ff feef 	bl	800cea0 <BSP_SD_Init>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d107      	bne.n	800d0d8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d0c8:	79fb      	ldrb	r3, [r7, #7]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7ff ffcc 	bl	800d068 <SD_CheckStatus>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	4b16      	ldr	r3, [pc, #88]	; (800d130 <SD_initialize+0x8c>)
 800d0d6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d0d8:	4b15      	ldr	r3, [pc, #84]	; (800d130 <SD_initialize+0x8c>)
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d01e      	beq.n	800d120 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d0e2:	4b14      	ldr	r3, [pc, #80]	; (800d134 <SD_initialize+0x90>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10e      	bne.n	800d108 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d0ea:	4b13      	ldr	r3, [pc, #76]	; (800d138 <SD_initialize+0x94>)
 800d0ec:	f107 0408 	add.w	r4, r7, #8
 800d0f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d0f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d0f6:	f107 0308 	add.w	r3, r7, #8
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f003 f990 	bl	8010422 <osMessageCreate>
 800d102:	4603      	mov	r3, r0
 800d104:	4a0b      	ldr	r2, [pc, #44]	; (800d134 <SD_initialize+0x90>)
 800d106:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d108:	4b0a      	ldr	r3, [pc, #40]	; (800d134 <SD_initialize+0x90>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d107      	bne.n	800d120 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d110:	4b07      	ldr	r3, [pc, #28]	; (800d130 <SD_initialize+0x8c>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	b2db      	uxtb	r3, r3
 800d116:	f043 0301 	orr.w	r3, r3, #1
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	4b04      	ldr	r3, [pc, #16]	; (800d130 <SD_initialize+0x8c>)
 800d11e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d120:	4b03      	ldr	r3, [pc, #12]	; (800d130 <SD_initialize+0x8c>)
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	b2db      	uxtb	r3, r3
}
 800d126:	4618      	mov	r0, r3
 800d128:	371c      	adds	r7, #28
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd90      	pop	{r4, r7, pc}
 800d12e:	bf00      	nop
 800d130:	2000007d 	.word	0x2000007d
 800d134:	20000698 	.word	0x20000698
 800d138:	0801310c 	.word	0x0801310c

0800d13c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	4603      	mov	r3, r0
 800d144:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d146:	79fb      	ldrb	r3, [r7, #7]
 800d148:	4618      	mov	r0, r3
 800d14a:	f7ff ff8d 	bl	800d068 <SD_CheckStatus>
 800d14e:	4603      	mov	r3, r0
}
 800d150:	4618      	mov	r0, r3
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08a      	sub	sp, #40	; 0x28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60b9      	str	r1, [r7, #8]
 800d160:	607a      	str	r2, [r7, #4]
 800d162:	603b      	str	r3, [r7, #0]
 800d164:	4603      	mov	r3, r0
 800d166:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d16e:	f247 5030 	movw	r0, #30000	; 0x7530
 800d172:	f7ff ff5b 	bl	800d02c <SD_CheckStatusWithTimeout>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	da02      	bge.n	800d182 <SD_read+0x2a>
  {
    return res;
 800d17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d180:	e032      	b.n	800d1e8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	6879      	ldr	r1, [r7, #4]
 800d186:	68b8      	ldr	r0, [r7, #8]
 800d188:	f7ff feb0 	bl	800ceec <BSP_SD_ReadBlocks_DMA>
 800d18c:	4603      	mov	r3, r0
 800d18e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d192:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d196:	2b00      	cmp	r3, #0
 800d198:	d124      	bne.n	800d1e4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d19a:	4b15      	ldr	r3, [pc, #84]	; (800d1f0 <SD_read+0x98>)
 800d19c:	6819      	ldr	r1, [r3, #0]
 800d19e:	f107 0314 	add.w	r3, r7, #20
 800d1a2:	f247 5230 	movw	r2, #30000	; 0x7530
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f003 f9a4 	bl	80104f4 <osMessageGet>

    if (event.status == osEventMessage)
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	2b10      	cmp	r3, #16
 800d1b0:	d118      	bne.n	800d1e4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d115      	bne.n	800d1e4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d1b8:	f002 fffa 	bl	80101b0 <osKernelSysTick>
 800d1bc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d1be:	e008      	b.n	800d1d2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d1c0:	f7ff fec8 	bl	800cf54 <BSP_SD_GetCardState>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d103      	bne.n	800d1d2 <SD_read+0x7a>
              {
                res = RES_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d1d0:	e008      	b.n	800d1e4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d1d2:	f002 ffed 	bl	80101b0 <osKernelSysTick>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	6a3b      	ldr	r3, [r7, #32]
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	f247 522f 	movw	r2, #29999	; 0x752f
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d9ed      	bls.n	800d1c0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3728      	adds	r7, #40	; 0x28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	20000698 	.word	0x20000698

0800d1f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08a      	sub	sp, #40	; 0x28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60b9      	str	r1, [r7, #8]
 800d1fc:	607a      	str	r2, [r7, #4]
 800d1fe:	603b      	str	r3, [r7, #0]
 800d200:	4603      	mov	r3, r0
 800d202:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d20a:	f247 5030 	movw	r0, #30000	; 0x7530
 800d20e:	f7ff ff0d 	bl	800d02c <SD_CheckStatusWithTimeout>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	da02      	bge.n	800d21e <SD_write+0x2a>
  {
    return res;
 800d218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d21c:	e02e      	b.n	800d27c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	6879      	ldr	r1, [r7, #4]
 800d222:	68b8      	ldr	r0, [r7, #8]
 800d224:	f7ff fe7c 	bl	800cf20 <BSP_SD_WriteBlocks_DMA>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d124      	bne.n	800d278 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d22e:	4b15      	ldr	r3, [pc, #84]	; (800d284 <SD_write+0x90>)
 800d230:	6819      	ldr	r1, [r3, #0]
 800d232:	f107 0314 	add.w	r3, r7, #20
 800d236:	f247 5230 	movw	r2, #30000	; 0x7530
 800d23a:	4618      	mov	r0, r3
 800d23c:	f003 f95a 	bl	80104f4 <osMessageGet>

    if (event.status == osEventMessage)
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2b10      	cmp	r3, #16
 800d244:	d118      	bne.n	800d278 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	2b02      	cmp	r3, #2
 800d24a:	d115      	bne.n	800d278 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d24c:	f002 ffb0 	bl	80101b0 <osKernelSysTick>
 800d250:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d252:	e008      	b.n	800d266 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d254:	f7ff fe7e 	bl	800cf54 <BSP_SD_GetCardState>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d103      	bne.n	800d266 <SD_write+0x72>
          {
            res = RES_OK;
 800d25e:	2300      	movs	r3, #0
 800d260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d264:	e008      	b.n	800d278 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d266:	f002 ffa3 	bl	80101b0 <osKernelSysTick>
 800d26a:	4602      	mov	r2, r0
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	1ad3      	subs	r3, r2, r3
 800d270:	f247 522f 	movw	r2, #29999	; 0x752f
 800d274:	4293      	cmp	r3, r2
 800d276:	d9ed      	bls.n	800d254 <SD_write+0x60>
    }

  }
#endif

  return res;
 800d278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3728      	adds	r7, #40	; 0x28
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	20000698 	.word	0x20000698

0800d288 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08c      	sub	sp, #48	; 0x30
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	4603      	mov	r3, r0
 800d290:	603a      	str	r2, [r7, #0]
 800d292:	71fb      	strb	r3, [r7, #7]
 800d294:	460b      	mov	r3, r1
 800d296:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d298:	2301      	movs	r3, #1
 800d29a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d29e:	4b25      	ldr	r3, [pc, #148]	; (800d334 <SD_ioctl+0xac>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	f003 0301 	and.w	r3, r3, #1
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <SD_ioctl+0x28>
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	e03c      	b.n	800d32a <SD_ioctl+0xa2>

  switch (cmd)
 800d2b0:	79bb      	ldrb	r3, [r7, #6]
 800d2b2:	2b03      	cmp	r3, #3
 800d2b4:	d834      	bhi.n	800d320 <SD_ioctl+0x98>
 800d2b6:	a201      	add	r2, pc, #4	; (adr r2, 800d2bc <SD_ioctl+0x34>)
 800d2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2bc:	0800d2cd 	.word	0x0800d2cd
 800d2c0:	0800d2d5 	.word	0x0800d2d5
 800d2c4:	0800d2ed 	.word	0x0800d2ed
 800d2c8:	0800d307 	.word	0x0800d307
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d2d2:	e028      	b.n	800d326 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2d4:	f107 030c 	add.w	r3, r7, #12
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7ff fe4b 	bl	800cf74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d2de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d2ea:	e01c      	b.n	800d326 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d2ec:	f107 030c 	add.w	r3, r7, #12
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff fe3f 	bl	800cf74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d304:	e00f      	b.n	800d326 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d306:	f107 030c 	add.w	r3, r7, #12
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7ff fe32 	bl	800cf74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	0a5a      	lsrs	r2, r3, #9
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d318:	2300      	movs	r3, #0
 800d31a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d31e:	e002      	b.n	800d326 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d320:	2304      	movs	r3, #4
 800d322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3730      	adds	r7, #48	; 0x30
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	2000007d 	.word	0x2000007d

0800d338 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800d33c:	4b04      	ldr	r3, [pc, #16]	; (800d350 <BSP_SD_WriteCpltCallback+0x18>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2200      	movs	r2, #0
 800d342:	2102      	movs	r1, #2
 800d344:	4618      	mov	r0, r3
 800d346:	f003 f895 	bl	8010474 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d34a:	bf00      	nop
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	20000698 	.word	0x20000698

0800d354 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d358:	4b04      	ldr	r3, [pc, #16]	; (800d36c <BSP_SD_ReadCpltCallback+0x18>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2200      	movs	r2, #0
 800d35e:	2101      	movs	r1, #1
 800d360:	4618      	mov	r0, r3
 800d362:	f003 f887 	bl	8010474 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d366:	bf00      	nop
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	20000698 	.word	0x20000698

0800d370 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	4603      	mov	r3, r0
 800d378:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d37a:	79fb      	ldrb	r3, [r7, #7]
 800d37c:	4a08      	ldr	r2, [pc, #32]	; (800d3a0 <disk_status+0x30>)
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4413      	add	r3, r2
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	79fa      	ldrb	r2, [r7, #7]
 800d388:	4905      	ldr	r1, [pc, #20]	; (800d3a0 <disk_status+0x30>)
 800d38a:	440a      	add	r2, r1
 800d38c:	7a12      	ldrb	r2, [r2, #8]
 800d38e:	4610      	mov	r0, r2
 800d390:	4798      	blx	r3
 800d392:	4603      	mov	r3, r0
 800d394:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d396:	7bfb      	ldrb	r3, [r7, #15]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	200006c4 	.word	0x200006c4

0800d3a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d3b2:	79fb      	ldrb	r3, [r7, #7]
 800d3b4:	4a0d      	ldr	r2, [pc, #52]	; (800d3ec <disk_initialize+0x48>)
 800d3b6:	5cd3      	ldrb	r3, [r2, r3]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d111      	bne.n	800d3e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d3bc:	79fb      	ldrb	r3, [r7, #7]
 800d3be:	4a0b      	ldr	r2, [pc, #44]	; (800d3ec <disk_initialize+0x48>)
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d3c4:	79fb      	ldrb	r3, [r7, #7]
 800d3c6:	4a09      	ldr	r2, [pc, #36]	; (800d3ec <disk_initialize+0x48>)
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	79fa      	ldrb	r2, [r7, #7]
 800d3d2:	4906      	ldr	r1, [pc, #24]	; (800d3ec <disk_initialize+0x48>)
 800d3d4:	440a      	add	r2, r1
 800d3d6:	7a12      	ldrb	r2, [r2, #8]
 800d3d8:	4610      	mov	r0, r2
 800d3da:	4798      	blx	r3
 800d3dc:	4603      	mov	r3, r0
 800d3de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	200006c4 	.word	0x200006c4

0800d3f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d3f0:	b590      	push	{r4, r7, lr}
 800d3f2:	b087      	sub	sp, #28
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60b9      	str	r1, [r7, #8]
 800d3f8:	607a      	str	r2, [r7, #4]
 800d3fa:	603b      	str	r3, [r7, #0]
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d400:	7bfb      	ldrb	r3, [r7, #15]
 800d402:	4a0a      	ldr	r2, [pc, #40]	; (800d42c <disk_read+0x3c>)
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	4413      	add	r3, r2
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	689c      	ldr	r4, [r3, #8]
 800d40c:	7bfb      	ldrb	r3, [r7, #15]
 800d40e:	4a07      	ldr	r2, [pc, #28]	; (800d42c <disk_read+0x3c>)
 800d410:	4413      	add	r3, r2
 800d412:	7a18      	ldrb	r0, [r3, #8]
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	68b9      	ldr	r1, [r7, #8]
 800d41a:	47a0      	blx	r4
 800d41c:	4603      	mov	r3, r0
 800d41e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d420:	7dfb      	ldrb	r3, [r7, #23]
}
 800d422:	4618      	mov	r0, r3
 800d424:	371c      	adds	r7, #28
 800d426:	46bd      	mov	sp, r7
 800d428:	bd90      	pop	{r4, r7, pc}
 800d42a:	bf00      	nop
 800d42c:	200006c4 	.word	0x200006c4

0800d430 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d430:	b590      	push	{r4, r7, lr}
 800d432:	b087      	sub	sp, #28
 800d434:	af00      	add	r7, sp, #0
 800d436:	60b9      	str	r1, [r7, #8]
 800d438:	607a      	str	r2, [r7, #4]
 800d43a:	603b      	str	r3, [r7, #0]
 800d43c:	4603      	mov	r3, r0
 800d43e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d440:	7bfb      	ldrb	r3, [r7, #15]
 800d442:	4a0a      	ldr	r2, [pc, #40]	; (800d46c <disk_write+0x3c>)
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	4413      	add	r3, r2
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	68dc      	ldr	r4, [r3, #12]
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	4a07      	ldr	r2, [pc, #28]	; (800d46c <disk_write+0x3c>)
 800d450:	4413      	add	r3, r2
 800d452:	7a18      	ldrb	r0, [r3, #8]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	68b9      	ldr	r1, [r7, #8]
 800d45a:	47a0      	blx	r4
 800d45c:	4603      	mov	r3, r0
 800d45e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d460:	7dfb      	ldrb	r3, [r7, #23]
}
 800d462:	4618      	mov	r0, r3
 800d464:	371c      	adds	r7, #28
 800d466:	46bd      	mov	sp, r7
 800d468:	bd90      	pop	{r4, r7, pc}
 800d46a:	bf00      	nop
 800d46c:	200006c4 	.word	0x200006c4

0800d470 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	4603      	mov	r3, r0
 800d478:	603a      	str	r2, [r7, #0]
 800d47a:	71fb      	strb	r3, [r7, #7]
 800d47c:	460b      	mov	r3, r1
 800d47e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d480:	79fb      	ldrb	r3, [r7, #7]
 800d482:	4a09      	ldr	r2, [pc, #36]	; (800d4a8 <disk_ioctl+0x38>)
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	4413      	add	r3, r2
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	79fa      	ldrb	r2, [r7, #7]
 800d48e:	4906      	ldr	r1, [pc, #24]	; (800d4a8 <disk_ioctl+0x38>)
 800d490:	440a      	add	r2, r1
 800d492:	7a10      	ldrb	r0, [r2, #8]
 800d494:	79b9      	ldrb	r1, [r7, #6]
 800d496:	683a      	ldr	r2, [r7, #0]
 800d498:	4798      	blx	r3
 800d49a:	4603      	mov	r3, r0
 800d49c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	200006c4 	.word	0x200006c4

0800d4ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d4bc:	89fb      	ldrh	r3, [r7, #14]
 800d4be:	021b      	lsls	r3, r3, #8
 800d4c0:	b21a      	sxth	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	b21b      	sxth	r3, r3
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	b21b      	sxth	r3, r3
 800d4cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d4ce:	89fb      	ldrh	r3, [r7, #14]
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3714      	adds	r7, #20
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	3303      	adds	r3, #3
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	021b      	lsls	r3, r3, #8
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	3202      	adds	r2, #2
 800d4f4:	7812      	ldrb	r2, [r2, #0]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	021b      	lsls	r3, r3, #8
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	3201      	adds	r2, #1
 800d502:	7812      	ldrb	r2, [r2, #0]
 800d504:	4313      	orrs	r3, r2
 800d506:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	021b      	lsls	r3, r3, #8
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	7812      	ldrb	r2, [r2, #0]
 800d510:	4313      	orrs	r3, r2
 800d512:	60fb      	str	r3, [r7, #12]
	return rv;
 800d514:	68fb      	ldr	r3, [r7, #12]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d522:	b480      	push	{r7}
 800d524:	b083      	sub	sp, #12
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	460b      	mov	r3, r1
 800d52c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	1c5a      	adds	r2, r3, #1
 800d532:	607a      	str	r2, [r7, #4]
 800d534:	887a      	ldrh	r2, [r7, #2]
 800d536:	b2d2      	uxtb	r2, r2
 800d538:	701a      	strb	r2, [r3, #0]
 800d53a:	887b      	ldrh	r3, [r7, #2]
 800d53c:	0a1b      	lsrs	r3, r3, #8
 800d53e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	607a      	str	r2, [r7, #4]
 800d546:	887a      	ldrh	r2, [r7, #2]
 800d548:	b2d2      	uxtb	r2, r2
 800d54a:	701a      	strb	r2, [r3, #0]
}
 800d54c:	bf00      	nop
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	1c5a      	adds	r2, r3, #1
 800d566:	607a      	str	r2, [r7, #4]
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	b2d2      	uxtb	r2, r2
 800d56c:	701a      	strb	r2, [r3, #0]
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	0a1b      	lsrs	r3, r3, #8
 800d572:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	1c5a      	adds	r2, r3, #1
 800d578:	607a      	str	r2, [r7, #4]
 800d57a:	683a      	ldr	r2, [r7, #0]
 800d57c:	b2d2      	uxtb	r2, r2
 800d57e:	701a      	strb	r2, [r3, #0]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	0a1b      	lsrs	r3, r3, #8
 800d584:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	1c5a      	adds	r2, r3, #1
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	683a      	ldr	r2, [r7, #0]
 800d58e:	b2d2      	uxtb	r2, r2
 800d590:	701a      	strb	r2, [r3, #0]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	0a1b      	lsrs	r3, r3, #8
 800d596:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	1c5a      	adds	r2, r3, #1
 800d59c:	607a      	str	r2, [r7, #4]
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	b2d2      	uxtb	r2, r2
 800d5a2:	701a      	strb	r2, [r3, #0]
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d5b0:	b480      	push	{r7}
 800d5b2:	b087      	sub	sp, #28
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00d      	beq.n	800d5e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d5ca:	693a      	ldr	r2, [r7, #16]
 800d5cc:	1c53      	adds	r3, r2, #1
 800d5ce:	613b      	str	r3, [r7, #16]
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	1c59      	adds	r1, r3, #1
 800d5d4:	6179      	str	r1, [r7, #20]
 800d5d6:	7812      	ldrb	r2, [r2, #0]
 800d5d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	607b      	str	r3, [r7, #4]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1f1      	bne.n	800d5ca <mem_cpy+0x1a>
	}
}
 800d5e6:	bf00      	nop
 800d5e8:	371c      	adds	r7, #28
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d5f2:	b480      	push	{r7}
 800d5f4:	b087      	sub	sp, #28
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	60f8      	str	r0, [r7, #12]
 800d5fa:	60b9      	str	r1, [r7, #8]
 800d5fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	1c5a      	adds	r2, r3, #1
 800d606:	617a      	str	r2, [r7, #20]
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	b2d2      	uxtb	r2, r2
 800d60c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	3b01      	subs	r3, #1
 800d612:	607b      	str	r3, [r7, #4]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1f3      	bne.n	800d602 <mem_set+0x10>
}
 800d61a:	bf00      	nop
 800d61c:	bf00      	nop
 800d61e:	371c      	adds	r7, #28
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d628:	b480      	push	{r7}
 800d62a:	b089      	sub	sp, #36	; 0x24
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	61fb      	str	r3, [r7, #28]
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d63c:	2300      	movs	r3, #0
 800d63e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	1c5a      	adds	r2, r3, #1
 800d644:	61fa      	str	r2, [r7, #28]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	4619      	mov	r1, r3
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	61ba      	str	r2, [r7, #24]
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	1acb      	subs	r3, r1, r3
 800d654:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	3b01      	subs	r3, #1
 800d65a:	607b      	str	r3, [r7, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d002      	beq.n	800d668 <mem_cmp+0x40>
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d0eb      	beq.n	800d640 <mem_cmp+0x18>

	return r;
 800d668:	697b      	ldr	r3, [r7, #20]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3724      	adds	r7, #36	; 0x24
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr

0800d676 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d676:	b480      	push	{r7}
 800d678:	b083      	sub	sp, #12
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d680:	e002      	b.n	800d688 <chk_chr+0x12>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	3301      	adds	r3, #1
 800d686:	607b      	str	r3, [r7, #4]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d005      	beq.n	800d69c <chk_chr+0x26>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	461a      	mov	r2, r3
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	4293      	cmp	r3, r2
 800d69a:	d1f2      	bne.n	800d682 <chk_chr+0xc>
	return *str;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	781b      	ldrb	r3, [r3, #0]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d009      	beq.n	800d6ce <lock_fs+0x22>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f002 fd19 	bl	80100f6 <ff_req_grant>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <lock_fs+0x22>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e000      	b.n	800d6d0 <lock_fs+0x24>
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00d      	beq.n	800d706 <unlock_fs+0x2e>
 800d6ea:	78fb      	ldrb	r3, [r7, #3]
 800d6ec:	2b0c      	cmp	r3, #12
 800d6ee:	d00a      	beq.n	800d706 <unlock_fs+0x2e>
 800d6f0:	78fb      	ldrb	r3, [r7, #3]
 800d6f2:	2b0b      	cmp	r3, #11
 800d6f4:	d007      	beq.n	800d706 <unlock_fs+0x2e>
 800d6f6:	78fb      	ldrb	r3, [r7, #3]
 800d6f8:	2b0f      	cmp	r3, #15
 800d6fa:	d004      	beq.n	800d706 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	4618      	mov	r0, r3
 800d702:	f002 fd0d 	bl	8010120 <ff_rel_grant>
	}
}
 800d706:	bf00      	nop
 800d708:	3708      	adds	r7, #8
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
	...

0800d710 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d71a:	2300      	movs	r3, #0
 800d71c:	60bb      	str	r3, [r7, #8]
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	60fb      	str	r3, [r7, #12]
 800d722:	e029      	b.n	800d778 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d724:	4a27      	ldr	r2, [pc, #156]	; (800d7c4 <chk_lock+0xb4>)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	011b      	lsls	r3, r3, #4
 800d72a:	4413      	add	r3, r2
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d01d      	beq.n	800d76e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d732:	4a24      	ldr	r2, [pc, #144]	; (800d7c4 <chk_lock+0xb4>)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	011b      	lsls	r3, r3, #4
 800d738:	4413      	add	r3, r2
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	429a      	cmp	r2, r3
 800d742:	d116      	bne.n	800d772 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d744:	4a1f      	ldr	r2, [pc, #124]	; (800d7c4 <chk_lock+0xb4>)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	011b      	lsls	r3, r3, #4
 800d74a:	4413      	add	r3, r2
 800d74c:	3304      	adds	r3, #4
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d754:	429a      	cmp	r2, r3
 800d756:	d10c      	bne.n	800d772 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d758:	4a1a      	ldr	r2, [pc, #104]	; (800d7c4 <chk_lock+0xb4>)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	011b      	lsls	r3, r3, #4
 800d75e:	4413      	add	r3, r2
 800d760:	3308      	adds	r3, #8
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d768:	429a      	cmp	r2, r3
 800d76a:	d102      	bne.n	800d772 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d76c:	e007      	b.n	800d77e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d76e:	2301      	movs	r3, #1
 800d770:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	3301      	adds	r3, #1
 800d776:	60fb      	str	r3, [r7, #12]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d9d2      	bls.n	800d724 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2b02      	cmp	r3, #2
 800d782:	d109      	bne.n	800d798 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d102      	bne.n	800d790 <chk_lock+0x80>
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	d101      	bne.n	800d794 <chk_lock+0x84>
 800d790:	2300      	movs	r3, #0
 800d792:	e010      	b.n	800d7b6 <chk_lock+0xa6>
 800d794:	2312      	movs	r3, #18
 800d796:	e00e      	b.n	800d7b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d108      	bne.n	800d7b0 <chk_lock+0xa0>
 800d79e:	4a09      	ldr	r2, [pc, #36]	; (800d7c4 <chk_lock+0xb4>)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	011b      	lsls	r3, r3, #4
 800d7a4:	4413      	add	r3, r2
 800d7a6:	330c      	adds	r3, #12
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7ae:	d101      	bne.n	800d7b4 <chk_lock+0xa4>
 800d7b0:	2310      	movs	r3, #16
 800d7b2:	e000      	b.n	800d7b6 <chk_lock+0xa6>
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3714      	adds	r7, #20
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	200006a4 	.word	0x200006a4

0800d7c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	607b      	str	r3, [r7, #4]
 800d7d2:	e002      	b.n	800d7da <enq_lock+0x12>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	607b      	str	r3, [r7, #4]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d806      	bhi.n	800d7ee <enq_lock+0x26>
 800d7e0:	4a09      	ldr	r2, [pc, #36]	; (800d808 <enq_lock+0x40>)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	011b      	lsls	r3, r3, #4
 800d7e6:	4413      	add	r3, r2
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1f2      	bne.n	800d7d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	bf14      	ite	ne
 800d7f4:	2301      	movne	r3, #1
 800d7f6:	2300      	moveq	r3, #0
 800d7f8:	b2db      	uxtb	r3, r3
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	200006a4 	.word	0x200006a4

0800d80c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b085      	sub	sp, #20
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d816:	2300      	movs	r3, #0
 800d818:	60fb      	str	r3, [r7, #12]
 800d81a:	e01f      	b.n	800d85c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d81c:	4a41      	ldr	r2, [pc, #260]	; (800d924 <inc_lock+0x118>)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	011b      	lsls	r3, r3, #4
 800d822:	4413      	add	r3, r2
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d113      	bne.n	800d856 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d82e:	4a3d      	ldr	r2, [pc, #244]	; (800d924 <inc_lock+0x118>)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	011b      	lsls	r3, r3, #4
 800d834:	4413      	add	r3, r2
 800d836:	3304      	adds	r3, #4
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d83e:	429a      	cmp	r2, r3
 800d840:	d109      	bne.n	800d856 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d842:	4a38      	ldr	r2, [pc, #224]	; (800d924 <inc_lock+0x118>)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	011b      	lsls	r3, r3, #4
 800d848:	4413      	add	r3, r2
 800d84a:	3308      	adds	r3, #8
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d852:	429a      	cmp	r2, r3
 800d854:	d006      	beq.n	800d864 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	3301      	adds	r3, #1
 800d85a:	60fb      	str	r3, [r7, #12]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d9dc      	bls.n	800d81c <inc_lock+0x10>
 800d862:	e000      	b.n	800d866 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d864:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2b02      	cmp	r3, #2
 800d86a:	d132      	bne.n	800d8d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d86c:	2300      	movs	r3, #0
 800d86e:	60fb      	str	r3, [r7, #12]
 800d870:	e002      	b.n	800d878 <inc_lock+0x6c>
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	3301      	adds	r3, #1
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d806      	bhi.n	800d88c <inc_lock+0x80>
 800d87e:	4a29      	ldr	r2, [pc, #164]	; (800d924 <inc_lock+0x118>)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	011b      	lsls	r3, r3, #4
 800d884:	4413      	add	r3, r2
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1f2      	bne.n	800d872 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2b02      	cmp	r3, #2
 800d890:	d101      	bne.n	800d896 <inc_lock+0x8a>
 800d892:	2300      	movs	r3, #0
 800d894:	e040      	b.n	800d918 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	4922      	ldr	r1, [pc, #136]	; (800d924 <inc_lock+0x118>)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	011b      	lsls	r3, r3, #4
 800d8a0:	440b      	add	r3, r1
 800d8a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	689a      	ldr	r2, [r3, #8]
 800d8a8:	491e      	ldr	r1, [pc, #120]	; (800d924 <inc_lock+0x118>)
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	011b      	lsls	r3, r3, #4
 800d8ae:	440b      	add	r3, r1
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	695a      	ldr	r2, [r3, #20]
 800d8b8:	491a      	ldr	r1, [pc, #104]	; (800d924 <inc_lock+0x118>)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	011b      	lsls	r3, r3, #4
 800d8be:	440b      	add	r3, r1
 800d8c0:	3308      	adds	r3, #8
 800d8c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d8c4:	4a17      	ldr	r2, [pc, #92]	; (800d924 <inc_lock+0x118>)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	011b      	lsls	r3, r3, #4
 800d8ca:	4413      	add	r3, r2
 800d8cc:	330c      	adds	r3, #12
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d009      	beq.n	800d8ec <inc_lock+0xe0>
 800d8d8:	4a12      	ldr	r2, [pc, #72]	; (800d924 <inc_lock+0x118>)
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	011b      	lsls	r3, r3, #4
 800d8de:	4413      	add	r3, r2
 800d8e0:	330c      	adds	r3, #12
 800d8e2:	881b      	ldrh	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <inc_lock+0xe0>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	e015      	b.n	800d918 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d108      	bne.n	800d904 <inc_lock+0xf8>
 800d8f2:	4a0c      	ldr	r2, [pc, #48]	; (800d924 <inc_lock+0x118>)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	011b      	lsls	r3, r3, #4
 800d8f8:	4413      	add	r3, r2
 800d8fa:	330c      	adds	r3, #12
 800d8fc:	881b      	ldrh	r3, [r3, #0]
 800d8fe:	3301      	adds	r3, #1
 800d900:	b29a      	uxth	r2, r3
 800d902:	e001      	b.n	800d908 <inc_lock+0xfc>
 800d904:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d908:	4906      	ldr	r1, [pc, #24]	; (800d924 <inc_lock+0x118>)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	011b      	lsls	r3, r3, #4
 800d90e:	440b      	add	r3, r1
 800d910:	330c      	adds	r3, #12
 800d912:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	3301      	adds	r3, #1
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3714      	adds	r7, #20
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr
 800d924:	200006a4 	.word	0x200006a4

0800d928 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	3b01      	subs	r3, #1
 800d934:	607b      	str	r3, [r7, #4]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d825      	bhi.n	800d988 <dec_lock+0x60>
		n = Files[i].ctr;
 800d93c:	4a17      	ldr	r2, [pc, #92]	; (800d99c <dec_lock+0x74>)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	011b      	lsls	r3, r3, #4
 800d942:	4413      	add	r3, r2
 800d944:	330c      	adds	r3, #12
 800d946:	881b      	ldrh	r3, [r3, #0]
 800d948:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d94a:	89fb      	ldrh	r3, [r7, #14]
 800d94c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d950:	d101      	bne.n	800d956 <dec_lock+0x2e>
 800d952:	2300      	movs	r3, #0
 800d954:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d956:	89fb      	ldrh	r3, [r7, #14]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d002      	beq.n	800d962 <dec_lock+0x3a>
 800d95c:	89fb      	ldrh	r3, [r7, #14]
 800d95e:	3b01      	subs	r3, #1
 800d960:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d962:	4a0e      	ldr	r2, [pc, #56]	; (800d99c <dec_lock+0x74>)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	011b      	lsls	r3, r3, #4
 800d968:	4413      	add	r3, r2
 800d96a:	330c      	adds	r3, #12
 800d96c:	89fa      	ldrh	r2, [r7, #14]
 800d96e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d970:	89fb      	ldrh	r3, [r7, #14]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d105      	bne.n	800d982 <dec_lock+0x5a>
 800d976:	4a09      	ldr	r2, [pc, #36]	; (800d99c <dec_lock+0x74>)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	011b      	lsls	r3, r3, #4
 800d97c:	4413      	add	r3, r2
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d982:	2300      	movs	r3, #0
 800d984:	737b      	strb	r3, [r7, #13]
 800d986:	e001      	b.n	800d98c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d988:	2302      	movs	r3, #2
 800d98a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d98c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3714      	adds	r7, #20
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	200006a4 	.word	0x200006a4

0800d9a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	e010      	b.n	800d9d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d9ae:	4a0d      	ldr	r2, [pc, #52]	; (800d9e4 <clear_lock+0x44>)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	011b      	lsls	r3, r3, #4
 800d9b4:	4413      	add	r3, r2
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d105      	bne.n	800d9ca <clear_lock+0x2a>
 800d9be:	4a09      	ldr	r2, [pc, #36]	; (800d9e4 <clear_lock+0x44>)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	011b      	lsls	r3, r3, #4
 800d9c4:	4413      	add	r3, r2
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	60fb      	str	r3, [r7, #12]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d9eb      	bls.n	800d9ae <clear_lock+0xe>
	}
}
 800d9d6:	bf00      	nop
 800d9d8:	bf00      	nop
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr
 800d9e4:	200006a4 	.word	0x200006a4

0800d9e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b086      	sub	sp, #24
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	78db      	ldrb	r3, [r3, #3]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d034      	beq.n	800da66 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	7858      	ldrb	r0, [r3, #1]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da0c:	2301      	movs	r3, #1
 800da0e:	697a      	ldr	r2, [r7, #20]
 800da10:	f7ff fd0e 	bl	800d430 <disk_write>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d002      	beq.n	800da20 <sync_window+0x38>
			res = FR_DISK_ERR;
 800da1a:	2301      	movs	r3, #1
 800da1c:	73fb      	strb	r3, [r7, #15]
 800da1e:	e022      	b.n	800da66 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2a:	697a      	ldr	r2, [r7, #20]
 800da2c:	1ad2      	subs	r2, r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	69db      	ldr	r3, [r3, #28]
 800da32:	429a      	cmp	r2, r3
 800da34:	d217      	bcs.n	800da66 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	789b      	ldrb	r3, [r3, #2]
 800da3a:	613b      	str	r3, [r7, #16]
 800da3c:	e010      	b.n	800da60 <sync_window+0x78>
					wsect += fs->fsize;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	69db      	ldr	r3, [r3, #28]
 800da42:	697a      	ldr	r2, [r7, #20]
 800da44:	4413      	add	r3, r2
 800da46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	7858      	ldrb	r0, [r3, #1]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da52:	2301      	movs	r3, #1
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	f7ff fceb 	bl	800d430 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	3b01      	subs	r3, #1
 800da5e:	613b      	str	r3, [r7, #16]
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d8eb      	bhi.n	800da3e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800da66:	7bfb      	ldrb	r3, [r7, #15]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3718      	adds	r7, #24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800da7a:	2300      	movs	r3, #0
 800da7c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da82:	683a      	ldr	r2, [r7, #0]
 800da84:	429a      	cmp	r2, r3
 800da86:	d01b      	beq.n	800dac0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7ff ffad 	bl	800d9e8 <sync_window>
 800da8e:	4603      	mov	r3, r0
 800da90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800da92:	7bfb      	ldrb	r3, [r7, #15]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d113      	bne.n	800dac0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	7858      	ldrb	r0, [r3, #1]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800daa2:	2301      	movs	r3, #1
 800daa4:	683a      	ldr	r2, [r7, #0]
 800daa6:	f7ff fca3 	bl	800d3f0 <disk_read>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d004      	beq.n	800daba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dab0:	f04f 33ff 	mov.w	r3, #4294967295
 800dab4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dab6:	2301      	movs	r3, #1
 800dab8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800dac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
	...

0800dacc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff ff87 	bl	800d9e8 <sync_window>
 800dada:	4603      	mov	r3, r0
 800dadc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dade:	7bfb      	ldrb	r3, [r7, #15]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d158      	bne.n	800db96 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	2b03      	cmp	r3, #3
 800daea:	d148      	bne.n	800db7e <sync_fs+0xb2>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	791b      	ldrb	r3, [r3, #4]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d144      	bne.n	800db7e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	3334      	adds	r3, #52	; 0x34
 800daf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dafc:	2100      	movs	r1, #0
 800dafe:	4618      	mov	r0, r3
 800db00:	f7ff fd77 	bl	800d5f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	3334      	adds	r3, #52	; 0x34
 800db08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db0c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff fd06 	bl	800d522 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	3334      	adds	r3, #52	; 0x34
 800db1a:	4921      	ldr	r1, [pc, #132]	; (800dba0 <sync_fs+0xd4>)
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7ff fd1b 	bl	800d558 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	3334      	adds	r3, #52	; 0x34
 800db26:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800db2a:	491e      	ldr	r1, [pc, #120]	; (800dba4 <sync_fs+0xd8>)
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7ff fd13 	bl	800d558 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	3334      	adds	r3, #52	; 0x34
 800db36:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	695b      	ldr	r3, [r3, #20]
 800db3e:	4619      	mov	r1, r3
 800db40:	4610      	mov	r0, r2
 800db42:	f7ff fd09 	bl	800d558 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	3334      	adds	r3, #52	; 0x34
 800db4a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	4619      	mov	r1, r3
 800db54:	4610      	mov	r0, r2
 800db56:	f7ff fcff 	bl	800d558 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6a1b      	ldr	r3, [r3, #32]
 800db5e:	1c5a      	adds	r2, r3, #1
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	7858      	ldrb	r0, [r3, #1]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db72:	2301      	movs	r3, #1
 800db74:	f7ff fc5c 	bl	800d430 <disk_write>
			fs->fsi_flag = 0;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	785b      	ldrb	r3, [r3, #1]
 800db82:	2200      	movs	r2, #0
 800db84:	2100      	movs	r1, #0
 800db86:	4618      	mov	r0, r3
 800db88:	f7ff fc72 	bl	800d470 <disk_ioctl>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d001      	beq.n	800db96 <sync_fs+0xca>
 800db92:	2301      	movs	r3, #1
 800db94:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800db96:	7bfb      	ldrb	r3, [r7, #15]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	41615252 	.word	0x41615252
 800dba4:	61417272 	.word	0x61417272

0800dba8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	3b02      	subs	r3, #2
 800dbb6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	699b      	ldr	r3, [r3, #24]
 800dbbc:	3b02      	subs	r3, #2
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d301      	bcc.n	800dbc8 <clust2sect+0x20>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	e008      	b.n	800dbda <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	895b      	ldrh	r3, [r3, #10]
 800dbcc:	461a      	mov	r2, r3
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	fb03 f202 	mul.w	r2, r3, r2
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd8:	4413      	add	r3, r2
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b086      	sub	sp, #24
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d904      	bls.n	800dc06 <get_fat+0x20>
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	699b      	ldr	r3, [r3, #24]
 800dc00:	683a      	ldr	r2, [r7, #0]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d302      	bcc.n	800dc0c <get_fat+0x26>
		val = 1;	/* Internal error */
 800dc06:	2301      	movs	r3, #1
 800dc08:	617b      	str	r3, [r7, #20]
 800dc0a:	e08f      	b.n	800dd2c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dc0c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	d062      	beq.n	800dce0 <get_fat+0xfa>
 800dc1a:	2b03      	cmp	r3, #3
 800dc1c:	dc7c      	bgt.n	800dd18 <get_fat+0x132>
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d002      	beq.n	800dc28 <get_fat+0x42>
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d042      	beq.n	800dcac <get_fat+0xc6>
 800dc26:	e077      	b.n	800dd18 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	60fb      	str	r3, [r7, #12]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	085b      	lsrs	r3, r3, #1
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	4413      	add	r3, r2
 800dc34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	0a5b      	lsrs	r3, r3, #9
 800dc3e:	4413      	add	r3, r2
 800dc40:	4619      	mov	r1, r3
 800dc42:	6938      	ldr	r0, [r7, #16]
 800dc44:	f7ff ff14 	bl	800da70 <move_window>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d167      	bne.n	800dd1e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	1c5a      	adds	r2, r3, #1
 800dc52:	60fa      	str	r2, [r7, #12]
 800dc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	0a5b      	lsrs	r3, r3, #9
 800dc6a:	4413      	add	r3, r2
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	6938      	ldr	r0, [r7, #16]
 800dc70:	f7ff fefe 	bl	800da70 <move_window>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d153      	bne.n	800dd22 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	4413      	add	r3, r2
 800dc84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc88:	021b      	lsls	r3, r3, #8
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <get_fat+0xbc>
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	091b      	lsrs	r3, r3, #4
 800dca0:	e002      	b.n	800dca8 <get_fat+0xc2>
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dca8:	617b      	str	r3, [r7, #20]
			break;
 800dcaa:	e03f      	b.n	800dd2c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	0a1b      	lsrs	r3, r3, #8
 800dcb4:	4413      	add	r3, r2
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6938      	ldr	r0, [r7, #16]
 800dcba:	f7ff fed9 	bl	800da70 <move_window>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d130      	bne.n	800dd26 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	005b      	lsls	r3, r3, #1
 800dcce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dcd2:	4413      	add	r3, r2
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7ff fbe9 	bl	800d4ac <ld_word>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	617b      	str	r3, [r7, #20]
			break;
 800dcde:	e025      	b.n	800dd2c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	09db      	lsrs	r3, r3, #7
 800dce8:	4413      	add	r3, r2
 800dcea:	4619      	mov	r1, r3
 800dcec:	6938      	ldr	r0, [r7, #16]
 800dcee:	f7ff febf 	bl	800da70 <move_window>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d118      	bne.n	800dd2a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd06:	4413      	add	r3, r2
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7ff fbe7 	bl	800d4dc <ld_dword>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dd14:	617b      	str	r3, [r7, #20]
			break;
 800dd16:	e009      	b.n	800dd2c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dd18:	2301      	movs	r3, #1
 800dd1a:	617b      	str	r3, [r7, #20]
 800dd1c:	e006      	b.n	800dd2c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd1e:	bf00      	nop
 800dd20:	e004      	b.n	800dd2c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd22:	bf00      	nop
 800dd24:	e002      	b.n	800dd2c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dd26:	bf00      	nop
 800dd28:	e000      	b.n	800dd2c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd2a:	bf00      	nop
		}
	}

	return val;
 800dd2c:	697b      	ldr	r3, [r7, #20]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3718      	adds	r7, #24
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dd36:	b590      	push	{r4, r7, lr}
 800dd38:	b089      	sub	sp, #36	; 0x24
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	60f8      	str	r0, [r7, #12]
 800dd3e:	60b9      	str	r1, [r7, #8]
 800dd40:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dd42:	2302      	movs	r3, #2
 800dd44:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	f240 80d2 	bls.w	800def2 <put_fat+0x1bc>
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	699b      	ldr	r3, [r3, #24]
 800dd52:	68ba      	ldr	r2, [r7, #8]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	f080 80cc 	bcs.w	800def2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b03      	cmp	r3, #3
 800dd60:	f000 8096 	beq.w	800de90 <put_fat+0x15a>
 800dd64:	2b03      	cmp	r3, #3
 800dd66:	f300 80cd 	bgt.w	800df04 <put_fat+0x1ce>
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d002      	beq.n	800dd74 <put_fat+0x3e>
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	d06e      	beq.n	800de50 <put_fat+0x11a>
 800dd72:	e0c7      	b.n	800df04 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	61bb      	str	r3, [r7, #24]
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	085b      	lsrs	r3, r3, #1
 800dd7c:	69ba      	ldr	r2, [r7, #24]
 800dd7e:	4413      	add	r3, r2
 800dd80:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	0a5b      	lsrs	r3, r3, #9
 800dd8a:	4413      	add	r3, r2
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	68f8      	ldr	r0, [r7, #12]
 800dd90:	f7ff fe6e 	bl	800da70 <move_window>
 800dd94:	4603      	mov	r3, r0
 800dd96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd98:	7ffb      	ldrb	r3, [r7, #31]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f040 80ab 	bne.w	800def6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	1c59      	adds	r1, r3, #1
 800ddaa:	61b9      	str	r1, [r7, #24]
 800ddac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddb0:	4413      	add	r3, r2
 800ddb2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	f003 0301 	and.w	r3, r3, #1
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00d      	beq.n	800ddda <put_fat+0xa4>
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	b25b      	sxtb	r3, r3
 800ddc4:	f003 030f 	and.w	r3, r3, #15
 800ddc8:	b25a      	sxtb	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	011b      	lsls	r3, r3, #4
 800ddd0:	b25b      	sxtb	r3, r3
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	b25b      	sxtb	r3, r3
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	e001      	b.n	800ddde <put_fat+0xa8>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	697a      	ldr	r2, [r7, #20]
 800dde0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2201      	movs	r2, #1
 800dde6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	0a5b      	lsrs	r3, r3, #9
 800ddf0:	4413      	add	r3, r2
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f7ff fe3b 	bl	800da70 <move_window>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddfe:	7ffb      	ldrb	r3, [r7, #31]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d17a      	bne.n	800defa <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de10:	4413      	add	r3, r2
 800de12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d003      	beq.n	800de26 <put_fat+0xf0>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	091b      	lsrs	r3, r3, #4
 800de22:	b2db      	uxtb	r3, r3
 800de24:	e00e      	b.n	800de44 <put_fat+0x10e>
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	b25b      	sxtb	r3, r3
 800de2c:	f023 030f 	bic.w	r3, r3, #15
 800de30:	b25a      	sxtb	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	0a1b      	lsrs	r3, r3, #8
 800de36:	b25b      	sxtb	r3, r3
 800de38:	f003 030f 	and.w	r3, r3, #15
 800de3c:	b25b      	sxtb	r3, r3
 800de3e:	4313      	orrs	r3, r2
 800de40:	b25b      	sxtb	r3, r3
 800de42:	b2db      	uxtb	r3, r3
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2201      	movs	r2, #1
 800de4c:	70da      	strb	r2, [r3, #3]
			break;
 800de4e:	e059      	b.n	800df04 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	0a1b      	lsrs	r3, r3, #8
 800de58:	4413      	add	r3, r2
 800de5a:	4619      	mov	r1, r3
 800de5c:	68f8      	ldr	r0, [r7, #12]
 800de5e:	f7ff fe07 	bl	800da70 <move_window>
 800de62:	4603      	mov	r3, r0
 800de64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de66:	7ffb      	ldrb	r3, [r7, #31]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d148      	bne.n	800defe <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	005b      	lsls	r3, r3, #1
 800de76:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800de7a:	4413      	add	r3, r2
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	b292      	uxth	r2, r2
 800de80:	4611      	mov	r1, r2
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff fb4d 	bl	800d522 <st_word>
			fs->wflag = 1;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2201      	movs	r2, #1
 800de8c:	70da      	strb	r2, [r3, #3]
			break;
 800de8e:	e039      	b.n	800df04 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	09db      	lsrs	r3, r3, #7
 800de98:	4413      	add	r3, r2
 800de9a:	4619      	mov	r1, r3
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f7ff fde7 	bl	800da70 <move_window>
 800dea2:	4603      	mov	r3, r0
 800dea4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dea6:	7ffb      	ldrb	r3, [r7, #31]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d12a      	bne.n	800df02 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dec0:	4413      	add	r3, r2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff fb0a 	bl	800d4dc <ld_dword>
 800dec8:	4603      	mov	r3, r0
 800deca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dece:	4323      	orrs	r3, r4
 800ded0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dee0:	4413      	add	r3, r2
 800dee2:	6879      	ldr	r1, [r7, #4]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff fb37 	bl	800d558 <st_dword>
			fs->wflag = 1;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2201      	movs	r2, #1
 800deee:	70da      	strb	r2, [r3, #3]
			break;
 800def0:	e008      	b.n	800df04 <put_fat+0x1ce>
		}
	}
 800def2:	bf00      	nop
 800def4:	e006      	b.n	800df04 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800def6:	bf00      	nop
 800def8:	e004      	b.n	800df04 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800defa:	bf00      	nop
 800defc:	e002      	b.n	800df04 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800defe:	bf00      	nop
 800df00:	e000      	b.n	800df04 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800df02:	bf00      	nop
	return res;
 800df04:	7ffb      	ldrb	r3, [r7, #31]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3724      	adds	r7, #36	; 0x24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd90      	pop	{r4, r7, pc}

0800df0e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b088      	sub	sp, #32
 800df12:	af00      	add	r7, sp, #0
 800df14:	60f8      	str	r0, [r7, #12]
 800df16:	60b9      	str	r1, [r7, #8]
 800df18:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800df1a:	2300      	movs	r3, #0
 800df1c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	2b01      	cmp	r3, #1
 800df28:	d904      	bls.n	800df34 <remove_chain+0x26>
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	699b      	ldr	r3, [r3, #24]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	429a      	cmp	r2, r3
 800df32:	d301      	bcc.n	800df38 <remove_chain+0x2a>
 800df34:	2302      	movs	r3, #2
 800df36:	e04b      	b.n	800dfd0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00c      	beq.n	800df58 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800df3e:	f04f 32ff 	mov.w	r2, #4294967295
 800df42:	6879      	ldr	r1, [r7, #4]
 800df44:	69b8      	ldr	r0, [r7, #24]
 800df46:	f7ff fef6 	bl	800dd36 <put_fat>
 800df4a:	4603      	mov	r3, r0
 800df4c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800df4e:	7ffb      	ldrb	r3, [r7, #31]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <remove_chain+0x4a>
 800df54:	7ffb      	ldrb	r3, [r7, #31]
 800df56:	e03b      	b.n	800dfd0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800df58:	68b9      	ldr	r1, [r7, #8]
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f7ff fe43 	bl	800dbe6 <get_fat>
 800df60:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d031      	beq.n	800dfcc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d101      	bne.n	800df72 <remove_chain+0x64>
 800df6e:	2302      	movs	r3, #2
 800df70:	e02e      	b.n	800dfd0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df78:	d101      	bne.n	800df7e <remove_chain+0x70>
 800df7a:	2301      	movs	r3, #1
 800df7c:	e028      	b.n	800dfd0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800df7e:	2200      	movs	r2, #0
 800df80:	68b9      	ldr	r1, [r7, #8]
 800df82:	69b8      	ldr	r0, [r7, #24]
 800df84:	f7ff fed7 	bl	800dd36 <put_fat>
 800df88:	4603      	mov	r3, r0
 800df8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800df8c:	7ffb      	ldrb	r3, [r7, #31]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d001      	beq.n	800df96 <remove_chain+0x88>
 800df92:	7ffb      	ldrb	r3, [r7, #31]
 800df94:	e01c      	b.n	800dfd0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	695a      	ldr	r2, [r3, #20]
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	699b      	ldr	r3, [r3, #24]
 800df9e:	3b02      	subs	r3, #2
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d20b      	bcs.n	800dfbc <remove_chain+0xae>
			fs->free_clst++;
 800dfa4:	69bb      	ldr	r3, [r7, #24]
 800dfa6:	695b      	ldr	r3, [r3, #20]
 800dfa8:	1c5a      	adds	r2, r3, #1
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	791b      	ldrb	r3, [r3, #4]
 800dfb2:	f043 0301 	orr.w	r3, r3, #1
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dfc0:	69bb      	ldr	r3, [r7, #24]
 800dfc2:	699b      	ldr	r3, [r3, #24]
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d3c6      	bcc.n	800df58 <remove_chain+0x4a>
 800dfca:	e000      	b.n	800dfce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dfcc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dfce:	2300      	movs	r3, #0
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3720      	adds	r7, #32
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b088      	sub	sp, #32
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10d      	bne.n	800e00a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d004      	beq.n	800e004 <create_chain+0x2c>
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	699b      	ldr	r3, [r3, #24]
 800dffe:	69ba      	ldr	r2, [r7, #24]
 800e000:	429a      	cmp	r2, r3
 800e002:	d31b      	bcc.n	800e03c <create_chain+0x64>
 800e004:	2301      	movs	r3, #1
 800e006:	61bb      	str	r3, [r7, #24]
 800e008:	e018      	b.n	800e03c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7ff fdea 	bl	800dbe6 <get_fat>
 800e012:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d801      	bhi.n	800e01e <create_chain+0x46>
 800e01a:	2301      	movs	r3, #1
 800e01c:	e070      	b.n	800e100 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e024:	d101      	bne.n	800e02a <create_chain+0x52>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	e06a      	b.n	800e100 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	699b      	ldr	r3, [r3, #24]
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	429a      	cmp	r2, r3
 800e032:	d201      	bcs.n	800e038 <create_chain+0x60>
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	e063      	b.n	800e100 <create_chain+0x128>
		scl = clst;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	3301      	adds	r3, #1
 800e044:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	69fa      	ldr	r2, [r7, #28]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d307      	bcc.n	800e060 <create_chain+0x88>
				ncl = 2;
 800e050:	2302      	movs	r3, #2
 800e052:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e054:	69fa      	ldr	r2, [r7, #28]
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	429a      	cmp	r2, r3
 800e05a:	d901      	bls.n	800e060 <create_chain+0x88>
 800e05c:	2300      	movs	r3, #0
 800e05e:	e04f      	b.n	800e100 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e060:	69f9      	ldr	r1, [r7, #28]
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff fdbf 	bl	800dbe6 <get_fat>
 800e068:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00e      	beq.n	800e08e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2b01      	cmp	r3, #1
 800e074:	d003      	beq.n	800e07e <create_chain+0xa6>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07c:	d101      	bne.n	800e082 <create_chain+0xaa>
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	e03e      	b.n	800e100 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e082:	69fa      	ldr	r2, [r7, #28]
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	429a      	cmp	r2, r3
 800e088:	d1da      	bne.n	800e040 <create_chain+0x68>
 800e08a:	2300      	movs	r3, #0
 800e08c:	e038      	b.n	800e100 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e08e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e090:	f04f 32ff 	mov.w	r2, #4294967295
 800e094:	69f9      	ldr	r1, [r7, #28]
 800e096:	6938      	ldr	r0, [r7, #16]
 800e098:	f7ff fe4d 	bl	800dd36 <put_fat>
 800e09c:	4603      	mov	r3, r0
 800e09e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e0a0:	7dfb      	ldrb	r3, [r7, #23]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d109      	bne.n	800e0ba <create_chain+0xe2>
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d006      	beq.n	800e0ba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e0ac:	69fa      	ldr	r2, [r7, #28]
 800e0ae:	6839      	ldr	r1, [r7, #0]
 800e0b0:	6938      	ldr	r0, [r7, #16]
 800e0b2:	f7ff fe40 	bl	800dd36 <put_fat>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e0ba:	7dfb      	ldrb	r3, [r7, #23]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d116      	bne.n	800e0ee <create_chain+0x116>
		fs->last_clst = ncl;
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	69fa      	ldr	r2, [r7, #28]
 800e0c4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	695a      	ldr	r2, [r3, #20]
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	699b      	ldr	r3, [r3, #24]
 800e0ce:	3b02      	subs	r3, #2
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d804      	bhi.n	800e0de <create_chain+0x106>
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	695b      	ldr	r3, [r3, #20]
 800e0d8:	1e5a      	subs	r2, r3, #1
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	791b      	ldrb	r3, [r3, #4]
 800e0e2:	f043 0301 	orr.w	r3, r3, #1
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	711a      	strb	r2, [r3, #4]
 800e0ec:	e007      	b.n	800e0fe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e0ee:	7dfb      	ldrb	r3, [r7, #23]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d102      	bne.n	800e0fa <create_chain+0x122>
 800e0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f8:	e000      	b.n	800e0fc <create_chain+0x124>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e0fe:	69fb      	ldr	r3, [r7, #28]
}
 800e100:	4618      	mov	r0, r3
 800e102:	3720      	adds	r7, #32
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e108:	b480      	push	{r7}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e11c:	3304      	adds	r3, #4
 800e11e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	0a5b      	lsrs	r3, r3, #9
 800e124:	68fa      	ldr	r2, [r7, #12]
 800e126:	8952      	ldrh	r2, [r2, #10]
 800e128:	fbb3 f3f2 	udiv	r3, r3, r2
 800e12c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	1d1a      	adds	r2, r3, #4
 800e132:	613a      	str	r2, [r7, #16]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d101      	bne.n	800e142 <clmt_clust+0x3a>
 800e13e:	2300      	movs	r3, #0
 800e140:	e010      	b.n	800e164 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e142:	697a      	ldr	r2, [r7, #20]
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	429a      	cmp	r2, r3
 800e148:	d307      	bcc.n	800e15a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	1ad3      	subs	r3, r2, r3
 800e150:	617b      	str	r3, [r7, #20]
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	3304      	adds	r3, #4
 800e156:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e158:	e7e9      	b.n	800e12e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e15a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	4413      	add	r3, r2
}
 800e164:	4618      	mov	r0, r3
 800e166:	371c      	adds	r7, #28
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e186:	d204      	bcs.n	800e192 <dir_sdi+0x22>
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	f003 031f 	and.w	r3, r3, #31
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d001      	beq.n	800e196 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e192:	2302      	movs	r3, #2
 800e194:	e063      	b.n	800e25e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	683a      	ldr	r2, [r7, #0]
 800e19a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d106      	bne.n	800e1b6 <dir_sdi+0x46>
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d902      	bls.n	800e1b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10c      	bne.n	800e1d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	095b      	lsrs	r3, r3, #5
 800e1c0:	693a      	ldr	r2, [r7, #16]
 800e1c2:	8912      	ldrh	r2, [r2, #8]
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d301      	bcc.n	800e1cc <dir_sdi+0x5c>
 800e1c8:	2302      	movs	r3, #2
 800e1ca:	e048      	b.n	800e25e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	61da      	str	r2, [r3, #28]
 800e1d4:	e029      	b.n	800e22a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	895b      	ldrh	r3, [r3, #10]
 800e1da:	025b      	lsls	r3, r3, #9
 800e1dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e1de:	e019      	b.n	800e214 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6979      	ldr	r1, [r7, #20]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7ff fcfe 	bl	800dbe6 <get_fat>
 800e1ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f2:	d101      	bne.n	800e1f8 <dir_sdi+0x88>
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e032      	b.n	800e25e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d904      	bls.n	800e208 <dir_sdi+0x98>
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	699b      	ldr	r3, [r3, #24]
 800e202:	697a      	ldr	r2, [r7, #20]
 800e204:	429a      	cmp	r2, r3
 800e206:	d301      	bcc.n	800e20c <dir_sdi+0x9c>
 800e208:	2302      	movs	r3, #2
 800e20a:	e028      	b.n	800e25e <dir_sdi+0xee>
			ofs -= csz;
 800e20c:	683a      	ldr	r2, [r7, #0]
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e214:	683a      	ldr	r2, [r7, #0]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d2e1      	bcs.n	800e1e0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e21c:	6979      	ldr	r1, [r7, #20]
 800e21e:	6938      	ldr	r0, [r7, #16]
 800e220:	f7ff fcc2 	bl	800dba8 <clust2sect>
 800e224:	4602      	mov	r2, r0
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	697a      	ldr	r2, [r7, #20]
 800e22e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	69db      	ldr	r3, [r3, #28]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d101      	bne.n	800e23c <dir_sdi+0xcc>
 800e238:	2302      	movs	r3, #2
 800e23a:	e010      	b.n	800e25e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	69da      	ldr	r2, [r3, #28]
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	0a5b      	lsrs	r3, r3, #9
 800e244:	441a      	add	r2, r3
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e256:	441a      	add	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3718      	adds	r7, #24
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b086      	sub	sp, #24
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	695b      	ldr	r3, [r3, #20]
 800e27a:	3320      	adds	r3, #32
 800e27c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	69db      	ldr	r3, [r3, #28]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d003      	beq.n	800e28e <dir_next+0x28>
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e28c:	d301      	bcc.n	800e292 <dir_next+0x2c>
 800e28e:	2304      	movs	r3, #4
 800e290:	e0aa      	b.n	800e3e8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e298:	2b00      	cmp	r3, #0
 800e29a:	f040 8098 	bne.w	800e3ce <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	69db      	ldr	r3, [r3, #28]
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	699b      	ldr	r3, [r3, #24]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10b      	bne.n	800e2c8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	095b      	lsrs	r3, r3, #5
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	8912      	ldrh	r2, [r2, #8]
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	f0c0 8088 	bcc.w	800e3ce <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	61da      	str	r2, [r3, #28]
 800e2c4:	2304      	movs	r3, #4
 800e2c6:	e08f      	b.n	800e3e8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	0a5b      	lsrs	r3, r3, #9
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	8952      	ldrh	r2, [r2, #10]
 800e2d0:	3a01      	subs	r2, #1
 800e2d2:	4013      	ands	r3, r2
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d17a      	bne.n	800e3ce <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	699b      	ldr	r3, [r3, #24]
 800e2de:	4619      	mov	r1, r3
 800e2e0:	4610      	mov	r0, r2
 800e2e2:	f7ff fc80 	bl	800dbe6 <get_fat>
 800e2e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d801      	bhi.n	800e2f2 <dir_next+0x8c>
 800e2ee:	2302      	movs	r3, #2
 800e2f0:	e07a      	b.n	800e3e8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f8:	d101      	bne.n	800e2fe <dir_next+0x98>
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e074      	b.n	800e3e8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	699b      	ldr	r3, [r3, #24]
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	429a      	cmp	r2, r3
 800e306:	d358      	bcc.n	800e3ba <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d104      	bne.n	800e318 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2200      	movs	r2, #0
 800e312:	61da      	str	r2, [r3, #28]
 800e314:	2304      	movs	r3, #4
 800e316:	e067      	b.n	800e3e8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	699b      	ldr	r3, [r3, #24]
 800e31e:	4619      	mov	r1, r3
 800e320:	4610      	mov	r0, r2
 800e322:	f7ff fe59 	bl	800dfd8 <create_chain>
 800e326:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d101      	bne.n	800e332 <dir_next+0xcc>
 800e32e:	2307      	movs	r3, #7
 800e330:	e05a      	b.n	800e3e8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	2b01      	cmp	r3, #1
 800e336:	d101      	bne.n	800e33c <dir_next+0xd6>
 800e338:	2302      	movs	r3, #2
 800e33a:	e055      	b.n	800e3e8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e342:	d101      	bne.n	800e348 <dir_next+0xe2>
 800e344:	2301      	movs	r3, #1
 800e346:	e04f      	b.n	800e3e8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f7ff fb4d 	bl	800d9e8 <sync_window>
 800e34e:	4603      	mov	r3, r0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d001      	beq.n	800e358 <dir_next+0xf2>
 800e354:	2301      	movs	r3, #1
 800e356:	e047      	b.n	800e3e8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	3334      	adds	r3, #52	; 0x34
 800e35c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e360:	2100      	movs	r1, #0
 800e362:	4618      	mov	r0, r3
 800e364:	f7ff f945 	bl	800d5f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e368:	2300      	movs	r3, #0
 800e36a:	613b      	str	r3, [r7, #16]
 800e36c:	6979      	ldr	r1, [r7, #20]
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f7ff fc1a 	bl	800dba8 <clust2sect>
 800e374:	4602      	mov	r2, r0
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	631a      	str	r2, [r3, #48]	; 0x30
 800e37a:	e012      	b.n	800e3a2 <dir_next+0x13c>
						fs->wflag = 1;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2201      	movs	r2, #1
 800e380:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f7ff fb30 	bl	800d9e8 <sync_window>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d001      	beq.n	800e392 <dir_next+0x12c>
 800e38e:	2301      	movs	r3, #1
 800e390:	e02a      	b.n	800e3e8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	3301      	adds	r3, #1
 800e396:	613b      	str	r3, [r7, #16]
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	631a      	str	r2, [r3, #48]	; 0x30
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	895b      	ldrh	r3, [r3, #10]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d3e6      	bcc.n	800e37c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	1ad2      	subs	r2, r2, r3
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e3c0:	6979      	ldr	r1, [r7, #20]
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f7ff fbf0 	bl	800dba8 <clust2sect>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	68ba      	ldr	r2, [r7, #8]
 800e3d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3e0:	441a      	add	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3718      	adds	r7, #24
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b086      	sub	sp, #24
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e400:	2100      	movs	r1, #0
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7ff feb4 	bl	800e170 <dir_sdi>
 800e408:	4603      	mov	r3, r0
 800e40a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e40c:	7dfb      	ldrb	r3, [r7, #23]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d12b      	bne.n	800e46a <dir_alloc+0x7a>
		n = 0;
 800e412:	2300      	movs	r3, #0
 800e414:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	69db      	ldr	r3, [r3, #28]
 800e41a:	4619      	mov	r1, r3
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	f7ff fb27 	bl	800da70 <move_window>
 800e422:	4603      	mov	r3, r0
 800e424:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e426:	7dfb      	ldrb	r3, [r7, #23]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d11d      	bne.n	800e468 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6a1b      	ldr	r3, [r3, #32]
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	2be5      	cmp	r3, #229	; 0xe5
 800e434:	d004      	beq.n	800e440 <dir_alloc+0x50>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6a1b      	ldr	r3, [r3, #32]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d107      	bne.n	800e450 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	3301      	adds	r3, #1
 800e444:	613b      	str	r3, [r7, #16]
 800e446:	693a      	ldr	r2, [r7, #16]
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d102      	bne.n	800e454 <dir_alloc+0x64>
 800e44e:	e00c      	b.n	800e46a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e450:	2300      	movs	r3, #0
 800e452:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e454:	2101      	movs	r1, #1
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7ff ff05 	bl	800e266 <dir_next>
 800e45c:	4603      	mov	r3, r0
 800e45e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e460:	7dfb      	ldrb	r3, [r7, #23]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d0d7      	beq.n	800e416 <dir_alloc+0x26>
 800e466:	e000      	b.n	800e46a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e468:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e46a:	7dfb      	ldrb	r3, [r7, #23]
 800e46c:	2b04      	cmp	r3, #4
 800e46e:	d101      	bne.n	800e474 <dir_alloc+0x84>
 800e470:	2307      	movs	r3, #7
 800e472:	75fb      	strb	r3, [r7, #23]
	return res;
 800e474:	7dfb      	ldrb	r3, [r7, #23]
}
 800e476:	4618      	mov	r0, r3
 800e478:	3718      	adds	r7, #24
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b084      	sub	sp, #16
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
 800e486:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	331a      	adds	r3, #26
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7ff f80d 	bl	800d4ac <ld_word>
 800e492:	4603      	mov	r3, r0
 800e494:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	d109      	bne.n	800e4b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	3314      	adds	r3, #20
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7ff f802 	bl	800d4ac <ld_word>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	041b      	lsls	r3, r3, #16
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	331a      	adds	r3, #26
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	b292      	uxth	r2, r2
 800e4d0:	4611      	mov	r1, r2
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7ff f825 	bl	800d522 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	2b03      	cmp	r3, #3
 800e4de:	d109      	bne.n	800e4f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	f103 0214 	add.w	r2, r3, #20
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	0c1b      	lsrs	r3, r3, #16
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	f7ff f817 	bl	800d522 <st_word>
	}
}
 800e4f4:	bf00      	nop
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b086      	sub	sp, #24
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e50a:	2100      	movs	r1, #0
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7ff fe2f 	bl	800e170 <dir_sdi>
 800e512:	4603      	mov	r3, r0
 800e514:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e516:	7dfb      	ldrb	r3, [r7, #23]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <dir_find+0x24>
 800e51c:	7dfb      	ldrb	r3, [r7, #23]
 800e51e:	e03e      	b.n	800e59e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	69db      	ldr	r3, [r3, #28]
 800e524:	4619      	mov	r1, r3
 800e526:	6938      	ldr	r0, [r7, #16]
 800e528:	f7ff faa2 	bl	800da70 <move_window>
 800e52c:	4603      	mov	r3, r0
 800e52e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e530:	7dfb      	ldrb	r3, [r7, #23]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d12f      	bne.n	800e596 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6a1b      	ldr	r3, [r3, #32]
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e53e:	7bfb      	ldrb	r3, [r7, #15]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d102      	bne.n	800e54a <dir_find+0x4e>
 800e544:	2304      	movs	r3, #4
 800e546:	75fb      	strb	r3, [r7, #23]
 800e548:	e028      	b.n	800e59c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a1b      	ldr	r3, [r3, #32]
 800e54e:	330b      	adds	r3, #11
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e556:	b2da      	uxtb	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6a1b      	ldr	r3, [r3, #32]
 800e560:	330b      	adds	r3, #11
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	f003 0308 	and.w	r3, r3, #8
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d10a      	bne.n	800e582 <dir_find+0x86>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6a18      	ldr	r0, [r3, #32]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	3324      	adds	r3, #36	; 0x24
 800e574:	220b      	movs	r2, #11
 800e576:	4619      	mov	r1, r3
 800e578:	f7ff f856 	bl	800d628 <mem_cmp>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00b      	beq.n	800e59a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e582:	2100      	movs	r1, #0
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7ff fe6e 	bl	800e266 <dir_next>
 800e58a:	4603      	mov	r3, r0
 800e58c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e58e:	7dfb      	ldrb	r3, [r7, #23]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d0c5      	beq.n	800e520 <dir_find+0x24>
 800e594:	e002      	b.n	800e59c <dir_find+0xa0>
		if (res != FR_OK) break;
 800e596:	bf00      	nop
 800e598:	e000      	b.n	800e59c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e59a:	bf00      	nop

	return res;
 800e59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3718      	adds	r7, #24
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b084      	sub	sp, #16
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e5b4:	2101      	movs	r1, #1
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f7ff ff1a 	bl	800e3f0 <dir_alloc>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e5c0:	7bfb      	ldrb	r3, [r7, #15]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d11c      	bne.n	800e600 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	69db      	ldr	r3, [r3, #28]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	68b8      	ldr	r0, [r7, #8]
 800e5ce:	f7ff fa4f 	bl	800da70 <move_window>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e5d6:	7bfb      	ldrb	r3, [r7, #15]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d111      	bne.n	800e600 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a1b      	ldr	r3, [r3, #32]
 800e5e0:	2220      	movs	r2, #32
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7ff f804 	bl	800d5f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6a18      	ldr	r0, [r3, #32]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	3324      	adds	r3, #36	; 0x24
 800e5f2:	220b      	movs	r2, #11
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	f7fe ffdb 	bl	800d5b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e600:	7bfb      	ldrb	r3, [r7, #15]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
	...

0800e60c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b088      	sub	sp, #32
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	60fb      	str	r3, [r7, #12]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	3324      	adds	r3, #36	; 0x24
 800e620:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e622:	220b      	movs	r2, #11
 800e624:	2120      	movs	r1, #32
 800e626:	68b8      	ldr	r0, [r7, #8]
 800e628:	f7fe ffe3 	bl	800d5f2 <mem_set>
	si = i = 0; ni = 8;
 800e62c:	2300      	movs	r3, #0
 800e62e:	613b      	str	r3, [r7, #16]
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	61fb      	str	r3, [r7, #28]
 800e634:	2308      	movs	r3, #8
 800e636:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	1c5a      	adds	r2, r3, #1
 800e63c:	61fa      	str	r2, [r7, #28]
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	4413      	add	r3, r2
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e646:	7efb      	ldrb	r3, [r7, #27]
 800e648:	2b20      	cmp	r3, #32
 800e64a:	d94e      	bls.n	800e6ea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e64c:	7efb      	ldrb	r3, [r7, #27]
 800e64e:	2b2f      	cmp	r3, #47	; 0x2f
 800e650:	d006      	beq.n	800e660 <create_name+0x54>
 800e652:	7efb      	ldrb	r3, [r7, #27]
 800e654:	2b5c      	cmp	r3, #92	; 0x5c
 800e656:	d110      	bne.n	800e67a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e658:	e002      	b.n	800e660 <create_name+0x54>
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	3301      	adds	r3, #1
 800e65e:	61fb      	str	r3, [r7, #28]
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	4413      	add	r3, r2
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	2b2f      	cmp	r3, #47	; 0x2f
 800e66a:	d0f6      	beq.n	800e65a <create_name+0x4e>
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	4413      	add	r3, r2
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	2b5c      	cmp	r3, #92	; 0x5c
 800e676:	d0f0      	beq.n	800e65a <create_name+0x4e>
			break;
 800e678:	e038      	b.n	800e6ec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e67a:	7efb      	ldrb	r3, [r7, #27]
 800e67c:	2b2e      	cmp	r3, #46	; 0x2e
 800e67e:	d003      	beq.n	800e688 <create_name+0x7c>
 800e680:	693a      	ldr	r2, [r7, #16]
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	429a      	cmp	r2, r3
 800e686:	d30c      	bcc.n	800e6a2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	2b0b      	cmp	r3, #11
 800e68c:	d002      	beq.n	800e694 <create_name+0x88>
 800e68e:	7efb      	ldrb	r3, [r7, #27]
 800e690:	2b2e      	cmp	r3, #46	; 0x2e
 800e692:	d001      	beq.n	800e698 <create_name+0x8c>
 800e694:	2306      	movs	r3, #6
 800e696:	e044      	b.n	800e722 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e698:	2308      	movs	r3, #8
 800e69a:	613b      	str	r3, [r7, #16]
 800e69c:	230b      	movs	r3, #11
 800e69e:	617b      	str	r3, [r7, #20]
			continue;
 800e6a0:	e022      	b.n	800e6e8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e6a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	da04      	bge.n	800e6b4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e6aa:	7efb      	ldrb	r3, [r7, #27]
 800e6ac:	3b80      	subs	r3, #128	; 0x80
 800e6ae:	4a1f      	ldr	r2, [pc, #124]	; (800e72c <create_name+0x120>)
 800e6b0:	5cd3      	ldrb	r3, [r2, r3]
 800e6b2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e6b4:	7efb      	ldrb	r3, [r7, #27]
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	481d      	ldr	r0, [pc, #116]	; (800e730 <create_name+0x124>)
 800e6ba:	f7fe ffdc 	bl	800d676 <chk_chr>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d001      	beq.n	800e6c8 <create_name+0xbc>
 800e6c4:	2306      	movs	r3, #6
 800e6c6:	e02c      	b.n	800e722 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e6c8:	7efb      	ldrb	r3, [r7, #27]
 800e6ca:	2b60      	cmp	r3, #96	; 0x60
 800e6cc:	d905      	bls.n	800e6da <create_name+0xce>
 800e6ce:	7efb      	ldrb	r3, [r7, #27]
 800e6d0:	2b7a      	cmp	r3, #122	; 0x7a
 800e6d2:	d802      	bhi.n	800e6da <create_name+0xce>
 800e6d4:	7efb      	ldrb	r3, [r7, #27]
 800e6d6:	3b20      	subs	r3, #32
 800e6d8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	613a      	str	r2, [r7, #16]
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	7efa      	ldrb	r2, [r7, #27]
 800e6e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e6e8:	e7a6      	b.n	800e638 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e6ea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	69fb      	ldr	r3, [r7, #28]
 800e6f0:	441a      	add	r2, r3
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d101      	bne.n	800e700 <create_name+0xf4>
 800e6fc:	2306      	movs	r3, #6
 800e6fe:	e010      	b.n	800e722 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	2be5      	cmp	r3, #229	; 0xe5
 800e706:	d102      	bne.n	800e70e <create_name+0x102>
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	2205      	movs	r2, #5
 800e70c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e70e:	7efb      	ldrb	r3, [r7, #27]
 800e710:	2b20      	cmp	r3, #32
 800e712:	d801      	bhi.n	800e718 <create_name+0x10c>
 800e714:	2204      	movs	r2, #4
 800e716:	e000      	b.n	800e71a <create_name+0x10e>
 800e718:	2200      	movs	r2, #0
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	330b      	adds	r3, #11
 800e71e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e720:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e722:	4618      	mov	r0, r3
 800e724:	3720      	adds	r7, #32
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	080150c8 	.word	0x080150c8
 800e730:	0801311c 	.word	0x0801311c

0800e734 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e748:	e002      	b.n	800e750 <follow_path+0x1c>
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	3301      	adds	r3, #1
 800e74e:	603b      	str	r3, [r7, #0]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	2b2f      	cmp	r3, #47	; 0x2f
 800e756:	d0f8      	beq.n	800e74a <follow_path+0x16>
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	2b5c      	cmp	r3, #92	; 0x5c
 800e75e:	d0f4      	beq.n	800e74a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	2200      	movs	r2, #0
 800e764:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	2b1f      	cmp	r3, #31
 800e76c:	d80a      	bhi.n	800e784 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2280      	movs	r2, #128	; 0x80
 800e772:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e776:	2100      	movs	r1, #0
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7ff fcf9 	bl	800e170 <dir_sdi>
 800e77e:	4603      	mov	r3, r0
 800e780:	75fb      	strb	r3, [r7, #23]
 800e782:	e043      	b.n	800e80c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e784:	463b      	mov	r3, r7
 800e786:	4619      	mov	r1, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f7ff ff3f 	bl	800e60c <create_name>
 800e78e:	4603      	mov	r3, r0
 800e790:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e792:	7dfb      	ldrb	r3, [r7, #23]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d134      	bne.n	800e802 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7ff feaf 	bl	800e4fc <dir_find>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e7a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e7aa:	7dfb      	ldrb	r3, [r7, #23]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d00a      	beq.n	800e7c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e7b0:	7dfb      	ldrb	r3, [r7, #23]
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d127      	bne.n	800e806 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e7b6:	7afb      	ldrb	r3, [r7, #11]
 800e7b8:	f003 0304 	and.w	r3, r3, #4
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d122      	bne.n	800e806 <follow_path+0xd2>
 800e7c0:	2305      	movs	r3, #5
 800e7c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e7c4:	e01f      	b.n	800e806 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e7c6:	7afb      	ldrb	r3, [r7, #11]
 800e7c8:	f003 0304 	and.w	r3, r3, #4
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d11c      	bne.n	800e80a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	799b      	ldrb	r3, [r3, #6]
 800e7d4:	f003 0310 	and.w	r3, r3, #16
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d102      	bne.n	800e7e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e7dc:	2305      	movs	r3, #5
 800e7de:	75fb      	strb	r3, [r7, #23]
 800e7e0:	e014      	b.n	800e80c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	695b      	ldr	r3, [r3, #20]
 800e7ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7f0:	4413      	add	r3, r2
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f7ff fe42 	bl	800e47e <ld_clust>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e800:	e7c0      	b.n	800e784 <follow_path+0x50>
			if (res != FR_OK) break;
 800e802:	bf00      	nop
 800e804:	e002      	b.n	800e80c <follow_path+0xd8>
				break;
 800e806:	bf00      	nop
 800e808:	e000      	b.n	800e80c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e80a:	bf00      	nop
			}
		}
	}

	return res;
 800e80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e816:	b480      	push	{r7}
 800e818:	b087      	sub	sp, #28
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e81e:	f04f 33ff 	mov.w	r3, #4294967295
 800e822:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d031      	beq.n	800e890 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	617b      	str	r3, [r7, #20]
 800e832:	e002      	b.n	800e83a <get_ldnumber+0x24>
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	3301      	adds	r3, #1
 800e838:	617b      	str	r3, [r7, #20]
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	2b20      	cmp	r3, #32
 800e840:	d903      	bls.n	800e84a <get_ldnumber+0x34>
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	2b3a      	cmp	r3, #58	; 0x3a
 800e848:	d1f4      	bne.n	800e834 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	2b3a      	cmp	r3, #58	; 0x3a
 800e850:	d11c      	bne.n	800e88c <get_ldnumber+0x76>
			tp = *path;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	1c5a      	adds	r2, r3, #1
 800e85c:	60fa      	str	r2, [r7, #12]
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	3b30      	subs	r3, #48	; 0x30
 800e862:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	2b09      	cmp	r3, #9
 800e868:	d80e      	bhi.n	800e888 <get_ldnumber+0x72>
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d10a      	bne.n	800e888 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d107      	bne.n	800e888 <get_ldnumber+0x72>
					vol = (int)i;
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	3301      	adds	r3, #1
 800e880:	617b      	str	r3, [r7, #20]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	697a      	ldr	r2, [r7, #20]
 800e886:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	e002      	b.n	800e892 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e88c:	2300      	movs	r3, #0
 800e88e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e890:	693b      	ldr	r3, [r7, #16]
}
 800e892:	4618      	mov	r0, r3
 800e894:	371c      	adds	r7, #28
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
	...

0800e8a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	70da      	strb	r2, [r3, #3]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e8b8:	6839      	ldr	r1, [r7, #0]
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7ff f8d8 	bl	800da70 <move_window>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d001      	beq.n	800e8ca <check_fs+0x2a>
 800e8c6:	2304      	movs	r3, #4
 800e8c8:	e038      	b.n	800e93c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	3334      	adds	r3, #52	; 0x34
 800e8ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fe fdea 	bl	800d4ac <ld_word>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	461a      	mov	r2, r3
 800e8dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d001      	beq.n	800e8e8 <check_fs+0x48>
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	e029      	b.n	800e93c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8ee:	2be9      	cmp	r3, #233	; 0xe9
 800e8f0:	d009      	beq.n	800e906 <check_fs+0x66>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8f8:	2beb      	cmp	r3, #235	; 0xeb
 800e8fa:	d11e      	bne.n	800e93a <check_fs+0x9a>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e902:	2b90      	cmp	r3, #144	; 0x90
 800e904:	d119      	bne.n	800e93a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	3334      	adds	r3, #52	; 0x34
 800e90a:	3336      	adds	r3, #54	; 0x36
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe fde5 	bl	800d4dc <ld_dword>
 800e912:	4603      	mov	r3, r0
 800e914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e918:	4a0a      	ldr	r2, [pc, #40]	; (800e944 <check_fs+0xa4>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d101      	bne.n	800e922 <check_fs+0x82>
 800e91e:	2300      	movs	r3, #0
 800e920:	e00c      	b.n	800e93c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	3334      	adds	r3, #52	; 0x34
 800e926:	3352      	adds	r3, #82	; 0x52
 800e928:	4618      	mov	r0, r3
 800e92a:	f7fe fdd7 	bl	800d4dc <ld_dword>
 800e92e:	4603      	mov	r3, r0
 800e930:	4a05      	ldr	r2, [pc, #20]	; (800e948 <check_fs+0xa8>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d101      	bne.n	800e93a <check_fs+0x9a>
 800e936:	2300      	movs	r3, #0
 800e938:	e000      	b.n	800e93c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e93a:	2302      	movs	r3, #2
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	00544146 	.word	0x00544146
 800e948:	33544146 	.word	0x33544146

0800e94c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b096      	sub	sp, #88	; 0x58
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	4613      	mov	r3, r2
 800e958:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	2200      	movs	r2, #0
 800e95e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f7ff ff58 	bl	800e816 <get_ldnumber>
 800e966:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	da01      	bge.n	800e972 <find_volume+0x26>
 800e96e:	230b      	movs	r3, #11
 800e970:	e236      	b.n	800ede0 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e972:	4aac      	ldr	r2, [pc, #688]	; (800ec24 <find_volume+0x2d8>)
 800e974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e97a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <find_volume+0x3a>
 800e982:	230c      	movs	r3, #12
 800e984:	e22c      	b.n	800ede0 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800e986:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e988:	f7fe fe90 	bl	800d6ac <lock_fs>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d101      	bne.n	800e996 <find_volume+0x4a>
 800e992:	230f      	movs	r3, #15
 800e994:	e224      	b.n	800ede0 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e99a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e99c:	79fb      	ldrb	r3, [r7, #7]
 800e99e:	f023 0301 	bic.w	r3, r3, #1
 800e9a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d01a      	beq.n	800e9e2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ae:	785b      	ldrb	r3, [r3, #1]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7fe fcdd 	bl	800d370 <disk_status>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e9bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9c0:	f003 0301 	and.w	r3, r3, #1
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d10c      	bne.n	800e9e2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e9c8:	79fb      	ldrb	r3, [r7, #7]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d007      	beq.n	800e9de <find_volume+0x92>
 800e9ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9d2:	f003 0304 	and.w	r3, r3, #4
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d001      	beq.n	800e9de <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e9da:	230a      	movs	r3, #10
 800e9dc:	e200      	b.n	800ede0 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800e9de:	2300      	movs	r3, #0
 800e9e0:	e1fe      	b.n	800ede0 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ea:	b2da      	uxtb	r2, r3
 800e9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f2:	785b      	ldrb	r3, [r3, #1]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fe fcd5 	bl	800d3a4 <disk_initialize>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ea00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea04:	f003 0301 	and.w	r3, r3, #1
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ea0c:	2303      	movs	r3, #3
 800ea0e:	e1e7      	b.n	800ede0 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ea10:	79fb      	ldrb	r3, [r7, #7]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d007      	beq.n	800ea26 <find_volume+0xda>
 800ea16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea1a:	f003 0304 	and.w	r3, r3, #4
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ea22:	230a      	movs	r3, #10
 800ea24:	e1dc      	b.n	800ede0 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ea2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ea2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea2e:	f7ff ff37 	bl	800e8a0 <check_fs>
 800ea32:	4603      	mov	r3, r0
 800ea34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ea38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d14b      	bne.n	800ead8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ea40:	2300      	movs	r3, #0
 800ea42:	643b      	str	r3, [r7, #64]	; 0x40
 800ea44:	e01f      	b.n	800ea86 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ea46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4e:	011b      	lsls	r3, r3, #4
 800ea50:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ea54:	4413      	add	r3, r2
 800ea56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ea58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5a:	3304      	adds	r3, #4
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d006      	beq.n	800ea70 <find_volume+0x124>
 800ea62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea64:	3308      	adds	r3, #8
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe fd38 	bl	800d4dc <ld_dword>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	e000      	b.n	800ea72 <find_volume+0x126>
 800ea70:	2200      	movs	r2, #0
 800ea72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ea7a:	440b      	add	r3, r1
 800ea7c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ea80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea82:	3301      	adds	r3, #1
 800ea84:	643b      	str	r3, [r7, #64]	; 0x40
 800ea86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea88:	2b03      	cmp	r3, #3
 800ea8a:	d9dc      	bls.n	800ea46 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ea90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d002      	beq.n	800ea9c <find_volume+0x150>
 800ea96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea98:	3b01      	subs	r3, #1
 800ea9a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ea9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea9e:	009b      	lsls	r3, r3, #2
 800eaa0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800eaa4:	4413      	add	r3, r2
 800eaa6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800eaaa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eaac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d005      	beq.n	800eabe <find_volume+0x172>
 800eab2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eab4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eab6:	f7ff fef3 	bl	800e8a0 <check_fs>
 800eaba:	4603      	mov	r3, r0
 800eabc:	e000      	b.n	800eac0 <find_volume+0x174>
 800eabe:	2303      	movs	r3, #3
 800eac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800eac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d905      	bls.n	800ead8 <find_volume+0x18c>
 800eacc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eace:	3301      	adds	r3, #1
 800ead0:	643b      	str	r3, [r7, #64]	; 0x40
 800ead2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead4:	2b03      	cmp	r3, #3
 800ead6:	d9e1      	bls.n	800ea9c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ead8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eadc:	2b04      	cmp	r3, #4
 800eade:	d101      	bne.n	800eae4 <find_volume+0x198>
 800eae0:	2301      	movs	r3, #1
 800eae2:	e17d      	b.n	800ede0 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d901      	bls.n	800eaf0 <find_volume+0x1a4>
 800eaec:	230d      	movs	r3, #13
 800eaee:	e177      	b.n	800ede0 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf2:	3334      	adds	r3, #52	; 0x34
 800eaf4:	330b      	adds	r3, #11
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fe fcd8 	bl	800d4ac <ld_word>
 800eafc:	4603      	mov	r3, r0
 800eafe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb02:	d001      	beq.n	800eb08 <find_volume+0x1bc>
 800eb04:	230d      	movs	r3, #13
 800eb06:	e16b      	b.n	800ede0 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800eb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0a:	3334      	adds	r3, #52	; 0x34
 800eb0c:	3316      	adds	r3, #22
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fe fccc 	bl	800d4ac <ld_word>
 800eb14:	4603      	mov	r3, r0
 800eb16:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800eb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d106      	bne.n	800eb2c <find_volume+0x1e0>
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb20:	3334      	adds	r3, #52	; 0x34
 800eb22:	3324      	adds	r3, #36	; 0x24
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7fe fcd9 	bl	800d4dc <ld_dword>
 800eb2a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800eb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb30:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800eb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb34:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3e:	789b      	ldrb	r3, [r3, #2]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d005      	beq.n	800eb50 <find_volume+0x204>
 800eb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb46:	789b      	ldrb	r3, [r3, #2]
 800eb48:	2b02      	cmp	r3, #2
 800eb4a:	d001      	beq.n	800eb50 <find_volume+0x204>
 800eb4c:	230d      	movs	r3, #13
 800eb4e:	e147      	b.n	800ede0 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800eb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb52:	789b      	ldrb	r3, [r3, #2]
 800eb54:	461a      	mov	r2, r3
 800eb56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb58:	fb02 f303 	mul.w	r3, r2, r3
 800eb5c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800eb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800eb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6c:	895b      	ldrh	r3, [r3, #10]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d008      	beq.n	800eb84 <find_volume+0x238>
 800eb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb74:	895b      	ldrh	r3, [r3, #10]
 800eb76:	461a      	mov	r2, r3
 800eb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7a:	895b      	ldrh	r3, [r3, #10]
 800eb7c:	3b01      	subs	r3, #1
 800eb7e:	4013      	ands	r3, r2
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d001      	beq.n	800eb88 <find_volume+0x23c>
 800eb84:	230d      	movs	r3, #13
 800eb86:	e12b      	b.n	800ede0 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8a:	3334      	adds	r3, #52	; 0x34
 800eb8c:	3311      	adds	r3, #17
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fe fc8c 	bl	800d4ac <ld_word>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461a      	mov	r2, r3
 800eb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9e:	891b      	ldrh	r3, [r3, #8]
 800eba0:	f003 030f 	and.w	r3, r3, #15
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d001      	beq.n	800ebae <find_volume+0x262>
 800ebaa:	230d      	movs	r3, #13
 800ebac:	e118      	b.n	800ede0 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ebae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb0:	3334      	adds	r3, #52	; 0x34
 800ebb2:	3313      	adds	r3, #19
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fe fc79 	bl	800d4ac <ld_word>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ebbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d106      	bne.n	800ebd2 <find_volume+0x286>
 800ebc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc6:	3334      	adds	r3, #52	; 0x34
 800ebc8:	3320      	adds	r3, #32
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fe fc86 	bl	800d4dc <ld_dword>
 800ebd0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ebd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd4:	3334      	adds	r3, #52	; 0x34
 800ebd6:	330e      	adds	r3, #14
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7fe fc67 	bl	800d4ac <ld_word>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ebe2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d101      	bne.n	800ebec <find_volume+0x2a0>
 800ebe8:	230d      	movs	r3, #13
 800ebea:	e0f9      	b.n	800ede0 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ebec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ebee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebf0:	4413      	add	r3, r2
 800ebf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebf4:	8912      	ldrh	r2, [r2, #8]
 800ebf6:	0912      	lsrs	r2, r2, #4
 800ebf8:	b292      	uxth	r2, r2
 800ebfa:	4413      	add	r3, r2
 800ebfc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ebfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d201      	bcs.n	800ec0a <find_volume+0x2be>
 800ec06:	230d      	movs	r3, #13
 800ec08:	e0ea      	b.n	800ede0 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ec0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec12:	8952      	ldrh	r2, [r2, #10]
 800ec14:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec18:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ec1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d103      	bne.n	800ec28 <find_volume+0x2dc>
 800ec20:	230d      	movs	r3, #13
 800ec22:	e0dd      	b.n	800ede0 <find_volume+0x494>
 800ec24:	2000069c 	.word	0x2000069c
		fmt = FS_FAT32;
 800ec28:	2303      	movs	r3, #3
 800ec2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ec2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec30:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d802      	bhi.n	800ec3e <find_volume+0x2f2>
 800ec38:	2302      	movs	r3, #2
 800ec3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec40:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d802      	bhi.n	800ec4e <find_volume+0x302>
 800ec48:	2301      	movs	r3, #1
 800ec4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ec4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec50:	1c9a      	adds	r2, r3, #2
 800ec52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec54:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ec56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec5a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ec5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ec5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec60:	441a      	add	r2, r3
 800ec62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec64:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ec66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6a:	441a      	add	r2, r3
 800ec6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ec70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec74:	2b03      	cmp	r3, #3
 800ec76:	d11e      	bne.n	800ecb6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ec78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7a:	3334      	adds	r3, #52	; 0x34
 800ec7c:	332a      	adds	r3, #42	; 0x2a
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fe fc14 	bl	800d4ac <ld_word>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d001      	beq.n	800ec8e <find_volume+0x342>
 800ec8a:	230d      	movs	r3, #13
 800ec8c:	e0a8      	b.n	800ede0 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ec8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec90:	891b      	ldrh	r3, [r3, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d001      	beq.n	800ec9a <find_volume+0x34e>
 800ec96:	230d      	movs	r3, #13
 800ec98:	e0a2      	b.n	800ede0 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ec9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9c:	3334      	adds	r3, #52	; 0x34
 800ec9e:	332c      	adds	r3, #44	; 0x2c
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fe fc1b 	bl	800d4dc <ld_dword>
 800eca6:	4602      	mov	r2, r0
 800eca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecaa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ecac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	647b      	str	r3, [r7, #68]	; 0x44
 800ecb4:	e01f      	b.n	800ecf6 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ecb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb8:	891b      	ldrh	r3, [r3, #8]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d101      	bne.n	800ecc2 <find_volume+0x376>
 800ecbe:	230d      	movs	r3, #13
 800ecc0:	e08e      	b.n	800ede0 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ecc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecc8:	441a      	add	r2, r3
 800ecca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eccc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ecce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	d103      	bne.n	800ecde <find_volume+0x392>
 800ecd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd8:	699b      	ldr	r3, [r3, #24]
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	e00a      	b.n	800ecf4 <find_volume+0x3a8>
 800ecde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece0:	699a      	ldr	r2, [r3, #24]
 800ece2:	4613      	mov	r3, r2
 800ece4:	005b      	lsls	r3, r3, #1
 800ece6:	4413      	add	r3, r2
 800ece8:	085a      	lsrs	r2, r3, #1
 800ecea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecec:	699b      	ldr	r3, [r3, #24]
 800ecee:	f003 0301 	and.w	r3, r3, #1
 800ecf2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ecf4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf8:	69da      	ldr	r2, [r3, #28]
 800ecfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecfc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ed00:	0a5b      	lsrs	r3, r3, #9
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d201      	bcs.n	800ed0a <find_volume+0x3be>
 800ed06:	230d      	movs	r3, #13
 800ed08:	e06a      	b.n	800ede0 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ed0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed10:	615a      	str	r2, [r3, #20]
 800ed12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed14:	695a      	ldr	r2, [r3, #20]
 800ed16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed18:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ed1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1c:	2280      	movs	r2, #128	; 0x80
 800ed1e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ed20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed24:	2b03      	cmp	r3, #3
 800ed26:	d149      	bne.n	800edbc <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ed28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2a:	3334      	adds	r3, #52	; 0x34
 800ed2c:	3330      	adds	r3, #48	; 0x30
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fe fbbc 	bl	800d4ac <ld_word>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d140      	bne.n	800edbc <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ed3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	4619      	mov	r1, r3
 800ed40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed42:	f7fe fe95 	bl	800da70 <move_window>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d137      	bne.n	800edbc <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4e:	2200      	movs	r2, #0
 800ed50:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ed52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed54:	3334      	adds	r3, #52	; 0x34
 800ed56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fe fba6 	bl	800d4ac <ld_word>
 800ed60:	4603      	mov	r3, r0
 800ed62:	461a      	mov	r2, r3
 800ed64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d127      	bne.n	800edbc <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	3334      	adds	r3, #52	; 0x34
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7fe fbb3 	bl	800d4dc <ld_dword>
 800ed76:	4603      	mov	r3, r0
 800ed78:	4a1b      	ldr	r2, [pc, #108]	; (800ede8 <find_volume+0x49c>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d11e      	bne.n	800edbc <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ed7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed80:	3334      	adds	r3, #52	; 0x34
 800ed82:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fe fba8 	bl	800d4dc <ld_dword>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	4a17      	ldr	r2, [pc, #92]	; (800edec <find_volume+0x4a0>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d113      	bne.n	800edbc <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ed94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed96:	3334      	adds	r3, #52	; 0x34
 800ed98:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fe fb9d 	bl	800d4dc <ld_dword>
 800eda2:	4602      	mov	r2, r0
 800eda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800eda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edaa:	3334      	adds	r3, #52	; 0x34
 800edac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fe fb93 	bl	800d4dc <ld_dword>
 800edb6:	4602      	mov	r2, r0
 800edb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edba:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800edbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edbe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800edc2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800edc4:	4b0a      	ldr	r3, [pc, #40]	; (800edf0 <find_volume+0x4a4>)
 800edc6:	881b      	ldrh	r3, [r3, #0]
 800edc8:	3301      	adds	r3, #1
 800edca:	b29a      	uxth	r2, r3
 800edcc:	4b08      	ldr	r3, [pc, #32]	; (800edf0 <find_volume+0x4a4>)
 800edce:	801a      	strh	r2, [r3, #0]
 800edd0:	4b07      	ldr	r3, [pc, #28]	; (800edf0 <find_volume+0x4a4>)
 800edd2:	881a      	ldrh	r2, [r3, #0]
 800edd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800edd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edda:	f7fe fde1 	bl	800d9a0 <clear_lock>
#endif
	return FR_OK;
 800edde:	2300      	movs	r3, #0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3758      	adds	r7, #88	; 0x58
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	41615252 	.word	0x41615252
 800edec:	61417272 	.word	0x61417272
 800edf0:	200006a0 	.word	0x200006a0

0800edf4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800edfe:	2309      	movs	r3, #9
 800ee00:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d02e      	beq.n	800ee66 <validate+0x72>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d02a      	beq.n	800ee66 <validate+0x72>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d025      	beq.n	800ee66 <validate+0x72>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	889a      	ldrh	r2, [r3, #4]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	88db      	ldrh	r3, [r3, #6]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d11e      	bne.n	800ee66 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7fe fc3d 	bl	800d6ac <lock_fs>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d014      	beq.n	800ee62 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	785b      	ldrb	r3, [r3, #1]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fe fa96 	bl	800d370 <disk_status>
 800ee44:	4603      	mov	r3, r0
 800ee46:	f003 0301 	and.w	r3, r3, #1
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d102      	bne.n	800ee54 <validate+0x60>
				res = FR_OK;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	73fb      	strb	r3, [r7, #15]
 800ee52:	e008      	b.n	800ee66 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2100      	movs	r1, #0
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fe fc3c 	bl	800d6d8 <unlock_fs>
 800ee60:	e001      	b.n	800ee66 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ee62:	230f      	movs	r3, #15
 800ee64:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ee66:	7bfb      	ldrb	r3, [r7, #15]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d102      	bne.n	800ee72 <validate+0x7e>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	e000      	b.n	800ee74 <validate+0x80>
 800ee72:	2300      	movs	r3, #0
 800ee74:	683a      	ldr	r2, [r7, #0]
 800ee76:	6013      	str	r3, [r2, #0]
	return res;
 800ee78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
	...

0800ee84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b088      	sub	sp, #32
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ee96:	f107 0310 	add.w	r3, r7, #16
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7ff fcbb 	bl	800e816 <get_ldnumber>
 800eea0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	da01      	bge.n	800eeac <f_mount+0x28>
 800eea8:	230b      	movs	r3, #11
 800eeaa:	e048      	b.n	800ef3e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800eeac:	4a26      	ldr	r2, [pc, #152]	; (800ef48 <f_mount+0xc4>)
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeb4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00f      	beq.n	800eedc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800eebc:	69b8      	ldr	r0, [r7, #24]
 800eebe:	f7fe fd6f 	bl	800d9a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f001 f909 	bl	80100de <ff_del_syncobj>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d101      	bne.n	800eed6 <f_mount+0x52>
 800eed2:	2302      	movs	r3, #2
 800eed4:	e033      	b.n	800ef3e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	2200      	movs	r2, #0
 800eeda:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00f      	beq.n	800ef02 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	330c      	adds	r3, #12
 800eef0:	4619      	mov	r1, r3
 800eef2:	4610      	mov	r0, r2
 800eef4:	f001 f8d3 	bl	801009e <ff_cre_syncobj>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d101      	bne.n	800ef02 <f_mount+0x7e>
 800eefe:	2302      	movs	r3, #2
 800ef00:	e01d      	b.n	800ef3e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	4910      	ldr	r1, [pc, #64]	; (800ef48 <f_mount+0xc4>)
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d002      	beq.n	800ef18 <f_mount+0x94>
 800ef12:	79fb      	ldrb	r3, [r7, #7]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d001      	beq.n	800ef1c <f_mount+0x98>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	e010      	b.n	800ef3e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ef1c:	f107 010c 	add.w	r1, r7, #12
 800ef20:	f107 0308 	add.w	r3, r7, #8
 800ef24:	2200      	movs	r2, #0
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff fd10 	bl	800e94c <find_volume>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	7dfa      	ldrb	r2, [r7, #23]
 800ef34:	4611      	mov	r1, r2
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fe fbce 	bl	800d6d8 <unlock_fs>
 800ef3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3720      	adds	r7, #32
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	2000069c 	.word	0x2000069c

0800ef4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b098      	sub	sp, #96	; 0x60
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	4613      	mov	r3, r2
 800ef58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d101      	bne.n	800ef64 <f_open+0x18>
 800ef60:	2309      	movs	r3, #9
 800ef62:	e1b4      	b.n	800f2ce <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ef64:	79fb      	ldrb	r3, [r7, #7]
 800ef66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ef6c:	79fa      	ldrb	r2, [r7, #7]
 800ef6e:	f107 0110 	add.w	r1, r7, #16
 800ef72:	f107 0308 	add.w	r3, r7, #8
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7ff fce8 	bl	800e94c <find_volume>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ef82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f040 8191 	bne.w	800f2ae <f_open+0x362>
		dj.obj.fs = fs;
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ef90:	68ba      	ldr	r2, [r7, #8]
 800ef92:	f107 0314 	add.w	r3, r7, #20
 800ef96:	4611      	mov	r1, r2
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7ff fbcb 	bl	800e734 <follow_path>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800efa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d11a      	bne.n	800efe2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800efac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800efb0:	b25b      	sxtb	r3, r3
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	da03      	bge.n	800efbe <f_open+0x72>
				res = FR_INVALID_NAME;
 800efb6:	2306      	movs	r3, #6
 800efb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800efbc:	e011      	b.n	800efe2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efbe:	79fb      	ldrb	r3, [r7, #7]
 800efc0:	f023 0301 	bic.w	r3, r3, #1
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	bf14      	ite	ne
 800efc8:	2301      	movne	r3, #1
 800efca:	2300      	moveq	r3, #0
 800efcc:	b2db      	uxtb	r3, r3
 800efce:	461a      	mov	r2, r3
 800efd0:	f107 0314 	add.w	r3, r7, #20
 800efd4:	4611      	mov	r1, r2
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fe fb9a 	bl	800d710 <chk_lock>
 800efdc:	4603      	mov	r3, r0
 800efde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800efe2:	79fb      	ldrb	r3, [r7, #7]
 800efe4:	f003 031c 	and.w	r3, r3, #28
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d07f      	beq.n	800f0ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800efec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d017      	beq.n	800f024 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eff8:	2b04      	cmp	r3, #4
 800effa:	d10e      	bne.n	800f01a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800effc:	f7fe fbe4 	bl	800d7c8 <enq_lock>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d006      	beq.n	800f014 <f_open+0xc8>
 800f006:	f107 0314 	add.w	r3, r7, #20
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7ff facb 	bl	800e5a6 <dir_register>
 800f010:	4603      	mov	r3, r0
 800f012:	e000      	b.n	800f016 <f_open+0xca>
 800f014:	2312      	movs	r3, #18
 800f016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f01a:	79fb      	ldrb	r3, [r7, #7]
 800f01c:	f043 0308 	orr.w	r3, r3, #8
 800f020:	71fb      	strb	r3, [r7, #7]
 800f022:	e010      	b.n	800f046 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f024:	7ebb      	ldrb	r3, [r7, #26]
 800f026:	f003 0311 	and.w	r3, r3, #17
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d003      	beq.n	800f036 <f_open+0xea>
					res = FR_DENIED;
 800f02e:	2307      	movs	r3, #7
 800f030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f034:	e007      	b.n	800f046 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f036:	79fb      	ldrb	r3, [r7, #7]
 800f038:	f003 0304 	and.w	r3, r3, #4
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d002      	beq.n	800f046 <f_open+0xfa>
 800f040:	2308      	movs	r3, #8
 800f042:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f046:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d168      	bne.n	800f120 <f_open+0x1d4>
 800f04e:	79fb      	ldrb	r3, [r7, #7]
 800f050:	f003 0308 	and.w	r3, r3, #8
 800f054:	2b00      	cmp	r3, #0
 800f056:	d063      	beq.n	800f120 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f058:	f7fd ff1a 	bl	800ce90 <get_fattime>
 800f05c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f060:	330e      	adds	r3, #14
 800f062:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f064:	4618      	mov	r0, r3
 800f066:	f7fe fa77 	bl	800d558 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f06c:	3316      	adds	r3, #22
 800f06e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f070:	4618      	mov	r0, r3
 800f072:	f7fe fa71 	bl	800d558 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f078:	330b      	adds	r3, #11
 800f07a:	2220      	movs	r2, #32
 800f07c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f082:	4611      	mov	r1, r2
 800f084:	4618      	mov	r0, r3
 800f086:	f7ff f9fa 	bl	800e47e <ld_clust>
 800f08a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f090:	2200      	movs	r2, #0
 800f092:	4618      	mov	r0, r3
 800f094:	f7ff fa12 	bl	800e4bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f09a:	331c      	adds	r3, #28
 800f09c:	2100      	movs	r1, #0
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fe fa5a 	bl	800d558 <st_dword>
					fs->wflag = 1;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d037      	beq.n	800f120 <f_open+0x1d4>
						dw = fs->winsect;
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0b4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f0b6:	f107 0314 	add.w	r3, r7, #20
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fe ff25 	bl	800df0e <remove_chain>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f0ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d126      	bne.n	800f120 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fe fcca 	bl	800da70 <move_window>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f0e6:	3a01      	subs	r2, #1
 800f0e8:	611a      	str	r2, [r3, #16]
 800f0ea:	e019      	b.n	800f120 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f0ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d115      	bne.n	800f120 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f0f4:	7ebb      	ldrb	r3, [r7, #26]
 800f0f6:	f003 0310 	and.w	r3, r3, #16
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f0fe:	2304      	movs	r3, #4
 800f100:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f104:	e00c      	b.n	800f120 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f106:	79fb      	ldrb	r3, [r7, #7]
 800f108:	f003 0302 	and.w	r3, r3, #2
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d007      	beq.n	800f120 <f_open+0x1d4>
 800f110:	7ebb      	ldrb	r3, [r7, #26]
 800f112:	f003 0301 	and.w	r3, r3, #1
 800f116:	2b00      	cmp	r3, #0
 800f118:	d002      	beq.n	800f120 <f_open+0x1d4>
						res = FR_DENIED;
 800f11a:	2307      	movs	r3, #7
 800f11c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f120:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f124:	2b00      	cmp	r3, #0
 800f126:	d128      	bne.n	800f17a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f128:	79fb      	ldrb	r3, [r7, #7]
 800f12a:	f003 0308 	and.w	r3, r3, #8
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d003      	beq.n	800f13a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f132:	79fb      	ldrb	r3, [r7, #7]
 800f134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f138:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f148:	79fb      	ldrb	r3, [r7, #7]
 800f14a:	f023 0301 	bic.w	r3, r3, #1
 800f14e:	2b00      	cmp	r3, #0
 800f150:	bf14      	ite	ne
 800f152:	2301      	movne	r3, #1
 800f154:	2300      	moveq	r3, #0
 800f156:	b2db      	uxtb	r3, r3
 800f158:	461a      	mov	r2, r3
 800f15a:	f107 0314 	add.w	r3, r7, #20
 800f15e:	4611      	mov	r1, r2
 800f160:	4618      	mov	r0, r3
 800f162:	f7fe fb53 	bl	800d80c <inc_lock>
 800f166:	4602      	mov	r2, r0
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	691b      	ldr	r3, [r3, #16]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d102      	bne.n	800f17a <f_open+0x22e>
 800f174:	2302      	movs	r3, #2
 800f176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f17a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f040 8095 	bne.w	800f2ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f188:	4611      	mov	r1, r2
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff f977 	bl	800e47e <ld_clust>
 800f190:	4602      	mov	r2, r0
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f198:	331c      	adds	r3, #28
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fe f99e 	bl	800d4dc <ld_dword>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f1ac:	693a      	ldr	r2, [r7, #16]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	88da      	ldrh	r2, [r3, #6]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	79fa      	ldrb	r2, [r7, #7]
 800f1be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	3330      	adds	r3, #48	; 0x30
 800f1d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1da:	2100      	movs	r1, #0
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7fe fa08 	bl	800d5f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f1e2:	79fb      	ldrb	r3, [r7, #7]
 800f1e4:	f003 0320 	and.w	r3, r3, #32
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d060      	beq.n	800f2ae <f_open+0x362>
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d05c      	beq.n	800f2ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	68da      	ldr	r2, [r3, #12]
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	895b      	ldrh	r3, [r3, #10]
 800f200:	025b      	lsls	r3, r3, #9
 800f202:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	689b      	ldr	r3, [r3, #8]
 800f208:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	657b      	str	r3, [r7, #84]	; 0x54
 800f210:	e016      	b.n	800f240 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f216:	4618      	mov	r0, r3
 800f218:	f7fe fce5 	bl	800dbe6 <get_fat>
 800f21c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f21e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f220:	2b01      	cmp	r3, #1
 800f222:	d802      	bhi.n	800f22a <f_open+0x2de>
 800f224:	2302      	movs	r3, #2
 800f226:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f22a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f230:	d102      	bne.n	800f238 <f_open+0x2ec>
 800f232:	2301      	movs	r3, #1
 800f234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f23a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	657b      	str	r3, [r7, #84]	; 0x54
 800f240:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f244:	2b00      	cmp	r3, #0
 800f246:	d103      	bne.n	800f250 <f_open+0x304>
 800f248:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d8e0      	bhi.n	800f212 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f254:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d127      	bne.n	800f2ae <f_open+0x362>
 800f25e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f264:	2b00      	cmp	r3, #0
 800f266:	d022      	beq.n	800f2ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fe fc9b 	bl	800dba8 <clust2sect>
 800f272:	6478      	str	r0, [r7, #68]	; 0x44
 800f274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f276:	2b00      	cmp	r3, #0
 800f278:	d103      	bne.n	800f282 <f_open+0x336>
						res = FR_INT_ERR;
 800f27a:	2302      	movs	r3, #2
 800f27c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f280:	e015      	b.n	800f2ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f284:	0a5a      	lsrs	r2, r3, #9
 800f286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f288:	441a      	add	r2, r3
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	7858      	ldrb	r0, [r3, #1]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6a1a      	ldr	r2, [r3, #32]
 800f29c:	2301      	movs	r3, #1
 800f29e:	f7fe f8a7 	bl	800d3f0 <disk_read>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d002      	beq.n	800f2ae <f_open+0x362>
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f2ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d002      	beq.n	800f2bc <f_open+0x370>
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800f2c2:	4611      	mov	r1, r2
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7fe fa07 	bl	800d6d8 <unlock_fs>
 800f2ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3760      	adds	r7, #96	; 0x60
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b08c      	sub	sp, #48	; 0x30
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	60f8      	str	r0, [r7, #12]
 800f2de:	60b9      	str	r1, [r7, #8]
 800f2e0:	607a      	str	r2, [r7, #4]
 800f2e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f107 0210 	add.w	r2, r7, #16
 800f2f4:	4611      	mov	r1, r2
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7ff fd7c 	bl	800edf4 <validate>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f306:	2b00      	cmp	r3, #0
 800f308:	d107      	bne.n	800f31a <f_write+0x44>
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	7d5b      	ldrb	r3, [r3, #21]
 800f30e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f316:	2b00      	cmp	r3, #0
 800f318:	d009      	beq.n	800f32e <f_write+0x58>
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f320:	4611      	mov	r1, r2
 800f322:	4618      	mov	r0, r3
 800f324:	f7fe f9d8 	bl	800d6d8 <unlock_fs>
 800f328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f32c:	e173      	b.n	800f616 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	7d1b      	ldrb	r3, [r3, #20]
 800f332:	f003 0302 	and.w	r3, r3, #2
 800f336:	2b00      	cmp	r3, #0
 800f338:	d106      	bne.n	800f348 <f_write+0x72>
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	2107      	movs	r1, #7
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fe f9ca 	bl	800d6d8 <unlock_fs>
 800f344:	2307      	movs	r3, #7
 800f346:	e166      	b.n	800f616 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	699a      	ldr	r2, [r3, #24]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	441a      	add	r2, r3
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	699b      	ldr	r3, [r3, #24]
 800f354:	429a      	cmp	r2, r3
 800f356:	f080 814b 	bcs.w	800f5f0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	699b      	ldr	r3, [r3, #24]
 800f35e:	43db      	mvns	r3, r3
 800f360:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f362:	e145      	b.n	800f5f0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	699b      	ldr	r3, [r3, #24]
 800f368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f040 8101 	bne.w	800f574 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	699b      	ldr	r3, [r3, #24]
 800f376:	0a5b      	lsrs	r3, r3, #9
 800f378:	693a      	ldr	r2, [r7, #16]
 800f37a:	8952      	ldrh	r2, [r2, #10]
 800f37c:	3a01      	subs	r2, #1
 800f37e:	4013      	ands	r3, r2
 800f380:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d14d      	bne.n	800f424 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	699b      	ldr	r3, [r3, #24]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d10c      	bne.n	800f3aa <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d11a      	bne.n	800f3d2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2100      	movs	r1, #0
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fe fe19 	bl	800dfd8 <create_chain>
 800f3a6:	62b8      	str	r0, [r7, #40]	; 0x28
 800f3a8:	e013      	b.n	800f3d2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d007      	beq.n	800f3c2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	699b      	ldr	r3, [r3, #24]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f7fe fea5 	bl	800e108 <clmt_clust>
 800f3be:	62b8      	str	r0, [r7, #40]	; 0x28
 800f3c0:	e007      	b.n	800f3d2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f3c2:	68fa      	ldr	r2, [r7, #12]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	69db      	ldr	r3, [r3, #28]
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f7fe fe04 	bl	800dfd8 <create_chain>
 800f3d0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f000 8110 	beq.w	800f5fa <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d109      	bne.n	800f3f4 <f_write+0x11e>
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2202      	movs	r2, #2
 800f3e4:	755a      	strb	r2, [r3, #21]
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	2102      	movs	r1, #2
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fe f974 	bl	800d6d8 <unlock_fs>
 800f3f0:	2302      	movs	r3, #2
 800f3f2:	e110      	b.n	800f616 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3fa:	d109      	bne.n	800f410 <f_write+0x13a>
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2201      	movs	r2, #1
 800f400:	755a      	strb	r2, [r3, #21]
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	2101      	movs	r1, #1
 800f406:	4618      	mov	r0, r3
 800f408:	f7fe f966 	bl	800d6d8 <unlock_fs>
 800f40c:	2301      	movs	r3, #1
 800f40e:	e102      	b.n	800f616 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f414:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d102      	bne.n	800f424 <f_write+0x14e>
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f422:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	7d1b      	ldrb	r3, [r3, #20]
 800f428:	b25b      	sxtb	r3, r3
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	da1d      	bge.n	800f46a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	7858      	ldrb	r0, [r3, #1]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6a1a      	ldr	r2, [r3, #32]
 800f43c:	2301      	movs	r3, #1
 800f43e:	f7fd fff7 	bl	800d430 <disk_write>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d009      	beq.n	800f45c <f_write+0x186>
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2201      	movs	r2, #1
 800f44c:	755a      	strb	r2, [r3, #21]
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	2101      	movs	r1, #1
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe f940 	bl	800d6d8 <unlock_fs>
 800f458:	2301      	movs	r3, #1
 800f45a:	e0dc      	b.n	800f616 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	7d1b      	ldrb	r3, [r3, #20]
 800f460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f464:	b2da      	uxtb	r2, r3
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f46a:	693a      	ldr	r2, [r7, #16]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	69db      	ldr	r3, [r3, #28]
 800f470:	4619      	mov	r1, r3
 800f472:	4610      	mov	r0, r2
 800f474:	f7fe fb98 	bl	800dba8 <clust2sect>
 800f478:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d109      	bne.n	800f494 <f_write+0x1be>
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2202      	movs	r2, #2
 800f484:	755a      	strb	r2, [r3, #21]
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	2102      	movs	r1, #2
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7fe f924 	bl	800d6d8 <unlock_fs>
 800f490:	2302      	movs	r3, #2
 800f492:	e0c0      	b.n	800f616 <f_write+0x340>
			sect += csect;
 800f494:	697a      	ldr	r2, [r7, #20]
 800f496:	69bb      	ldr	r3, [r7, #24]
 800f498:	4413      	add	r3, r2
 800f49a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	0a5b      	lsrs	r3, r3, #9
 800f4a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f4a2:	6a3b      	ldr	r3, [r7, #32]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d041      	beq.n	800f52c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f4a8:	69ba      	ldr	r2, [r7, #24]
 800f4aa:	6a3b      	ldr	r3, [r7, #32]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	693a      	ldr	r2, [r7, #16]
 800f4b0:	8952      	ldrh	r2, [r2, #10]
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d905      	bls.n	800f4c2 <f_write+0x1ec>
					cc = fs->csize - csect;
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	895b      	ldrh	r3, [r3, #10]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	1ad3      	subs	r3, r2, r3
 800f4c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	7858      	ldrb	r0, [r3, #1]
 800f4c6:	6a3b      	ldr	r3, [r7, #32]
 800f4c8:	697a      	ldr	r2, [r7, #20]
 800f4ca:	69f9      	ldr	r1, [r7, #28]
 800f4cc:	f7fd ffb0 	bl	800d430 <disk_write>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d009      	beq.n	800f4ea <f_write+0x214>
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2201      	movs	r2, #1
 800f4da:	755a      	strb	r2, [r3, #21]
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	2101      	movs	r1, #1
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fe f8f9 	bl	800d6d8 <unlock_fs>
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e095      	b.n	800f616 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6a1a      	ldr	r2, [r3, #32]
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	6a3a      	ldr	r2, [r7, #32]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d915      	bls.n	800f524 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6a1a      	ldr	r2, [r3, #32]
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	1ad3      	subs	r3, r2, r3
 800f506:	025b      	lsls	r3, r3, #9
 800f508:	69fa      	ldr	r2, [r7, #28]
 800f50a:	4413      	add	r3, r2
 800f50c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f510:	4619      	mov	r1, r3
 800f512:	f7fe f84d 	bl	800d5b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	7d1b      	ldrb	r3, [r3, #20]
 800f51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f51e:	b2da      	uxtb	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f524:	6a3b      	ldr	r3, [r7, #32]
 800f526:	025b      	lsls	r3, r3, #9
 800f528:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f52a:	e044      	b.n	800f5b6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6a1b      	ldr	r3, [r3, #32]
 800f530:	697a      	ldr	r2, [r7, #20]
 800f532:	429a      	cmp	r2, r3
 800f534:	d01b      	beq.n	800f56e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	699a      	ldr	r2, [r3, #24]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f53e:	429a      	cmp	r2, r3
 800f540:	d215      	bcs.n	800f56e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	7858      	ldrb	r0, [r3, #1]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f54c:	2301      	movs	r3, #1
 800f54e:	697a      	ldr	r2, [r7, #20]
 800f550:	f7fd ff4e 	bl	800d3f0 <disk_read>
 800f554:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f556:	2b00      	cmp	r3, #0
 800f558:	d009      	beq.n	800f56e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2201      	movs	r2, #1
 800f55e:	755a      	strb	r2, [r3, #21]
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	2101      	movs	r1, #1
 800f564:	4618      	mov	r0, r3
 800f566:	f7fe f8b7 	bl	800d6d8 <unlock_fs>
 800f56a:	2301      	movs	r3, #1
 800f56c:	e053      	b.n	800f616 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	697a      	ldr	r2, [r7, #20]
 800f572:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	699b      	ldr	r3, [r3, #24]
 800f578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f57c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f580:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	429a      	cmp	r2, r3
 800f588:	d901      	bls.n	800f58e <f_write+0x2b8>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	699b      	ldr	r3, [r3, #24]
 800f598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f59c:	4413      	add	r3, r2
 800f59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5a0:	69f9      	ldr	r1, [r7, #28]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fe f804 	bl	800d5b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	7d1b      	ldrb	r3, [r3, #20]
 800f5ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f5b0:	b2da      	uxtb	r2, r3
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f5b6:	69fa      	ldr	r2, [r7, #28]
 800f5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ba:	4413      	add	r3, r2
 800f5bc:	61fb      	str	r3, [r7, #28]
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	699a      	ldr	r2, [r3, #24]
 800f5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c4:	441a      	add	r2, r3
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	619a      	str	r2, [r3, #24]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	68da      	ldr	r2, [r3, #12]
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	699b      	ldr	r3, [r3, #24]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	bf38      	it	cc
 800f5d6:	461a      	movcc	r2, r3
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	60da      	str	r2, [r3, #12]
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	441a      	add	r2, r3
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	601a      	str	r2, [r3, #0]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ec:	1ad3      	subs	r3, r2, r3
 800f5ee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	f47f aeb6 	bne.w	800f364 <f_write+0x8e>
 800f5f8:	e000      	b.n	800f5fc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f5fa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	7d1b      	ldrb	r3, [r3, #20]
 800f600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f604:	b2da      	uxtb	r2, r3
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	2100      	movs	r1, #0
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fe f862 	bl	800d6d8 <unlock_fs>
 800f614:	2300      	movs	r3, #0
}
 800f616:	4618      	mov	r0, r3
 800f618:	3730      	adds	r7, #48	; 0x30
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}

0800f61e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f61e:	b580      	push	{r7, lr}
 800f620:	b086      	sub	sp, #24
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f107 0208 	add.w	r2, r7, #8
 800f62c:	4611      	mov	r1, r2
 800f62e:	4618      	mov	r0, r3
 800f630:	f7ff fbe0 	bl	800edf4 <validate>
 800f634:	4603      	mov	r3, r0
 800f636:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f638:	7dfb      	ldrb	r3, [r7, #23]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d16d      	bne.n	800f71a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	7d1b      	ldrb	r3, [r3, #20]
 800f642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f646:	2b00      	cmp	r3, #0
 800f648:	d067      	beq.n	800f71a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	7d1b      	ldrb	r3, [r3, #20]
 800f64e:	b25b      	sxtb	r3, r3
 800f650:	2b00      	cmp	r3, #0
 800f652:	da1a      	bge.n	800f68a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	7858      	ldrb	r0, [r3, #1]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6a1a      	ldr	r2, [r3, #32]
 800f662:	2301      	movs	r3, #1
 800f664:	f7fd fee4 	bl	800d430 <disk_write>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d006      	beq.n	800f67c <f_sync+0x5e>
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2101      	movs	r1, #1
 800f672:	4618      	mov	r0, r3
 800f674:	f7fe f830 	bl	800d6d8 <unlock_fs>
 800f678:	2301      	movs	r3, #1
 800f67a:	e055      	b.n	800f728 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	7d1b      	ldrb	r3, [r3, #20]
 800f680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f684:	b2da      	uxtb	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f68a:	f7fd fc01 	bl	800ce90 <get_fattime>
 800f68e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f690:	68ba      	ldr	r2, [r7, #8]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f696:	4619      	mov	r1, r3
 800f698:	4610      	mov	r0, r2
 800f69a:	f7fe f9e9 	bl	800da70 <move_window>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f6a2:	7dfb      	ldrb	r3, [r7, #23]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d138      	bne.n	800f71a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	330b      	adds	r3, #11
 800f6b2:	781a      	ldrb	r2, [r3, #0]
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	330b      	adds	r3, #11
 800f6b8:	f042 0220 	orr.w	r2, r2, #32
 800f6bc:	b2d2      	uxtb	r2, r2
 800f6be:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6818      	ldr	r0, [r3, #0]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	689b      	ldr	r3, [r3, #8]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	68f9      	ldr	r1, [r7, #12]
 800f6cc:	f7fe fef6 	bl	800e4bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f103 021c 	add.w	r2, r3, #28
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	4619      	mov	r1, r3
 800f6dc:	4610      	mov	r0, r2
 800f6de:	f7fd ff3b 	bl	800d558 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	3316      	adds	r3, #22
 800f6e6:	6939      	ldr	r1, [r7, #16]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fd ff35 	bl	800d558 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3312      	adds	r3, #18
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fd ff14 	bl	800d522 <st_word>
					fs->wflag = 1;
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	4618      	mov	r0, r3
 800f704:	f7fe f9e2 	bl	800dacc <sync_fs>
 800f708:	4603      	mov	r3, r0
 800f70a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	7d1b      	ldrb	r3, [r3, #20]
 800f710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f714:	b2da      	uxtb	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	7dfa      	ldrb	r2, [r7, #23]
 800f71e:	4611      	mov	r1, r2
 800f720:	4618      	mov	r0, r3
 800f722:	f7fd ffd9 	bl	800d6d8 <unlock_fs>
 800f726:	7dfb      	ldrb	r3, [r7, #23]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3718      	adds	r7, #24
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b084      	sub	sp, #16
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f7ff ff70 	bl	800f61e <f_sync>
 800f73e:	4603      	mov	r3, r0
 800f740:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f742:	7bfb      	ldrb	r3, [r7, #15]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d11d      	bne.n	800f784 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f107 0208 	add.w	r2, r7, #8
 800f74e:	4611      	mov	r1, r2
 800f750:	4618      	mov	r0, r3
 800f752:	f7ff fb4f 	bl	800edf4 <validate>
 800f756:	4603      	mov	r3, r0
 800f758:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f75a:	7bfb      	ldrb	r3, [r7, #15]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d111      	bne.n	800f784 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	691b      	ldr	r3, [r3, #16]
 800f764:	4618      	mov	r0, r3
 800f766:	f7fe f8df 	bl	800d928 <dec_lock>
 800f76a:	4603      	mov	r3, r0
 800f76c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f76e:	7bfb      	ldrb	r3, [r7, #15]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d102      	bne.n	800f77a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2200      	movs	r2, #0
 800f778:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	2100      	movs	r1, #0
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fd ffaa 	bl	800d6d8 <unlock_fs>
#endif
		}
	}
	return res;
 800f784:	7bfb      	ldrb	r3, [r7, #15]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
	...

0800f790 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f790:	b590      	push	{r4, r7, lr}
 800f792:	b09d      	sub	sp, #116	; 0x74
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	607a      	str	r2, [r7, #4]
 800f79a:	603b      	str	r3, [r7, #0]
 800f79c:	460b      	mov	r3, r1
 800f79e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f7a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7a8:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f7aa:	f107 030c 	add.w	r3, r7, #12
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7ff f831 	bl	800e816 <get_ldnumber>
 800f7b4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	da02      	bge.n	800f7c2 <f_mkfs+0x32>
 800f7bc:	230b      	movs	r3, #11
 800f7be:	f000 bc0d 	b.w	800ffdc <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f7c2:	4a94      	ldr	r2, [pc, #592]	; (800fa14 <f_mkfs+0x284>)
 800f7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d005      	beq.n	800f7da <f_mkfs+0x4a>
 800f7ce:	4a91      	ldr	r2, [pc, #580]	; (800fa14 <f_mkfs+0x284>)
 800f7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f7e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fd fdda 	bl	800d3a4 <disk_initialize>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f7f6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f7fa:	f003 0301 	and.w	r3, r3, #1
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d001      	beq.n	800f806 <f_mkfs+0x76>
 800f802:	2303      	movs	r3, #3
 800f804:	e3ea      	b.n	800ffdc <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f806:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f80a:	f003 0304 	and.w	r3, r3, #4
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d001      	beq.n	800f816 <f_mkfs+0x86>
 800f812:	230a      	movs	r3, #10
 800f814:	e3e2      	b.n	800ffdc <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f816:	f107 0214 	add.w	r2, r7, #20
 800f81a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f81e:	2103      	movs	r1, #3
 800f820:	4618      	mov	r0, r3
 800f822:	f7fd fe25 	bl	800d470 <disk_ioctl>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10c      	bne.n	800f846 <f_mkfs+0xb6>
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d009      	beq.n	800f846 <f_mkfs+0xb6>
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f838:	d805      	bhi.n	800f846 <f_mkfs+0xb6>
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	1e5a      	subs	r2, r3, #1
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	4013      	ands	r3, r2
 800f842:	2b00      	cmp	r3, #0
 800f844:	d001      	beq.n	800f84a <f_mkfs+0xba>
 800f846:	2301      	movs	r3, #1
 800f848:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f84a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f84e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d003      	beq.n	800f85e <f_mkfs+0xce>
 800f856:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d309      	bcc.n	800f872 <f_mkfs+0xe2>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f864:	d805      	bhi.n	800f872 <f_mkfs+0xe2>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	1e5a      	subs	r2, r3, #1
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4013      	ands	r3, r2
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d001      	beq.n	800f876 <f_mkfs+0xe6>
 800f872:	2313      	movs	r3, #19
 800f874:	e3b2      	b.n	800ffdc <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f876:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f87e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f886:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f88e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f890:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f894:	fb02 f303 	mul.w	r3, r2, r3
 800f898:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d101      	bne.n	800f8a4 <f_mkfs+0x114>
 800f8a0:	230e      	movs	r3, #14
 800f8a2:	e39b      	b.n	800ffdc <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f8a4:	f107 0210 	add.w	r2, r7, #16
 800f8a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f8ac:	2101      	movs	r1, #1
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fd fdde 	bl	800d470 <disk_ioctl>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d001      	beq.n	800f8be <f_mkfs+0x12e>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e38e      	b.n	800ffdc <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f8be:	7afb      	ldrb	r3, [r7, #11]
 800f8c0:	f003 0308 	and.w	r3, r3, #8
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d001      	beq.n	800f8cc <f_mkfs+0x13c>
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	e000      	b.n	800f8ce <f_mkfs+0x13e>
 800f8cc:	233f      	movs	r3, #63	; 0x3f
 800f8ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d901      	bls.n	800f8dc <f_mkfs+0x14c>
 800f8d8:	230e      	movs	r3, #14
 800f8da:	e37f      	b.n	800ffdc <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f8dc:	693a      	ldr	r2, [r7, #16]
 800f8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	2b7f      	cmp	r3, #127	; 0x7f
 800f8e8:	d801      	bhi.n	800f8ee <f_mkfs+0x15e>
 800f8ea:	230e      	movs	r3, #14
 800f8ec:	e376      	b.n	800ffdc <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2b80      	cmp	r3, #128	; 0x80
 800f8f2:	d901      	bls.n	800f8f8 <f_mkfs+0x168>
 800f8f4:	2313      	movs	r3, #19
 800f8f6:	e371      	b.n	800ffdc <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f8f8:	7afb      	ldrb	r3, [r7, #11]
 800f8fa:	f003 0302 	and.w	r3, r3, #2
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00d      	beq.n	800f91e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f902:	7afb      	ldrb	r3, [r7, #11]
 800f904:	f003 0307 	and.w	r3, r3, #7
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d004      	beq.n	800f916 <f_mkfs+0x186>
 800f90c:	7afb      	ldrb	r3, [r7, #11]
 800f90e:	f003 0301 	and.w	r3, r3, #1
 800f912:	2b00      	cmp	r3, #0
 800f914:	d103      	bne.n	800f91e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f916:	2303      	movs	r3, #3
 800f918:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f91c:	e009      	b.n	800f932 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f91e:	7afb      	ldrb	r3, [r7, #11]
 800f920:	f003 0301 	and.w	r3, r3, #1
 800f924:	2b00      	cmp	r3, #0
 800f926:	d101      	bne.n	800f92c <f_mkfs+0x19c>
 800f928:	2313      	movs	r3, #19
 800f92a:	e357      	b.n	800ffdc <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f92c:	2302      	movs	r3, #2
 800f92e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f936:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f93a:	2b03      	cmp	r3, #3
 800f93c:	d13c      	bne.n	800f9b8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f93e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f940:	2b00      	cmp	r3, #0
 800f942:	d11b      	bne.n	800f97c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	0c5b      	lsrs	r3, r3, #17
 800f948:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f94a:	2300      	movs	r3, #0
 800f94c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f94e:	2301      	movs	r3, #1
 800f950:	653b      	str	r3, [r7, #80]	; 0x50
 800f952:	e005      	b.n	800f960 <f_mkfs+0x1d0>
 800f954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f956:	3301      	adds	r3, #1
 800f958:	64bb      	str	r3, [r7, #72]	; 0x48
 800f95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f95c:	005b      	lsls	r3, r3, #1
 800f95e:	653b      	str	r3, [r7, #80]	; 0x50
 800f960:	4a2d      	ldr	r2, [pc, #180]	; (800fa18 <f_mkfs+0x288>)
 800f962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d007      	beq.n	800f97c <f_mkfs+0x1ec>
 800f96c:	4a2a      	ldr	r2, [pc, #168]	; (800fa18 <f_mkfs+0x288>)
 800f96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f974:	461a      	mov	r2, r3
 800f976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f978:	4293      	cmp	r3, r2
 800f97a:	d2eb      	bcs.n	800f954 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f97c:	693a      	ldr	r2, [r7, #16]
 800f97e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f980:	fbb2 f3f3 	udiv	r3, r2, r3
 800f984:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f986:	6a3b      	ldr	r3, [r7, #32]
 800f988:	3302      	adds	r3, #2
 800f98a:	009a      	lsls	r2, r3, #2
 800f98c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f98e:	4413      	add	r3, r2
 800f990:	1e5a      	subs	r2, r3, #1
 800f992:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f994:	fbb2 f3f3 	udiv	r3, r2, r3
 800f998:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800f99a:	2320      	movs	r3, #32
 800f99c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800f99e:	2300      	movs	r3, #0
 800f9a0:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f9a2:	6a3b      	ldr	r3, [r7, #32]
 800f9a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d903      	bls.n	800f9b4 <f_mkfs+0x224>
 800f9ac:	6a3b      	ldr	r3, [r7, #32]
 800f9ae:	4a1b      	ldr	r2, [pc, #108]	; (800fa1c <f_mkfs+0x28c>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d952      	bls.n	800fa5a <f_mkfs+0x2ca>
 800f9b4:	230e      	movs	r3, #14
 800f9b6:	e311      	b.n	800ffdc <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d11b      	bne.n	800f9f6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	0b1b      	lsrs	r3, r3, #12
 800f9c2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	653b      	str	r3, [r7, #80]	; 0x50
 800f9cc:	e005      	b.n	800f9da <f_mkfs+0x24a>
 800f9ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9d6:	005b      	lsls	r3, r3, #1
 800f9d8:	653b      	str	r3, [r7, #80]	; 0x50
 800f9da:	4a11      	ldr	r2, [pc, #68]	; (800fa20 <f_mkfs+0x290>)
 800f9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d007      	beq.n	800f9f6 <f_mkfs+0x266>
 800f9e6:	4a0e      	ldr	r2, [pc, #56]	; (800fa20 <f_mkfs+0x290>)
 800f9e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d2eb      	bcs.n	800f9ce <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f9f6:	693a      	ldr	r2, [r7, #16]
 800f9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9fe:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800fa00:	6a3b      	ldr	r3, [r7, #32]
 800fa02:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d90c      	bls.n	800fa24 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800fa0a:	6a3b      	ldr	r3, [r7, #32]
 800fa0c:	3302      	adds	r3, #2
 800fa0e:	005b      	lsls	r3, r3, #1
 800fa10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa12:	e012      	b.n	800fa3a <f_mkfs+0x2aa>
 800fa14:	2000069c 	.word	0x2000069c
 800fa18:	08015148 	.word	0x08015148
 800fa1c:	0ffffff5 	.word	0x0ffffff5
 800fa20:	08015158 	.word	0x08015158
				} else {
					fmt = FS_FAT12;
 800fa24:	2301      	movs	r3, #1
 800fa26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800fa2a:	6a3a      	ldr	r2, [r7, #32]
 800fa2c:	4613      	mov	r3, r2
 800fa2e:	005b      	lsls	r3, r3, #1
 800fa30:	4413      	add	r3, r2
 800fa32:	3301      	adds	r3, #1
 800fa34:	085b      	lsrs	r3, r3, #1
 800fa36:	3303      	adds	r3, #3
 800fa38:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800fa3a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fa3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa3e:	4413      	add	r3, r2
 800fa40:	1e5a      	subs	r2, r3, #1
 800fa42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fa44:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa48:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800fa4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa50:	015a      	lsls	r2, r3, #5
 800fa52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fa54:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa58:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800fa5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa5e:	4413      	add	r3, r2
 800fa60:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800fa62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa66:	fb02 f203 	mul.w	r2, r2, r3
 800fa6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa6c:	4413      	add	r3, r2
 800fa6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fa70:	4413      	add	r3, r2
 800fa72:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800fa74:	697a      	ldr	r2, [r7, #20]
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	4413      	add	r3, r2
 800fa7a:	1e5a      	subs	r2, r3, #1
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	425b      	negs	r3, r3
 800fa80:	401a      	ands	r2, r3
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	1ad3      	subs	r3, r2, r3
 800fa86:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800fa88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa8c:	2b03      	cmp	r3, #3
 800fa8e:	d108      	bne.n	800faa2 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800fa90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fa92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa94:	4413      	add	r3, r2
 800fa96:	657b      	str	r3, [r7, #84]	; 0x54
 800fa98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa9c:	4413      	add	r3, r2
 800fa9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800faa0:	e006      	b.n	800fab0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800faa2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800faa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800faaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800faac:	4413      	add	r3, r2
 800faae:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800fab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fab2:	011a      	lsls	r2, r3, #4
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	441a      	add	r2, r3
 800fab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faba:	1ad2      	subs	r2, r2, r3
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d901      	bls.n	800fac6 <f_mkfs+0x336>
 800fac2:	230e      	movs	r3, #14
 800fac4:	e28a      	b.n	800ffdc <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800fac6:	693a      	ldr	r2, [r7, #16]
 800fac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faca:	1ad2      	subs	r2, r2, r3
 800facc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800face:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fad0:	fb01 f303 	mul.w	r3, r1, r3
 800fad4:	1ad2      	subs	r2, r2, r3
 800fad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fad8:	1ad2      	subs	r2, r2, r3
 800fada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fadc:	fbb2 f3f3 	udiv	r3, r2, r3
 800fae0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800fae2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fae6:	2b03      	cmp	r3, #3
 800fae8:	d10f      	bne.n	800fb0a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800faea:	6a3b      	ldr	r3, [r7, #32]
 800faec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d80a      	bhi.n	800fb0a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d105      	bne.n	800fb06 <f_mkfs+0x376>
 800fafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fafc:	085b      	lsrs	r3, r3, #1
 800fafe:	607b      	str	r3, [r7, #4]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d144      	bne.n	800fb90 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800fb06:	230e      	movs	r3, #14
 800fb08:	e268      	b.n	800ffdc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800fb0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb0e:	2b02      	cmp	r3, #2
 800fb10:	d133      	bne.n	800fb7a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800fb12:	6a3b      	ldr	r3, [r7, #32]
 800fb14:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d91e      	bls.n	800fb5a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d107      	bne.n	800fb32 <f_mkfs+0x3a2>
 800fb22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb24:	005b      	lsls	r3, r3, #1
 800fb26:	2b40      	cmp	r3, #64	; 0x40
 800fb28:	d803      	bhi.n	800fb32 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800fb2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb2c:	005b      	lsls	r3, r3, #1
 800fb2e:	607b      	str	r3, [r7, #4]
 800fb30:	e033      	b.n	800fb9a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800fb32:	7afb      	ldrb	r3, [r7, #11]
 800fb34:	f003 0302 	and.w	r3, r3, #2
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d003      	beq.n	800fb44 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800fb3c:	2303      	movs	r3, #3
 800fb3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fb42:	e02a      	b.n	800fb9a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d105      	bne.n	800fb56 <f_mkfs+0x3c6>
 800fb4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb4c:	005b      	lsls	r3, r3, #1
 800fb4e:	607b      	str	r3, [r7, #4]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2b80      	cmp	r3, #128	; 0x80
 800fb54:	d91e      	bls.n	800fb94 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800fb56:	230e      	movs	r3, #14
 800fb58:	e240      	b.n	800ffdc <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800fb5a:	6a3b      	ldr	r3, [r7, #32]
 800fb5c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d80a      	bhi.n	800fb7a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d105      	bne.n	800fb76 <f_mkfs+0x3e6>
 800fb6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb6c:	005b      	lsls	r3, r3, #1
 800fb6e:	607b      	str	r3, [r7, #4]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2b80      	cmp	r3, #128	; 0x80
 800fb74:	d910      	bls.n	800fb98 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800fb76:	230e      	movs	r3, #14
 800fb78:	e230      	b.n	800ffdc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800fb7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d10c      	bne.n	800fb9c <f_mkfs+0x40c>
 800fb82:	6a3b      	ldr	r3, [r7, #32]
 800fb84:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d907      	bls.n	800fb9c <f_mkfs+0x40c>
 800fb8c:	230e      	movs	r3, #14
 800fb8e:	e225      	b.n	800ffdc <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800fb90:	bf00      	nop
 800fb92:	e6ce      	b.n	800f932 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fb94:	bf00      	nop
 800fb96:	e6cc      	b.n	800f932 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fb98:	bf00      	nop
			pau = au;
 800fb9a:	e6ca      	b.n	800f932 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800fb9c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800fb9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fba0:	461a      	mov	r2, r3
 800fba2:	2100      	movs	r1, #0
 800fba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fba6:	f7fd fd24 	bl	800d5f2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800fbaa:	220b      	movs	r2, #11
 800fbac:	49bc      	ldr	r1, [pc, #752]	; (800fea0 <f_mkfs+0x710>)
 800fbae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbb0:	f7fd fcfe 	bl	800d5b0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800fbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb6:	330b      	adds	r3, #11
 800fbb8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fbba:	4611      	mov	r1, r2
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7fd fcb0 	bl	800d522 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc4:	330d      	adds	r3, #13
 800fbc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbc8:	b2d2      	uxtb	r2, r2
 800fbca:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800fbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbce:	330e      	adds	r3, #14
 800fbd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fbd2:	b292      	uxth	r2, r2
 800fbd4:	4611      	mov	r1, r2
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fd fca3 	bl	800d522 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800fbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbde:	3310      	adds	r3, #16
 800fbe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbe2:	b2d2      	uxtb	r2, r2
 800fbe4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800fbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe8:	f103 0211 	add.w	r2, r3, #17
 800fbec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fbf0:	2b03      	cmp	r3, #3
 800fbf2:	d002      	beq.n	800fbfa <f_mkfs+0x46a>
 800fbf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	e000      	b.n	800fbfc <f_mkfs+0x46c>
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	4610      	mov	r0, r2
 800fc00:	f7fd fc8f 	bl	800d522 <st_word>
		if (sz_vol < 0x10000) {
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc0a:	d208      	bcs.n	800fc1e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800fc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0e:	3313      	adds	r3, #19
 800fc10:	693a      	ldr	r2, [r7, #16]
 800fc12:	b292      	uxth	r2, r2
 800fc14:	4611      	mov	r1, r2
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fd fc83 	bl	800d522 <st_word>
 800fc1c:	e006      	b.n	800fc2c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc20:	3320      	adds	r3, #32
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	4611      	mov	r1, r2
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fd fc96 	bl	800d558 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800fc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2e:	3315      	adds	r3, #21
 800fc30:	22f8      	movs	r2, #248	; 0xf8
 800fc32:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800fc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc36:	3318      	adds	r3, #24
 800fc38:	213f      	movs	r1, #63	; 0x3f
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fd fc71 	bl	800d522 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800fc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc42:	331a      	adds	r3, #26
 800fc44:	21ff      	movs	r1, #255	; 0xff
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7fd fc6b 	bl	800d522 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4e:	331c      	adds	r3, #28
 800fc50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fd fc80 	bl	800d558 <st_dword>
		if (fmt == FS_FAT32) {
 800fc58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fc5c:	2b03      	cmp	r3, #3
 800fc5e:	d131      	bne.n	800fcc4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800fc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc62:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800fc66:	f7fd f913 	bl	800ce90 <get_fattime>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	4620      	mov	r0, r4
 800fc70:	f7fd fc72 	bl	800d558 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800fc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc76:	3324      	adds	r3, #36	; 0x24
 800fc78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7fd fc6c 	bl	800d558 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800fc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc82:	332c      	adds	r3, #44	; 0x2c
 800fc84:	2102      	movs	r1, #2
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fd fc66 	bl	800d558 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800fc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8e:	3330      	adds	r3, #48	; 0x30
 800fc90:	2101      	movs	r1, #1
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fd fc45 	bl	800d522 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800fc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9a:	3332      	adds	r3, #50	; 0x32
 800fc9c:	2106      	movs	r1, #6
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fd fc3f 	bl	800d522 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800fca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca6:	3340      	adds	r3, #64	; 0x40
 800fca8:	2280      	movs	r2, #128	; 0x80
 800fcaa:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800fcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcae:	3342      	adds	r3, #66	; 0x42
 800fcb0:	2229      	movs	r2, #41	; 0x29
 800fcb2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800fcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb6:	3347      	adds	r3, #71	; 0x47
 800fcb8:	2213      	movs	r2, #19
 800fcba:	497a      	ldr	r1, [pc, #488]	; (800fea4 <f_mkfs+0x714>)
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fd fc77 	bl	800d5b0 <mem_cpy>
 800fcc2:	e020      	b.n	800fd06 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800fcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800fcca:	f7fd f8e1 	bl	800ce90 <get_fattime>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f7fd fc40 	bl	800d558 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800fcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcda:	3316      	adds	r3, #22
 800fcdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fcde:	b292      	uxth	r2, r2
 800fce0:	4611      	mov	r1, r2
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fd fc1d 	bl	800d522 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800fce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcea:	3324      	adds	r3, #36	; 0x24
 800fcec:	2280      	movs	r2, #128	; 0x80
 800fcee:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	3326      	adds	r3, #38	; 0x26
 800fcf4:	2229      	movs	r2, #41	; 0x29
 800fcf6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800fcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfa:	332b      	adds	r3, #43	; 0x2b
 800fcfc:	2213      	movs	r2, #19
 800fcfe:	496a      	ldr	r1, [pc, #424]	; (800fea8 <f_mkfs+0x718>)
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fd fc55 	bl	800d5b0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800fd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fd0c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7fd fc06 	bl	800d522 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800fd16:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd20:	f7fd fb86 	bl	800d430 <disk_write>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d001      	beq.n	800fd2e <f_mkfs+0x59e>
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	e156      	b.n	800ffdc <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800fd2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fd32:	2b03      	cmp	r3, #3
 800fd34:	d140      	bne.n	800fdb8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800fd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd38:	1d9a      	adds	r2, r3, #6
 800fd3a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fd3e:	2301      	movs	r3, #1
 800fd40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd42:	f7fd fb75 	bl	800d430 <disk_write>
			mem_set(buf, 0, ss);
 800fd46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd48:	461a      	mov	r2, r3
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd4e:	f7fd fc50 	bl	800d5f2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800fd52:	4956      	ldr	r1, [pc, #344]	; (800feac <f_mkfs+0x71c>)
 800fd54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd56:	f7fd fbff 	bl	800d558 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800fd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fd60:	4953      	ldr	r1, [pc, #332]	; (800feb0 <f_mkfs+0x720>)
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fd fbf8 	bl	800d558 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800fd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fd6e:	6a3b      	ldr	r3, [r7, #32]
 800fd70:	3b01      	subs	r3, #1
 800fd72:	4619      	mov	r1, r3
 800fd74:	4610      	mov	r0, r2
 800fd76:	f7fd fbef 	bl	800d558 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fd80:	2102      	movs	r1, #2
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fd fbe8 	bl	800d558 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800fd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fd8e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fd fbc5 	bl	800d522 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800fd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9a:	1dda      	adds	r2, r3, #7
 800fd9c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fda0:	2301      	movs	r3, #1
 800fda2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fda4:	f7fd fb44 	bl	800d430 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800fda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdaa:	1c5a      	adds	r2, r3, #1
 800fdac:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fdb4:	f7fd fb3c 	bl	800d430 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800fdb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdba:	2100      	movs	r1, #0
 800fdbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdbe:	f7fd fc18 	bl	800d5f2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800fdc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fdc4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fdca:	e04b      	b.n	800fe64 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800fdcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fdd0:	2b03      	cmp	r3, #3
 800fdd2:	d113      	bne.n	800fdfc <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800fdd4:	f06f 0107 	mvn.w	r1, #7
 800fdd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdda:	f7fd fbbd 	bl	800d558 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800fdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde0:	3304      	adds	r3, #4
 800fde2:	f04f 31ff 	mov.w	r1, #4294967295
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fd fbb6 	bl	800d558 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800fdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdee:	3308      	adds	r3, #8
 800fdf0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7fd fbaf 	bl	800d558 <st_dword>
 800fdfa:	e00b      	b.n	800fe14 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800fdfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d101      	bne.n	800fe08 <f_mkfs+0x678>
 800fe04:	4b2b      	ldr	r3, [pc, #172]	; (800feb4 <f_mkfs+0x724>)
 800fe06:	e001      	b.n	800fe0c <f_mkfs+0x67c>
 800fe08:	f06f 0307 	mvn.w	r3, #7
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe10:	f7fd fba2 	bl	800d558 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800fe14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe16:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800fe18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	bf28      	it	cs
 800fe20:	4613      	movcs	r3, r2
 800fe22:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800fe24:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fe28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe2e:	f7fd faff 	bl	800d430 <disk_write>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d001      	beq.n	800fe3c <f_mkfs+0x6ac>
 800fe38:	2301      	movs	r3, #1
 800fe3a:	e0cf      	b.n	800ffdc <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800fe3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe3e:	461a      	mov	r2, r3
 800fe40:	2100      	movs	r1, #0
 800fe42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe44:	f7fd fbd5 	bl	800d5f2 <mem_set>
				sect += n; nsect -= n;
 800fe48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe4c:	4413      	add	r3, r2
 800fe4e:	667b      	str	r3, [r7, #100]	; 0x64
 800fe50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800fe58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d1dc      	bne.n	800fe18 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800fe5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe60:	3301      	adds	r3, #1
 800fe62:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d3af      	bcc.n	800fdcc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800fe6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe70:	2b03      	cmp	r3, #3
 800fe72:	d101      	bne.n	800fe78 <f_mkfs+0x6e8>
 800fe74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe76:	e000      	b.n	800fe7a <f_mkfs+0x6ea>
 800fe78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe7a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800fe7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe80:	4293      	cmp	r3, r2
 800fe82:	bf28      	it	cs
 800fe84:	4613      	movcs	r3, r2
 800fe86:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800fe88:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fe8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe92:	f7fd facd 	bl	800d430 <disk_write>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d00d      	beq.n	800feb8 <f_mkfs+0x728>
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e09d      	b.n	800ffdc <f_mkfs+0x84c>
 800fea0:	0801312c 	.word	0x0801312c
 800fea4:	08013138 	.word	0x08013138
 800fea8:	0801314c 	.word	0x0801314c
 800feac:	41615252 	.word	0x41615252
 800feb0:	61417272 	.word	0x61417272
 800feb4:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800feb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800feba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800febc:	4413      	add	r3, r2
 800febe:	667b      	str	r3, [r7, #100]	; 0x64
 800fec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fec4:	1ad3      	subs	r3, r2, r3
 800fec6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800fec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d1d6      	bne.n	800fe7c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800fece:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fed2:	2b03      	cmp	r3, #3
 800fed4:	d103      	bne.n	800fede <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800fed6:	230c      	movs	r3, #12
 800fed8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fedc:	e010      	b.n	800ff00 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fee4:	d303      	bcc.n	800feee <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800fee6:	2306      	movs	r3, #6
 800fee8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800feec:	e008      	b.n	800ff00 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800feee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fef2:	2b02      	cmp	r3, #2
 800fef4:	d101      	bne.n	800fefa <f_mkfs+0x76a>
 800fef6:	2304      	movs	r3, #4
 800fef8:	e000      	b.n	800fefc <f_mkfs+0x76c>
 800fefa:	2301      	movs	r3, #1
 800fefc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ff00:	7afb      	ldrb	r3, [r7, #11]
 800ff02:	f003 0308 	and.w	r3, r3, #8
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d15b      	bne.n	800ffc2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ff0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	2100      	movs	r1, #0
 800ff10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff12:	f7fd fb6e 	bl	800d5f2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ff16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff1c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7fd fafe 	bl	800d522 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ff26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ff2c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ff2e:	69bb      	ldr	r3, [r7, #24]
 800ff30:	2200      	movs	r2, #0
 800ff32:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ff34:	69bb      	ldr	r3, [r7, #24]
 800ff36:	3301      	adds	r3, #1
 800ff38:	2201      	movs	r2, #1
 800ff3a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	3302      	adds	r3, #2
 800ff40:	2201      	movs	r2, #1
 800ff42:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ff44:	69bb      	ldr	r3, [r7, #24]
 800ff46:	3303      	adds	r3, #3
 800ff48:	2200      	movs	r2, #0
 800ff4a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ff4c:	69bb      	ldr	r3, [r7, #24]
 800ff4e:	3304      	adds	r3, #4
 800ff50:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ff54:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ff56:	693a      	ldr	r2, [r7, #16]
 800ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5a:	441a      	add	r2, r3
 800ff5c:	4b21      	ldr	r3, [pc, #132]	; (800ffe4 <f_mkfs+0x854>)
 800ff5e:	fba3 1302 	umull	r1, r3, r3, r2
 800ff62:	1ad2      	subs	r2, r2, r3
 800ff64:	0852      	lsrs	r2, r2, #1
 800ff66:	4413      	add	r3, r2
 800ff68:	0b5b      	lsrs	r3, r3, #13
 800ff6a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	3305      	adds	r3, #5
 800ff70:	22fe      	movs	r2, #254	; 0xfe
 800ff72:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ff74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff76:	089b      	lsrs	r3, r3, #2
 800ff78:	b2da      	uxtb	r2, r3
 800ff7a:	69bb      	ldr	r3, [r7, #24]
 800ff7c:	3306      	adds	r3, #6
 800ff7e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ff82:	b2d2      	uxtb	r2, r2
 800ff84:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ff86:	69bb      	ldr	r3, [r7, #24]
 800ff88:	3307      	adds	r3, #7
 800ff8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ff8c:	b2d2      	uxtb	r2, r2
 800ff8e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	3308      	adds	r3, #8
 800ff94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fd fade 	bl	800d558 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	330c      	adds	r3, #12
 800ffa0:	693a      	ldr	r2, [r7, #16]
 800ffa2:	4611      	mov	r1, r2
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7fd fad7 	bl	800d558 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800ffaa:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ffae:	2301      	movs	r3, #1
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ffb4:	f7fd fa3c 	bl	800d430 <disk_write>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d001      	beq.n	800ffc2 <f_mkfs+0x832>
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	e00c      	b.n	800ffdc <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800ffc2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	2100      	movs	r1, #0
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fd fa50 	bl	800d470 <disk_ioctl>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d001      	beq.n	800ffda <f_mkfs+0x84a>
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	e000      	b.n	800ffdc <f_mkfs+0x84c>

	return FR_OK;
 800ffda:	2300      	movs	r3, #0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3774      	adds	r7, #116	; 0x74
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd90      	pop	{r4, r7, pc}
 800ffe4:	0515565b 	.word	0x0515565b

0800ffe8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b087      	sub	sp, #28
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	4613      	mov	r3, r2
 800fff4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fff6:	2301      	movs	r3, #1
 800fff8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fffe:	4b1f      	ldr	r3, [pc, #124]	; (801007c <FATFS_LinkDriverEx+0x94>)
 8010000:	7a5b      	ldrb	r3, [r3, #9]
 8010002:	b2db      	uxtb	r3, r3
 8010004:	2b00      	cmp	r3, #0
 8010006:	d131      	bne.n	801006c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010008:	4b1c      	ldr	r3, [pc, #112]	; (801007c <FATFS_LinkDriverEx+0x94>)
 801000a:	7a5b      	ldrb	r3, [r3, #9]
 801000c:	b2db      	uxtb	r3, r3
 801000e:	461a      	mov	r2, r3
 8010010:	4b1a      	ldr	r3, [pc, #104]	; (801007c <FATFS_LinkDriverEx+0x94>)
 8010012:	2100      	movs	r1, #0
 8010014:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010016:	4b19      	ldr	r3, [pc, #100]	; (801007c <FATFS_LinkDriverEx+0x94>)
 8010018:	7a5b      	ldrb	r3, [r3, #9]
 801001a:	b2db      	uxtb	r3, r3
 801001c:	4a17      	ldr	r2, [pc, #92]	; (801007c <FATFS_LinkDriverEx+0x94>)
 801001e:	009b      	lsls	r3, r3, #2
 8010020:	4413      	add	r3, r2
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010026:	4b15      	ldr	r3, [pc, #84]	; (801007c <FATFS_LinkDriverEx+0x94>)
 8010028:	7a5b      	ldrb	r3, [r3, #9]
 801002a:	b2db      	uxtb	r3, r3
 801002c:	461a      	mov	r2, r3
 801002e:	4b13      	ldr	r3, [pc, #76]	; (801007c <FATFS_LinkDriverEx+0x94>)
 8010030:	4413      	add	r3, r2
 8010032:	79fa      	ldrb	r2, [r7, #7]
 8010034:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010036:	4b11      	ldr	r3, [pc, #68]	; (801007c <FATFS_LinkDriverEx+0x94>)
 8010038:	7a5b      	ldrb	r3, [r3, #9]
 801003a:	b2db      	uxtb	r3, r3
 801003c:	1c5a      	adds	r2, r3, #1
 801003e:	b2d1      	uxtb	r1, r2
 8010040:	4a0e      	ldr	r2, [pc, #56]	; (801007c <FATFS_LinkDriverEx+0x94>)
 8010042:	7251      	strb	r1, [r2, #9]
 8010044:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010046:	7dbb      	ldrb	r3, [r7, #22]
 8010048:	3330      	adds	r3, #48	; 0x30
 801004a:	b2da      	uxtb	r2, r3
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	3301      	adds	r3, #1
 8010054:	223a      	movs	r2, #58	; 0x3a
 8010056:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	3302      	adds	r3, #2
 801005c:	222f      	movs	r2, #47	; 0x2f
 801005e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	3303      	adds	r3, #3
 8010064:	2200      	movs	r2, #0
 8010066:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010068:	2300      	movs	r3, #0
 801006a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801006c:	7dfb      	ldrb	r3, [r7, #23]
}
 801006e:	4618      	mov	r0, r3
 8010070:	371c      	adds	r7, #28
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr
 801007a:	bf00      	nop
 801007c:	200006c4 	.word	0x200006c4

08010080 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801008a:	2200      	movs	r2, #0
 801008c:	6839      	ldr	r1, [r7, #0]
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7ff ffaa 	bl	800ffe8 <FATFS_LinkDriverEx>
 8010094:	4603      	mov	r3, r0
}
 8010096:	4618      	mov	r0, r3
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b086      	sub	sp, #24
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	4603      	mov	r3, r0
 80100a6:	6039      	str	r1, [r7, #0]
 80100a8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80100aa:	2300      	movs	r3, #0
 80100ac:	60fb      	str	r3, [r7, #12]
 80100ae:	2300      	movs	r3, #0
 80100b0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80100b2:	f107 030c 	add.w	r3, r7, #12
 80100b6:	2101      	movs	r1, #1
 80100b8:	4618      	mov	r0, r3
 80100ba:	f000 f8e9 	bl	8010290 <osSemaphoreCreate>
 80100be:	4602      	mov	r2, r0
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	bf14      	ite	ne
 80100cc:	2301      	movne	r3, #1
 80100ce:	2300      	moveq	r3, #0
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	617b      	str	r3, [r7, #20]

    return ret;
 80100d4:	697b      	ldr	r3, [r7, #20]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3718      	adds	r7, #24
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b082      	sub	sp, #8
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 f988 	bl	80103fc <osSemaphoreDelete>
#endif
    return 1;
 80100ec:	2301      	movs	r3, #1
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80100f6:	b580      	push	{r7, lr}
 80100f8:	b084      	sub	sp, #16
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80100fe:	2300      	movs	r3, #0
 8010100:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8010102:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 f8f4 	bl	80102f4 <osSemaphoreWait>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d101      	bne.n	8010116 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8010112:	2301      	movs	r3, #1
 8010114:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010116:	68fb      	ldr	r3, [r7, #12]
}
 8010118:	4618      	mov	r0, r3
 801011a:	3710      	adds	r7, #16
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f000 f931 	bl	8010390 <osSemaphoreRelease>
#endif
}
 801012e:	bf00      	nop
 8010130:	3708      	adds	r7, #8
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}

08010136 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010136:	b480      	push	{r7}
 8010138:	b085      	sub	sp, #20
 801013a:	af00      	add	r7, sp, #0
 801013c:	4603      	mov	r3, r0
 801013e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010140:	2300      	movs	r3, #0
 8010142:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010148:	2b84      	cmp	r3, #132	; 0x84
 801014a:	d005      	beq.n	8010158 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801014c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	4413      	add	r3, r2
 8010154:	3303      	adds	r3, #3
 8010156:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010158:	68fb      	ldr	r3, [r7, #12]
}
 801015a:	4618      	mov	r0, r3
 801015c:	3714      	adds	r7, #20
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr

08010166 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010166:	b480      	push	{r7}
 8010168:	b083      	sub	sp, #12
 801016a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801016c:	f3ef 8305 	mrs	r3, IPSR
 8010170:	607b      	str	r3, [r7, #4]
  return(result);
 8010172:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010174:	2b00      	cmp	r3, #0
 8010176:	bf14      	ite	ne
 8010178:	2301      	movne	r3, #1
 801017a:	2300      	moveq	r3, #0
 801017c:	b2db      	uxtb	r3, r3
}
 801017e:	4618      	mov	r0, r3
 8010180:	370c      	adds	r7, #12
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr

0801018a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801018a:	b580      	push	{r7, lr}
 801018c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801018e:	f001 fc35 	bl	80119fc <vTaskStartScheduler>
  
  return osOK;
 8010192:	2300      	movs	r3, #0
}
 8010194:	4618      	mov	r0, r3
 8010196:	bd80      	pop	{r7, pc}

08010198 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 801019c:	f002 f888 	bl	80122b0 <xTaskGetSchedulerState>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d101      	bne.n	80101aa <osKernelRunning+0x12>
    return 0;
 80101a6:	2300      	movs	r3, #0
 80101a8:	e000      	b.n	80101ac <osKernelRunning+0x14>
  else
    return 1;
 80101aa:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80101b4:	f7ff ffd7 	bl	8010166 <inHandlerMode>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d003      	beq.n	80101c6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80101be:	f001 fd3d 	bl	8011c3c <xTaskGetTickCountFromISR>
 80101c2:	4603      	mov	r3, r0
 80101c4:	e002      	b.n	80101cc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80101c6:	f001 fd29 	bl	8011c1c <xTaskGetTickCount>
 80101ca:	4603      	mov	r3, r0
  }
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80101d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101d2:	b089      	sub	sp, #36	; 0x24
 80101d4:	af04      	add	r7, sp, #16
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	695b      	ldr	r3, [r3, #20]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d020      	beq.n	8010224 <osThreadCreate+0x54>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	699b      	ldr	r3, [r3, #24]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d01c      	beq.n	8010224 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	685c      	ldr	r4, [r3, #4]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681d      	ldr	r5, [r3, #0]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	691e      	ldr	r6, [r3, #16]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7ff ff9a 	bl	8010136 <makeFreeRtosPriority>
 8010202:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	695b      	ldr	r3, [r3, #20]
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801020c:	9202      	str	r2, [sp, #8]
 801020e:	9301      	str	r3, [sp, #4]
 8010210:	9100      	str	r1, [sp, #0]
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	4632      	mov	r2, r6
 8010216:	4629      	mov	r1, r5
 8010218:	4620      	mov	r0, r4
 801021a:	f001 fa15 	bl	8011648 <xTaskCreateStatic>
 801021e:	4603      	mov	r3, r0
 8010220:	60fb      	str	r3, [r7, #12]
 8010222:	e01c      	b.n	801025e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	685c      	ldr	r4, [r3, #4]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010230:	b29e      	uxth	r6, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010238:	4618      	mov	r0, r3
 801023a:	f7ff ff7c 	bl	8010136 <makeFreeRtosPriority>
 801023e:	4602      	mov	r2, r0
 8010240:	f107 030c 	add.w	r3, r7, #12
 8010244:	9301      	str	r3, [sp, #4]
 8010246:	9200      	str	r2, [sp, #0]
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	4632      	mov	r2, r6
 801024c:	4629      	mov	r1, r5
 801024e:	4620      	mov	r0, r4
 8010250:	f001 fa5d 	bl	801170e <xTaskCreate>
 8010254:	4603      	mov	r3, r0
 8010256:	2b01      	cmp	r3, #1
 8010258:	d001      	beq.n	801025e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801025a:	2300      	movs	r3, #0
 801025c:	e000      	b.n	8010260 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801025e:	68fb      	ldr	r3, [r7, #12]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3714      	adds	r7, #20
 8010264:	46bd      	mov	sp, r7
 8010266:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010268 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d001      	beq.n	801027e <osDelay+0x16>
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	e000      	b.n	8010280 <osDelay+0x18>
 801027e:	2301      	movs	r3, #1
 8010280:	4618      	mov	r0, r3
 8010282:	f001 fb85 	bl	8011990 <vTaskDelay>
  
  return osOK;
 8010286:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010288:	4618      	mov	r0, r3
 801028a:	3710      	adds	r7, #16
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af02      	add	r7, sp, #8
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00f      	beq.n	80102c2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d10a      	bne.n	80102be <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	2203      	movs	r2, #3
 80102ae:	9200      	str	r2, [sp, #0]
 80102b0:	2200      	movs	r2, #0
 80102b2:	2100      	movs	r1, #0
 80102b4:	2001      	movs	r0, #1
 80102b6:	f000 faaf 	bl	8010818 <xQueueGenericCreateStatic>
 80102ba:	4603      	mov	r3, r0
 80102bc:	e016      	b.n	80102ec <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80102be:	2300      	movs	r3, #0
 80102c0:	e014      	b.n	80102ec <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d110      	bne.n	80102ea <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80102c8:	2203      	movs	r2, #3
 80102ca:	2100      	movs	r1, #0
 80102cc:	2001      	movs	r0, #1
 80102ce:	f000 fb25 	bl	801091c <xQueueGenericCreate>
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d005      	beq.n	80102e6 <osSemaphoreCreate+0x56>
 80102da:	2300      	movs	r3, #0
 80102dc:	2200      	movs	r2, #0
 80102de:	2100      	movs	r1, #0
 80102e0:	68f8      	ldr	r0, [r7, #12]
 80102e2:	f000 fb7d 	bl	80109e0 <xQueueGenericSend>
      return sema;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	e000      	b.n	80102ec <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80102ea:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80102fe:	2300      	movs	r3, #0
 8010300:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d101      	bne.n	801030c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010308:	2380      	movs	r3, #128	; 0x80
 801030a:	e03a      	b.n	8010382 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801030c:	2300      	movs	r3, #0
 801030e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010316:	d103      	bne.n	8010320 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010318:	f04f 33ff 	mov.w	r3, #4294967295
 801031c:	60fb      	str	r3, [r7, #12]
 801031e:	e009      	b.n	8010334 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d006      	beq.n	8010334 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d101      	bne.n	8010334 <osSemaphoreWait+0x40>
      ticks = 1;
 8010330:	2301      	movs	r3, #1
 8010332:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010334:	f7ff ff17 	bl	8010166 <inHandlerMode>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d017      	beq.n	801036e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801033e:	f107 0308 	add.w	r3, r7, #8
 8010342:	461a      	mov	r2, r3
 8010344:	2100      	movs	r1, #0
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 ff80 	bl	801124c <xQueueReceiveFromISR>
 801034c:	4603      	mov	r3, r0
 801034e:	2b01      	cmp	r3, #1
 8010350:	d001      	beq.n	8010356 <osSemaphoreWait+0x62>
      return osErrorOS;
 8010352:	23ff      	movs	r3, #255	; 0xff
 8010354:	e015      	b.n	8010382 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d011      	beq.n	8010380 <osSemaphoreWait+0x8c>
 801035c:	4b0b      	ldr	r3, [pc, #44]	; (801038c <osSemaphoreWait+0x98>)
 801035e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010362:	601a      	str	r2, [r3, #0]
 8010364:	f3bf 8f4f 	dsb	sy
 8010368:	f3bf 8f6f 	isb	sy
 801036c:	e008      	b.n	8010380 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801036e:	68f9      	ldr	r1, [r7, #12]
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f000 fe57 	bl	8011024 <xQueueSemaphoreTake>
 8010376:	4603      	mov	r3, r0
 8010378:	2b01      	cmp	r3, #1
 801037a:	d001      	beq.n	8010380 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801037c:	23ff      	movs	r3, #255	; 0xff
 801037e:	e000      	b.n	8010382 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010380:	2300      	movs	r3, #0
}
 8010382:	4618      	mov	r0, r3
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	e000ed04 	.word	0xe000ed04

08010390 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010398:	2300      	movs	r3, #0
 801039a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801039c:	2300      	movs	r3, #0
 801039e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80103a0:	f7ff fee1 	bl	8010166 <inHandlerMode>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d016      	beq.n	80103d8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80103aa:	f107 0308 	add.w	r3, r7, #8
 80103ae:	4619      	mov	r1, r3
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f000 fcbb 	bl	8010d2c <xQueueGiveFromISR>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	d001      	beq.n	80103c0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80103bc:	23ff      	movs	r3, #255	; 0xff
 80103be:	e017      	b.n	80103f0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d013      	beq.n	80103ee <osSemaphoreRelease+0x5e>
 80103c6:	4b0c      	ldr	r3, [pc, #48]	; (80103f8 <osSemaphoreRelease+0x68>)
 80103c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103cc:	601a      	str	r2, [r3, #0]
 80103ce:	f3bf 8f4f 	dsb	sy
 80103d2:	f3bf 8f6f 	isb	sy
 80103d6:	e00a      	b.n	80103ee <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80103d8:	2300      	movs	r3, #0
 80103da:	2200      	movs	r2, #0
 80103dc:	2100      	movs	r1, #0
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 fafe 	bl	80109e0 <xQueueGenericSend>
 80103e4:	4603      	mov	r3, r0
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d001      	beq.n	80103ee <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80103ea:	23ff      	movs	r3, #255	; 0xff
 80103ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80103ee:	68fb      	ldr	r3, [r7, #12]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	e000ed04 	.word	0xe000ed04

080103fc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8010404:	f7ff feaf 	bl	8010166 <inHandlerMode>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <osSemaphoreDelete+0x16>
    return osErrorISR;
 801040e:	2382      	movs	r3, #130	; 0x82
 8010410:	e003      	b.n	801041a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f000 ffa0 	bl	8011358 <vQueueDelete>

  return osOK; 
 8010418:	2300      	movs	r3, #0
}
 801041a:	4618      	mov	r0, r3
 801041c:	3708      	adds	r7, #8
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010422:	b590      	push	{r4, r7, lr}
 8010424:	b085      	sub	sp, #20
 8010426:	af02      	add	r7, sp, #8
 8010428:	6078      	str	r0, [r7, #4]
 801042a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	689b      	ldr	r3, [r3, #8]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d011      	beq.n	8010458 <osMessageCreate+0x36>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	68db      	ldr	r3, [r3, #12]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d00d      	beq.n	8010458 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6818      	ldr	r0, [r3, #0]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6859      	ldr	r1, [r3, #4]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	689a      	ldr	r2, [r3, #8]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	2400      	movs	r4, #0
 801044e:	9400      	str	r4, [sp, #0]
 8010450:	f000 f9e2 	bl	8010818 <xQueueGenericCreateStatic>
 8010454:	4603      	mov	r3, r0
 8010456:	e008      	b.n	801046a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6818      	ldr	r0, [r3, #0]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	2200      	movs	r2, #0
 8010462:	4619      	mov	r1, r3
 8010464:	f000 fa5a 	bl	801091c <xQueueGenericCreate>
 8010468:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801046a:	4618      	mov	r0, r3
 801046c:	370c      	adds	r7, #12
 801046e:	46bd      	mov	sp, r7
 8010470:	bd90      	pop	{r4, r7, pc}
	...

08010474 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b086      	sub	sp, #24
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010480:	2300      	movs	r3, #0
 8010482:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d101      	bne.n	8010492 <osMessagePut+0x1e>
    ticks = 1;
 801048e:	2301      	movs	r3, #1
 8010490:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010492:	f7ff fe68 	bl	8010166 <inHandlerMode>
 8010496:	4603      	mov	r3, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d018      	beq.n	80104ce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801049c:	f107 0210 	add.w	r2, r7, #16
 80104a0:	f107 0108 	add.w	r1, r7, #8
 80104a4:	2300      	movs	r3, #0
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	f000 fba0 	bl	8010bec <xQueueGenericSendFromISR>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d001      	beq.n	80104b6 <osMessagePut+0x42>
      return osErrorOS;
 80104b2:	23ff      	movs	r3, #255	; 0xff
 80104b4:	e018      	b.n	80104e8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d014      	beq.n	80104e6 <osMessagePut+0x72>
 80104bc:	4b0c      	ldr	r3, [pc, #48]	; (80104f0 <osMessagePut+0x7c>)
 80104be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104c2:	601a      	str	r2, [r3, #0]
 80104c4:	f3bf 8f4f 	dsb	sy
 80104c8:	f3bf 8f6f 	isb	sy
 80104cc:	e00b      	b.n	80104e6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80104ce:	f107 0108 	add.w	r1, r7, #8
 80104d2:	2300      	movs	r3, #0
 80104d4:	697a      	ldr	r2, [r7, #20]
 80104d6:	68f8      	ldr	r0, [r7, #12]
 80104d8:	f000 fa82 	bl	80109e0 <xQueueGenericSend>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d001      	beq.n	80104e6 <osMessagePut+0x72>
      return osErrorOS;
 80104e2:	23ff      	movs	r3, #255	; 0xff
 80104e4:	e000      	b.n	80104e8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80104e6:	2300      	movs	r3, #0
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3718      	adds	r7, #24
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	e000ed04 	.word	0xe000ed04

080104f4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80104f4:	b590      	push	{r4, r7, lr}
 80104f6:	b08b      	sub	sp, #44	; 0x2c
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010504:	2300      	movs	r3, #0
 8010506:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d10a      	bne.n	8010524 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801050e:	2380      	movs	r3, #128	; 0x80
 8010510:	617b      	str	r3, [r7, #20]
    return event;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	461c      	mov	r4, r3
 8010516:	f107 0314 	add.w	r3, r7, #20
 801051a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801051e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010522:	e054      	b.n	80105ce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010524:	2300      	movs	r3, #0
 8010526:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010528:	2300      	movs	r3, #0
 801052a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010532:	d103      	bne.n	801053c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010534:	f04f 33ff 	mov.w	r3, #4294967295
 8010538:	627b      	str	r3, [r7, #36]	; 0x24
 801053a:	e009      	b.n	8010550 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d006      	beq.n	8010550 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010548:	2b00      	cmp	r3, #0
 801054a:	d101      	bne.n	8010550 <osMessageGet+0x5c>
      ticks = 1;
 801054c:	2301      	movs	r3, #1
 801054e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010550:	f7ff fe09 	bl	8010166 <inHandlerMode>
 8010554:	4603      	mov	r3, r0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d01c      	beq.n	8010594 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801055a:	f107 0220 	add.w	r2, r7, #32
 801055e:	f107 0314 	add.w	r3, r7, #20
 8010562:	3304      	adds	r3, #4
 8010564:	4619      	mov	r1, r3
 8010566:	68b8      	ldr	r0, [r7, #8]
 8010568:	f000 fe70 	bl	801124c <xQueueReceiveFromISR>
 801056c:	4603      	mov	r3, r0
 801056e:	2b01      	cmp	r3, #1
 8010570:	d102      	bne.n	8010578 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010572:	2310      	movs	r3, #16
 8010574:	617b      	str	r3, [r7, #20]
 8010576:	e001      	b.n	801057c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010578:	2300      	movs	r3, #0
 801057a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801057c:	6a3b      	ldr	r3, [r7, #32]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d01d      	beq.n	80105be <osMessageGet+0xca>
 8010582:	4b15      	ldr	r3, [pc, #84]	; (80105d8 <osMessageGet+0xe4>)
 8010584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010588:	601a      	str	r2, [r3, #0]
 801058a:	f3bf 8f4f 	dsb	sy
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	e014      	b.n	80105be <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010594:	f107 0314 	add.w	r3, r7, #20
 8010598:	3304      	adds	r3, #4
 801059a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801059c:	4619      	mov	r1, r3
 801059e:	68b8      	ldr	r0, [r7, #8]
 80105a0:	f000 fc5a 	bl	8010e58 <xQueueReceive>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b01      	cmp	r3, #1
 80105a8:	d102      	bne.n	80105b0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80105aa:	2310      	movs	r3, #16
 80105ac:	617b      	str	r3, [r7, #20]
 80105ae:	e006      	b.n	80105be <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80105b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d101      	bne.n	80105ba <osMessageGet+0xc6>
 80105b6:	2300      	movs	r3, #0
 80105b8:	e000      	b.n	80105bc <osMessageGet+0xc8>
 80105ba:	2340      	movs	r3, #64	; 0x40
 80105bc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	461c      	mov	r4, r3
 80105c2:	f107 0314 	add.w	r3, r7, #20
 80105c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80105ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	372c      	adds	r7, #44	; 0x2c
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd90      	pop	{r4, r7, pc}
 80105d6:	bf00      	nop
 80105d8:	e000ed04 	.word	0xe000ed04

080105dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80105dc:	b480      	push	{r7}
 80105de:	b083      	sub	sp, #12
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f103 0208 	add.w	r2, r3, #8
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f04f 32ff 	mov.w	r2, #4294967295
 80105f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f103 0208 	add.w	r2, r3, #8
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f103 0208 	add.w	r2, r3, #8
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2200      	movs	r2, #0
 801060e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010610:	bf00      	nop
 8010612:	370c      	adds	r7, #12
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr

0801061c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801062a:	bf00      	nop
 801062c:	370c      	adds	r7, #12
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr

08010636 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010636:	b480      	push	{r7}
 8010638:	b085      	sub	sp, #20
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
 801063e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	685b      	ldr	r3, [r3, #4]
 8010644:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	68fa      	ldr	r2, [r7, #12]
 801064a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	689a      	ldr	r2, [r3, #8]
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	689b      	ldr	r3, [r3, #8]
 8010658:	683a      	ldr	r2, [r7, #0]
 801065a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	683a      	ldr	r2, [r7, #0]
 8010660:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	1c5a      	adds	r2, r3, #1
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	601a      	str	r2, [r3, #0]
}
 8010672:	bf00      	nop
 8010674:	3714      	adds	r7, #20
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr

0801067e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801067e:	b480      	push	{r7}
 8010680:	b085      	sub	sp, #20
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
 8010686:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010694:	d103      	bne.n	801069e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	691b      	ldr	r3, [r3, #16]
 801069a:	60fb      	str	r3, [r7, #12]
 801069c:	e00c      	b.n	80106b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	3308      	adds	r3, #8
 80106a2:	60fb      	str	r3, [r7, #12]
 80106a4:	e002      	b.n	80106ac <vListInsert+0x2e>
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	60fb      	str	r3, [r7, #12]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	68ba      	ldr	r2, [r7, #8]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d2f6      	bcs.n	80106a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	68fa      	ldr	r2, [r7, #12]
 80106cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	683a      	ldr	r2, [r7, #0]
 80106d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	1c5a      	adds	r2, r3, #1
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	601a      	str	r2, [r3, #0]
}
 80106e4:	bf00      	nop
 80106e6:	3714      	adds	r7, #20
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr

080106f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80106f0:	b480      	push	{r7}
 80106f2:	b085      	sub	sp, #20
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	691b      	ldr	r3, [r3, #16]
 80106fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	6892      	ldr	r2, [r2, #8]
 8010706:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	689b      	ldr	r3, [r3, #8]
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	6852      	ldr	r2, [r2, #4]
 8010710:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	429a      	cmp	r2, r3
 801071a:	d103      	bne.n	8010724 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	689a      	ldr	r2, [r3, #8]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	1e5a      	subs	r2, r3, #1
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	681b      	ldr	r3, [r3, #0]
}
 8010738:	4618      	mov	r0, r3
 801073a:	3714      	adds	r7, #20
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b084      	sub	sp, #16
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d10c      	bne.n	8010772 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075c:	b672      	cpsid	i
 801075e:	f383 8811 	msr	BASEPRI, r3
 8010762:	f3bf 8f6f 	isb	sy
 8010766:	f3bf 8f4f 	dsb	sy
 801076a:	b662      	cpsie	i
 801076c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801076e:	bf00      	nop
 8010770:	e7fe      	b.n	8010770 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8010772:	f002 f8eb 	bl	801294c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681a      	ldr	r2, [r3, #0]
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801077e:	68f9      	ldr	r1, [r7, #12]
 8010780:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010782:	fb01 f303 	mul.w	r3, r1, r3
 8010786:	441a      	add	r2, r3
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2200      	movs	r2, #0
 8010790:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107a2:	3b01      	subs	r3, #1
 80107a4:	68f9      	ldr	r1, [r7, #12]
 80107a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80107a8:	fb01 f303 	mul.w	r3, r1, r3
 80107ac:	441a      	add	r2, r3
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	22ff      	movs	r2, #255	; 0xff
 80107b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	22ff      	movs	r2, #255	; 0xff
 80107be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d114      	bne.n	80107f2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	691b      	ldr	r3, [r3, #16]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d01a      	beq.n	8010806 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	3310      	adds	r3, #16
 80107d4:	4618      	mov	r0, r3
 80107d6:	f001 fba5 	bl	8011f24 <xTaskRemoveFromEventList>
 80107da:	4603      	mov	r3, r0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d012      	beq.n	8010806 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80107e0:	4b0c      	ldr	r3, [pc, #48]	; (8010814 <xQueueGenericReset+0xd0>)
 80107e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107e6:	601a      	str	r2, [r3, #0]
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	f3bf 8f6f 	isb	sy
 80107f0:	e009      	b.n	8010806 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	3310      	adds	r3, #16
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7ff fef0 	bl	80105dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	3324      	adds	r3, #36	; 0x24
 8010800:	4618      	mov	r0, r3
 8010802:	f7ff feeb 	bl	80105dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010806:	f002 f8d5 	bl	80129b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801080a:	2301      	movs	r3, #1
}
 801080c:	4618      	mov	r0, r3
 801080e:	3710      	adds	r7, #16
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	e000ed04 	.word	0xe000ed04

08010818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010818:	b580      	push	{r7, lr}
 801081a:	b08e      	sub	sp, #56	; 0x38
 801081c:	af02      	add	r7, sp, #8
 801081e:	60f8      	str	r0, [r7, #12]
 8010820:	60b9      	str	r1, [r7, #8]
 8010822:	607a      	str	r2, [r7, #4]
 8010824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d10c      	bne.n	8010846 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 801082c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010830:	b672      	cpsid	i
 8010832:	f383 8811 	msr	BASEPRI, r3
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	f3bf 8f4f 	dsb	sy
 801083e:	b662      	cpsie	i
 8010840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010842:	bf00      	nop
 8010844:	e7fe      	b.n	8010844 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d10c      	bne.n	8010866 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 801084c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010850:	b672      	cpsid	i
 8010852:	f383 8811 	msr	BASEPRI, r3
 8010856:	f3bf 8f6f 	isb	sy
 801085a:	f3bf 8f4f 	dsb	sy
 801085e:	b662      	cpsie	i
 8010860:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010862:	bf00      	nop
 8010864:	e7fe      	b.n	8010864 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d002      	beq.n	8010872 <xQueueGenericCreateStatic+0x5a>
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d001      	beq.n	8010876 <xQueueGenericCreateStatic+0x5e>
 8010872:	2301      	movs	r3, #1
 8010874:	e000      	b.n	8010878 <xQueueGenericCreateStatic+0x60>
 8010876:	2300      	movs	r3, #0
 8010878:	2b00      	cmp	r3, #0
 801087a:	d10c      	bne.n	8010896 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 801087c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010880:	b672      	cpsid	i
 8010882:	f383 8811 	msr	BASEPRI, r3
 8010886:	f3bf 8f6f 	isb	sy
 801088a:	f3bf 8f4f 	dsb	sy
 801088e:	b662      	cpsie	i
 8010890:	623b      	str	r3, [r7, #32]
}
 8010892:	bf00      	nop
 8010894:	e7fe      	b.n	8010894 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d102      	bne.n	80108a2 <xQueueGenericCreateStatic+0x8a>
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d101      	bne.n	80108a6 <xQueueGenericCreateStatic+0x8e>
 80108a2:	2301      	movs	r3, #1
 80108a4:	e000      	b.n	80108a8 <xQueueGenericCreateStatic+0x90>
 80108a6:	2300      	movs	r3, #0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10c      	bne.n	80108c6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80108ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b0:	b672      	cpsid	i
 80108b2:	f383 8811 	msr	BASEPRI, r3
 80108b6:	f3bf 8f6f 	isb	sy
 80108ba:	f3bf 8f4f 	dsb	sy
 80108be:	b662      	cpsie	i
 80108c0:	61fb      	str	r3, [r7, #28]
}
 80108c2:	bf00      	nop
 80108c4:	e7fe      	b.n	80108c4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80108c6:	2348      	movs	r3, #72	; 0x48
 80108c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	2b48      	cmp	r3, #72	; 0x48
 80108ce:	d00c      	beq.n	80108ea <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80108d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d4:	b672      	cpsid	i
 80108d6:	f383 8811 	msr	BASEPRI, r3
 80108da:	f3bf 8f6f 	isb	sy
 80108de:	f3bf 8f4f 	dsb	sy
 80108e2:	b662      	cpsie	i
 80108e4:	61bb      	str	r3, [r7, #24]
}
 80108e6:	bf00      	nop
 80108e8:	e7fe      	b.n	80108e8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80108ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80108f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d00d      	beq.n	8010912 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80108f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f8:	2201      	movs	r2, #1
 80108fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80108fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010904:	9300      	str	r3, [sp, #0]
 8010906:	4613      	mov	r3, r2
 8010908:	687a      	ldr	r2, [r7, #4]
 801090a:	68b9      	ldr	r1, [r7, #8]
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f000 f847 	bl	80109a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010914:	4618      	mov	r0, r3
 8010916:	3730      	adds	r7, #48	; 0x30
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}

0801091c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801091c:	b580      	push	{r7, lr}
 801091e:	b08a      	sub	sp, #40	; 0x28
 8010920:	af02      	add	r7, sp, #8
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	4613      	mov	r3, r2
 8010928:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10c      	bne.n	801094a <xQueueGenericCreate+0x2e>
	__asm volatile
 8010930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010934:	b672      	cpsid	i
 8010936:	f383 8811 	msr	BASEPRI, r3
 801093a:	f3bf 8f6f 	isb	sy
 801093e:	f3bf 8f4f 	dsb	sy
 8010942:	b662      	cpsie	i
 8010944:	613b      	str	r3, [r7, #16]
}
 8010946:	bf00      	nop
 8010948:	e7fe      	b.n	8010948 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d102      	bne.n	8010956 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010950:	2300      	movs	r3, #0
 8010952:	61fb      	str	r3, [r7, #28]
 8010954:	e004      	b.n	8010960 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	68ba      	ldr	r2, [r7, #8]
 801095a:	fb02 f303 	mul.w	r3, r2, r3
 801095e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	3348      	adds	r3, #72	; 0x48
 8010964:	4618      	mov	r0, r3
 8010966:	f002 f91d 	bl	8012ba4 <pvPortMalloc>
 801096a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801096c:	69bb      	ldr	r3, [r7, #24]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d011      	beq.n	8010996 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010972:	69bb      	ldr	r3, [r7, #24]
 8010974:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	3348      	adds	r3, #72	; 0x48
 801097a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	2200      	movs	r2, #0
 8010980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010984:	79fa      	ldrb	r2, [r7, #7]
 8010986:	69bb      	ldr	r3, [r7, #24]
 8010988:	9300      	str	r3, [sp, #0]
 801098a:	4613      	mov	r3, r2
 801098c:	697a      	ldr	r2, [r7, #20]
 801098e:	68b9      	ldr	r1, [r7, #8]
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f000 f805 	bl	80109a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010996:	69bb      	ldr	r3, [r7, #24]
	}
 8010998:	4618      	mov	r0, r3
 801099a:	3720      	adds	r7, #32
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
 80109ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d103      	bne.n	80109bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80109b4:	69bb      	ldr	r3, [r7, #24]
 80109b6:	69ba      	ldr	r2, [r7, #24]
 80109b8:	601a      	str	r2, [r3, #0]
 80109ba:	e002      	b.n	80109c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80109bc:	69bb      	ldr	r3, [r7, #24]
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80109c2:	69bb      	ldr	r3, [r7, #24]
 80109c4:	68fa      	ldr	r2, [r7, #12]
 80109c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	68ba      	ldr	r2, [r7, #8]
 80109cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80109ce:	2101      	movs	r1, #1
 80109d0:	69b8      	ldr	r0, [r7, #24]
 80109d2:	f7ff feb7 	bl	8010744 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80109d6:	bf00      	nop
 80109d8:	3710      	adds	r7, #16
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
	...

080109e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b08e      	sub	sp, #56	; 0x38
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
 80109ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80109ee:	2300      	movs	r3, #0
 80109f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80109f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d10c      	bne.n	8010a16 <xQueueGenericSend+0x36>
	__asm volatile
 80109fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a00:	b672      	cpsid	i
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	b662      	cpsie	i
 8010a10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010a12:	bf00      	nop
 8010a14:	e7fe      	b.n	8010a14 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d103      	bne.n	8010a24 <xQueueGenericSend+0x44>
 8010a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d101      	bne.n	8010a28 <xQueueGenericSend+0x48>
 8010a24:	2301      	movs	r3, #1
 8010a26:	e000      	b.n	8010a2a <xQueueGenericSend+0x4a>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d10c      	bne.n	8010a48 <xQueueGenericSend+0x68>
	__asm volatile
 8010a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a32:	b672      	cpsid	i
 8010a34:	f383 8811 	msr	BASEPRI, r3
 8010a38:	f3bf 8f6f 	isb	sy
 8010a3c:	f3bf 8f4f 	dsb	sy
 8010a40:	b662      	cpsie	i
 8010a42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010a44:	bf00      	nop
 8010a46:	e7fe      	b.n	8010a46 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	d103      	bne.n	8010a56 <xQueueGenericSend+0x76>
 8010a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d101      	bne.n	8010a5a <xQueueGenericSend+0x7a>
 8010a56:	2301      	movs	r3, #1
 8010a58:	e000      	b.n	8010a5c <xQueueGenericSend+0x7c>
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d10c      	bne.n	8010a7a <xQueueGenericSend+0x9a>
	__asm volatile
 8010a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a64:	b672      	cpsid	i
 8010a66:	f383 8811 	msr	BASEPRI, r3
 8010a6a:	f3bf 8f6f 	isb	sy
 8010a6e:	f3bf 8f4f 	dsb	sy
 8010a72:	b662      	cpsie	i
 8010a74:	623b      	str	r3, [r7, #32]
}
 8010a76:	bf00      	nop
 8010a78:	e7fe      	b.n	8010a78 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a7a:	f001 fc19 	bl	80122b0 <xTaskGetSchedulerState>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d102      	bne.n	8010a8a <xQueueGenericSend+0xaa>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d101      	bne.n	8010a8e <xQueueGenericSend+0xae>
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	e000      	b.n	8010a90 <xQueueGenericSend+0xb0>
 8010a8e:	2300      	movs	r3, #0
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d10c      	bne.n	8010aae <xQueueGenericSend+0xce>
	__asm volatile
 8010a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a98:	b672      	cpsid	i
 8010a9a:	f383 8811 	msr	BASEPRI, r3
 8010a9e:	f3bf 8f6f 	isb	sy
 8010aa2:	f3bf 8f4f 	dsb	sy
 8010aa6:	b662      	cpsie	i
 8010aa8:	61fb      	str	r3, [r7, #28]
}
 8010aaa:	bf00      	nop
 8010aac:	e7fe      	b.n	8010aac <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010aae:	f001 ff4d 	bl	801294c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d302      	bcc.n	8010ac4 <xQueueGenericSend+0xe4>
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	2b02      	cmp	r3, #2
 8010ac2:	d129      	bne.n	8010b18 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010ac4:	683a      	ldr	r2, [r7, #0]
 8010ac6:	68b9      	ldr	r1, [r7, #8]
 8010ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010aca:	f000 fc82 	bl	80113d2 <prvCopyDataToQueue>
 8010ace:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d010      	beq.n	8010afa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ada:	3324      	adds	r3, #36	; 0x24
 8010adc:	4618      	mov	r0, r3
 8010ade:	f001 fa21 	bl	8011f24 <xTaskRemoveFromEventList>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d013      	beq.n	8010b10 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010ae8:	4b3f      	ldr	r3, [pc, #252]	; (8010be8 <xQueueGenericSend+0x208>)
 8010aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010aee:	601a      	str	r2, [r3, #0]
 8010af0:	f3bf 8f4f 	dsb	sy
 8010af4:	f3bf 8f6f 	isb	sy
 8010af8:	e00a      	b.n	8010b10 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d007      	beq.n	8010b10 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010b00:	4b39      	ldr	r3, [pc, #228]	; (8010be8 <xQueueGenericSend+0x208>)
 8010b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b06:	601a      	str	r2, [r3, #0]
 8010b08:	f3bf 8f4f 	dsb	sy
 8010b0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010b10:	f001 ff50 	bl	80129b4 <vPortExitCritical>
				return pdPASS;
 8010b14:	2301      	movs	r3, #1
 8010b16:	e063      	b.n	8010be0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d103      	bne.n	8010b26 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b1e:	f001 ff49 	bl	80129b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010b22:	2300      	movs	r3, #0
 8010b24:	e05c      	b.n	8010be0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d106      	bne.n	8010b3a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b2c:	f107 0314 	add.w	r3, r7, #20
 8010b30:	4618      	mov	r0, r3
 8010b32:	f001 fa5b 	bl	8011fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b36:	2301      	movs	r3, #1
 8010b38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b3a:	f001 ff3b 	bl	80129b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b3e:	f000 ffc1 	bl	8011ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b42:	f001 ff03 	bl	801294c <vPortEnterCritical>
 8010b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b4c:	b25b      	sxtb	r3, r3
 8010b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b52:	d103      	bne.n	8010b5c <xQueueGenericSend+0x17c>
 8010b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b56:	2200      	movs	r2, #0
 8010b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b62:	b25b      	sxtb	r3, r3
 8010b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b68:	d103      	bne.n	8010b72 <xQueueGenericSend+0x192>
 8010b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b72:	f001 ff1f 	bl	80129b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b76:	1d3a      	adds	r2, r7, #4
 8010b78:	f107 0314 	add.w	r3, r7, #20
 8010b7c:	4611      	mov	r1, r2
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f001 fa4a 	bl	8012018 <xTaskCheckForTimeOut>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d124      	bne.n	8010bd4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b8c:	f000 fd19 	bl	80115c2 <prvIsQueueFull>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d018      	beq.n	8010bc8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b98:	3310      	adds	r3, #16
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f001 f99a 	bl	8011ed8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ba6:	f000 fca4 	bl	80114f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010baa:	f000 ff99 	bl	8011ae0 <xTaskResumeAll>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f47f af7c 	bne.w	8010aae <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8010bb6:	4b0c      	ldr	r3, [pc, #48]	; (8010be8 <xQueueGenericSend+0x208>)
 8010bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bbc:	601a      	str	r2, [r3, #0]
 8010bbe:	f3bf 8f4f 	dsb	sy
 8010bc2:	f3bf 8f6f 	isb	sy
 8010bc6:	e772      	b.n	8010aae <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bca:	f000 fc92 	bl	80114f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010bce:	f000 ff87 	bl	8011ae0 <xTaskResumeAll>
 8010bd2:	e76c      	b.n	8010aae <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bd6:	f000 fc8c 	bl	80114f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010bda:	f000 ff81 	bl	8011ae0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010bde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3738      	adds	r7, #56	; 0x38
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	e000ed04 	.word	0xe000ed04

08010bec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b08e      	sub	sp, #56	; 0x38
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	60b9      	str	r1, [r7, #8]
 8010bf6:	607a      	str	r2, [r7, #4]
 8010bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d10c      	bne.n	8010c1e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8010c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c08:	b672      	cpsid	i
 8010c0a:	f383 8811 	msr	BASEPRI, r3
 8010c0e:	f3bf 8f6f 	isb	sy
 8010c12:	f3bf 8f4f 	dsb	sy
 8010c16:	b662      	cpsie	i
 8010c18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010c1a:	bf00      	nop
 8010c1c:	e7fe      	b.n	8010c1c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d103      	bne.n	8010c2c <xQueueGenericSendFromISR+0x40>
 8010c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d101      	bne.n	8010c30 <xQueueGenericSendFromISR+0x44>
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	e000      	b.n	8010c32 <xQueueGenericSendFromISR+0x46>
 8010c30:	2300      	movs	r3, #0
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d10c      	bne.n	8010c50 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8010c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3a:	b672      	cpsid	i
 8010c3c:	f383 8811 	msr	BASEPRI, r3
 8010c40:	f3bf 8f6f 	isb	sy
 8010c44:	f3bf 8f4f 	dsb	sy
 8010c48:	b662      	cpsie	i
 8010c4a:	623b      	str	r3, [r7, #32]
}
 8010c4c:	bf00      	nop
 8010c4e:	e7fe      	b.n	8010c4e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	2b02      	cmp	r3, #2
 8010c54:	d103      	bne.n	8010c5e <xQueueGenericSendFromISR+0x72>
 8010c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d101      	bne.n	8010c62 <xQueueGenericSendFromISR+0x76>
 8010c5e:	2301      	movs	r3, #1
 8010c60:	e000      	b.n	8010c64 <xQueueGenericSendFromISR+0x78>
 8010c62:	2300      	movs	r3, #0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d10c      	bne.n	8010c82 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8010c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c6c:	b672      	cpsid	i
 8010c6e:	f383 8811 	msr	BASEPRI, r3
 8010c72:	f3bf 8f6f 	isb	sy
 8010c76:	f3bf 8f4f 	dsb	sy
 8010c7a:	b662      	cpsie	i
 8010c7c:	61fb      	str	r3, [r7, #28]
}
 8010c7e:	bf00      	nop
 8010c80:	e7fe      	b.n	8010c80 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c82:	f001 ff4b 	bl	8012b1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010c86:	f3ef 8211 	mrs	r2, BASEPRI
 8010c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c8e:	b672      	cpsid	i
 8010c90:	f383 8811 	msr	BASEPRI, r3
 8010c94:	f3bf 8f6f 	isb	sy
 8010c98:	f3bf 8f4f 	dsb	sy
 8010c9c:	b662      	cpsie	i
 8010c9e:	61ba      	str	r2, [r7, #24]
 8010ca0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010ca2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d302      	bcc.n	8010cb8 <xQueueGenericSendFromISR+0xcc>
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	2b02      	cmp	r3, #2
 8010cb6:	d12c      	bne.n	8010d12 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010cc2:	683a      	ldr	r2, [r7, #0]
 8010cc4:	68b9      	ldr	r1, [r7, #8]
 8010cc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cc8:	f000 fb83 	bl	80113d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ccc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cd4:	d112      	bne.n	8010cfc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d016      	beq.n	8010d0c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce0:	3324      	adds	r3, #36	; 0x24
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f001 f91e 	bl	8011f24 <xTaskRemoveFromEventList>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d00e      	beq.n	8010d0c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d00b      	beq.n	8010d0c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	601a      	str	r2, [r3, #0]
 8010cfa:	e007      	b.n	8010d0c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010cfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010d00:	3301      	adds	r3, #1
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	b25a      	sxtb	r2, r3
 8010d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010d10:	e001      	b.n	8010d16 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d12:	2300      	movs	r3, #0
 8010d14:	637b      	str	r3, [r7, #52]	; 0x34
 8010d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d18:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010d20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3738      	adds	r7, #56	; 0x38
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b08e      	sub	sp, #56	; 0x38
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d10c      	bne.n	8010d5a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8010d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d44:	b672      	cpsid	i
 8010d46:	f383 8811 	msr	BASEPRI, r3
 8010d4a:	f3bf 8f6f 	isb	sy
 8010d4e:	f3bf 8f4f 	dsb	sy
 8010d52:	b662      	cpsie	i
 8010d54:	623b      	str	r3, [r7, #32]
}
 8010d56:	bf00      	nop
 8010d58:	e7fe      	b.n	8010d58 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d00c      	beq.n	8010d7c <xQueueGiveFromISR+0x50>
	__asm volatile
 8010d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d66:	b672      	cpsid	i
 8010d68:	f383 8811 	msr	BASEPRI, r3
 8010d6c:	f3bf 8f6f 	isb	sy
 8010d70:	f3bf 8f4f 	dsb	sy
 8010d74:	b662      	cpsie	i
 8010d76:	61fb      	str	r3, [r7, #28]
}
 8010d78:	bf00      	nop
 8010d7a:	e7fe      	b.n	8010d7a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d103      	bne.n	8010d8c <xQueueGiveFromISR+0x60>
 8010d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d86:	689b      	ldr	r3, [r3, #8]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d101      	bne.n	8010d90 <xQueueGiveFromISR+0x64>
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	e000      	b.n	8010d92 <xQueueGiveFromISR+0x66>
 8010d90:	2300      	movs	r3, #0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d10c      	bne.n	8010db0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8010d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9a:	b672      	cpsid	i
 8010d9c:	f383 8811 	msr	BASEPRI, r3
 8010da0:	f3bf 8f6f 	isb	sy
 8010da4:	f3bf 8f4f 	dsb	sy
 8010da8:	b662      	cpsie	i
 8010daa:	61bb      	str	r3, [r7, #24]
}
 8010dac:	bf00      	nop
 8010dae:	e7fe      	b.n	8010dae <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010db0:	f001 feb4 	bl	8012b1c <vPortValidateInterruptPriority>
	__asm volatile
 8010db4:	f3ef 8211 	mrs	r2, BASEPRI
 8010db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dbc:	b672      	cpsid	i
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	b662      	cpsie	i
 8010dcc:	617a      	str	r2, [r7, #20]
 8010dce:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010dd0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dd8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d22b      	bcs.n	8010e3c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df0:	1c5a      	adds	r2, r3, #1
 8010df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010df6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dfe:	d112      	bne.n	8010e26 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d016      	beq.n	8010e36 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0a:	3324      	adds	r3, #36	; 0x24
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f001 f889 	bl	8011f24 <xTaskRemoveFromEventList>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d00e      	beq.n	8010e36 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00b      	beq.n	8010e36 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	2201      	movs	r2, #1
 8010e22:	601a      	str	r2, [r3, #0]
 8010e24:	e007      	b.n	8010e36 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	b25a      	sxtb	r2, r3
 8010e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010e36:	2301      	movs	r3, #1
 8010e38:	637b      	str	r3, [r7, #52]	; 0x34
 8010e3a:	e001      	b.n	8010e40 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8010e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e42:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	f383 8811 	msr	BASEPRI, r3
}
 8010e4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3738      	adds	r7, #56	; 0x38
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
	...

08010e58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b08c      	sub	sp, #48	; 0x30
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010e64:	2300      	movs	r3, #0
 8010e66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d10c      	bne.n	8010e8c <xQueueReceive+0x34>
	__asm volatile
 8010e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e76:	b672      	cpsid	i
 8010e78:	f383 8811 	msr	BASEPRI, r3
 8010e7c:	f3bf 8f6f 	isb	sy
 8010e80:	f3bf 8f4f 	dsb	sy
 8010e84:	b662      	cpsie	i
 8010e86:	623b      	str	r3, [r7, #32]
}
 8010e88:	bf00      	nop
 8010e8a:	e7fe      	b.n	8010e8a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d103      	bne.n	8010e9a <xQueueReceive+0x42>
 8010e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d101      	bne.n	8010e9e <xQueueReceive+0x46>
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e000      	b.n	8010ea0 <xQueueReceive+0x48>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d10c      	bne.n	8010ebe <xQueueReceive+0x66>
	__asm volatile
 8010ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea8:	b672      	cpsid	i
 8010eaa:	f383 8811 	msr	BASEPRI, r3
 8010eae:	f3bf 8f6f 	isb	sy
 8010eb2:	f3bf 8f4f 	dsb	sy
 8010eb6:	b662      	cpsie	i
 8010eb8:	61fb      	str	r3, [r7, #28]
}
 8010eba:	bf00      	nop
 8010ebc:	e7fe      	b.n	8010ebc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ebe:	f001 f9f7 	bl	80122b0 <xTaskGetSchedulerState>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d102      	bne.n	8010ece <xQueueReceive+0x76>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d101      	bne.n	8010ed2 <xQueueReceive+0x7a>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e000      	b.n	8010ed4 <xQueueReceive+0x7c>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d10c      	bne.n	8010ef2 <xQueueReceive+0x9a>
	__asm volatile
 8010ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010edc:	b672      	cpsid	i
 8010ede:	f383 8811 	msr	BASEPRI, r3
 8010ee2:	f3bf 8f6f 	isb	sy
 8010ee6:	f3bf 8f4f 	dsb	sy
 8010eea:	b662      	cpsie	i
 8010eec:	61bb      	str	r3, [r7, #24]
}
 8010eee:	bf00      	nop
 8010ef0:	e7fe      	b.n	8010ef0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ef2:	f001 fd2b 	bl	801294c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010efa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d01f      	beq.n	8010f42 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f02:	68b9      	ldr	r1, [r7, #8]
 8010f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f06:	f000 face 	bl	80114a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	1e5a      	subs	r2, r3, #1
 8010f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f14:	691b      	ldr	r3, [r3, #16]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d00f      	beq.n	8010f3a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f1c:	3310      	adds	r3, #16
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f001 f800 	bl	8011f24 <xTaskRemoveFromEventList>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d007      	beq.n	8010f3a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010f2a:	4b3d      	ldr	r3, [pc, #244]	; (8011020 <xQueueReceive+0x1c8>)
 8010f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f30:	601a      	str	r2, [r3, #0]
 8010f32:	f3bf 8f4f 	dsb	sy
 8010f36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010f3a:	f001 fd3b 	bl	80129b4 <vPortExitCritical>
				return pdPASS;
 8010f3e:	2301      	movs	r3, #1
 8010f40:	e069      	b.n	8011016 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d103      	bne.n	8010f50 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010f48:	f001 fd34 	bl	80129b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	e062      	b.n	8011016 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d106      	bne.n	8010f64 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f56:	f107 0310 	add.w	r3, r7, #16
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f001 f846 	bl	8011fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010f60:	2301      	movs	r3, #1
 8010f62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010f64:	f001 fd26 	bl	80129b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010f68:	f000 fdac 	bl	8011ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010f6c:	f001 fcee 	bl	801294c <vPortEnterCritical>
 8010f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f76:	b25b      	sxtb	r3, r3
 8010f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f7c:	d103      	bne.n	8010f86 <xQueueReceive+0x12e>
 8010f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f80:	2200      	movs	r2, #0
 8010f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f8c:	b25b      	sxtb	r3, r3
 8010f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f92:	d103      	bne.n	8010f9c <xQueueReceive+0x144>
 8010f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f96:	2200      	movs	r2, #0
 8010f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010f9c:	f001 fd0a 	bl	80129b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fa0:	1d3a      	adds	r2, r7, #4
 8010fa2:	f107 0310 	add.w	r3, r7, #16
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f001 f835 	bl	8012018 <xTaskCheckForTimeOut>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d123      	bne.n	8010ffc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fb6:	f000 faee 	bl	8011596 <prvIsQueueEmpty>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d017      	beq.n	8010ff0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc2:	3324      	adds	r3, #36	; 0x24
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	4611      	mov	r1, r2
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f000 ff85 	bl	8011ed8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fd0:	f000 fa8f 	bl	80114f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010fd4:	f000 fd84 	bl	8011ae0 <xTaskResumeAll>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d189      	bne.n	8010ef2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8010fde:	4b10      	ldr	r3, [pc, #64]	; (8011020 <xQueueReceive+0x1c8>)
 8010fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fe4:	601a      	str	r2, [r3, #0]
 8010fe6:	f3bf 8f4f 	dsb	sy
 8010fea:	f3bf 8f6f 	isb	sy
 8010fee:	e780      	b.n	8010ef2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ff2:	f000 fa7e 	bl	80114f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ff6:	f000 fd73 	bl	8011ae0 <xTaskResumeAll>
 8010ffa:	e77a      	b.n	8010ef2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ffe:	f000 fa78 	bl	80114f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011002:	f000 fd6d 	bl	8011ae0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011008:	f000 fac5 	bl	8011596 <prvIsQueueEmpty>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	f43f af6f 	beq.w	8010ef2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011014:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011016:	4618      	mov	r0, r3
 8011018:	3730      	adds	r7, #48	; 0x30
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	e000ed04 	.word	0xe000ed04

08011024 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b08e      	sub	sp, #56	; 0x38
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801102e:	2300      	movs	r3, #0
 8011030:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011036:	2300      	movs	r3, #0
 8011038:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103c:	2b00      	cmp	r3, #0
 801103e:	d10c      	bne.n	801105a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8011040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011044:	b672      	cpsid	i
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	b662      	cpsie	i
 8011054:	623b      	str	r3, [r7, #32]
}
 8011056:	bf00      	nop
 8011058:	e7fe      	b.n	8011058 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801105e:	2b00      	cmp	r3, #0
 8011060:	d00c      	beq.n	801107c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8011062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011066:	b672      	cpsid	i
 8011068:	f383 8811 	msr	BASEPRI, r3
 801106c:	f3bf 8f6f 	isb	sy
 8011070:	f3bf 8f4f 	dsb	sy
 8011074:	b662      	cpsie	i
 8011076:	61fb      	str	r3, [r7, #28]
}
 8011078:	bf00      	nop
 801107a:	e7fe      	b.n	801107a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801107c:	f001 f918 	bl	80122b0 <xTaskGetSchedulerState>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d102      	bne.n	801108c <xQueueSemaphoreTake+0x68>
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d101      	bne.n	8011090 <xQueueSemaphoreTake+0x6c>
 801108c:	2301      	movs	r3, #1
 801108e:	e000      	b.n	8011092 <xQueueSemaphoreTake+0x6e>
 8011090:	2300      	movs	r3, #0
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10c      	bne.n	80110b0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8011096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801109a:	b672      	cpsid	i
 801109c:	f383 8811 	msr	BASEPRI, r3
 80110a0:	f3bf 8f6f 	isb	sy
 80110a4:	f3bf 8f4f 	dsb	sy
 80110a8:	b662      	cpsie	i
 80110aa:	61bb      	str	r3, [r7, #24]
}
 80110ac:	bf00      	nop
 80110ae:	e7fe      	b.n	80110ae <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80110b0:	f001 fc4c 	bl	801294c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80110ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d024      	beq.n	801110a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80110c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c2:	1e5a      	subs	r2, r3, #1
 80110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d104      	bne.n	80110da <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80110d0:	f001 fab4 	bl	801263c <pvTaskIncrementMutexHeldCount>
 80110d4:	4602      	mov	r2, r0
 80110d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80110da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110dc:	691b      	ldr	r3, [r3, #16]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d00f      	beq.n	8011102 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e4:	3310      	adds	r3, #16
 80110e6:	4618      	mov	r0, r3
 80110e8:	f000 ff1c 	bl	8011f24 <xTaskRemoveFromEventList>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d007      	beq.n	8011102 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80110f2:	4b55      	ldr	r3, [pc, #340]	; (8011248 <xQueueSemaphoreTake+0x224>)
 80110f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110f8:	601a      	str	r2, [r3, #0]
 80110fa:	f3bf 8f4f 	dsb	sy
 80110fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011102:	f001 fc57 	bl	80129b4 <vPortExitCritical>
				return pdPASS;
 8011106:	2301      	movs	r3, #1
 8011108:	e099      	b.n	801123e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d113      	bne.n	8011138 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011112:	2b00      	cmp	r3, #0
 8011114:	d00c      	beq.n	8011130 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8011116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111a:	b672      	cpsid	i
 801111c:	f383 8811 	msr	BASEPRI, r3
 8011120:	f3bf 8f6f 	isb	sy
 8011124:	f3bf 8f4f 	dsb	sy
 8011128:	b662      	cpsie	i
 801112a:	617b      	str	r3, [r7, #20]
}
 801112c:	bf00      	nop
 801112e:	e7fe      	b.n	801112e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011130:	f001 fc40 	bl	80129b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011134:	2300      	movs	r3, #0
 8011136:	e082      	b.n	801123e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801113a:	2b00      	cmp	r3, #0
 801113c:	d106      	bne.n	801114c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801113e:	f107 030c 	add.w	r3, r7, #12
 8011142:	4618      	mov	r0, r3
 8011144:	f000 ff52 	bl	8011fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011148:	2301      	movs	r3, #1
 801114a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801114c:	f001 fc32 	bl	80129b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011150:	f000 fcb8 	bl	8011ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011154:	f001 fbfa 	bl	801294c <vPortEnterCritical>
 8011158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801115e:	b25b      	sxtb	r3, r3
 8011160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011164:	d103      	bne.n	801116e <xQueueSemaphoreTake+0x14a>
 8011166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011168:	2200      	movs	r2, #0
 801116a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011174:	b25b      	sxtb	r3, r3
 8011176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801117a:	d103      	bne.n	8011184 <xQueueSemaphoreTake+0x160>
 801117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117e:	2200      	movs	r2, #0
 8011180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011184:	f001 fc16 	bl	80129b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011188:	463a      	mov	r2, r7
 801118a:	f107 030c 	add.w	r3, r7, #12
 801118e:	4611      	mov	r1, r2
 8011190:	4618      	mov	r0, r3
 8011192:	f000 ff41 	bl	8012018 <xTaskCheckForTimeOut>
 8011196:	4603      	mov	r3, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	d132      	bne.n	8011202 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801119c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801119e:	f000 f9fa 	bl	8011596 <prvIsQueueEmpty>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d026      	beq.n	80111f6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d109      	bne.n	80111c4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80111b0:	f001 fbcc 	bl	801294c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80111b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b6:	689b      	ldr	r3, [r3, #8]
 80111b8:	4618      	mov	r0, r3
 80111ba:	f001 f897 	bl	80122ec <xTaskPriorityInherit>
 80111be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80111c0:	f001 fbf8 	bl	80129b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80111c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c6:	3324      	adds	r3, #36	; 0x24
 80111c8:	683a      	ldr	r2, [r7, #0]
 80111ca:	4611      	mov	r1, r2
 80111cc:	4618      	mov	r0, r3
 80111ce:	f000 fe83 	bl	8011ed8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80111d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111d4:	f000 f98d 	bl	80114f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80111d8:	f000 fc82 	bl	8011ae0 <xTaskResumeAll>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	f47f af66 	bne.w	80110b0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80111e4:	4b18      	ldr	r3, [pc, #96]	; (8011248 <xQueueSemaphoreTake+0x224>)
 80111e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111ea:	601a      	str	r2, [r3, #0]
 80111ec:	f3bf 8f4f 	dsb	sy
 80111f0:	f3bf 8f6f 	isb	sy
 80111f4:	e75c      	b.n	80110b0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80111f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111f8:	f000 f97b 	bl	80114f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80111fc:	f000 fc70 	bl	8011ae0 <xTaskResumeAll>
 8011200:	e756      	b.n	80110b0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011204:	f000 f975 	bl	80114f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011208:	f000 fc6a 	bl	8011ae0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801120c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801120e:	f000 f9c2 	bl	8011596 <prvIsQueueEmpty>
 8011212:	4603      	mov	r3, r0
 8011214:	2b00      	cmp	r3, #0
 8011216:	f43f af4b 	beq.w	80110b0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121c:	2b00      	cmp	r3, #0
 801121e:	d00d      	beq.n	801123c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8011220:	f001 fb94 	bl	801294c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011226:	f000 f8bc 	bl	80113a2 <prvGetDisinheritPriorityAfterTimeout>
 801122a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122e:	689b      	ldr	r3, [r3, #8]
 8011230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011232:	4618      	mov	r0, r3
 8011234:	f001 f964 	bl	8012500 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011238:	f001 fbbc 	bl	80129b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801123c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801123e:	4618      	mov	r0, r3
 8011240:	3738      	adds	r7, #56	; 0x38
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	e000ed04 	.word	0xe000ed04

0801124c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b08e      	sub	sp, #56	; 0x38
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125e:	2b00      	cmp	r3, #0
 8011260:	d10c      	bne.n	801127c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8011262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011266:	b672      	cpsid	i
 8011268:	f383 8811 	msr	BASEPRI, r3
 801126c:	f3bf 8f6f 	isb	sy
 8011270:	f3bf 8f4f 	dsb	sy
 8011274:	b662      	cpsie	i
 8011276:	623b      	str	r3, [r7, #32]
}
 8011278:	bf00      	nop
 801127a:	e7fe      	b.n	801127a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d103      	bne.n	801128a <xQueueReceiveFromISR+0x3e>
 8011282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011286:	2b00      	cmp	r3, #0
 8011288:	d101      	bne.n	801128e <xQueueReceiveFromISR+0x42>
 801128a:	2301      	movs	r3, #1
 801128c:	e000      	b.n	8011290 <xQueueReceiveFromISR+0x44>
 801128e:	2300      	movs	r3, #0
 8011290:	2b00      	cmp	r3, #0
 8011292:	d10c      	bne.n	80112ae <xQueueReceiveFromISR+0x62>
	__asm volatile
 8011294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011298:	b672      	cpsid	i
 801129a:	f383 8811 	msr	BASEPRI, r3
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	f3bf 8f4f 	dsb	sy
 80112a6:	b662      	cpsie	i
 80112a8:	61fb      	str	r3, [r7, #28]
}
 80112aa:	bf00      	nop
 80112ac:	e7fe      	b.n	80112ac <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112ae:	f001 fc35 	bl	8012b1c <vPortValidateInterruptPriority>
	__asm volatile
 80112b2:	f3ef 8211 	mrs	r2, BASEPRI
 80112b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ba:	b672      	cpsid	i
 80112bc:	f383 8811 	msr	BASEPRI, r3
 80112c0:	f3bf 8f6f 	isb	sy
 80112c4:	f3bf 8f4f 	dsb	sy
 80112c8:	b662      	cpsie	i
 80112ca:	61ba      	str	r2, [r7, #24]
 80112cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80112ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d02f      	beq.n	801133e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80112de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80112e8:	68b9      	ldr	r1, [r7, #8]
 80112ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112ec:	f000 f8db 	bl	80114a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80112f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f2:	1e5a      	subs	r2, r3, #1
 80112f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80112f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80112fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011300:	d112      	bne.n	8011328 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011304:	691b      	ldr	r3, [r3, #16]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d016      	beq.n	8011338 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130c:	3310      	adds	r3, #16
 801130e:	4618      	mov	r0, r3
 8011310:	f000 fe08 	bl	8011f24 <xTaskRemoveFromEventList>
 8011314:	4603      	mov	r3, r0
 8011316:	2b00      	cmp	r3, #0
 8011318:	d00e      	beq.n	8011338 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d00b      	beq.n	8011338 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2201      	movs	r2, #1
 8011324:	601a      	str	r2, [r3, #0]
 8011326:	e007      	b.n	8011338 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801132c:	3301      	adds	r3, #1
 801132e:	b2db      	uxtb	r3, r3
 8011330:	b25a      	sxtb	r2, r3
 8011332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011338:	2301      	movs	r3, #1
 801133a:	637b      	str	r3, [r7, #52]	; 0x34
 801133c:	e001      	b.n	8011342 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801133e:	2300      	movs	r3, #0
 8011340:	637b      	str	r3, [r7, #52]	; 0x34
 8011342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011344:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	f383 8811 	msr	BASEPRI, r3
}
 801134c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011350:	4618      	mov	r0, r3
 8011352:	3738      	adds	r7, #56	; 0x38
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b084      	sub	sp, #16
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d10c      	bne.n	8011384 <vQueueDelete+0x2c>
	__asm volatile
 801136a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136e:	b672      	cpsid	i
 8011370:	f383 8811 	msr	BASEPRI, r3
 8011374:	f3bf 8f6f 	isb	sy
 8011378:	f3bf 8f4f 	dsb	sy
 801137c:	b662      	cpsie	i
 801137e:	60bb      	str	r3, [r7, #8]
}
 8011380:	bf00      	nop
 8011382:	e7fe      	b.n	8011382 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f000 f935 	bl	80115f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011390:	2b00      	cmp	r3, #0
 8011392:	d102      	bne.n	801139a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	f001 fcd5 	bl	8012d44 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801139a:	bf00      	nop
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}

080113a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80113a2:	b480      	push	{r7}
 80113a4:	b085      	sub	sp, #20
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d006      	beq.n	80113c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f1c3 0307 	rsb	r3, r3, #7
 80113bc:	60fb      	str	r3, [r7, #12]
 80113be:	e001      	b.n	80113c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80113c0:	2300      	movs	r3, #0
 80113c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80113c4:	68fb      	ldr	r3, [r7, #12]
	}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3714      	adds	r7, #20
 80113ca:	46bd      	mov	sp, r7
 80113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d0:	4770      	bx	lr

080113d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80113d2:	b580      	push	{r7, lr}
 80113d4:	b086      	sub	sp, #24
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	60f8      	str	r0, [r7, #12]
 80113da:	60b9      	str	r1, [r7, #8]
 80113dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80113de:	2300      	movs	r3, #0
 80113e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d10d      	bne.n	801140c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d14d      	bne.n	8011494 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	689b      	ldr	r3, [r3, #8]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f000 fff5 	bl	80123ec <xTaskPriorityDisinherit>
 8011402:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2200      	movs	r2, #0
 8011408:	609a      	str	r2, [r3, #8]
 801140a:	e043      	b.n	8011494 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d119      	bne.n	8011446 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	6858      	ldr	r0, [r3, #4]
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801141a:	461a      	mov	r2, r3
 801141c:	68b9      	ldr	r1, [r7, #8]
 801141e:	f001 fdcf 	bl	8012fc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	685a      	ldr	r2, [r3, #4]
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801142a:	441a      	add	r2, r3
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	685a      	ldr	r2, [r3, #4]
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	689b      	ldr	r3, [r3, #8]
 8011438:	429a      	cmp	r2, r3
 801143a:	d32b      	bcc.n	8011494 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	605a      	str	r2, [r3, #4]
 8011444:	e026      	b.n	8011494 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	68d8      	ldr	r0, [r3, #12]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801144e:	461a      	mov	r2, r3
 8011450:	68b9      	ldr	r1, [r7, #8]
 8011452:	f001 fdb5 	bl	8012fc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	68da      	ldr	r2, [r3, #12]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801145e:	425b      	negs	r3, r3
 8011460:	441a      	add	r2, r3
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	68da      	ldr	r2, [r3, #12]
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	429a      	cmp	r2, r3
 8011470:	d207      	bcs.n	8011482 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	689a      	ldr	r2, [r3, #8]
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801147a:	425b      	negs	r3, r3
 801147c:	441a      	add	r2, r3
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2b02      	cmp	r3, #2
 8011486:	d105      	bne.n	8011494 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d002      	beq.n	8011494 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	3b01      	subs	r3, #1
 8011492:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	1c5a      	adds	r2, r3, #1
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801149c:	697b      	ldr	r3, [r7, #20]
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3718      	adds	r7, #24
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}

080114a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80114a6:	b580      	push	{r7, lr}
 80114a8:	b082      	sub	sp, #8
 80114aa:	af00      	add	r7, sp, #0
 80114ac:	6078      	str	r0, [r7, #4]
 80114ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d018      	beq.n	80114ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	68da      	ldr	r2, [r3, #12]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114c0:	441a      	add	r2, r3
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	68da      	ldr	r2, [r3, #12]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	689b      	ldr	r3, [r3, #8]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d303      	bcc.n	80114da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	68d9      	ldr	r1, [r3, #12]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114e2:	461a      	mov	r2, r3
 80114e4:	6838      	ldr	r0, [r7, #0]
 80114e6:	f001 fd6b 	bl	8012fc0 <memcpy>
	}
}
 80114ea:	bf00      	nop
 80114ec:	3708      	adds	r7, #8
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}

080114f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b084      	sub	sp, #16
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80114fa:	f001 fa27 	bl	801294c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011504:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011506:	e011      	b.n	801152c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801150c:	2b00      	cmp	r3, #0
 801150e:	d012      	beq.n	8011536 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	3324      	adds	r3, #36	; 0x24
 8011514:	4618      	mov	r0, r3
 8011516:	f000 fd05 	bl	8011f24 <xTaskRemoveFromEventList>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d001      	beq.n	8011524 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011520:	f000 fde0 	bl	80120e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011524:	7bfb      	ldrb	r3, [r7, #15]
 8011526:	3b01      	subs	r3, #1
 8011528:	b2db      	uxtb	r3, r3
 801152a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801152c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011530:	2b00      	cmp	r3, #0
 8011532:	dce9      	bgt.n	8011508 <prvUnlockQueue+0x16>
 8011534:	e000      	b.n	8011538 <prvUnlockQueue+0x46>
					break;
 8011536:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	22ff      	movs	r2, #255	; 0xff
 801153c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011540:	f001 fa38 	bl	80129b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011544:	f001 fa02 	bl	801294c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801154e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011550:	e011      	b.n	8011576 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	691b      	ldr	r3, [r3, #16]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d012      	beq.n	8011580 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	3310      	adds	r3, #16
 801155e:	4618      	mov	r0, r3
 8011560:	f000 fce0 	bl	8011f24 <xTaskRemoveFromEventList>
 8011564:	4603      	mov	r3, r0
 8011566:	2b00      	cmp	r3, #0
 8011568:	d001      	beq.n	801156e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801156a:	f000 fdbb 	bl	80120e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801156e:	7bbb      	ldrb	r3, [r7, #14]
 8011570:	3b01      	subs	r3, #1
 8011572:	b2db      	uxtb	r3, r3
 8011574:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801157a:	2b00      	cmp	r3, #0
 801157c:	dce9      	bgt.n	8011552 <prvUnlockQueue+0x60>
 801157e:	e000      	b.n	8011582 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011580:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	22ff      	movs	r2, #255	; 0xff
 8011586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801158a:	f001 fa13 	bl	80129b4 <vPortExitCritical>
}
 801158e:	bf00      	nop
 8011590:	3710      	adds	r7, #16
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b084      	sub	sp, #16
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801159e:	f001 f9d5 	bl	801294c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d102      	bne.n	80115b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80115aa:	2301      	movs	r3, #1
 80115ac:	60fb      	str	r3, [r7, #12]
 80115ae:	e001      	b.n	80115b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80115b0:	2300      	movs	r3, #0
 80115b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80115b4:	f001 f9fe 	bl	80129b4 <vPortExitCritical>

	return xReturn;
 80115b8:	68fb      	ldr	r3, [r7, #12]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}

080115c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80115c2:	b580      	push	{r7, lr}
 80115c4:	b084      	sub	sp, #16
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80115ca:	f001 f9bf 	bl	801294c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d102      	bne.n	80115e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80115da:	2301      	movs	r3, #1
 80115dc:	60fb      	str	r3, [r7, #12]
 80115de:	e001      	b.n	80115e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80115e0:	2300      	movs	r3, #0
 80115e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80115e4:	f001 f9e6 	bl	80129b4 <vPortExitCritical>

	return xReturn;
 80115e8:	68fb      	ldr	r3, [r7, #12]
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3710      	adds	r7, #16
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
	...

080115f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80115f4:	b480      	push	{r7}
 80115f6:	b085      	sub	sp, #20
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80115fc:	2300      	movs	r3, #0
 80115fe:	60fb      	str	r3, [r7, #12]
 8011600:	e016      	b.n	8011630 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011602:	4a10      	ldr	r2, [pc, #64]	; (8011644 <vQueueUnregisterQueue+0x50>)
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	00db      	lsls	r3, r3, #3
 8011608:	4413      	add	r3, r2
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	429a      	cmp	r2, r3
 8011610:	d10b      	bne.n	801162a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011612:	4a0c      	ldr	r2, [pc, #48]	; (8011644 <vQueueUnregisterQueue+0x50>)
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	2100      	movs	r1, #0
 8011618:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801161c:	4a09      	ldr	r2, [pc, #36]	; (8011644 <vQueueUnregisterQueue+0x50>)
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	00db      	lsls	r3, r3, #3
 8011622:	4413      	add	r3, r2
 8011624:	2200      	movs	r2, #0
 8011626:	605a      	str	r2, [r3, #4]
				break;
 8011628:	e006      	b.n	8011638 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	3301      	adds	r3, #1
 801162e:	60fb      	str	r3, [r7, #12]
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2b07      	cmp	r3, #7
 8011634:	d9e5      	bls.n	8011602 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011636:	bf00      	nop
 8011638:	bf00      	nop
 801163a:	3714      	adds	r7, #20
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr
 8011644:	200096c0 	.word	0x200096c0

08011648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011648:	b580      	push	{r7, lr}
 801164a:	b08e      	sub	sp, #56	; 0x38
 801164c:	af04      	add	r7, sp, #16
 801164e:	60f8      	str	r0, [r7, #12]
 8011650:	60b9      	str	r1, [r7, #8]
 8011652:	607a      	str	r2, [r7, #4]
 8011654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011658:	2b00      	cmp	r3, #0
 801165a:	d10c      	bne.n	8011676 <xTaskCreateStatic+0x2e>
	__asm volatile
 801165c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011660:	b672      	cpsid	i
 8011662:	f383 8811 	msr	BASEPRI, r3
 8011666:	f3bf 8f6f 	isb	sy
 801166a:	f3bf 8f4f 	dsb	sy
 801166e:	b662      	cpsie	i
 8011670:	623b      	str	r3, [r7, #32]
}
 8011672:	bf00      	nop
 8011674:	e7fe      	b.n	8011674 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011678:	2b00      	cmp	r3, #0
 801167a:	d10c      	bne.n	8011696 <xTaskCreateStatic+0x4e>
	__asm volatile
 801167c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011680:	b672      	cpsid	i
 8011682:	f383 8811 	msr	BASEPRI, r3
 8011686:	f3bf 8f6f 	isb	sy
 801168a:	f3bf 8f4f 	dsb	sy
 801168e:	b662      	cpsie	i
 8011690:	61fb      	str	r3, [r7, #28]
}
 8011692:	bf00      	nop
 8011694:	e7fe      	b.n	8011694 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011696:	2354      	movs	r3, #84	; 0x54
 8011698:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	2b54      	cmp	r3, #84	; 0x54
 801169e:	d00c      	beq.n	80116ba <xTaskCreateStatic+0x72>
	__asm volatile
 80116a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a4:	b672      	cpsid	i
 80116a6:	f383 8811 	msr	BASEPRI, r3
 80116aa:	f3bf 8f6f 	isb	sy
 80116ae:	f3bf 8f4f 	dsb	sy
 80116b2:	b662      	cpsie	i
 80116b4:	61bb      	str	r3, [r7, #24]
}
 80116b6:	bf00      	nop
 80116b8:	e7fe      	b.n	80116b8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80116ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d01e      	beq.n	8011700 <xTaskCreateStatic+0xb8>
 80116c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d01b      	beq.n	8011700 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80116c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80116cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80116d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d4:	2202      	movs	r2, #2
 80116d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80116da:	2300      	movs	r3, #0
 80116dc:	9303      	str	r3, [sp, #12]
 80116de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e0:	9302      	str	r3, [sp, #8]
 80116e2:	f107 0314 	add.w	r3, r7, #20
 80116e6:	9301      	str	r3, [sp, #4]
 80116e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	68b9      	ldr	r1, [r7, #8]
 80116f2:	68f8      	ldr	r0, [r7, #12]
 80116f4:	f000 f850 	bl	8011798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116fa:	f000 f8df 	bl	80118bc <prvAddNewTaskToReadyList>
 80116fe:	e001      	b.n	8011704 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8011700:	2300      	movs	r3, #0
 8011702:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011704:	697b      	ldr	r3, [r7, #20]
	}
 8011706:	4618      	mov	r0, r3
 8011708:	3728      	adds	r7, #40	; 0x28
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}

0801170e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801170e:	b580      	push	{r7, lr}
 8011710:	b08c      	sub	sp, #48	; 0x30
 8011712:	af04      	add	r7, sp, #16
 8011714:	60f8      	str	r0, [r7, #12]
 8011716:	60b9      	str	r1, [r7, #8]
 8011718:	603b      	str	r3, [r7, #0]
 801171a:	4613      	mov	r3, r2
 801171c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801171e:	88fb      	ldrh	r3, [r7, #6]
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	4618      	mov	r0, r3
 8011724:	f001 fa3e 	bl	8012ba4 <pvPortMalloc>
 8011728:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d00e      	beq.n	801174e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011730:	2054      	movs	r0, #84	; 0x54
 8011732:	f001 fa37 	bl	8012ba4 <pvPortMalloc>
 8011736:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d003      	beq.n	8011746 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	697a      	ldr	r2, [r7, #20]
 8011742:	631a      	str	r2, [r3, #48]	; 0x30
 8011744:	e005      	b.n	8011752 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011746:	6978      	ldr	r0, [r7, #20]
 8011748:	f001 fafc 	bl	8012d44 <vPortFree>
 801174c:	e001      	b.n	8011752 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801174e:	2300      	movs	r3, #0
 8011750:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011752:	69fb      	ldr	r3, [r7, #28]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d017      	beq.n	8011788 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	2200      	movs	r2, #0
 801175c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011760:	88fa      	ldrh	r2, [r7, #6]
 8011762:	2300      	movs	r3, #0
 8011764:	9303      	str	r3, [sp, #12]
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	9302      	str	r3, [sp, #8]
 801176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176c:	9301      	str	r3, [sp, #4]
 801176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011770:	9300      	str	r3, [sp, #0]
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	68b9      	ldr	r1, [r7, #8]
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	f000 f80e 	bl	8011798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801177c:	69f8      	ldr	r0, [r7, #28]
 801177e:	f000 f89d 	bl	80118bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011782:	2301      	movs	r3, #1
 8011784:	61bb      	str	r3, [r7, #24]
 8011786:	e002      	b.n	801178e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011788:	f04f 33ff 	mov.w	r3, #4294967295
 801178c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801178e:	69bb      	ldr	r3, [r7, #24]
	}
 8011790:	4618      	mov	r0, r3
 8011792:	3720      	adds	r7, #32
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}

08011798 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b088      	sub	sp, #32
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
 80117a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80117a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	461a      	mov	r2, r3
 80117b0:	21a5      	movs	r1, #165	; 0xa5
 80117b2:	f001 fc13 	bl	8012fdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80117b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80117ba:	6879      	ldr	r1, [r7, #4]
 80117bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80117c0:	440b      	add	r3, r1
 80117c2:	009b      	lsls	r3, r3, #2
 80117c4:	4413      	add	r3, r2
 80117c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	f023 0307 	bic.w	r3, r3, #7
 80117ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80117d0:	69bb      	ldr	r3, [r7, #24]
 80117d2:	f003 0307 	and.w	r3, r3, #7
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d00c      	beq.n	80117f4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80117da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117de:	b672      	cpsid	i
 80117e0:	f383 8811 	msr	BASEPRI, r3
 80117e4:	f3bf 8f6f 	isb	sy
 80117e8:	f3bf 8f4f 	dsb	sy
 80117ec:	b662      	cpsie	i
 80117ee:	617b      	str	r3, [r7, #20]
}
 80117f0:	bf00      	nop
 80117f2:	e7fe      	b.n	80117f2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d01f      	beq.n	801183a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117fa:	2300      	movs	r3, #0
 80117fc:	61fb      	str	r3, [r7, #28]
 80117fe:	e012      	b.n	8011826 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011800:	68ba      	ldr	r2, [r7, #8]
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	4413      	add	r3, r2
 8011806:	7819      	ldrb	r1, [r3, #0]
 8011808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	4413      	add	r3, r2
 801180e:	3334      	adds	r3, #52	; 0x34
 8011810:	460a      	mov	r2, r1
 8011812:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011814:	68ba      	ldr	r2, [r7, #8]
 8011816:	69fb      	ldr	r3, [r7, #28]
 8011818:	4413      	add	r3, r2
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d006      	beq.n	801182e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	3301      	adds	r3, #1
 8011824:	61fb      	str	r3, [r7, #28]
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	2b0f      	cmp	r3, #15
 801182a:	d9e9      	bls.n	8011800 <prvInitialiseNewTask+0x68>
 801182c:	e000      	b.n	8011830 <prvInitialiseNewTask+0x98>
			{
				break;
 801182e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011832:	2200      	movs	r2, #0
 8011834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011838:	e003      	b.n	8011842 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801183c:	2200      	movs	r2, #0
 801183e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011844:	2b06      	cmp	r3, #6
 8011846:	d901      	bls.n	801184c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011848:	2306      	movs	r3, #6
 801184a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801184c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011850:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011856:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185a:	2200      	movs	r2, #0
 801185c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011860:	3304      	adds	r3, #4
 8011862:	4618      	mov	r0, r3
 8011864:	f7fe feda 	bl	801061c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801186a:	3318      	adds	r3, #24
 801186c:	4618      	mov	r0, r3
 801186e:	f7fe fed5 	bl	801061c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011876:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801187a:	f1c3 0207 	rsb	r2, r3, #7
 801187e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011880:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011886:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188a:	2200      	movs	r2, #0
 801188c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011890:	2200      	movs	r2, #0
 8011892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011896:	683a      	ldr	r2, [r7, #0]
 8011898:	68f9      	ldr	r1, [r7, #12]
 801189a:	69b8      	ldr	r0, [r7, #24]
 801189c:	f000 ff48 	bl	8012730 <pxPortInitialiseStack>
 80118a0:	4602      	mov	r2, r0
 80118a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80118a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d002      	beq.n	80118b2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80118ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118b2:	bf00      	nop
 80118b4:	3720      	adds	r7, #32
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
	...

080118bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80118c4:	f001 f842 	bl	801294c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80118c8:	4b2a      	ldr	r3, [pc, #168]	; (8011974 <prvAddNewTaskToReadyList+0xb8>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	3301      	adds	r3, #1
 80118ce:	4a29      	ldr	r2, [pc, #164]	; (8011974 <prvAddNewTaskToReadyList+0xb8>)
 80118d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80118d2:	4b29      	ldr	r3, [pc, #164]	; (8011978 <prvAddNewTaskToReadyList+0xbc>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d109      	bne.n	80118ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80118da:	4a27      	ldr	r2, [pc, #156]	; (8011978 <prvAddNewTaskToReadyList+0xbc>)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80118e0:	4b24      	ldr	r3, [pc, #144]	; (8011974 <prvAddNewTaskToReadyList+0xb8>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d110      	bne.n	801190a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80118e8:	f000 fc22 	bl	8012130 <prvInitialiseTaskLists>
 80118ec:	e00d      	b.n	801190a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80118ee:	4b23      	ldr	r3, [pc, #140]	; (801197c <prvAddNewTaskToReadyList+0xc0>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d109      	bne.n	801190a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80118f6:	4b20      	ldr	r3, [pc, #128]	; (8011978 <prvAddNewTaskToReadyList+0xbc>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011900:	429a      	cmp	r2, r3
 8011902:	d802      	bhi.n	801190a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011904:	4a1c      	ldr	r2, [pc, #112]	; (8011978 <prvAddNewTaskToReadyList+0xbc>)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801190a:	4b1d      	ldr	r3, [pc, #116]	; (8011980 <prvAddNewTaskToReadyList+0xc4>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	3301      	adds	r3, #1
 8011910:	4a1b      	ldr	r2, [pc, #108]	; (8011980 <prvAddNewTaskToReadyList+0xc4>)
 8011912:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011918:	2201      	movs	r2, #1
 801191a:	409a      	lsls	r2, r3
 801191c:	4b19      	ldr	r3, [pc, #100]	; (8011984 <prvAddNewTaskToReadyList+0xc8>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	4313      	orrs	r3, r2
 8011922:	4a18      	ldr	r2, [pc, #96]	; (8011984 <prvAddNewTaskToReadyList+0xc8>)
 8011924:	6013      	str	r3, [r2, #0]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801192a:	4613      	mov	r3, r2
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	4413      	add	r3, r2
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	4a15      	ldr	r2, [pc, #84]	; (8011988 <prvAddNewTaskToReadyList+0xcc>)
 8011934:	441a      	add	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	3304      	adds	r3, #4
 801193a:	4619      	mov	r1, r3
 801193c:	4610      	mov	r0, r2
 801193e:	f7fe fe7a 	bl	8010636 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011942:	f001 f837 	bl	80129b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011946:	4b0d      	ldr	r3, [pc, #52]	; (801197c <prvAddNewTaskToReadyList+0xc0>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00e      	beq.n	801196c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801194e:	4b0a      	ldr	r3, [pc, #40]	; (8011978 <prvAddNewTaskToReadyList+0xbc>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011958:	429a      	cmp	r2, r3
 801195a:	d207      	bcs.n	801196c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801195c:	4b0b      	ldr	r3, [pc, #44]	; (801198c <prvAddNewTaskToReadyList+0xd0>)
 801195e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011962:	601a      	str	r2, [r3, #0]
 8011964:	f3bf 8f4f 	dsb	sy
 8011968:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801196c:	bf00      	nop
 801196e:	3708      	adds	r7, #8
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}
 8011974:	200007d0 	.word	0x200007d0
 8011978:	200006d0 	.word	0x200006d0
 801197c:	200007dc 	.word	0x200007dc
 8011980:	200007ec 	.word	0x200007ec
 8011984:	200007d8 	.word	0x200007d8
 8011988:	200006d4 	.word	0x200006d4
 801198c:	e000ed04 	.word	0xe000ed04

08011990 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011990:	b580      	push	{r7, lr}
 8011992:	b084      	sub	sp, #16
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011998:	2300      	movs	r3, #0
 801199a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d019      	beq.n	80119d6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80119a2:	4b14      	ldr	r3, [pc, #80]	; (80119f4 <vTaskDelay+0x64>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d00c      	beq.n	80119c4 <vTaskDelay+0x34>
	__asm volatile
 80119aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ae:	b672      	cpsid	i
 80119b0:	f383 8811 	msr	BASEPRI, r3
 80119b4:	f3bf 8f6f 	isb	sy
 80119b8:	f3bf 8f4f 	dsb	sy
 80119bc:	b662      	cpsie	i
 80119be:	60bb      	str	r3, [r7, #8]
}
 80119c0:	bf00      	nop
 80119c2:	e7fe      	b.n	80119c2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80119c4:	f000 f87e 	bl	8011ac4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80119c8:	2100      	movs	r1, #0
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 fe4a 	bl	8012664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80119d0:	f000 f886 	bl	8011ae0 <xTaskResumeAll>
 80119d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d107      	bne.n	80119ec <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80119dc:	4b06      	ldr	r3, [pc, #24]	; (80119f8 <vTaskDelay+0x68>)
 80119de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119e2:	601a      	str	r2, [r3, #0]
 80119e4:	f3bf 8f4f 	dsb	sy
 80119e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80119ec:	bf00      	nop
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	200007f8 	.word	0x200007f8
 80119f8:	e000ed04 	.word	0xe000ed04

080119fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b08a      	sub	sp, #40	; 0x28
 8011a00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011a02:	2300      	movs	r3, #0
 8011a04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011a06:	2300      	movs	r3, #0
 8011a08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011a0a:	463a      	mov	r2, r7
 8011a0c:	1d39      	adds	r1, r7, #4
 8011a0e:	f107 0308 	add.w	r3, r7, #8
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7ee fd9a 	bl	800054c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011a18:	6839      	ldr	r1, [r7, #0]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	68ba      	ldr	r2, [r7, #8]
 8011a1e:	9202      	str	r2, [sp, #8]
 8011a20:	9301      	str	r3, [sp, #4]
 8011a22:	2300      	movs	r3, #0
 8011a24:	9300      	str	r3, [sp, #0]
 8011a26:	2300      	movs	r3, #0
 8011a28:	460a      	mov	r2, r1
 8011a2a:	4920      	ldr	r1, [pc, #128]	; (8011aac <vTaskStartScheduler+0xb0>)
 8011a2c:	4820      	ldr	r0, [pc, #128]	; (8011ab0 <vTaskStartScheduler+0xb4>)
 8011a2e:	f7ff fe0b 	bl	8011648 <xTaskCreateStatic>
 8011a32:	4603      	mov	r3, r0
 8011a34:	4a1f      	ldr	r2, [pc, #124]	; (8011ab4 <vTaskStartScheduler+0xb8>)
 8011a36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011a38:	4b1e      	ldr	r3, [pc, #120]	; (8011ab4 <vTaskStartScheduler+0xb8>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d002      	beq.n	8011a46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011a40:	2301      	movs	r3, #1
 8011a42:	617b      	str	r3, [r7, #20]
 8011a44:	e001      	b.n	8011a4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011a46:	2300      	movs	r3, #0
 8011a48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d118      	bne.n	8011a82 <vTaskStartScheduler+0x86>
	__asm volatile
 8011a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a54:	b672      	cpsid	i
 8011a56:	f383 8811 	msr	BASEPRI, r3
 8011a5a:	f3bf 8f6f 	isb	sy
 8011a5e:	f3bf 8f4f 	dsb	sy
 8011a62:	b662      	cpsie	i
 8011a64:	613b      	str	r3, [r7, #16]
}
 8011a66:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011a68:	4b13      	ldr	r3, [pc, #76]	; (8011ab8 <vTaskStartScheduler+0xbc>)
 8011a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011a70:	4b12      	ldr	r3, [pc, #72]	; (8011abc <vTaskStartScheduler+0xc0>)
 8011a72:	2201      	movs	r2, #1
 8011a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011a76:	4b12      	ldr	r3, [pc, #72]	; (8011ac0 <vTaskStartScheduler+0xc4>)
 8011a78:	2200      	movs	r2, #0
 8011a7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011a7c:	f000 fee8 	bl	8012850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011a80:	e010      	b.n	8011aa4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a88:	d10c      	bne.n	8011aa4 <vTaskStartScheduler+0xa8>
	__asm volatile
 8011a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8e:	b672      	cpsid	i
 8011a90:	f383 8811 	msr	BASEPRI, r3
 8011a94:	f3bf 8f6f 	isb	sy
 8011a98:	f3bf 8f4f 	dsb	sy
 8011a9c:	b662      	cpsie	i
 8011a9e:	60fb      	str	r3, [r7, #12]
}
 8011aa0:	bf00      	nop
 8011aa2:	e7fe      	b.n	8011aa2 <vTaskStartScheduler+0xa6>
}
 8011aa4:	bf00      	nop
 8011aa6:	3718      	adds	r7, #24
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	08013160 	.word	0x08013160
 8011ab0:	080120fd 	.word	0x080120fd
 8011ab4:	200007f4 	.word	0x200007f4
 8011ab8:	200007f0 	.word	0x200007f0
 8011abc:	200007dc 	.word	0x200007dc
 8011ac0:	200007d4 	.word	0x200007d4

08011ac4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011ac8:	4b04      	ldr	r3, [pc, #16]	; (8011adc <vTaskSuspendAll+0x18>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	3301      	adds	r3, #1
 8011ace:	4a03      	ldr	r2, [pc, #12]	; (8011adc <vTaskSuspendAll+0x18>)
 8011ad0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011ad2:	bf00      	nop
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ada:	4770      	bx	lr
 8011adc:	200007f8 	.word	0x200007f8

08011ae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b084      	sub	sp, #16
 8011ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011aea:	2300      	movs	r3, #0
 8011aec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011aee:	4b42      	ldr	r3, [pc, #264]	; (8011bf8 <xTaskResumeAll+0x118>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d10c      	bne.n	8011b10 <xTaskResumeAll+0x30>
	__asm volatile
 8011af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afa:	b672      	cpsid	i
 8011afc:	f383 8811 	msr	BASEPRI, r3
 8011b00:	f3bf 8f6f 	isb	sy
 8011b04:	f3bf 8f4f 	dsb	sy
 8011b08:	b662      	cpsie	i
 8011b0a:	603b      	str	r3, [r7, #0]
}
 8011b0c:	bf00      	nop
 8011b0e:	e7fe      	b.n	8011b0e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011b10:	f000 ff1c 	bl	801294c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011b14:	4b38      	ldr	r3, [pc, #224]	; (8011bf8 <xTaskResumeAll+0x118>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	4a37      	ldr	r2, [pc, #220]	; (8011bf8 <xTaskResumeAll+0x118>)
 8011b1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b1e:	4b36      	ldr	r3, [pc, #216]	; (8011bf8 <xTaskResumeAll+0x118>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d161      	bne.n	8011bea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011b26:	4b35      	ldr	r3, [pc, #212]	; (8011bfc <xTaskResumeAll+0x11c>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d05d      	beq.n	8011bea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b2e:	e02e      	b.n	8011b8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b30:	4b33      	ldr	r3, [pc, #204]	; (8011c00 <xTaskResumeAll+0x120>)
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	3318      	adds	r3, #24
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7fe fdd7 	bl	80106f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	3304      	adds	r3, #4
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7fe fdd2 	bl	80106f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b50:	2201      	movs	r2, #1
 8011b52:	409a      	lsls	r2, r3
 8011b54:	4b2b      	ldr	r3, [pc, #172]	; (8011c04 <xTaskResumeAll+0x124>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	4313      	orrs	r3, r2
 8011b5a:	4a2a      	ldr	r2, [pc, #168]	; (8011c04 <xTaskResumeAll+0x124>)
 8011b5c:	6013      	str	r3, [r2, #0]
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b62:	4613      	mov	r3, r2
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	4413      	add	r3, r2
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	4a27      	ldr	r2, [pc, #156]	; (8011c08 <xTaskResumeAll+0x128>)
 8011b6c:	441a      	add	r2, r3
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	3304      	adds	r3, #4
 8011b72:	4619      	mov	r1, r3
 8011b74:	4610      	mov	r0, r2
 8011b76:	f7fe fd5e 	bl	8010636 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b7e:	4b23      	ldr	r3, [pc, #140]	; (8011c0c <xTaskResumeAll+0x12c>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d302      	bcc.n	8011b8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011b88:	4b21      	ldr	r3, [pc, #132]	; (8011c10 <xTaskResumeAll+0x130>)
 8011b8a:	2201      	movs	r2, #1
 8011b8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b8e:	4b1c      	ldr	r3, [pc, #112]	; (8011c00 <xTaskResumeAll+0x120>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d1cc      	bne.n	8011b30 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d001      	beq.n	8011ba0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011b9c:	f000 fb68 	bl	8012270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011ba0:	4b1c      	ldr	r3, [pc, #112]	; (8011c14 <xTaskResumeAll+0x134>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d010      	beq.n	8011bce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011bac:	f000 f858 	bl	8011c60 <xTaskIncrementTick>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d002      	beq.n	8011bbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011bb6:	4b16      	ldr	r3, [pc, #88]	; (8011c10 <xTaskResumeAll+0x130>)
 8011bb8:	2201      	movs	r2, #1
 8011bba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d1f1      	bne.n	8011bac <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8011bc8:	4b12      	ldr	r3, [pc, #72]	; (8011c14 <xTaskResumeAll+0x134>)
 8011bca:	2200      	movs	r2, #0
 8011bcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011bce:	4b10      	ldr	r3, [pc, #64]	; (8011c10 <xTaskResumeAll+0x130>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d009      	beq.n	8011bea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011bda:	4b0f      	ldr	r3, [pc, #60]	; (8011c18 <xTaskResumeAll+0x138>)
 8011bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011be0:	601a      	str	r2, [r3, #0]
 8011be2:	f3bf 8f4f 	dsb	sy
 8011be6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011bea:	f000 fee3 	bl	80129b4 <vPortExitCritical>

	return xAlreadyYielded;
 8011bee:	68bb      	ldr	r3, [r7, #8]
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3710      	adds	r7, #16
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	200007f8 	.word	0x200007f8
 8011bfc:	200007d0 	.word	0x200007d0
 8011c00:	20000790 	.word	0x20000790
 8011c04:	200007d8 	.word	0x200007d8
 8011c08:	200006d4 	.word	0x200006d4
 8011c0c:	200006d0 	.word	0x200006d0
 8011c10:	200007e4 	.word	0x200007e4
 8011c14:	200007e0 	.word	0x200007e0
 8011c18:	e000ed04 	.word	0xe000ed04

08011c1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b083      	sub	sp, #12
 8011c20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011c22:	4b05      	ldr	r3, [pc, #20]	; (8011c38 <xTaskGetTickCount+0x1c>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011c28:	687b      	ldr	r3, [r7, #4]
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	370c      	adds	r7, #12
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	200007d4 	.word	0x200007d4

08011c3c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b082      	sub	sp, #8
 8011c40:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c42:	f000 ff6b 	bl	8012b1c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011c46:	2300      	movs	r3, #0
 8011c48:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011c4a:	4b04      	ldr	r3, [pc, #16]	; (8011c5c <xTaskGetTickCountFromISR+0x20>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011c50:	683b      	ldr	r3, [r7, #0]
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3708      	adds	r7, #8
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}
 8011c5a:	bf00      	nop
 8011c5c:	200007d4 	.word	0x200007d4

08011c60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b086      	sub	sp, #24
 8011c64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011c66:	2300      	movs	r3, #0
 8011c68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c6a:	4b4f      	ldr	r3, [pc, #316]	; (8011da8 <xTaskIncrementTick+0x148>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f040 808a 	bne.w	8011d88 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011c74:	4b4d      	ldr	r3, [pc, #308]	; (8011dac <xTaskIncrementTick+0x14c>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	3301      	adds	r3, #1
 8011c7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011c7c:	4a4b      	ldr	r2, [pc, #300]	; (8011dac <xTaskIncrementTick+0x14c>)
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d122      	bne.n	8011cce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8011c88:	4b49      	ldr	r3, [pc, #292]	; (8011db0 <xTaskIncrementTick+0x150>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d00c      	beq.n	8011cac <xTaskIncrementTick+0x4c>
	__asm volatile
 8011c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c96:	b672      	cpsid	i
 8011c98:	f383 8811 	msr	BASEPRI, r3
 8011c9c:	f3bf 8f6f 	isb	sy
 8011ca0:	f3bf 8f4f 	dsb	sy
 8011ca4:	b662      	cpsie	i
 8011ca6:	603b      	str	r3, [r7, #0]
}
 8011ca8:	bf00      	nop
 8011caa:	e7fe      	b.n	8011caa <xTaskIncrementTick+0x4a>
 8011cac:	4b40      	ldr	r3, [pc, #256]	; (8011db0 <xTaskIncrementTick+0x150>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	60fb      	str	r3, [r7, #12]
 8011cb2:	4b40      	ldr	r3, [pc, #256]	; (8011db4 <xTaskIncrementTick+0x154>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	4a3e      	ldr	r2, [pc, #248]	; (8011db0 <xTaskIncrementTick+0x150>)
 8011cb8:	6013      	str	r3, [r2, #0]
 8011cba:	4a3e      	ldr	r2, [pc, #248]	; (8011db4 <xTaskIncrementTick+0x154>)
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	6013      	str	r3, [r2, #0]
 8011cc0:	4b3d      	ldr	r3, [pc, #244]	; (8011db8 <xTaskIncrementTick+0x158>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	4a3c      	ldr	r2, [pc, #240]	; (8011db8 <xTaskIncrementTick+0x158>)
 8011cc8:	6013      	str	r3, [r2, #0]
 8011cca:	f000 fad1 	bl	8012270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011cce:	4b3b      	ldr	r3, [pc, #236]	; (8011dbc <xTaskIncrementTick+0x15c>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	693a      	ldr	r2, [r7, #16]
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d348      	bcc.n	8011d6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011cd8:	4b35      	ldr	r3, [pc, #212]	; (8011db0 <xTaskIncrementTick+0x150>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d104      	bne.n	8011cec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ce2:	4b36      	ldr	r3, [pc, #216]	; (8011dbc <xTaskIncrementTick+0x15c>)
 8011ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ce8:	601a      	str	r2, [r3, #0]
					break;
 8011cea:	e03e      	b.n	8011d6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cec:	4b30      	ldr	r3, [pc, #192]	; (8011db0 <xTaskIncrementTick+0x150>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	685b      	ldr	r3, [r3, #4]
 8011cfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011cfc:	693a      	ldr	r2, [r7, #16]
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d203      	bcs.n	8011d0c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011d04:	4a2d      	ldr	r2, [pc, #180]	; (8011dbc <xTaskIncrementTick+0x15c>)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011d0a:	e02e      	b.n	8011d6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	3304      	adds	r3, #4
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7fe fced 	bl	80106f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d004      	beq.n	8011d28 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	3318      	adds	r3, #24
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7fe fce4 	bl	80106f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	409a      	lsls	r2, r3
 8011d30:	4b23      	ldr	r3, [pc, #140]	; (8011dc0 <xTaskIncrementTick+0x160>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	4313      	orrs	r3, r2
 8011d36:	4a22      	ldr	r2, [pc, #136]	; (8011dc0 <xTaskIncrementTick+0x160>)
 8011d38:	6013      	str	r3, [r2, #0]
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d3e:	4613      	mov	r3, r2
 8011d40:	009b      	lsls	r3, r3, #2
 8011d42:	4413      	add	r3, r2
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	4a1f      	ldr	r2, [pc, #124]	; (8011dc4 <xTaskIncrementTick+0x164>)
 8011d48:	441a      	add	r2, r3
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	4619      	mov	r1, r3
 8011d50:	4610      	mov	r0, r2
 8011d52:	f7fe fc70 	bl	8010636 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d5a:	4b1b      	ldr	r3, [pc, #108]	; (8011dc8 <xTaskIncrementTick+0x168>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d3b9      	bcc.n	8011cd8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8011d64:	2301      	movs	r3, #1
 8011d66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d68:	e7b6      	b.n	8011cd8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011d6a:	4b17      	ldr	r3, [pc, #92]	; (8011dc8 <xTaskIncrementTick+0x168>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d70:	4914      	ldr	r1, [pc, #80]	; (8011dc4 <xTaskIncrementTick+0x164>)
 8011d72:	4613      	mov	r3, r2
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	4413      	add	r3, r2
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	440b      	add	r3, r1
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d907      	bls.n	8011d92 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8011d82:	2301      	movs	r3, #1
 8011d84:	617b      	str	r3, [r7, #20]
 8011d86:	e004      	b.n	8011d92 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011d88:	4b10      	ldr	r3, [pc, #64]	; (8011dcc <xTaskIncrementTick+0x16c>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	4a0f      	ldr	r2, [pc, #60]	; (8011dcc <xTaskIncrementTick+0x16c>)
 8011d90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011d92:	4b0f      	ldr	r3, [pc, #60]	; (8011dd0 <xTaskIncrementTick+0x170>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011d9e:	697b      	ldr	r3, [r7, #20]
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3718      	adds	r7, #24
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	200007f8 	.word	0x200007f8
 8011dac:	200007d4 	.word	0x200007d4
 8011db0:	20000788 	.word	0x20000788
 8011db4:	2000078c 	.word	0x2000078c
 8011db8:	200007e8 	.word	0x200007e8
 8011dbc:	200007f0 	.word	0x200007f0
 8011dc0:	200007d8 	.word	0x200007d8
 8011dc4:	200006d4 	.word	0x200006d4
 8011dc8:	200006d0 	.word	0x200006d0
 8011dcc:	200007e0 	.word	0x200007e0
 8011dd0:	200007e4 	.word	0x200007e4

08011dd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b088      	sub	sp, #32
 8011dd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011dda:	4b3a      	ldr	r3, [pc, #232]	; (8011ec4 <vTaskSwitchContext+0xf0>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d003      	beq.n	8011dea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011de2:	4b39      	ldr	r3, [pc, #228]	; (8011ec8 <vTaskSwitchContext+0xf4>)
 8011de4:	2201      	movs	r2, #1
 8011de6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011de8:	e068      	b.n	8011ebc <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8011dea:	4b37      	ldr	r3, [pc, #220]	; (8011ec8 <vTaskSwitchContext+0xf4>)
 8011dec:	2200      	movs	r2, #0
 8011dee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011df0:	4b36      	ldr	r3, [pc, #216]	; (8011ecc <vTaskSwitchContext+0xf8>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011df6:	61fb      	str	r3, [r7, #28]
 8011df8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011dfc:	61bb      	str	r3, [r7, #24]
 8011dfe:	69fb      	ldr	r3, [r7, #28]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	69ba      	ldr	r2, [r7, #24]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d111      	bne.n	8011e2c <vTaskSwitchContext+0x58>
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	3304      	adds	r3, #4
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	69ba      	ldr	r2, [r7, #24]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d10b      	bne.n	8011e2c <vTaskSwitchContext+0x58>
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	3308      	adds	r3, #8
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	69ba      	ldr	r2, [r7, #24]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d105      	bne.n	8011e2c <vTaskSwitchContext+0x58>
 8011e20:	69fb      	ldr	r3, [r7, #28]
 8011e22:	330c      	adds	r3, #12
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	69ba      	ldr	r2, [r7, #24]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d008      	beq.n	8011e3e <vTaskSwitchContext+0x6a>
 8011e2c:	4b27      	ldr	r3, [pc, #156]	; (8011ecc <vTaskSwitchContext+0xf8>)
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	4b26      	ldr	r3, [pc, #152]	; (8011ecc <vTaskSwitchContext+0xf8>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	3334      	adds	r3, #52	; 0x34
 8011e36:	4619      	mov	r1, r3
 8011e38:	4610      	mov	r0, r2
 8011e3a:	f7ee fb74 	bl	8000526 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e3e:	4b24      	ldr	r3, [pc, #144]	; (8011ed0 <vTaskSwitchContext+0xfc>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	fab3 f383 	clz	r3, r3
 8011e4a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011e4c:	7afb      	ldrb	r3, [r7, #11]
 8011e4e:	f1c3 031f 	rsb	r3, r3, #31
 8011e52:	617b      	str	r3, [r7, #20]
 8011e54:	491f      	ldr	r1, [pc, #124]	; (8011ed4 <vTaskSwitchContext+0x100>)
 8011e56:	697a      	ldr	r2, [r7, #20]
 8011e58:	4613      	mov	r3, r2
 8011e5a:	009b      	lsls	r3, r3, #2
 8011e5c:	4413      	add	r3, r2
 8011e5e:	009b      	lsls	r3, r3, #2
 8011e60:	440b      	add	r3, r1
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d10c      	bne.n	8011e82 <vTaskSwitchContext+0xae>
	__asm volatile
 8011e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6c:	b672      	cpsid	i
 8011e6e:	f383 8811 	msr	BASEPRI, r3
 8011e72:	f3bf 8f6f 	isb	sy
 8011e76:	f3bf 8f4f 	dsb	sy
 8011e7a:	b662      	cpsie	i
 8011e7c:	607b      	str	r3, [r7, #4]
}
 8011e7e:	bf00      	nop
 8011e80:	e7fe      	b.n	8011e80 <vTaskSwitchContext+0xac>
 8011e82:	697a      	ldr	r2, [r7, #20]
 8011e84:	4613      	mov	r3, r2
 8011e86:	009b      	lsls	r3, r3, #2
 8011e88:	4413      	add	r3, r2
 8011e8a:	009b      	lsls	r3, r3, #2
 8011e8c:	4a11      	ldr	r2, [pc, #68]	; (8011ed4 <vTaskSwitchContext+0x100>)
 8011e8e:	4413      	add	r3, r2
 8011e90:	613b      	str	r3, [r7, #16]
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	685a      	ldr	r2, [r3, #4]
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	605a      	str	r2, [r3, #4]
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	685a      	ldr	r2, [r3, #4]
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	3308      	adds	r3, #8
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d104      	bne.n	8011eb2 <vTaskSwitchContext+0xde>
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	685a      	ldr	r2, [r3, #4]
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	605a      	str	r2, [r3, #4]
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	4a04      	ldr	r2, [pc, #16]	; (8011ecc <vTaskSwitchContext+0xf8>)
 8011eba:	6013      	str	r3, [r2, #0]
}
 8011ebc:	bf00      	nop
 8011ebe:	3720      	adds	r7, #32
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}
 8011ec4:	200007f8 	.word	0x200007f8
 8011ec8:	200007e4 	.word	0x200007e4
 8011ecc:	200006d0 	.word	0x200006d0
 8011ed0:	200007d8 	.word	0x200007d8
 8011ed4:	200006d4 	.word	0x200006d4

08011ed8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d10c      	bne.n	8011f02 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8011ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eec:	b672      	cpsid	i
 8011eee:	f383 8811 	msr	BASEPRI, r3
 8011ef2:	f3bf 8f6f 	isb	sy
 8011ef6:	f3bf 8f4f 	dsb	sy
 8011efa:	b662      	cpsie	i
 8011efc:	60fb      	str	r3, [r7, #12]
}
 8011efe:	bf00      	nop
 8011f00:	e7fe      	b.n	8011f00 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f02:	4b07      	ldr	r3, [pc, #28]	; (8011f20 <vTaskPlaceOnEventList+0x48>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	3318      	adds	r3, #24
 8011f08:	4619      	mov	r1, r3
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f7fe fbb7 	bl	801067e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011f10:	2101      	movs	r1, #1
 8011f12:	6838      	ldr	r0, [r7, #0]
 8011f14:	f000 fba6 	bl	8012664 <prvAddCurrentTaskToDelayedList>
}
 8011f18:	bf00      	nop
 8011f1a:	3710      	adds	r7, #16
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	200006d0 	.word	0x200006d0

08011f24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b086      	sub	sp, #24
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d10c      	bne.n	8011f54 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8011f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3e:	b672      	cpsid	i
 8011f40:	f383 8811 	msr	BASEPRI, r3
 8011f44:	f3bf 8f6f 	isb	sy
 8011f48:	f3bf 8f4f 	dsb	sy
 8011f4c:	b662      	cpsie	i
 8011f4e:	60fb      	str	r3, [r7, #12]
}
 8011f50:	bf00      	nop
 8011f52:	e7fe      	b.n	8011f52 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	3318      	adds	r3, #24
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7fe fbc9 	bl	80106f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f5e:	4b1d      	ldr	r3, [pc, #116]	; (8011fd4 <xTaskRemoveFromEventList+0xb0>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d11c      	bne.n	8011fa0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	3304      	adds	r3, #4
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fe fbc0 	bl	80106f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f74:	2201      	movs	r2, #1
 8011f76:	409a      	lsls	r2, r3
 8011f78:	4b17      	ldr	r3, [pc, #92]	; (8011fd8 <xTaskRemoveFromEventList+0xb4>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	4313      	orrs	r3, r2
 8011f7e:	4a16      	ldr	r2, [pc, #88]	; (8011fd8 <xTaskRemoveFromEventList+0xb4>)
 8011f80:	6013      	str	r3, [r2, #0]
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f86:	4613      	mov	r3, r2
 8011f88:	009b      	lsls	r3, r3, #2
 8011f8a:	4413      	add	r3, r2
 8011f8c:	009b      	lsls	r3, r3, #2
 8011f8e:	4a13      	ldr	r2, [pc, #76]	; (8011fdc <xTaskRemoveFromEventList+0xb8>)
 8011f90:	441a      	add	r2, r3
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	3304      	adds	r3, #4
 8011f96:	4619      	mov	r1, r3
 8011f98:	4610      	mov	r0, r2
 8011f9a:	f7fe fb4c 	bl	8010636 <vListInsertEnd>
 8011f9e:	e005      	b.n	8011fac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011fa0:	693b      	ldr	r3, [r7, #16]
 8011fa2:	3318      	adds	r3, #24
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	480e      	ldr	r0, [pc, #56]	; (8011fe0 <xTaskRemoveFromEventList+0xbc>)
 8011fa8:	f7fe fb45 	bl	8010636 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fb0:	4b0c      	ldr	r3, [pc, #48]	; (8011fe4 <xTaskRemoveFromEventList+0xc0>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d905      	bls.n	8011fc6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011fba:	2301      	movs	r3, #1
 8011fbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011fbe:	4b0a      	ldr	r3, [pc, #40]	; (8011fe8 <xTaskRemoveFromEventList+0xc4>)
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	601a      	str	r2, [r3, #0]
 8011fc4:	e001      	b.n	8011fca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011fca:	697b      	ldr	r3, [r7, #20]
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3718      	adds	r7, #24
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	200007f8 	.word	0x200007f8
 8011fd8:	200007d8 	.word	0x200007d8
 8011fdc:	200006d4 	.word	0x200006d4
 8011fe0:	20000790 	.word	0x20000790
 8011fe4:	200006d0 	.word	0x200006d0
 8011fe8:	200007e4 	.word	0x200007e4

08011fec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011ff4:	4b06      	ldr	r3, [pc, #24]	; (8012010 <vTaskInternalSetTimeOutState+0x24>)
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011ffc:	4b05      	ldr	r3, [pc, #20]	; (8012014 <vTaskInternalSetTimeOutState+0x28>)
 8011ffe:	681a      	ldr	r2, [r3, #0]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	605a      	str	r2, [r3, #4]
}
 8012004:	bf00      	nop
 8012006:	370c      	adds	r7, #12
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr
 8012010:	200007e8 	.word	0x200007e8
 8012014:	200007d4 	.word	0x200007d4

08012018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b088      	sub	sp, #32
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d10c      	bne.n	8012042 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8012028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801202c:	b672      	cpsid	i
 801202e:	f383 8811 	msr	BASEPRI, r3
 8012032:	f3bf 8f6f 	isb	sy
 8012036:	f3bf 8f4f 	dsb	sy
 801203a:	b662      	cpsie	i
 801203c:	613b      	str	r3, [r7, #16]
}
 801203e:	bf00      	nop
 8012040:	e7fe      	b.n	8012040 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d10c      	bne.n	8012062 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8012048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204c:	b672      	cpsid	i
 801204e:	f383 8811 	msr	BASEPRI, r3
 8012052:	f3bf 8f6f 	isb	sy
 8012056:	f3bf 8f4f 	dsb	sy
 801205a:	b662      	cpsie	i
 801205c:	60fb      	str	r3, [r7, #12]
}
 801205e:	bf00      	nop
 8012060:	e7fe      	b.n	8012060 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8012062:	f000 fc73 	bl	801294c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012066:	4b1d      	ldr	r3, [pc, #116]	; (80120dc <xTaskCheckForTimeOut+0xc4>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	69ba      	ldr	r2, [r7, #24]
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801207e:	d102      	bne.n	8012086 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012080:	2300      	movs	r3, #0
 8012082:	61fb      	str	r3, [r7, #28]
 8012084:	e023      	b.n	80120ce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681a      	ldr	r2, [r3, #0]
 801208a:	4b15      	ldr	r3, [pc, #84]	; (80120e0 <xTaskCheckForTimeOut+0xc8>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	429a      	cmp	r2, r3
 8012090:	d007      	beq.n	80120a2 <xTaskCheckForTimeOut+0x8a>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	69ba      	ldr	r2, [r7, #24]
 8012098:	429a      	cmp	r2, r3
 801209a:	d302      	bcc.n	80120a2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801209c:	2301      	movs	r3, #1
 801209e:	61fb      	str	r3, [r7, #28]
 80120a0:	e015      	b.n	80120ce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	697a      	ldr	r2, [r7, #20]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d20b      	bcs.n	80120c4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	681a      	ldr	r2, [r3, #0]
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	1ad2      	subs	r2, r2, r3
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f7ff ff97 	bl	8011fec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80120be:	2300      	movs	r3, #0
 80120c0:	61fb      	str	r3, [r7, #28]
 80120c2:	e004      	b.n	80120ce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	2200      	movs	r2, #0
 80120c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80120ca:	2301      	movs	r3, #1
 80120cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80120ce:	f000 fc71 	bl	80129b4 <vPortExitCritical>

	return xReturn;
 80120d2:	69fb      	ldr	r3, [r7, #28]
}
 80120d4:	4618      	mov	r0, r3
 80120d6:	3720      	adds	r7, #32
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	200007d4 	.word	0x200007d4
 80120e0:	200007e8 	.word	0x200007e8

080120e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80120e4:	b480      	push	{r7}
 80120e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80120e8:	4b03      	ldr	r3, [pc, #12]	; (80120f8 <vTaskMissedYield+0x14>)
 80120ea:	2201      	movs	r2, #1
 80120ec:	601a      	str	r2, [r3, #0]
}
 80120ee:	bf00      	nop
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr
 80120f8:	200007e4 	.word	0x200007e4

080120fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012104:	f000 f854 	bl	80121b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012108:	4b07      	ldr	r3, [pc, #28]	; (8012128 <prvIdleTask+0x2c>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	2b01      	cmp	r3, #1
 801210e:	d907      	bls.n	8012120 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012110:	4b06      	ldr	r3, [pc, #24]	; (801212c <prvIdleTask+0x30>)
 8012112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012116:	601a      	str	r2, [r3, #0]
 8012118:	f3bf 8f4f 	dsb	sy
 801211c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012120:	f7ee f9fa 	bl	8000518 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012124:	e7ee      	b.n	8012104 <prvIdleTask+0x8>
 8012126:	bf00      	nop
 8012128:	200006d4 	.word	0x200006d4
 801212c:	e000ed04 	.word	0xe000ed04

08012130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012136:	2300      	movs	r3, #0
 8012138:	607b      	str	r3, [r7, #4]
 801213a:	e00c      	b.n	8012156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	4613      	mov	r3, r2
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	4413      	add	r3, r2
 8012144:	009b      	lsls	r3, r3, #2
 8012146:	4a12      	ldr	r2, [pc, #72]	; (8012190 <prvInitialiseTaskLists+0x60>)
 8012148:	4413      	add	r3, r2
 801214a:	4618      	mov	r0, r3
 801214c:	f7fe fa46 	bl	80105dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	3301      	adds	r3, #1
 8012154:	607b      	str	r3, [r7, #4]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2b06      	cmp	r3, #6
 801215a:	d9ef      	bls.n	801213c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801215c:	480d      	ldr	r0, [pc, #52]	; (8012194 <prvInitialiseTaskLists+0x64>)
 801215e:	f7fe fa3d 	bl	80105dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012162:	480d      	ldr	r0, [pc, #52]	; (8012198 <prvInitialiseTaskLists+0x68>)
 8012164:	f7fe fa3a 	bl	80105dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012168:	480c      	ldr	r0, [pc, #48]	; (801219c <prvInitialiseTaskLists+0x6c>)
 801216a:	f7fe fa37 	bl	80105dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801216e:	480c      	ldr	r0, [pc, #48]	; (80121a0 <prvInitialiseTaskLists+0x70>)
 8012170:	f7fe fa34 	bl	80105dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012174:	480b      	ldr	r0, [pc, #44]	; (80121a4 <prvInitialiseTaskLists+0x74>)
 8012176:	f7fe fa31 	bl	80105dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801217a:	4b0b      	ldr	r3, [pc, #44]	; (80121a8 <prvInitialiseTaskLists+0x78>)
 801217c:	4a05      	ldr	r2, [pc, #20]	; (8012194 <prvInitialiseTaskLists+0x64>)
 801217e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012180:	4b0a      	ldr	r3, [pc, #40]	; (80121ac <prvInitialiseTaskLists+0x7c>)
 8012182:	4a05      	ldr	r2, [pc, #20]	; (8012198 <prvInitialiseTaskLists+0x68>)
 8012184:	601a      	str	r2, [r3, #0]
}
 8012186:	bf00      	nop
 8012188:	3708      	adds	r7, #8
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	200006d4 	.word	0x200006d4
 8012194:	20000760 	.word	0x20000760
 8012198:	20000774 	.word	0x20000774
 801219c:	20000790 	.word	0x20000790
 80121a0:	200007a4 	.word	0x200007a4
 80121a4:	200007bc 	.word	0x200007bc
 80121a8:	20000788 	.word	0x20000788
 80121ac:	2000078c 	.word	0x2000078c

080121b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80121b6:	e019      	b.n	80121ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80121b8:	f000 fbc8 	bl	801294c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121bc:	4b10      	ldr	r3, [pc, #64]	; (8012200 <prvCheckTasksWaitingTermination+0x50>)
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	68db      	ldr	r3, [r3, #12]
 80121c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	3304      	adds	r3, #4
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7fe fa91 	bl	80106f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80121ce:	4b0d      	ldr	r3, [pc, #52]	; (8012204 <prvCheckTasksWaitingTermination+0x54>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	3b01      	subs	r3, #1
 80121d4:	4a0b      	ldr	r2, [pc, #44]	; (8012204 <prvCheckTasksWaitingTermination+0x54>)
 80121d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80121d8:	4b0b      	ldr	r3, [pc, #44]	; (8012208 <prvCheckTasksWaitingTermination+0x58>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	3b01      	subs	r3, #1
 80121de:	4a0a      	ldr	r2, [pc, #40]	; (8012208 <prvCheckTasksWaitingTermination+0x58>)
 80121e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80121e2:	f000 fbe7 	bl	80129b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f000 f810 	bl	801220c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80121ec:	4b06      	ldr	r3, [pc, #24]	; (8012208 <prvCheckTasksWaitingTermination+0x58>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d1e1      	bne.n	80121b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80121f4:	bf00      	nop
 80121f6:	bf00      	nop
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	200007a4 	.word	0x200007a4
 8012204:	200007d0 	.word	0x200007d0
 8012208:	200007b8 	.word	0x200007b8

0801220c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801220c:	b580      	push	{r7, lr}
 801220e:	b084      	sub	sp, #16
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801221a:	2b00      	cmp	r3, #0
 801221c:	d108      	bne.n	8012230 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012222:	4618      	mov	r0, r3
 8012224:	f000 fd8e 	bl	8012d44 <vPortFree>
				vPortFree( pxTCB );
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f000 fd8b 	bl	8012d44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801222e:	e01a      	b.n	8012266 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012236:	2b01      	cmp	r3, #1
 8012238:	d103      	bne.n	8012242 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f000 fd82 	bl	8012d44 <vPortFree>
	}
 8012240:	e011      	b.n	8012266 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012248:	2b02      	cmp	r3, #2
 801224a:	d00c      	beq.n	8012266 <prvDeleteTCB+0x5a>
	__asm volatile
 801224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012250:	b672      	cpsid	i
 8012252:	f383 8811 	msr	BASEPRI, r3
 8012256:	f3bf 8f6f 	isb	sy
 801225a:	f3bf 8f4f 	dsb	sy
 801225e:	b662      	cpsie	i
 8012260:	60fb      	str	r3, [r7, #12]
}
 8012262:	bf00      	nop
 8012264:	e7fe      	b.n	8012264 <prvDeleteTCB+0x58>
	}
 8012266:	bf00      	nop
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
	...

08012270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012276:	4b0c      	ldr	r3, [pc, #48]	; (80122a8 <prvResetNextTaskUnblockTime+0x38>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d104      	bne.n	801228a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012280:	4b0a      	ldr	r3, [pc, #40]	; (80122ac <prvResetNextTaskUnblockTime+0x3c>)
 8012282:	f04f 32ff 	mov.w	r2, #4294967295
 8012286:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012288:	e008      	b.n	801229c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801228a:	4b07      	ldr	r3, [pc, #28]	; (80122a8 <prvResetNextTaskUnblockTime+0x38>)
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	68db      	ldr	r3, [r3, #12]
 8012292:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	4a04      	ldr	r2, [pc, #16]	; (80122ac <prvResetNextTaskUnblockTime+0x3c>)
 801229a:	6013      	str	r3, [r2, #0]
}
 801229c:	bf00      	nop
 801229e:	370c      	adds	r7, #12
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr
 80122a8:	20000788 	.word	0x20000788
 80122ac:	200007f0 	.word	0x200007f0

080122b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80122b0:	b480      	push	{r7}
 80122b2:	b083      	sub	sp, #12
 80122b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80122b6:	4b0b      	ldr	r3, [pc, #44]	; (80122e4 <xTaskGetSchedulerState+0x34>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d102      	bne.n	80122c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80122be:	2301      	movs	r3, #1
 80122c0:	607b      	str	r3, [r7, #4]
 80122c2:	e008      	b.n	80122d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80122c4:	4b08      	ldr	r3, [pc, #32]	; (80122e8 <xTaskGetSchedulerState+0x38>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d102      	bne.n	80122d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80122cc:	2302      	movs	r3, #2
 80122ce:	607b      	str	r3, [r7, #4]
 80122d0:	e001      	b.n	80122d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80122d2:	2300      	movs	r3, #0
 80122d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80122d6:	687b      	ldr	r3, [r7, #4]
	}
 80122d8:	4618      	mov	r0, r3
 80122da:	370c      	adds	r7, #12
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr
 80122e4:	200007dc 	.word	0x200007dc
 80122e8:	200007f8 	.word	0x200007f8

080122ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80122f8:	2300      	movs	r3, #0
 80122fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d069      	beq.n	80123d6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012306:	4b36      	ldr	r3, [pc, #216]	; (80123e0 <xTaskPriorityInherit+0xf4>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801230c:	429a      	cmp	r2, r3
 801230e:	d259      	bcs.n	80123c4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	699b      	ldr	r3, [r3, #24]
 8012314:	2b00      	cmp	r3, #0
 8012316:	db06      	blt.n	8012326 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012318:	4b31      	ldr	r3, [pc, #196]	; (80123e0 <xTaskPriorityInherit+0xf4>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231e:	f1c3 0207 	rsb	r2, r3, #7
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	6959      	ldr	r1, [r3, #20]
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801232e:	4613      	mov	r3, r2
 8012330:	009b      	lsls	r3, r3, #2
 8012332:	4413      	add	r3, r2
 8012334:	009b      	lsls	r3, r3, #2
 8012336:	4a2b      	ldr	r2, [pc, #172]	; (80123e4 <xTaskPriorityInherit+0xf8>)
 8012338:	4413      	add	r3, r2
 801233a:	4299      	cmp	r1, r3
 801233c:	d13a      	bne.n	80123b4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	3304      	adds	r3, #4
 8012342:	4618      	mov	r0, r3
 8012344:	f7fe f9d4 	bl	80106f0 <uxListRemove>
 8012348:	4603      	mov	r3, r0
 801234a:	2b00      	cmp	r3, #0
 801234c:	d115      	bne.n	801237a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012352:	4924      	ldr	r1, [pc, #144]	; (80123e4 <xTaskPriorityInherit+0xf8>)
 8012354:	4613      	mov	r3, r2
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	4413      	add	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	440b      	add	r3, r1
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d10a      	bne.n	801237a <xTaskPriorityInherit+0x8e>
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012368:	2201      	movs	r2, #1
 801236a:	fa02 f303 	lsl.w	r3, r2, r3
 801236e:	43da      	mvns	r2, r3
 8012370:	4b1d      	ldr	r3, [pc, #116]	; (80123e8 <xTaskPriorityInherit+0xfc>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	4013      	ands	r3, r2
 8012376:	4a1c      	ldr	r2, [pc, #112]	; (80123e8 <xTaskPriorityInherit+0xfc>)
 8012378:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801237a:	4b19      	ldr	r3, [pc, #100]	; (80123e0 <xTaskPriorityInherit+0xf4>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012388:	2201      	movs	r2, #1
 801238a:	409a      	lsls	r2, r3
 801238c:	4b16      	ldr	r3, [pc, #88]	; (80123e8 <xTaskPriorityInherit+0xfc>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	4313      	orrs	r3, r2
 8012392:	4a15      	ldr	r2, [pc, #84]	; (80123e8 <xTaskPriorityInherit+0xfc>)
 8012394:	6013      	str	r3, [r2, #0]
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801239a:	4613      	mov	r3, r2
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	4413      	add	r3, r2
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	4a10      	ldr	r2, [pc, #64]	; (80123e4 <xTaskPriorityInherit+0xf8>)
 80123a4:	441a      	add	r2, r3
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	3304      	adds	r3, #4
 80123aa:	4619      	mov	r1, r3
 80123ac:	4610      	mov	r0, r2
 80123ae:	f7fe f942 	bl	8010636 <vListInsertEnd>
 80123b2:	e004      	b.n	80123be <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80123b4:	4b0a      	ldr	r3, [pc, #40]	; (80123e0 <xTaskPriorityInherit+0xf4>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80123be:	2301      	movs	r3, #1
 80123c0:	60fb      	str	r3, [r7, #12]
 80123c2:	e008      	b.n	80123d6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80123c8:	4b05      	ldr	r3, [pc, #20]	; (80123e0 <xTaskPriorityInherit+0xf4>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d201      	bcs.n	80123d6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80123d2:	2301      	movs	r3, #1
 80123d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80123d6:	68fb      	ldr	r3, [r7, #12]
	}
 80123d8:	4618      	mov	r0, r3
 80123da:	3710      	adds	r7, #16
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	200006d0 	.word	0x200006d0
 80123e4:	200006d4 	.word	0x200006d4
 80123e8:	200007d8 	.word	0x200007d8

080123ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b086      	sub	sp, #24
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80123f8:	2300      	movs	r3, #0
 80123fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d072      	beq.n	80124e8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012402:	4b3c      	ldr	r3, [pc, #240]	; (80124f4 <xTaskPriorityDisinherit+0x108>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	693a      	ldr	r2, [r7, #16]
 8012408:	429a      	cmp	r2, r3
 801240a:	d00c      	beq.n	8012426 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 801240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012410:	b672      	cpsid	i
 8012412:	f383 8811 	msr	BASEPRI, r3
 8012416:	f3bf 8f6f 	isb	sy
 801241a:	f3bf 8f4f 	dsb	sy
 801241e:	b662      	cpsie	i
 8012420:	60fb      	str	r3, [r7, #12]
}
 8012422:	bf00      	nop
 8012424:	e7fe      	b.n	8012424 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801242a:	2b00      	cmp	r3, #0
 801242c:	d10c      	bne.n	8012448 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012432:	b672      	cpsid	i
 8012434:	f383 8811 	msr	BASEPRI, r3
 8012438:	f3bf 8f6f 	isb	sy
 801243c:	f3bf 8f4f 	dsb	sy
 8012440:	b662      	cpsie	i
 8012442:	60bb      	str	r3, [r7, #8]
}
 8012444:	bf00      	nop
 8012446:	e7fe      	b.n	8012446 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801244c:	1e5a      	subs	r2, r3, #1
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801245a:	429a      	cmp	r2, r3
 801245c:	d044      	beq.n	80124e8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012462:	2b00      	cmp	r3, #0
 8012464:	d140      	bne.n	80124e8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	3304      	adds	r3, #4
 801246a:	4618      	mov	r0, r3
 801246c:	f7fe f940 	bl	80106f0 <uxListRemove>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d115      	bne.n	80124a2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801247a:	491f      	ldr	r1, [pc, #124]	; (80124f8 <xTaskPriorityDisinherit+0x10c>)
 801247c:	4613      	mov	r3, r2
 801247e:	009b      	lsls	r3, r3, #2
 8012480:	4413      	add	r3, r2
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	440b      	add	r3, r1
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d10a      	bne.n	80124a2 <xTaskPriorityDisinherit+0xb6>
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012490:	2201      	movs	r2, #1
 8012492:	fa02 f303 	lsl.w	r3, r2, r3
 8012496:	43da      	mvns	r2, r3
 8012498:	4b18      	ldr	r3, [pc, #96]	; (80124fc <xTaskPriorityDisinherit+0x110>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	4013      	ands	r3, r2
 801249e:	4a17      	ldr	r2, [pc, #92]	; (80124fc <xTaskPriorityDisinherit+0x110>)
 80124a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ae:	f1c3 0207 	rsb	r2, r3, #7
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ba:	2201      	movs	r2, #1
 80124bc:	409a      	lsls	r2, r3
 80124be:	4b0f      	ldr	r3, [pc, #60]	; (80124fc <xTaskPriorityDisinherit+0x110>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	4313      	orrs	r3, r2
 80124c4:	4a0d      	ldr	r2, [pc, #52]	; (80124fc <xTaskPriorityDisinherit+0x110>)
 80124c6:	6013      	str	r3, [r2, #0]
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124cc:	4613      	mov	r3, r2
 80124ce:	009b      	lsls	r3, r3, #2
 80124d0:	4413      	add	r3, r2
 80124d2:	009b      	lsls	r3, r3, #2
 80124d4:	4a08      	ldr	r2, [pc, #32]	; (80124f8 <xTaskPriorityDisinherit+0x10c>)
 80124d6:	441a      	add	r2, r3
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	3304      	adds	r3, #4
 80124dc:	4619      	mov	r1, r3
 80124de:	4610      	mov	r0, r2
 80124e0:	f7fe f8a9 	bl	8010636 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80124e4:	2301      	movs	r3, #1
 80124e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80124e8:	697b      	ldr	r3, [r7, #20]
	}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3718      	adds	r7, #24
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	200006d0 	.word	0x200006d0
 80124f8:	200006d4 	.word	0x200006d4
 80124fc:	200007d8 	.word	0x200007d8

08012500 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012500:	b580      	push	{r7, lr}
 8012502:	b088      	sub	sp, #32
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801250e:	2301      	movs	r3, #1
 8012510:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2b00      	cmp	r3, #0
 8012516:	f000 8087 	beq.w	8012628 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801251a:	69bb      	ldr	r3, [r7, #24]
 801251c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801251e:	2b00      	cmp	r3, #0
 8012520:	d10c      	bne.n	801253c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8012522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012526:	b672      	cpsid	i
 8012528:	f383 8811 	msr	BASEPRI, r3
 801252c:	f3bf 8f6f 	isb	sy
 8012530:	f3bf 8f4f 	dsb	sy
 8012534:	b662      	cpsie	i
 8012536:	60fb      	str	r3, [r7, #12]
}
 8012538:	bf00      	nop
 801253a:	e7fe      	b.n	801253a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801253c:	69bb      	ldr	r3, [r7, #24]
 801253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012540:	683a      	ldr	r2, [r7, #0]
 8012542:	429a      	cmp	r2, r3
 8012544:	d902      	bls.n	801254c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	61fb      	str	r3, [r7, #28]
 801254a:	e002      	b.n	8012552 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801254c:	69bb      	ldr	r3, [r7, #24]
 801254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012550:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012552:	69bb      	ldr	r3, [r7, #24]
 8012554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012556:	69fa      	ldr	r2, [r7, #28]
 8012558:	429a      	cmp	r2, r3
 801255a:	d065      	beq.n	8012628 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801255c:	69bb      	ldr	r3, [r7, #24]
 801255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012560:	697a      	ldr	r2, [r7, #20]
 8012562:	429a      	cmp	r2, r3
 8012564:	d160      	bne.n	8012628 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012566:	4b32      	ldr	r3, [pc, #200]	; (8012630 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	69ba      	ldr	r2, [r7, #24]
 801256c:	429a      	cmp	r2, r3
 801256e:	d10c      	bne.n	801258a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8012570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012574:	b672      	cpsid	i
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	b662      	cpsie	i
 8012584:	60bb      	str	r3, [r7, #8]
}
 8012586:	bf00      	nop
 8012588:	e7fe      	b.n	8012588 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012590:	69bb      	ldr	r3, [r7, #24]
 8012592:	69fa      	ldr	r2, [r7, #28]
 8012594:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012596:	69bb      	ldr	r3, [r7, #24]
 8012598:	699b      	ldr	r3, [r3, #24]
 801259a:	2b00      	cmp	r3, #0
 801259c:	db04      	blt.n	80125a8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	f1c3 0207 	rsb	r2, r3, #7
 80125a4:	69bb      	ldr	r3, [r7, #24]
 80125a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	6959      	ldr	r1, [r3, #20]
 80125ac:	693a      	ldr	r2, [r7, #16]
 80125ae:	4613      	mov	r3, r2
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	4413      	add	r3, r2
 80125b4:	009b      	lsls	r3, r3, #2
 80125b6:	4a1f      	ldr	r2, [pc, #124]	; (8012634 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80125b8:	4413      	add	r3, r2
 80125ba:	4299      	cmp	r1, r3
 80125bc:	d134      	bne.n	8012628 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	3304      	adds	r3, #4
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7fe f894 	bl	80106f0 <uxListRemove>
 80125c8:	4603      	mov	r3, r0
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d115      	bne.n	80125fa <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125d2:	4918      	ldr	r1, [pc, #96]	; (8012634 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80125d4:	4613      	mov	r3, r2
 80125d6:	009b      	lsls	r3, r3, #2
 80125d8:	4413      	add	r3, r2
 80125da:	009b      	lsls	r3, r3, #2
 80125dc:	440b      	add	r3, r1
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d10a      	bne.n	80125fa <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80125e4:	69bb      	ldr	r3, [r7, #24]
 80125e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125e8:	2201      	movs	r2, #1
 80125ea:	fa02 f303 	lsl.w	r3, r2, r3
 80125ee:	43da      	mvns	r2, r3
 80125f0:	4b11      	ldr	r3, [pc, #68]	; (8012638 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	4013      	ands	r3, r2
 80125f6:	4a10      	ldr	r2, [pc, #64]	; (8012638 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80125f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80125fa:	69bb      	ldr	r3, [r7, #24]
 80125fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125fe:	2201      	movs	r2, #1
 8012600:	409a      	lsls	r2, r3
 8012602:	4b0d      	ldr	r3, [pc, #52]	; (8012638 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	4313      	orrs	r3, r2
 8012608:	4a0b      	ldr	r2, [pc, #44]	; (8012638 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801260a:	6013      	str	r3, [r2, #0]
 801260c:	69bb      	ldr	r3, [r7, #24]
 801260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012610:	4613      	mov	r3, r2
 8012612:	009b      	lsls	r3, r3, #2
 8012614:	4413      	add	r3, r2
 8012616:	009b      	lsls	r3, r3, #2
 8012618:	4a06      	ldr	r2, [pc, #24]	; (8012634 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801261a:	441a      	add	r2, r3
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	3304      	adds	r3, #4
 8012620:	4619      	mov	r1, r3
 8012622:	4610      	mov	r0, r2
 8012624:	f7fe f807 	bl	8010636 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012628:	bf00      	nop
 801262a:	3720      	adds	r7, #32
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}
 8012630:	200006d0 	.word	0x200006d0
 8012634:	200006d4 	.word	0x200006d4
 8012638:	200007d8 	.word	0x200007d8

0801263c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801263c:	b480      	push	{r7}
 801263e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012640:	4b07      	ldr	r3, [pc, #28]	; (8012660 <pvTaskIncrementMutexHeldCount+0x24>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d004      	beq.n	8012652 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012648:	4b05      	ldr	r3, [pc, #20]	; (8012660 <pvTaskIncrementMutexHeldCount+0x24>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801264e:	3201      	adds	r2, #1
 8012650:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012652:	4b03      	ldr	r3, [pc, #12]	; (8012660 <pvTaskIncrementMutexHeldCount+0x24>)
 8012654:	681b      	ldr	r3, [r3, #0]
	}
 8012656:	4618      	mov	r0, r3
 8012658:	46bd      	mov	sp, r7
 801265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265e:	4770      	bx	lr
 8012660:	200006d0 	.word	0x200006d0

08012664 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801266e:	4b29      	ldr	r3, [pc, #164]	; (8012714 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012674:	4b28      	ldr	r3, [pc, #160]	; (8012718 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	3304      	adds	r3, #4
 801267a:	4618      	mov	r0, r3
 801267c:	f7fe f838 	bl	80106f0 <uxListRemove>
 8012680:	4603      	mov	r3, r0
 8012682:	2b00      	cmp	r3, #0
 8012684:	d10b      	bne.n	801269e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012686:	4b24      	ldr	r3, [pc, #144]	; (8012718 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801268c:	2201      	movs	r2, #1
 801268e:	fa02 f303 	lsl.w	r3, r2, r3
 8012692:	43da      	mvns	r2, r3
 8012694:	4b21      	ldr	r3, [pc, #132]	; (801271c <prvAddCurrentTaskToDelayedList+0xb8>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	4013      	ands	r3, r2
 801269a:	4a20      	ldr	r2, [pc, #128]	; (801271c <prvAddCurrentTaskToDelayedList+0xb8>)
 801269c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126a4:	d10a      	bne.n	80126bc <prvAddCurrentTaskToDelayedList+0x58>
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d007      	beq.n	80126bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80126ac:	4b1a      	ldr	r3, [pc, #104]	; (8012718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	3304      	adds	r3, #4
 80126b2:	4619      	mov	r1, r3
 80126b4:	481a      	ldr	r0, [pc, #104]	; (8012720 <prvAddCurrentTaskToDelayedList+0xbc>)
 80126b6:	f7fd ffbe 	bl	8010636 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80126ba:	e026      	b.n	801270a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80126bc:	68fa      	ldr	r2, [r7, #12]
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	4413      	add	r3, r2
 80126c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80126c4:	4b14      	ldr	r3, [pc, #80]	; (8012718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	68ba      	ldr	r2, [r7, #8]
 80126ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80126cc:	68ba      	ldr	r2, [r7, #8]
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d209      	bcs.n	80126e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80126d4:	4b13      	ldr	r3, [pc, #76]	; (8012724 <prvAddCurrentTaskToDelayedList+0xc0>)
 80126d6:	681a      	ldr	r2, [r3, #0]
 80126d8:	4b0f      	ldr	r3, [pc, #60]	; (8012718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	3304      	adds	r3, #4
 80126de:	4619      	mov	r1, r3
 80126e0:	4610      	mov	r0, r2
 80126e2:	f7fd ffcc 	bl	801067e <vListInsert>
}
 80126e6:	e010      	b.n	801270a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80126e8:	4b0f      	ldr	r3, [pc, #60]	; (8012728 <prvAddCurrentTaskToDelayedList+0xc4>)
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	4b0a      	ldr	r3, [pc, #40]	; (8012718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	3304      	adds	r3, #4
 80126f2:	4619      	mov	r1, r3
 80126f4:	4610      	mov	r0, r2
 80126f6:	f7fd ffc2 	bl	801067e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80126fa:	4b0c      	ldr	r3, [pc, #48]	; (801272c <prvAddCurrentTaskToDelayedList+0xc8>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	68ba      	ldr	r2, [r7, #8]
 8012700:	429a      	cmp	r2, r3
 8012702:	d202      	bcs.n	801270a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012704:	4a09      	ldr	r2, [pc, #36]	; (801272c <prvAddCurrentTaskToDelayedList+0xc8>)
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	6013      	str	r3, [r2, #0]
}
 801270a:	bf00      	nop
 801270c:	3710      	adds	r7, #16
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}
 8012712:	bf00      	nop
 8012714:	200007d4 	.word	0x200007d4
 8012718:	200006d0 	.word	0x200006d0
 801271c:	200007d8 	.word	0x200007d8
 8012720:	200007bc 	.word	0x200007bc
 8012724:	2000078c 	.word	0x2000078c
 8012728:	20000788 	.word	0x20000788
 801272c:	200007f0 	.word	0x200007f0

08012730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012730:	b480      	push	{r7}
 8012732:	b085      	sub	sp, #20
 8012734:	af00      	add	r7, sp, #0
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	3b04      	subs	r3, #4
 8012740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	3b04      	subs	r3, #4
 801274e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	f023 0201 	bic.w	r2, r3, #1
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	3b04      	subs	r3, #4
 801275e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012760:	4a0c      	ldr	r2, [pc, #48]	; (8012794 <pxPortInitialiseStack+0x64>)
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	3b14      	subs	r3, #20
 801276a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	3b04      	subs	r3, #4
 8012776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f06f 0202 	mvn.w	r2, #2
 801277e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	3b20      	subs	r3, #32
 8012784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012786:	68fb      	ldr	r3, [r7, #12]
}
 8012788:	4618      	mov	r0, r3
 801278a:	3714      	adds	r7, #20
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr
 8012794:	08012799 	.word	0x08012799

08012798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012798:	b480      	push	{r7}
 801279a:	b085      	sub	sp, #20
 801279c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801279e:	2300      	movs	r3, #0
 80127a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80127a2:	4b14      	ldr	r3, [pc, #80]	; (80127f4 <prvTaskExitError+0x5c>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127aa:	d00c      	beq.n	80127c6 <prvTaskExitError+0x2e>
	__asm volatile
 80127ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b0:	b672      	cpsid	i
 80127b2:	f383 8811 	msr	BASEPRI, r3
 80127b6:	f3bf 8f6f 	isb	sy
 80127ba:	f3bf 8f4f 	dsb	sy
 80127be:	b662      	cpsie	i
 80127c0:	60fb      	str	r3, [r7, #12]
}
 80127c2:	bf00      	nop
 80127c4:	e7fe      	b.n	80127c4 <prvTaskExitError+0x2c>
	__asm volatile
 80127c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ca:	b672      	cpsid	i
 80127cc:	f383 8811 	msr	BASEPRI, r3
 80127d0:	f3bf 8f6f 	isb	sy
 80127d4:	f3bf 8f4f 	dsb	sy
 80127d8:	b662      	cpsie	i
 80127da:	60bb      	str	r3, [r7, #8]
}
 80127dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80127de:	bf00      	nop
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d0fc      	beq.n	80127e0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80127e6:	bf00      	nop
 80127e8:	bf00      	nop
 80127ea:	3714      	adds	r7, #20
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr
 80127f4:	20000080 	.word	0x20000080
	...

08012800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012800:	4b07      	ldr	r3, [pc, #28]	; (8012820 <pxCurrentTCBConst2>)
 8012802:	6819      	ldr	r1, [r3, #0]
 8012804:	6808      	ldr	r0, [r1, #0]
 8012806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801280a:	f380 8809 	msr	PSP, r0
 801280e:	f3bf 8f6f 	isb	sy
 8012812:	f04f 0000 	mov.w	r0, #0
 8012816:	f380 8811 	msr	BASEPRI, r0
 801281a:	4770      	bx	lr
 801281c:	f3af 8000 	nop.w

08012820 <pxCurrentTCBConst2>:
 8012820:	200006d0 	.word	0x200006d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012824:	bf00      	nop
 8012826:	bf00      	nop

08012828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012828:	4808      	ldr	r0, [pc, #32]	; (801284c <prvPortStartFirstTask+0x24>)
 801282a:	6800      	ldr	r0, [r0, #0]
 801282c:	6800      	ldr	r0, [r0, #0]
 801282e:	f380 8808 	msr	MSP, r0
 8012832:	f04f 0000 	mov.w	r0, #0
 8012836:	f380 8814 	msr	CONTROL, r0
 801283a:	b662      	cpsie	i
 801283c:	b661      	cpsie	f
 801283e:	f3bf 8f4f 	dsb	sy
 8012842:	f3bf 8f6f 	isb	sy
 8012846:	df00      	svc	0
 8012848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801284a:	bf00      	nop
 801284c:	e000ed08 	.word	0xe000ed08

08012850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b084      	sub	sp, #16
 8012854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012856:	4b37      	ldr	r3, [pc, #220]	; (8012934 <xPortStartScheduler+0xe4>)
 8012858:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	781b      	ldrb	r3, [r3, #0]
 801285e:	b2db      	uxtb	r3, r3
 8012860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	22ff      	movs	r2, #255	; 0xff
 8012866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	b2db      	uxtb	r3, r3
 801286e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012870:	78fb      	ldrb	r3, [r7, #3]
 8012872:	b2db      	uxtb	r3, r3
 8012874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012878:	b2da      	uxtb	r2, r3
 801287a:	4b2f      	ldr	r3, [pc, #188]	; (8012938 <xPortStartScheduler+0xe8>)
 801287c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801287e:	4b2f      	ldr	r3, [pc, #188]	; (801293c <xPortStartScheduler+0xec>)
 8012880:	2207      	movs	r2, #7
 8012882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012884:	e009      	b.n	801289a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012886:	4b2d      	ldr	r3, [pc, #180]	; (801293c <xPortStartScheduler+0xec>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	3b01      	subs	r3, #1
 801288c:	4a2b      	ldr	r2, [pc, #172]	; (801293c <xPortStartScheduler+0xec>)
 801288e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012890:	78fb      	ldrb	r3, [r7, #3]
 8012892:	b2db      	uxtb	r3, r3
 8012894:	005b      	lsls	r3, r3, #1
 8012896:	b2db      	uxtb	r3, r3
 8012898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801289a:	78fb      	ldrb	r3, [r7, #3]
 801289c:	b2db      	uxtb	r3, r3
 801289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128a2:	2b80      	cmp	r3, #128	; 0x80
 80128a4:	d0ef      	beq.n	8012886 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80128a6:	4b25      	ldr	r3, [pc, #148]	; (801293c <xPortStartScheduler+0xec>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	f1c3 0307 	rsb	r3, r3, #7
 80128ae:	2b04      	cmp	r3, #4
 80128b0:	d00c      	beq.n	80128cc <xPortStartScheduler+0x7c>
	__asm volatile
 80128b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b6:	b672      	cpsid	i
 80128b8:	f383 8811 	msr	BASEPRI, r3
 80128bc:	f3bf 8f6f 	isb	sy
 80128c0:	f3bf 8f4f 	dsb	sy
 80128c4:	b662      	cpsie	i
 80128c6:	60bb      	str	r3, [r7, #8]
}
 80128c8:	bf00      	nop
 80128ca:	e7fe      	b.n	80128ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80128cc:	4b1b      	ldr	r3, [pc, #108]	; (801293c <xPortStartScheduler+0xec>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	021b      	lsls	r3, r3, #8
 80128d2:	4a1a      	ldr	r2, [pc, #104]	; (801293c <xPortStartScheduler+0xec>)
 80128d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80128d6:	4b19      	ldr	r3, [pc, #100]	; (801293c <xPortStartScheduler+0xec>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80128de:	4a17      	ldr	r2, [pc, #92]	; (801293c <xPortStartScheduler+0xec>)
 80128e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	b2da      	uxtb	r2, r3
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80128ea:	4b15      	ldr	r3, [pc, #84]	; (8012940 <xPortStartScheduler+0xf0>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	4a14      	ldr	r2, [pc, #80]	; (8012940 <xPortStartScheduler+0xf0>)
 80128f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80128f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80128f6:	4b12      	ldr	r3, [pc, #72]	; (8012940 <xPortStartScheduler+0xf0>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	4a11      	ldr	r2, [pc, #68]	; (8012940 <xPortStartScheduler+0xf0>)
 80128fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012900:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012902:	f000 f8dd 	bl	8012ac0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012906:	4b0f      	ldr	r3, [pc, #60]	; (8012944 <xPortStartScheduler+0xf4>)
 8012908:	2200      	movs	r2, #0
 801290a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801290c:	f000 f8fc 	bl	8012b08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012910:	4b0d      	ldr	r3, [pc, #52]	; (8012948 <xPortStartScheduler+0xf8>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	4a0c      	ldr	r2, [pc, #48]	; (8012948 <xPortStartScheduler+0xf8>)
 8012916:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801291a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801291c:	f7ff ff84 	bl	8012828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012920:	f7ff fa58 	bl	8011dd4 <vTaskSwitchContext>
	prvTaskExitError();
 8012924:	f7ff ff38 	bl	8012798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012928:	2300      	movs	r3, #0
}
 801292a:	4618      	mov	r0, r3
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	e000e400 	.word	0xe000e400
 8012938:	200007fc 	.word	0x200007fc
 801293c:	20000800 	.word	0x20000800
 8012940:	e000ed20 	.word	0xe000ed20
 8012944:	20000080 	.word	0x20000080
 8012948:	e000ef34 	.word	0xe000ef34

0801294c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801294c:	b480      	push	{r7}
 801294e:	b083      	sub	sp, #12
 8012950:	af00      	add	r7, sp, #0
	__asm volatile
 8012952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012956:	b672      	cpsid	i
 8012958:	f383 8811 	msr	BASEPRI, r3
 801295c:	f3bf 8f6f 	isb	sy
 8012960:	f3bf 8f4f 	dsb	sy
 8012964:	b662      	cpsie	i
 8012966:	607b      	str	r3, [r7, #4]
}
 8012968:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801296a:	4b10      	ldr	r3, [pc, #64]	; (80129ac <vPortEnterCritical+0x60>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	3301      	adds	r3, #1
 8012970:	4a0e      	ldr	r2, [pc, #56]	; (80129ac <vPortEnterCritical+0x60>)
 8012972:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012974:	4b0d      	ldr	r3, [pc, #52]	; (80129ac <vPortEnterCritical+0x60>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	2b01      	cmp	r3, #1
 801297a:	d111      	bne.n	80129a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801297c:	4b0c      	ldr	r3, [pc, #48]	; (80129b0 <vPortEnterCritical+0x64>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	b2db      	uxtb	r3, r3
 8012982:	2b00      	cmp	r3, #0
 8012984:	d00c      	beq.n	80129a0 <vPortEnterCritical+0x54>
	__asm volatile
 8012986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801298a:	b672      	cpsid	i
 801298c:	f383 8811 	msr	BASEPRI, r3
 8012990:	f3bf 8f6f 	isb	sy
 8012994:	f3bf 8f4f 	dsb	sy
 8012998:	b662      	cpsie	i
 801299a:	603b      	str	r3, [r7, #0]
}
 801299c:	bf00      	nop
 801299e:	e7fe      	b.n	801299e <vPortEnterCritical+0x52>
	}
}
 80129a0:	bf00      	nop
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr
 80129ac:	20000080 	.word	0x20000080
 80129b0:	e000ed04 	.word	0xe000ed04

080129b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80129b4:	b480      	push	{r7}
 80129b6:	b083      	sub	sp, #12
 80129b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80129ba:	4b13      	ldr	r3, [pc, #76]	; (8012a08 <vPortExitCritical+0x54>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d10c      	bne.n	80129dc <vPortExitCritical+0x28>
	__asm volatile
 80129c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c6:	b672      	cpsid	i
 80129c8:	f383 8811 	msr	BASEPRI, r3
 80129cc:	f3bf 8f6f 	isb	sy
 80129d0:	f3bf 8f4f 	dsb	sy
 80129d4:	b662      	cpsie	i
 80129d6:	607b      	str	r3, [r7, #4]
}
 80129d8:	bf00      	nop
 80129da:	e7fe      	b.n	80129da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80129dc:	4b0a      	ldr	r3, [pc, #40]	; (8012a08 <vPortExitCritical+0x54>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	3b01      	subs	r3, #1
 80129e2:	4a09      	ldr	r2, [pc, #36]	; (8012a08 <vPortExitCritical+0x54>)
 80129e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80129e6:	4b08      	ldr	r3, [pc, #32]	; (8012a08 <vPortExitCritical+0x54>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d105      	bne.n	80129fa <vPortExitCritical+0x46>
 80129ee:	2300      	movs	r3, #0
 80129f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	f383 8811 	msr	BASEPRI, r3
}
 80129f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80129fa:	bf00      	nop
 80129fc:	370c      	adds	r7, #12
 80129fe:	46bd      	mov	sp, r7
 8012a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a04:	4770      	bx	lr
 8012a06:	bf00      	nop
 8012a08:	20000080 	.word	0x20000080
 8012a0c:	00000000 	.word	0x00000000

08012a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012a10:	f3ef 8009 	mrs	r0, PSP
 8012a14:	f3bf 8f6f 	isb	sy
 8012a18:	4b15      	ldr	r3, [pc, #84]	; (8012a70 <pxCurrentTCBConst>)
 8012a1a:	681a      	ldr	r2, [r3, #0]
 8012a1c:	f01e 0f10 	tst.w	lr, #16
 8012a20:	bf08      	it	eq
 8012a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a2a:	6010      	str	r0, [r2, #0]
 8012a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012a34:	b672      	cpsid	i
 8012a36:	f380 8811 	msr	BASEPRI, r0
 8012a3a:	f3bf 8f4f 	dsb	sy
 8012a3e:	f3bf 8f6f 	isb	sy
 8012a42:	b662      	cpsie	i
 8012a44:	f7ff f9c6 	bl	8011dd4 <vTaskSwitchContext>
 8012a48:	f04f 0000 	mov.w	r0, #0
 8012a4c:	f380 8811 	msr	BASEPRI, r0
 8012a50:	bc09      	pop	{r0, r3}
 8012a52:	6819      	ldr	r1, [r3, #0]
 8012a54:	6808      	ldr	r0, [r1, #0]
 8012a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5a:	f01e 0f10 	tst.w	lr, #16
 8012a5e:	bf08      	it	eq
 8012a60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012a64:	f380 8809 	msr	PSP, r0
 8012a68:	f3bf 8f6f 	isb	sy
 8012a6c:	4770      	bx	lr
 8012a6e:	bf00      	nop

08012a70 <pxCurrentTCBConst>:
 8012a70:	200006d0 	.word	0x200006d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012a74:	bf00      	nop
 8012a76:	bf00      	nop

08012a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b082      	sub	sp, #8
 8012a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8012a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a82:	b672      	cpsid	i
 8012a84:	f383 8811 	msr	BASEPRI, r3
 8012a88:	f3bf 8f6f 	isb	sy
 8012a8c:	f3bf 8f4f 	dsb	sy
 8012a90:	b662      	cpsie	i
 8012a92:	607b      	str	r3, [r7, #4]
}
 8012a94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012a96:	f7ff f8e3 	bl	8011c60 <xTaskIncrementTick>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d003      	beq.n	8012aa8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012aa0:	4b06      	ldr	r3, [pc, #24]	; (8012abc <SysTick_Handler+0x44>)
 8012aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012aa6:	601a      	str	r2, [r3, #0]
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	f383 8811 	msr	BASEPRI, r3
}
 8012ab2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012ab4:	bf00      	nop
 8012ab6:	3708      	adds	r7, #8
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}
 8012abc:	e000ed04 	.word	0xe000ed04

08012ac0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012ac4:	4b0b      	ldr	r3, [pc, #44]	; (8012af4 <vPortSetupTimerInterrupt+0x34>)
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012aca:	4b0b      	ldr	r3, [pc, #44]	; (8012af8 <vPortSetupTimerInterrupt+0x38>)
 8012acc:	2200      	movs	r2, #0
 8012ace:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012ad0:	4b0a      	ldr	r3, [pc, #40]	; (8012afc <vPortSetupTimerInterrupt+0x3c>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	4a0a      	ldr	r2, [pc, #40]	; (8012b00 <vPortSetupTimerInterrupt+0x40>)
 8012ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8012ada:	099b      	lsrs	r3, r3, #6
 8012adc:	4a09      	ldr	r2, [pc, #36]	; (8012b04 <vPortSetupTimerInterrupt+0x44>)
 8012ade:	3b01      	subs	r3, #1
 8012ae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012ae2:	4b04      	ldr	r3, [pc, #16]	; (8012af4 <vPortSetupTimerInterrupt+0x34>)
 8012ae4:	2207      	movs	r2, #7
 8012ae6:	601a      	str	r2, [r3, #0]
}
 8012ae8:	bf00      	nop
 8012aea:	46bd      	mov	sp, r7
 8012aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af0:	4770      	bx	lr
 8012af2:	bf00      	nop
 8012af4:	e000e010 	.word	0xe000e010
 8012af8:	e000e018 	.word	0xe000e018
 8012afc:	20000040 	.word	0x20000040
 8012b00:	10624dd3 	.word	0x10624dd3
 8012b04:	e000e014 	.word	0xe000e014

08012b08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012b08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012b18 <vPortEnableVFP+0x10>
 8012b0c:	6801      	ldr	r1, [r0, #0]
 8012b0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012b12:	6001      	str	r1, [r0, #0]
 8012b14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012b16:	bf00      	nop
 8012b18:	e000ed88 	.word	0xe000ed88

08012b1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b085      	sub	sp, #20
 8012b20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012b22:	f3ef 8305 	mrs	r3, IPSR
 8012b26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	2b0f      	cmp	r3, #15
 8012b2c:	d916      	bls.n	8012b5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012b2e:	4a19      	ldr	r2, [pc, #100]	; (8012b94 <vPortValidateInterruptPriority+0x78>)
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	4413      	add	r3, r2
 8012b34:	781b      	ldrb	r3, [r3, #0]
 8012b36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012b38:	4b17      	ldr	r3, [pc, #92]	; (8012b98 <vPortValidateInterruptPriority+0x7c>)
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	7afa      	ldrb	r2, [r7, #11]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d20c      	bcs.n	8012b5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b46:	b672      	cpsid	i
 8012b48:	f383 8811 	msr	BASEPRI, r3
 8012b4c:	f3bf 8f6f 	isb	sy
 8012b50:	f3bf 8f4f 	dsb	sy
 8012b54:	b662      	cpsie	i
 8012b56:	607b      	str	r3, [r7, #4]
}
 8012b58:	bf00      	nop
 8012b5a:	e7fe      	b.n	8012b5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012b5c:	4b0f      	ldr	r3, [pc, #60]	; (8012b9c <vPortValidateInterruptPriority+0x80>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012b64:	4b0e      	ldr	r3, [pc, #56]	; (8012ba0 <vPortValidateInterruptPriority+0x84>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d90c      	bls.n	8012b86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8012b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b70:	b672      	cpsid	i
 8012b72:	f383 8811 	msr	BASEPRI, r3
 8012b76:	f3bf 8f6f 	isb	sy
 8012b7a:	f3bf 8f4f 	dsb	sy
 8012b7e:	b662      	cpsie	i
 8012b80:	603b      	str	r3, [r7, #0]
}
 8012b82:	bf00      	nop
 8012b84:	e7fe      	b.n	8012b84 <vPortValidateInterruptPriority+0x68>
	}
 8012b86:	bf00      	nop
 8012b88:	3714      	adds	r7, #20
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr
 8012b92:	bf00      	nop
 8012b94:	e000e3f0 	.word	0xe000e3f0
 8012b98:	200007fc 	.word	0x200007fc
 8012b9c:	e000ed0c 	.word	0xe000ed0c
 8012ba0:	20000800 	.word	0x20000800

08012ba4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b08a      	sub	sp, #40	; 0x28
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012bac:	2300      	movs	r3, #0
 8012bae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012bb0:	f7fe ff88 	bl	8011ac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012bb4:	4b5e      	ldr	r3, [pc, #376]	; (8012d30 <pvPortMalloc+0x18c>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d101      	bne.n	8012bc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012bbc:	f000 f920 	bl	8012e00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012bc0:	4b5c      	ldr	r3, [pc, #368]	; (8012d34 <pvPortMalloc+0x190>)
 8012bc2:	681a      	ldr	r2, [r3, #0]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	4013      	ands	r3, r2
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	f040 8092 	bne.w	8012cf2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d01f      	beq.n	8012c14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012bd4:	2208      	movs	r2, #8
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	4413      	add	r3, r2
 8012bda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f003 0307 	and.w	r3, r3, #7
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d016      	beq.n	8012c14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f023 0307 	bic.w	r3, r3, #7
 8012bec:	3308      	adds	r3, #8
 8012bee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f003 0307 	and.w	r3, r3, #7
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d00c      	beq.n	8012c14 <pvPortMalloc+0x70>
	__asm volatile
 8012bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bfe:	b672      	cpsid	i
 8012c00:	f383 8811 	msr	BASEPRI, r3
 8012c04:	f3bf 8f6f 	isb	sy
 8012c08:	f3bf 8f4f 	dsb	sy
 8012c0c:	b662      	cpsie	i
 8012c0e:	617b      	str	r3, [r7, #20]
}
 8012c10:	bf00      	nop
 8012c12:	e7fe      	b.n	8012c12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d06b      	beq.n	8012cf2 <pvPortMalloc+0x14e>
 8012c1a:	4b47      	ldr	r3, [pc, #284]	; (8012d38 <pvPortMalloc+0x194>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d866      	bhi.n	8012cf2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012c24:	4b45      	ldr	r3, [pc, #276]	; (8012d3c <pvPortMalloc+0x198>)
 8012c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012c28:	4b44      	ldr	r3, [pc, #272]	; (8012d3c <pvPortMalloc+0x198>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c2e:	e004      	b.n	8012c3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3c:	685b      	ldr	r3, [r3, #4]
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d903      	bls.n	8012c4c <pvPortMalloc+0xa8>
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d1f1      	bne.n	8012c30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012c4c:	4b38      	ldr	r3, [pc, #224]	; (8012d30 <pvPortMalloc+0x18c>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d04d      	beq.n	8012cf2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012c56:	6a3b      	ldr	r3, [r7, #32]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	2208      	movs	r2, #8
 8012c5c:	4413      	add	r3, r2
 8012c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c62:	681a      	ldr	r2, [r3, #0]
 8012c64:	6a3b      	ldr	r3, [r7, #32]
 8012c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6a:	685a      	ldr	r2, [r3, #4]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	1ad2      	subs	r2, r2, r3
 8012c70:	2308      	movs	r3, #8
 8012c72:	005b      	lsls	r3, r3, #1
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d921      	bls.n	8012cbc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	4413      	add	r3, r2
 8012c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c80:	69bb      	ldr	r3, [r7, #24]
 8012c82:	f003 0307 	and.w	r3, r3, #7
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d00c      	beq.n	8012ca4 <pvPortMalloc+0x100>
	__asm volatile
 8012c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8e:	b672      	cpsid	i
 8012c90:	f383 8811 	msr	BASEPRI, r3
 8012c94:	f3bf 8f6f 	isb	sy
 8012c98:	f3bf 8f4f 	dsb	sy
 8012c9c:	b662      	cpsie	i
 8012c9e:	613b      	str	r3, [r7, #16]
}
 8012ca0:	bf00      	nop
 8012ca2:	e7fe      	b.n	8012ca2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca6:	685a      	ldr	r2, [r3, #4]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	1ad2      	subs	r2, r2, r3
 8012cac:	69bb      	ldr	r3, [r7, #24]
 8012cae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012cb6:	69b8      	ldr	r0, [r7, #24]
 8012cb8:	f000 f904 	bl	8012ec4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012cbc:	4b1e      	ldr	r3, [pc, #120]	; (8012d38 <pvPortMalloc+0x194>)
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	4a1c      	ldr	r2, [pc, #112]	; (8012d38 <pvPortMalloc+0x194>)
 8012cc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012cca:	4b1b      	ldr	r3, [pc, #108]	; (8012d38 <pvPortMalloc+0x194>)
 8012ccc:	681a      	ldr	r2, [r3, #0]
 8012cce:	4b1c      	ldr	r3, [pc, #112]	; (8012d40 <pvPortMalloc+0x19c>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d203      	bcs.n	8012cde <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012cd6:	4b18      	ldr	r3, [pc, #96]	; (8012d38 <pvPortMalloc+0x194>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	4a19      	ldr	r2, [pc, #100]	; (8012d40 <pvPortMalloc+0x19c>)
 8012cdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce0:	685a      	ldr	r2, [r3, #4]
 8012ce2:	4b14      	ldr	r3, [pc, #80]	; (8012d34 <pvPortMalloc+0x190>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	431a      	orrs	r2, r3
 8012ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cee:	2200      	movs	r2, #0
 8012cf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012cf2:	f7fe fef5 	bl	8011ae0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012cf6:	69fb      	ldr	r3, [r7, #28]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d101      	bne.n	8012d00 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012cfc:	f7ed fc1e 	bl	800053c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	f003 0307 	and.w	r3, r3, #7
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00c      	beq.n	8012d24 <pvPortMalloc+0x180>
	__asm volatile
 8012d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d0e:	b672      	cpsid	i
 8012d10:	f383 8811 	msr	BASEPRI, r3
 8012d14:	f3bf 8f6f 	isb	sy
 8012d18:	f3bf 8f4f 	dsb	sy
 8012d1c:	b662      	cpsie	i
 8012d1e:	60fb      	str	r3, [r7, #12]
}
 8012d20:	bf00      	nop
 8012d22:	e7fe      	b.n	8012d22 <pvPortMalloc+0x17e>
	return pvReturn;
 8012d24:	69fb      	ldr	r3, [r7, #28]
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3728      	adds	r7, #40	; 0x28
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	2000880c 	.word	0x2000880c
 8012d34:	20008818 	.word	0x20008818
 8012d38:	20008810 	.word	0x20008810
 8012d3c:	20008804 	.word	0x20008804
 8012d40:	20008814 	.word	0x20008814

08012d44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b086      	sub	sp, #24
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d04c      	beq.n	8012df0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012d56:	2308      	movs	r3, #8
 8012d58:	425b      	negs	r3, r3
 8012d5a:	697a      	ldr	r2, [r7, #20]
 8012d5c:	4413      	add	r3, r2
 8012d5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	685a      	ldr	r2, [r3, #4]
 8012d68:	4b23      	ldr	r3, [pc, #140]	; (8012df8 <vPortFree+0xb4>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	4013      	ands	r3, r2
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d10c      	bne.n	8012d8c <vPortFree+0x48>
	__asm volatile
 8012d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d76:	b672      	cpsid	i
 8012d78:	f383 8811 	msr	BASEPRI, r3
 8012d7c:	f3bf 8f6f 	isb	sy
 8012d80:	f3bf 8f4f 	dsb	sy
 8012d84:	b662      	cpsie	i
 8012d86:	60fb      	str	r3, [r7, #12]
}
 8012d88:	bf00      	nop
 8012d8a:	e7fe      	b.n	8012d8a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012d8c:	693b      	ldr	r3, [r7, #16]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d00c      	beq.n	8012dae <vPortFree+0x6a>
	__asm volatile
 8012d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d98:	b672      	cpsid	i
 8012d9a:	f383 8811 	msr	BASEPRI, r3
 8012d9e:	f3bf 8f6f 	isb	sy
 8012da2:	f3bf 8f4f 	dsb	sy
 8012da6:	b662      	cpsie	i
 8012da8:	60bb      	str	r3, [r7, #8]
}
 8012daa:	bf00      	nop
 8012dac:	e7fe      	b.n	8012dac <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012dae:	693b      	ldr	r3, [r7, #16]
 8012db0:	685a      	ldr	r2, [r3, #4]
 8012db2:	4b11      	ldr	r3, [pc, #68]	; (8012df8 <vPortFree+0xb4>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	4013      	ands	r3, r2
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d019      	beq.n	8012df0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d115      	bne.n	8012df0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012dc4:	693b      	ldr	r3, [r7, #16]
 8012dc6:	685a      	ldr	r2, [r3, #4]
 8012dc8:	4b0b      	ldr	r3, [pc, #44]	; (8012df8 <vPortFree+0xb4>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	43db      	mvns	r3, r3
 8012dce:	401a      	ands	r2, r3
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012dd4:	f7fe fe76 	bl	8011ac4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	685a      	ldr	r2, [r3, #4]
 8012ddc:	4b07      	ldr	r3, [pc, #28]	; (8012dfc <vPortFree+0xb8>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	4413      	add	r3, r2
 8012de2:	4a06      	ldr	r2, [pc, #24]	; (8012dfc <vPortFree+0xb8>)
 8012de4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012de6:	6938      	ldr	r0, [r7, #16]
 8012de8:	f000 f86c 	bl	8012ec4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012dec:	f7fe fe78 	bl	8011ae0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012df0:	bf00      	nop
 8012df2:	3718      	adds	r7, #24
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	20008818 	.word	0x20008818
 8012dfc:	20008810 	.word	0x20008810

08012e00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012e00:	b480      	push	{r7}
 8012e02:	b085      	sub	sp, #20
 8012e04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012e0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012e0c:	4b27      	ldr	r3, [pc, #156]	; (8012eac <prvHeapInit+0xac>)
 8012e0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f003 0307 	and.w	r3, r3, #7
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d00c      	beq.n	8012e34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	3307      	adds	r3, #7
 8012e1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	f023 0307 	bic.w	r3, r3, #7
 8012e26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012e28:	68ba      	ldr	r2, [r7, #8]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	1ad3      	subs	r3, r2, r3
 8012e2e:	4a1f      	ldr	r2, [pc, #124]	; (8012eac <prvHeapInit+0xac>)
 8012e30:	4413      	add	r3, r2
 8012e32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012e38:	4a1d      	ldr	r2, [pc, #116]	; (8012eb0 <prvHeapInit+0xb0>)
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012e3e:	4b1c      	ldr	r3, [pc, #112]	; (8012eb0 <prvHeapInit+0xb0>)
 8012e40:	2200      	movs	r2, #0
 8012e42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	68ba      	ldr	r2, [r7, #8]
 8012e48:	4413      	add	r3, r2
 8012e4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012e4c:	2208      	movs	r2, #8
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	1a9b      	subs	r3, r3, r2
 8012e52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f023 0307 	bic.w	r3, r3, #7
 8012e5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	4a15      	ldr	r2, [pc, #84]	; (8012eb4 <prvHeapInit+0xb4>)
 8012e60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012e62:	4b14      	ldr	r3, [pc, #80]	; (8012eb4 <prvHeapInit+0xb4>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	2200      	movs	r2, #0
 8012e68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012e6a:	4b12      	ldr	r3, [pc, #72]	; (8012eb4 <prvHeapInit+0xb4>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	1ad2      	subs	r2, r2, r3
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012e80:	4b0c      	ldr	r3, [pc, #48]	; (8012eb4 <prvHeapInit+0xb4>)
 8012e82:	681a      	ldr	r2, [r3, #0]
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	4a0a      	ldr	r2, [pc, #40]	; (8012eb8 <prvHeapInit+0xb8>)
 8012e8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	685b      	ldr	r3, [r3, #4]
 8012e94:	4a09      	ldr	r2, [pc, #36]	; (8012ebc <prvHeapInit+0xbc>)
 8012e96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012e98:	4b09      	ldr	r3, [pc, #36]	; (8012ec0 <prvHeapInit+0xc0>)
 8012e9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012e9e:	601a      	str	r2, [r3, #0]
}
 8012ea0:	bf00      	nop
 8012ea2:	3714      	adds	r7, #20
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr
 8012eac:	20000804 	.word	0x20000804
 8012eb0:	20008804 	.word	0x20008804
 8012eb4:	2000880c 	.word	0x2000880c
 8012eb8:	20008814 	.word	0x20008814
 8012ebc:	20008810 	.word	0x20008810
 8012ec0:	20008818 	.word	0x20008818

08012ec4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b085      	sub	sp, #20
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012ecc:	4b28      	ldr	r3, [pc, #160]	; (8012f70 <prvInsertBlockIntoFreeList+0xac>)
 8012ece:	60fb      	str	r3, [r7, #12]
 8012ed0:	e002      	b.n	8012ed8 <prvInsertBlockIntoFreeList+0x14>
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	60fb      	str	r3, [r7, #12]
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d8f7      	bhi.n	8012ed2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	68ba      	ldr	r2, [r7, #8]
 8012eec:	4413      	add	r3, r2
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d108      	bne.n	8012f06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	685a      	ldr	r2, [r3, #4]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	441a      	add	r2, r3
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	68ba      	ldr	r2, [r7, #8]
 8012f10:	441a      	add	r2, r3
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d118      	bne.n	8012f4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	4b15      	ldr	r3, [pc, #84]	; (8012f74 <prvInsertBlockIntoFreeList+0xb0>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d00d      	beq.n	8012f42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	685a      	ldr	r2, [r3, #4]
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	441a      	add	r2, r3
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	601a      	str	r2, [r3, #0]
 8012f40:	e008      	b.n	8012f54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012f42:	4b0c      	ldr	r3, [pc, #48]	; (8012f74 <prvInsertBlockIntoFreeList+0xb0>)
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	601a      	str	r2, [r3, #0]
 8012f4a:	e003      	b.n	8012f54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681a      	ldr	r2, [r3, #0]
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012f54:	68fa      	ldr	r2, [r7, #12]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	d002      	beq.n	8012f62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f62:	bf00      	nop
 8012f64:	3714      	adds	r7, #20
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	20008804 	.word	0x20008804
 8012f74:	2000880c 	.word	0x2000880c

08012f78 <__libc_init_array>:
 8012f78:	b570      	push	{r4, r5, r6, lr}
 8012f7a:	4d0d      	ldr	r5, [pc, #52]	; (8012fb0 <__libc_init_array+0x38>)
 8012f7c:	4c0d      	ldr	r4, [pc, #52]	; (8012fb4 <__libc_init_array+0x3c>)
 8012f7e:	1b64      	subs	r4, r4, r5
 8012f80:	10a4      	asrs	r4, r4, #2
 8012f82:	2600      	movs	r6, #0
 8012f84:	42a6      	cmp	r6, r4
 8012f86:	d109      	bne.n	8012f9c <__libc_init_array+0x24>
 8012f88:	4d0b      	ldr	r5, [pc, #44]	; (8012fb8 <__libc_init_array+0x40>)
 8012f8a:	4c0c      	ldr	r4, [pc, #48]	; (8012fbc <__libc_init_array+0x44>)
 8012f8c:	f000 f82e 	bl	8012fec <_init>
 8012f90:	1b64      	subs	r4, r4, r5
 8012f92:	10a4      	asrs	r4, r4, #2
 8012f94:	2600      	movs	r6, #0
 8012f96:	42a6      	cmp	r6, r4
 8012f98:	d105      	bne.n	8012fa6 <__libc_init_array+0x2e>
 8012f9a:	bd70      	pop	{r4, r5, r6, pc}
 8012f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fa0:	4798      	blx	r3
 8012fa2:	3601      	adds	r6, #1
 8012fa4:	e7ee      	b.n	8012f84 <__libc_init_array+0xc>
 8012fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012faa:	4798      	blx	r3
 8012fac:	3601      	adds	r6, #1
 8012fae:	e7f2      	b.n	8012f96 <__libc_init_array+0x1e>
 8012fb0:	08015170 	.word	0x08015170
 8012fb4:	08015170 	.word	0x08015170
 8012fb8:	08015170 	.word	0x08015170
 8012fbc:	08015174 	.word	0x08015174

08012fc0 <memcpy>:
 8012fc0:	440a      	add	r2, r1
 8012fc2:	4291      	cmp	r1, r2
 8012fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012fc8:	d100      	bne.n	8012fcc <memcpy+0xc>
 8012fca:	4770      	bx	lr
 8012fcc:	b510      	push	{r4, lr}
 8012fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fd6:	4291      	cmp	r1, r2
 8012fd8:	d1f9      	bne.n	8012fce <memcpy+0xe>
 8012fda:	bd10      	pop	{r4, pc}

08012fdc <memset>:
 8012fdc:	4402      	add	r2, r0
 8012fde:	4603      	mov	r3, r0
 8012fe0:	4293      	cmp	r3, r2
 8012fe2:	d100      	bne.n	8012fe6 <memset+0xa>
 8012fe4:	4770      	bx	lr
 8012fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8012fea:	e7f9      	b.n	8012fe0 <memset+0x4>

08012fec <_init>:
 8012fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fee:	bf00      	nop
 8012ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ff2:	bc08      	pop	{r3}
 8012ff4:	469e      	mov	lr, r3
 8012ff6:	4770      	bx	lr

08012ff8 <_fini>:
 8012ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ffa:	bf00      	nop
 8012ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ffe:	bc08      	pop	{r3}
 8013000:	469e      	mov	lr, r3
 8013002:	4770      	bx	lr
